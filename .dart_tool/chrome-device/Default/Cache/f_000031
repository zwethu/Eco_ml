define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/widgets/preferred_size.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/collection/src/equality.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/path/src/path_set.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/key.dart', 'packages/auto_route/src/common/parameters.dart', 'packages/auto_route/src/utils.dart', 'packages/flutter/src/widgets/will_pop_scope.dart', 'packages/auto_route/src/common/auto_route_wrapper.dart', 'packages/flutter/src/material/page.dart', 'packages/flutter/src/cupertino/route.dart', 'packages/flutter/src/foundation/_platform_web.dart'], (function load__packages__auto_route__src__router__widgets__auto_back_button_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__widgets__preferred_size$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__collection__src__equality$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__path__src__path_set$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation__key$46dart, packages__auto_route__src__common__parameters$46dart, packages__auto_route__src__utils$46dart, packages__flutter__src__widgets__will_pop_scope$46dart, packages__auto_route__src__common__auto_route_wrapper$46dart, packages__flutter__src__material__page$46dart, packages__flutter__src__cupertino__route$46dart, packages__flutter__src__foundation___platform_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const navigator$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__navigator;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const router = packages__flutter__src__widgets__widget_span$46dart.src__widgets__router;
  const routes = packages__flutter__src__widgets__widget_span$46dart.src__widgets__routes;
  const pages = packages__flutter__src__widgets__widget_span$46dart.src__widgets__pages;
  const heroes = packages__flutter__src__widgets__widget_span$46dart.src__widgets__heroes;
  const back_button = packages__flutter__src__material__icon_button$46dart.src__material__back_button;
  const scaffold = packages__flutter__src__material__icon_button$46dart.src__material__scaffold;
  const floating_action_button_location = packages__flutter__src__material__icon_button$46dart.src__material__floating_action_button_location;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const preferred_size = packages__flutter__src__widgets__preferred_size$46dart.src__widgets__preferred_size;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const path = packages__path__src__path_set$46dart.path;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const parameters = packages__auto_route__src__common__parameters$46dart.src__common__parameters;
  const utils = packages__auto_route__src__utils$46dart.src__utils;
  const will_pop_scope = packages__flutter__src__widgets__will_pop_scope$46dart.src__widgets__will_pop_scope;
  const auto_route_wrapper = packages__auto_route__src__common__auto_route_wrapper$46dart.src__common__auto_route_wrapper;
  const page = packages__flutter__src__material__page$46dart.src__material__page;
  const route = packages__flutter__src__cupertino__route$46dart.src__cupertino__route;
  const platform$ = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  var auto_back_button = Object.create(dart.library);
  var auto_tabs_scaffold = Object.create(dart.library);
  var auto_tabs_router = Object.create(dart.library);
  var route_information_parser = Object.create(dart.library);
  var auto_router_delegate = Object.create(dart.library);
  var auto_route_navigator = Object.create(dart.library);
  var controller_scope = Object.create(dart.library);
  var auto_router = Object.create(dart.library);
  var auto_router_x = Object.create(dart.library);
  var route_config = Object.create(dart.library);
  var auto_route_observer = Object.create(dart.library);
  var common = Object.create(dart.library);
  var auto_route_page = Object.create(dart.library);
  var route_data_scope = Object.create(dart.library);
  var route_matcher = Object.create(dart.library);
  var routing_controller = Object.create(dart.library);
  var auto_route_guard = Object.create(dart.library);
  var route_match = Object.create(dart.library);
  var page_route_info = Object.create(dart.library);
  var navigation_failure = Object.create(dart.library);
  var auto_route = Object.create(dart.library);
  var $plus = dartx['+'];
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $whereType = dartx.whereType;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $length = dartx.length;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $where = dartx.where;
  var $keys = dartx.keys;
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $containsKey = dartx.containsKey;
  var $addAll = dartx.addAll;
  var $_equals = dartx._equals;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $removeAt = dartx.removeAt;
  var $remove = dartx.remove;
  var $firstWhere = dartx.firstWhere;
  var $first = dartx.first;
  var $reversed = dartx.reversed;
  var $removeLast = dartx.removeLast;
  var $clear = dartx.clear;
  var $any = dartx.any;
  var $values = dartx.values;
  var $putIfAbsent = dartx.putIfAbsent;
  var $hashCode = dartx.hashCode;
  var $sublist = dartx.sublist;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $indexWhere = dartx.indexWhere;
  var $reduce = dartx.reduce;
  var $join = dartx.join;
  var $replaceAllMapped = dartx.replaceAllMapped;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfNavigatorObserver: () => (T$.ListOfNavigatorObserver = dart.constFn(core.List$(navigator$.NavigatorObserver)))(),
    VoidToListOfNavigatorObserver: () => (T$.VoidToListOfNavigatorObserver = dart.constFn(dart.fnType(T$.ListOfNavigatorObserver(), [])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndWidgetAndAnimationOfdoubleToScaffold: () => (T$.BuildContextAndWidgetAndAnimationOfdoubleToScaffold = dart.constFn(dart.fnType(scaffold.Scaffold, [framework.BuildContext, framework.Widget, T$.AnimationOfdouble()])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    BuildContextAndintToWidget: () => (T$.BuildContextAndintToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, core.int])))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToWidget: () => (T$.BuildContextAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.WidgetN()])))(),
    IdentityMapOfint$bool: () => (T$.IdentityMapOfint$bool = dart.constFn(_js_helper.IdentityMap$(core.int, core.bool)))(),
    AutoRoutePageToRouteMatch: () => (T$.AutoRoutePageToRouteMatch = dart.constFn(dart.fnType(route_match.RouteMatch, [auto_route_page.AutoRoutePage])))(),
    TabPageRouteN: () => (T$.TabPageRouteN = dart.constFn(dart.nullable(auto_route_observer.TabPageRoute)))(),
    AutoRouterObserverTovoid: () => (T$.AutoRouterObserverTovoid = dart.constFn(dart.fnType(dart.void, [auto_route_observer.AutoRouterObserver])))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    intToWidget: () => (T$.intToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int])))(),
    SynchronousFutureOfUrlState: () => (T$.SynchronousFutureOfUrlState = dart.constFn(synchronous_future.SynchronousFuture$(route_information_parser.UrlState)))(),
    RouteMatchTobool: () => (T$.RouteMatchTobool = dart.constFn(dart.fnType(core.bool, [route_match.RouteMatch])))(),
    RouteMatchToString: () => (T$.RouteMatchToString = dart.constFn(dart.fnType(core.String, [route_match.RouteMatch])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    SynchronousFutureOfvoid: () => (T$.SynchronousFutureOfvoid = dart.constFn(synchronous_future.SynchronousFuture$(dart.void)))(),
    ListOfPageRouteInfo: () => (T$.ListOfPageRouteInfo = dart.constFn(core.List$(page_route_info.PageRouteInfo)))(),
    RouteMatchToPageRouteInfo: () => (T$.RouteMatchToPageRouteInfo = dart.constFn(dart.fnType(page_route_info.PageRouteInfo, [route_match.RouteMatch])))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    GlobalKeyOfNavigatorState: () => (T$.GlobalKeyOfNavigatorState = dart.constFn(framework.GlobalKey$(navigator$.NavigatorState)))(),
    JSArrayOfRouteMatch: () => (T$.JSArrayOfRouteMatch = dart.constFn(_interceptors.JSArray$(route_match.RouteMatch)))(),
    SynchronousFutureOfbool: () => (T$.SynchronousFutureOfbool = dart.constFn(synchronous_future.SynchronousFuture$(core.bool)))(),
    AutoRoutePageTobool: () => (T$.AutoRoutePageTobool = dart.constFn(dart.fnType(core.bool, [auto_route_page.AutoRoutePage])))(),
    ListOfAutoRoutePage: () => (T$.ListOfAutoRoutePage = dart.constFn(core.List$(auto_route_page.AutoRoutePage)))(),
    StackRouterTobool: () => (T$.StackRouterTobool = dart.constFn(dart.fnType(core.bool, [routing_controller.StackRouter])))(),
    VoidToStackRouter: () => (T$.VoidToStackRouter = dart.constFn(dart.fnType(routing_controller.StackRouter, [])))(),
    NavigationFailureTovoid: () => (T$.NavigationFailureTovoid = dart.constFn(dart.fnType(dart.void, [navigation_failure.NavigationFailure])))(),
    NavigationFailureToNvoid: () => (T$.NavigationFailureToNvoid = dart.constFn(dart.nullable(T$.NavigationFailureTovoid())))(),
    RouteTobool: () => (T$.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator$.Route])))(),
    CompleterOfbool: () => (T$.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    LinkedMapOfLocalKey$RoutingController: () => (T$.LinkedMapOfLocalKey$RoutingController = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, routing_controller.RoutingController)))(),
    JSArrayOfAutoRoutePage: () => (T$.JSArrayOfAutoRoutePage = dart.constFn(_interceptors.JSArray$(auto_route_page.AutoRoutePage)))(),
    ListOfRouteData: () => (T$.ListOfRouteData = dart.constFn(core.List$(routing_controller.RouteData)))(),
    AutoRoutePageToRouteData: () => (T$.AutoRoutePageToRouteData = dart.constFn(dart.fnType(routing_controller.RouteData, [auto_route_page.AutoRoutePage])))(),
    JSArrayOfRoutingController: () => (T$.JSArrayOfRoutingController = dart.constFn(_interceptors.JSArray$(routing_controller.RoutingController)))(),
    RoutingControllerTobool: () => (T$.RoutingControllerTobool = dart.constFn(dart.fnType(core.bool, [routing_controller.RoutingController])))(),
    VoidToRoutingController: () => (T$.VoidToRoutingController = dart.constFn(dart.fnType(routing_controller.RoutingController, [])))(),
    ListOfRoutingController: () => (T$.ListOfRoutingController = dart.constFn(core.List$(routing_controller.RoutingController)))(),
    RoutingControllerAndListOfRoutingControllerTovoid: () => (T$.RoutingControllerAndListOfRoutingControllerTovoid = dart.constFn(dart.fnType(dart.void, [routing_controller.RoutingController, T$.ListOfRoutingController()])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    JSArrayOfPage: () => (T$.JSArrayOfPage = dart.constFn(_interceptors.JSArray$(navigator$.Page)))(),
    RouteAnddynamicTobool: () => (T$.RouteAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [navigator$.Route, dart.dynamic])))(),
    VoidToSynchronousFutureOfbool: () => (T$.VoidToSynchronousFutureOfbool = dart.constFn(dart.fnType(T$.SynchronousFutureOfbool(), [])))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble()])))(),
    JSArrayOfRouteTransitionRecord: () => (T$.JSArrayOfRouteTransitionRecord = dart.constFn(_interceptors.JSArray$(navigator$.RouteTransitionRecord)))(),
    RouteTransitionRecordN: () => (T$.RouteTransitionRecordN = dart.constFn(dart.nullable(navigator$.RouteTransitionRecord)))(),
    RouteTransitionRecordNAndboolTovoid: () => (T$.RouteTransitionRecordNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T$.RouteTransitionRecordN(), core.bool])))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    PageRouteInfo__ToFutureOfTN: () => (T$.PageRouteInfo__ToFutureOfTN = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      var FutureOfTN = () => (FutureOfTN = dart.constFn(async.Future$(TN())))();
      return [FutureOfTN(), [page_route_info.PageRouteInfo], {onFailure: T$.NavigationFailureToNvoid()}, {}];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      var FutureOfTN = () => (FutureOfTN = dart.constFn(async.Future$(TN())))();
      return [T$.ObjectN()];
    })))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    TNToFutureOfbool: () => (T$.TNToFutureOfbool = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [T$.FutureOfbool(), [], [TN()]];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [T$.ObjectN()];
    })))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    PageRouteInfo__ToFutureOfvoid: () => (T$.PageRouteInfo__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [page_route_info.PageRouteInfo], {onFailure: T$.NavigationFailureToNvoid()}, {})))(),
    String__ToFutureOfvoid: () => (T$.String__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String], {includePrefixMatches: core.bool, onFailure: T$.NavigationFailureToNvoid()}, {})))(),
    StringToTN: () => (T$.StringToTN = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [TN(), [core.String]];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [routing_controller.RoutingController];
    })))(),
    SetOfAutoRouteAware: () => (T$.SetOfAutoRouteAware = dart.constFn(core.Set$(auto_route_observer.AutoRouteAware)))(),
    LinkedMapOfLocalKey$SetOfAutoRouteAware: () => (T$.LinkedMapOfLocalKey$SetOfAutoRouteAware = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, T$.SetOfAutoRouteAware())))(),
    LinkedHashSetOfAutoRouteAware: () => (T$.LinkedHashSetOfAutoRouteAware = dart.constFn(collection.LinkedHashSet$(auto_route_observer.AutoRouteAware)))(),
    VoidToSetOfAutoRouteAware: () => (T$.VoidToSetOfAutoRouteAware = dart.constFn(dart.fnType(T$.SetOfAutoRouteAware(), [])))(),
    RouteObserverOfRoute: () => (T$.RouteObserverOfRoute = dart.constFn(routes.RouteObserver$(navigator$.Route)))(),
    IdentityMapOfString$RouteConfig: () => (T$.IdentityMapOfString$RouteConfig = dart.constFn(_js_helper.IdentityMap$(core.String, route_config.RouteConfig)))(),
    RouteConfigTovoid: () => (T$.RouteConfigTovoid = dart.constFn(dart.fnType(dart.void, [route_config.RouteConfig])))(),
    RouteMatchToRouteMatch: () => (T$.RouteMatchToRouteMatch = dart.constFn(dart.fnType(route_match.RouteMatch, [route_match.RouteMatch])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    PageRouteInfoTobool: () => (T$.PageRouteInfoTobool = dart.constFn(dart.fnType(core.bool, [page_route_info.PageRouteInfo])))(),
    ListOfRouteMatch: () => (T$.ListOfRouteMatch = dart.constFn(core.List$(route_match.RouteMatch)))(),
    RouteMatchToParameters: () => (T$.RouteMatchToParameters = dart.constFn(dart.fnType(parameters.Parameters, [route_match.RouteMatch])))(),
    ParametersAndParametersToParameters: () => (T$.ParametersAndParametersToParameters = dart.constFn(dart.fnType(parameters.Parameters, [parameters.Parameters, parameters.Parameters])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    JSArrayOfPageRouteInfo: () => (T$.JSArrayOfPageRouteInfo = dart.constFn(_interceptors.JSArray$(page_route_info.PageRouteInfo)))(),
    PageRouteInfoToString: () => (T$.PageRouteInfoToString = dart.constFn(dart.fnType(core.String, [page_route_info.PageRouteInfo])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 28,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 29,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3], widget_inspector._Location);
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 27,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_back_button.dart"
      });
    },
    get C6() {
      return C[6] = dart.constList([], widget_inspector._Location);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 32,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_back_button.dart"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget__location]: C[5] || CT.C5,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    },
    get C9() {
      return C[9] = dart.fn(auto_router_delegate.AutoRouterDelegate.defaultNavigatorObserversBuilder, T$.VoidToListOfNavigatorObserver());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 32,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 52,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.constList([C[13] || CT.C13, C[14] || CT.C14], widget_inspector._Location);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[12] || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 123,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "extendBodyBehindAppBar",
        [_Location_column]: 11,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endDrawer",
        [_Location_column]: 11,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "extendBody",
        [_Location_column]: 11,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationId",
        [_Location_column]: 11,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "resizeToAvoidBottomInset",
        [_Location_column]: 11,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 11,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawer",
        [_Location_column]: 11,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerDragStartBehavior",
        [_Location_column]: 11,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerEdgeDragWidth",
        [_Location_column]: 11,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerEnableOpenDragGesture",
        [_Location_column]: 11,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerScrimColor",
        [_Location_column]: 11,
        [_Location_line]: 106,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDrawerChanged",
        [_Location_column]: 11,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endDrawerEnableOpenDragGesture",
        [_Location_column]: 11,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEndDrawerChanged",
        [_Location_column]: 11,
        [_Location_line]: 109,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButton",
        [_Location_column]: 11,
        [_Location_line]: 110,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButtonAnimator",
        [_Location_column]: 11,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButtonLocation",
        [_Location_column]: 11,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bottomSheet",
        [_Location_column]: 11,
        [_Location_line]: 113,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "persistentFooterButtons",
        [_Location_column]: 11,
        [_Location_line]: 114,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "primary",
        [_Location_column]: 11,
        [_Location_line]: 115,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "appBar",
        [_Location_column]: 11,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "body",
        [_Location_column]: 11,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bottomNavigationBar",
        [_Location_column]: 11,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], widget_inspector._Location);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[16] || CT.C16,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 94,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routes",
        [_Location_column]: 7,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "duration",
        [_Location_column]: 7,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "lazyLoad",
        [_Location_column]: 7,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 89,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritNavigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "curve",
        [_Location_column]: 7,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.constList([C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49], widget_inspector._Location);
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[42] || CT.C42,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 85,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 21,
        [_Location_line]: 185,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.constList([C[52] || CT.C52], widget_inspector._Location);
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[51] || CT.C51,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 185,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeIndex",
        [_Location_column]: 13,
        [_Location_line]: 187,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "lazyLoad",
        [_Location_column]: 13,
        [_Location_line]: 188,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 13,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "itemBuilder",
        [_Location_column]: 13,
        [_Location_line]: 190,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stack",
        [_Location_column]: 13,
        [_Location_line]: 194,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.constList([C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], widget_inspector._Location);
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[54] || CT.C54,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 186,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 13,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 13,
        [_Location_line]: 207,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 209,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64], widget_inspector._Location);
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[61] || CT.C61,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 205,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 11,
        [_Location_line]: 203,
        [_Location_file]: null
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 11,
        [_Location_line]: 204,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 205,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.constList([C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69], widget_inspector._Location);
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[66] || CT.C66,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 202,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 198,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 199,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 200,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 201,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 202,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.constList([C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76], widget_inspector._Location);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[71] || CT.C71,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 197,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 27,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 47,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.constList([C[79] || CT.C79, C[80] || CT.C80], widget_inspector._Location);
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[78] || CT.C78,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 215,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 30,
        [_Location_line]: 240,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget__location]: C[82] || CT.C82,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "index",
        [_Location_column]: 9,
        [_Location_line]: 299,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sizing",
        [_Location_column]: 9,
        [_Location_line]: 300,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 301,
        [_Location_file]: null
      });
    },
    get C84() {
      return C[84] = dart.constList([C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87], widget_inspector._Location);
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[84] || CT.C84,
        [_Location_name]: null,
        [_Location_column]: 41,
        [_Location_line]: 298,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C88() {
      return C[88] = dart.constList([], route_match.RouteMatch);
    },
    get C89() {
      return C[89] = dart.constList([], navigator$.NavigatorObserver);
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "placeholder",
        [_Location_column]: 11,
        [_Location_line]: 136,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 137,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 138,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.constList([C[92] || CT.C92, C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95], widget_inspector._Location);
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[91] || CT.C91,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 134,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 133,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.constList([C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100], widget_inspector._Location);
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[97] || CT.C97,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 131,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 127,
        [_Location_file]: null
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C102() {
      return C[102] = dart.constList([C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107], widget_inspector._Location);
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[102] || CT.C102,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 126,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 214,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "declarativeRoutesBuilder",
        [_Location_column]: 11,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 216,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 217,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "didPop",
        [_Location_column]: 11,
        [_Location_line]: 218,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.constList([C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114], widget_inspector._Location);
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[109] || CT.C109,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 213,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 211,
        [_Location_file]: null
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 212,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 213,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.constList([C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119], widget_inspector._Location);
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[116] || CT.C116,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 210,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 207,
        [_Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 208,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 209,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 210,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126], widget_inspector._Location);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[121] || CT.C121,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 205,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: T$.ValueKeyOfString().prototype,
        [ValueKey_value]: "Root"
      });
    },
    get C129() {
      return C[129] = dart.constList([], auto_route_guard.AutoRouteGuard);
    },
    get C130() {
      return C[130] = dart.constList([""], core.String);
    },
    get C132() {
      return C[132] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: parameters.Parameters.prototype,
        [Parameters__params]: C[132] || CT.C132
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: route_match.RouteMatch.prototype,
        [RouteMatch_key]: C[127] || CT.C127,
        [RouteMatch_guards]: C[129] || CT.C129,
        [RouteMatch_args]: null,
        [RouteMatch_stringMatch]: "",
        [RouteMatch_path]: "",
        [RouteMatch_routeName]: "Root",
        [RouteMatch_redirectedFrom]: null,
        [RouteMatch_segments]: C[130] || CT.C130,
        [RouteMatch_fragment]: "",
        [RouteMatch_children]: null,
        [RouteMatch_queryParams]: C[131] || CT.C131,
        [RouteMatch_pathParams]: C[131] || CT.C131
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[134] || CT.C134
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 72,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "observers",
        [_Location_column]: 7,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationScopeId",
        [_Location_column]: 7,
        [_Location_line]: 74,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pages",
        [_Location_column]: 7,
        [_Location_line]: 76,
        [_Location_file]: null
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "transitionDelegate",
        [_Location_column]: 7,
        [_Location_line]: 79,
        [_Location_file]: null
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPopPage",
        [_Location_column]: 7,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C136() {
      return C[136] = dart.constList([C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142], widget_inspector._Location);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[136] || CT.C136,
        [_Location_name]: null,
        [_Location_column]: 23,
        [_Location_line]: 71,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_route_navigator.dart"
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onWillPop",
        [_Location_column]: 9,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C144() {
      return C[144] = dart.constList([C[145] || CT.C145, C[146] || CT.C146], widget_inspector._Location);
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[144] || CT.C144,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 95,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_route_navigator.dart"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: T$.ValueKeyOfString().prototype,
        [ValueKey_value]: "_placeHolder_"
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 17,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C149() {
      return C[149] = dart.constList([C[150] || CT.C150], widget_inspector._Location);
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[149] || CT.C149,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 123,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_route_navigator.dart"
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPopRoute",
        [_Location_column]: 9,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorKey",
        [_Location_column]: 9,
        [_Location_line]: 41,
        [_Location_file]: null
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 9,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 9,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onNavigate",
        [_Location_column]: 9,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routes",
        [_Location_column]: 9,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C152() {
      return C[152] = dart.constList([C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155, C[156] || CT.C156, C[157] || CT.C157, C[158] || CT.C158], widget_inspector._Location);
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[152] || CT.C152,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 39,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 7,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 7,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C160() {
      return C[160] = dart.constList([C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163], widget_inspector._Location);
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[160] || CT.C160,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 121,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 17,
        [_Location_line]: 138,
        [_Location_file]: null
      });
    },
    get C165() {
      return C[165] = dart.constList([C[166] || CT.C166], widget_inspector._Location);
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[165] || CT.C165,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 137,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.constList([C[99] || CT.C99, C[169] || CT.C169, C[170] || CT.C170], widget_inspector._Location);
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[168] || CT.C168,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 132,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.constList([C[173] || CT.C173, C[105] || CT.C105, C[174] || CT.C174, C[175] || CT.C175, C[176] || CT.C176], widget_inspector._Location);
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[172] || CT.C172,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 127,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 248,
        [_Location_file]: null
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "declarativeRoutesBuilder",
        [_Location_column]: 11,
        [_Location_line]: 249,
        [_Location_file]: null
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 250,
        [_Location_file]: null
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 251,
        [_Location_file]: null
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "didPop",
        [_Location_column]: 11,
        [_Location_line]: 252,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.constList([C[179] || CT.C179, C[180] || CT.C180, C[181] || CT.C181, C[182] || CT.C182, C[183] || CT.C183], widget_inspector._Location);
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[178] || CT.C178,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 247,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 246,
        [_Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 247,
        [_Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.constList([C[186] || CT.C186, C[187] || CT.C187], widget_inspector._Location);
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[185] || CT.C185,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 245,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 241,
        [_Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 242,
        [_Location_file]: null
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 243,
        [_Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 244,
        [_Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 245,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.constList([C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194], widget_inspector._Location);
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[189] || CT.C189,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 240,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 48,
        [_Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routeData",
        [_Location_column]: 7,
        [_Location_line]: 49,
        [_Location_file]: null
      });
    },
    get C196() {
      return C[196] = dart.constList([C[197] || CT.C197, C[198] || CT.C198, C[199] || CT.C199], widget_inspector._Location);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[196] || CT.C196,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 46,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/auto_route_page.dart"
      });
    }
  }, false);
  var C = Array(200).fill(void 0);
  var I = [
    "package:auto_route/src/router/widgets/auto_back_button.dart",
    "package:auto_route/src/router/widgets/auto_tabs_scaffold.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_tabs_router.dart",
    "package:auto_route/src/router/widgets/auto_tabs_router.dart",
    "package:auto_route/src/router/parser/route_information_parser.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router_delegate.dart",
    "package:auto_route/src/router/widgets/auto_router_delegate.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/root_stack_router.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/controller/routing_controller.dart",
    "package:auto_route/src/router/controller/routing_controller.dart",
    "package:auto_route/src/router/widgets/auto_route_navigator.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/controller/controller_scope.dart",
    "package:auto_route/src/router/controller/controller_scope.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/router/widgets/auto_router.dart",
    "package:auto_route/src/router/widgets/auto_router.dart",
    "package:auto_route/src/route/route_config.dart",
    "package:auto_route/src/common/auto_route_observer.dart",
    "package:auto_route/src/router/auto_route_page.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/route/route_data_scope.dart",
    "package:auto_route/src/route/route_data_scope.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/matcher/route_matcher.dart",
    "package:auto_route/src/matcher/route_matcher.dart",
    "package:auto_route/src/auto_route_guard.dart",
    "file:///D:/DevelpmentTool/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.2/lib/src/auto_route_guard.dart",
    "package:auto_route/src/matcher/route_match.dart",
    "package:auto_route/src/route/page_route_info.dart",
    "package:auto_route/src/navigation_failure.dart"
  ];
  var color$ = dart.privateName(auto_back_button, "AutoBackButton.color");
  var showIfParentCanPop$ = dart.privateName(auto_back_button, "AutoBackButton.showIfParentCanPop");
  auto_back_button.AutoBackButton = class AutoBackButton extends framework.StatefulWidget {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get showIfParentCanPop() {
      return this[showIfParentCanPop$];
    }
    set showIfParentCanPop(value) {
      super.showIfParentCanPop = value;
    }
    createState() {
      return new auto_back_button._AutoBackButtonState.new();
    }
  };
  (auto_back_button.AutoBackButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let showIfParentCanPop = opts && 'showIfParentCanPop' in opts ? opts.showIfParentCanPop : true;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[color$] = color;
    this[showIfParentCanPop$] = showIfParentCanPop;
    auto_back_button.AutoBackButton.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_back_button.AutoBackButton.prototype;
  dart.addTypeTests(auto_back_button.AutoBackButton);
  dart.addTypeCaches(auto_back_button.AutoBackButton);
  dart.setMethodSignature(auto_back_button.AutoBackButton, () => ({
    __proto__: dart.getMethods(auto_back_button.AutoBackButton.__proto__),
    createState: dart.fnType(auto_back_button._AutoBackButtonState, [])
  }));
  dart.setLibraryUri(auto_back_button.AutoBackButton, I[0]);
  dart.setFieldSignature(auto_back_button.AutoBackButton, () => ({
    __proto__: dart.getFields(auto_back_button.AutoBackButton.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    showIfParentCanPop: dart.finalFieldType(core.bool)
  }));
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  auto_back_button._AutoBackButtonState = class _AutoBackButtonState extends framework.State$(auto_back_button.AutoBackButton) {
    build(context) {
      let t0;
      let scope = controller_scope.RouterScope.of(context);
      if (scope.controller.canPopSelfOrChildren || this.widget.showIfParentCanPop && (t0 = scope.controller.parent(routing_controller.RoutingController), t0 == null ? null : t0.canPopSelfOrChildren) === true) {
        return new back_button.BackButton.new({color: this.widget.color, onPressed: dart.gbind(dart.bind(scope.controller, 'popTop'), T$.ObjectN()), $creationLocationd_0dea112b090073317d4: C[0] || CT.C0});
      }
      return C[4] || CT.C4;
    }
  };
  (auto_back_button._AutoBackButtonState.new = function() {
    auto_back_button._AutoBackButtonState.__proto__.new.call(this);
    ;
  }).prototype = auto_back_button._AutoBackButtonState.prototype;
  dart.addTypeTests(auto_back_button._AutoBackButtonState);
  dart.addTypeCaches(auto_back_button._AutoBackButtonState);
  dart.setMethodSignature(auto_back_button._AutoBackButtonState, () => ({
    __proto__: dart.getMethods(auto_back_button._AutoBackButtonState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_back_button._AutoBackButtonState, I[0]);
  var builder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.builder");
  var routes$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.routes");
  var animationDuration$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.animationDuration");
  var animationCurve$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.animationCurve");
  var lazyLoad$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.lazyLoad");
  var bottomNavigationBuilder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.bottomNavigationBuilder");
  var navigatorObservers$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.navigatorObservers");
  var inheritNavigatorObservers$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.inheritNavigatorObservers");
  var floatingActionButton$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButton");
  var floatingActionButtonLocation$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButtonLocation");
  var floatingActionButtonAnimator$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButtonAnimator");
  var persistentFooterButtons$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.persistentFooterButtons");
  var drawer$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawer");
  var onDrawerChanged$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.onDrawerChanged");
  var endDrawer$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.endDrawer");
  var onEndDrawerChanged$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.onEndDrawerChanged");
  var drawerScrimColor$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerScrimColor");
  var backgroundColor$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.backgroundColor");
  var bottomSheet$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.bottomSheet");
  var resizeToAvoidBottomInset$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.resizeToAvoidBottomInset");
  var primary$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.primary");
  var drawerDragStartBehavior$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerDragStartBehavior");
  var drawerEdgeDragWidth$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerEdgeDragWidth");
  var drawerEnableOpenDragGesture$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerEnableOpenDragGesture");
  var endDrawerEnableOpenDragGesture$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.endDrawerEnableOpenDragGesture");
  var restorationId$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.restorationId");
  var extendBody$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.extendBody");
  var extendBodyBehindAppBar$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.extendBodyBehindAppBar");
  var appBarBuilder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.appBarBuilder");
  var scaffoldKey$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.scaffoldKey");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var _name = dart.privateName(recognizer, "_name");
  auto_tabs_scaffold.AutoTabsScaffold = class AutoTabsScaffold extends framework.StatelessWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get routes() {
      return this[routes$];
    }
    set routes(value) {
      super.routes = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get animationCurve() {
      return this[animationCurve$];
    }
    set animationCurve(value) {
      super.animationCurve = value;
    }
    get lazyLoad() {
      return this[lazyLoad$];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get bottomNavigationBuilder() {
      return this[bottomNavigationBuilder$];
    }
    set bottomNavigationBuilder(value) {
      super.bottomNavigationBuilder = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get floatingActionButton() {
      return this[floatingActionButton$];
    }
    set floatingActionButton(value) {
      super.floatingActionButton = value;
    }
    get floatingActionButtonLocation() {
      return this[floatingActionButtonLocation$];
    }
    set floatingActionButtonLocation(value) {
      super.floatingActionButtonLocation = value;
    }
    get floatingActionButtonAnimator() {
      return this[floatingActionButtonAnimator$];
    }
    set floatingActionButtonAnimator(value) {
      super.floatingActionButtonAnimator = value;
    }
    get persistentFooterButtons() {
      return this[persistentFooterButtons$];
    }
    set persistentFooterButtons(value) {
      super.persistentFooterButtons = value;
    }
    get drawer() {
      return this[drawer$];
    }
    set drawer(value) {
      super.drawer = value;
    }
    get onDrawerChanged() {
      return this[onDrawerChanged$];
    }
    set onDrawerChanged(value) {
      super.onDrawerChanged = value;
    }
    get endDrawer() {
      return this[endDrawer$];
    }
    set endDrawer(value) {
      super.endDrawer = value;
    }
    get onEndDrawerChanged() {
      return this[onEndDrawerChanged$];
    }
    set onEndDrawerChanged(value) {
      super.onEndDrawerChanged = value;
    }
    get drawerScrimColor() {
      return this[drawerScrimColor$];
    }
    set drawerScrimColor(value) {
      super.drawerScrimColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get bottomSheet() {
      return this[bottomSheet$];
    }
    set bottomSheet(value) {
      super.bottomSheet = value;
    }
    get resizeToAvoidBottomInset() {
      return this[resizeToAvoidBottomInset$];
    }
    set resizeToAvoidBottomInset(value) {
      super.resizeToAvoidBottomInset = value;
    }
    get primary() {
      return this[primary$];
    }
    set primary(value) {
      super.primary = value;
    }
    get drawerDragStartBehavior() {
      return this[drawerDragStartBehavior$];
    }
    set drawerDragStartBehavior(value) {
      super.drawerDragStartBehavior = value;
    }
    get drawerEdgeDragWidth() {
      return this[drawerEdgeDragWidth$];
    }
    set drawerEdgeDragWidth(value) {
      super.drawerEdgeDragWidth = value;
    }
    get drawerEnableOpenDragGesture() {
      return this[drawerEnableOpenDragGesture$];
    }
    set drawerEnableOpenDragGesture(value) {
      super.drawerEnableOpenDragGesture = value;
    }
    get endDrawerEnableOpenDragGesture() {
      return this[endDrawerEnableOpenDragGesture$];
    }
    set endDrawerEnableOpenDragGesture(value) {
      super.endDrawerEnableOpenDragGesture = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get extendBody() {
      return this[extendBody$];
    }
    set extendBody(value) {
      super.extendBody = value;
    }
    get extendBodyBehindAppBar() {
      return this[extendBodyBehindAppBar$];
    }
    set extendBodyBehindAppBar(value) {
      super.extendBodyBehindAppBar = value;
    }
    get appBarBuilder() {
      return this[appBarBuilder$];
    }
    set appBarBuilder(value) {
      super.appBarBuilder = value;
    }
    get scaffoldKey() {
      return this[scaffoldKey$];
    }
    set scaffoldKey(value) {
      super.scaffoldKey = value;
    }
    build(context) {
      return new auto_tabs_router.AutoTabsRouter.new({routes: this.routes, duration: this.animationDuration, lazyLoad: this.lazyLoad, navigatorObservers: this.navigatorObservers, inheritNavigatorObservers: this.inheritNavigatorObservers, curve: this.animationCurve, builder: dart.fn((context, child, animation) => {
          let tabsRouter = auto_router_x['AutoRouterX|get#tabsRouter'](context);
          return new scaffold.Scaffold.new({key: this.scaffoldKey, extendBodyBehindAppBar: this.extendBodyBehindAppBar, endDrawer: this.endDrawer, extendBody: this.extendBody, restorationId: this.restorationId, resizeToAvoidBottomInset: this.resizeToAvoidBottomInset, backgroundColor: this.backgroundColor, drawer: this.drawer, drawerDragStartBehavior: this.drawerDragStartBehavior, drawerEdgeDragWidth: this.drawerEdgeDragWidth, drawerEnableOpenDragGesture: this.drawerEnableOpenDragGesture, drawerScrimColor: this.drawerScrimColor, onDrawerChanged: this.onDrawerChanged, endDrawerEnableOpenDragGesture: this.endDrawerEnableOpenDragGesture, onEndDrawerChanged: this.onEndDrawerChanged, floatingActionButton: this.floatingActionButton, floatingActionButtonAnimator: this.floatingActionButtonAnimator, floatingActionButtonLocation: this.floatingActionButtonLocation, bottomSheet: this.bottomSheet, persistentFooterButtons: this.persistentFooterButtons, primary: this.primary, appBar: this.appBarBuilder == null ? null : dart.nullCheck(this.appBarBuilder)(context, tabsRouter), body: this.builder == null ? new transitions.FadeTransition.new({opacity: animation, child: child, $creationLocationd_0dea112b090073317d4: C[11] || CT.C11}) : dart.nullCheck(this.builder)(context, child, animation), bottomNavigationBar: this.bottomNavigationBuilder == null ? null : dart.nullCheck(this.bottomNavigationBuilder)(context, tabsRouter), $creationLocationd_0dea112b090073317d4: C[15] || CT.C15});
        }, T$.BuildContextAndWidgetAndAnimationOfdoubleToScaffold()), $creationLocationd_0dea112b090073317d4: C[41] || CT.C41});
    }
  };
  (auto_tabs_scaffold.AutoTabsScaffold.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[7] || CT.C7;
    let animationCurve = opts && 'animationCurve' in opts ? opts.animationCurve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let bottomNavigationBuilder = opts && 'bottomNavigationBuilder' in opts ? opts.bottomNavigationBuilder : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let floatingActionButton = opts && 'floatingActionButton' in opts ? opts.floatingActionButton : null;
    let floatingActionButtonLocation = opts && 'floatingActionButtonLocation' in opts ? opts.floatingActionButtonLocation : null;
    let floatingActionButtonAnimator = opts && 'floatingActionButtonAnimator' in opts ? opts.floatingActionButtonAnimator : null;
    let persistentFooterButtons = opts && 'persistentFooterButtons' in opts ? opts.persistentFooterButtons : null;
    let drawer = opts && 'drawer' in opts ? opts.drawer : null;
    let onDrawerChanged = opts && 'onDrawerChanged' in opts ? opts.onDrawerChanged : null;
    let endDrawer = opts && 'endDrawer' in opts ? opts.endDrawer : null;
    let onEndDrawerChanged = opts && 'onEndDrawerChanged' in opts ? opts.onEndDrawerChanged : null;
    let drawerScrimColor = opts && 'drawerScrimColor' in opts ? opts.drawerScrimColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let bottomSheet = opts && 'bottomSheet' in opts ? opts.bottomSheet : null;
    let resizeToAvoidBottomInset = opts && 'resizeToAvoidBottomInset' in opts ? opts.resizeToAvoidBottomInset : null;
    let primary = opts && 'primary' in opts ? opts.primary : true;
    let drawerDragStartBehavior = opts && 'drawerDragStartBehavior' in opts ? opts.drawerDragStartBehavior : C[10] || CT.C10;
    let drawerEdgeDragWidth = opts && 'drawerEdgeDragWidth' in opts ? opts.drawerEdgeDragWidth : null;
    let drawerEnableOpenDragGesture = opts && 'drawerEnableOpenDragGesture' in opts ? opts.drawerEnableOpenDragGesture : true;
    let endDrawerEnableOpenDragGesture = opts && 'endDrawerEnableOpenDragGesture' in opts ? opts.endDrawerEnableOpenDragGesture : true;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let extendBody = opts && 'extendBody' in opts ? opts.extendBody : false;
    let extendBodyBehindAppBar = opts && 'extendBodyBehindAppBar' in opts ? opts.extendBodyBehindAppBar : false;
    let appBarBuilder = opts && 'appBarBuilder' in opts ? opts.appBarBuilder : null;
    let scaffoldKey = opts && 'scaffoldKey' in opts ? opts.scaffoldKey : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$] = routes;
    this[lazyLoad$] = lazyLoad;
    this[animationDuration$] = animationDuration;
    this[animationCurve$] = animationCurve;
    this[builder$] = builder;
    this[bottomNavigationBuilder$] = bottomNavigationBuilder;
    this[inheritNavigatorObservers$] = inheritNavigatorObservers;
    this[navigatorObservers$] = navigatorObservers;
    this[floatingActionButton$] = floatingActionButton;
    this[floatingActionButtonLocation$] = floatingActionButtonLocation;
    this[floatingActionButtonAnimator$] = floatingActionButtonAnimator;
    this[persistentFooterButtons$] = persistentFooterButtons;
    this[drawer$] = drawer;
    this[onDrawerChanged$] = onDrawerChanged;
    this[endDrawer$] = endDrawer;
    this[onEndDrawerChanged$] = onEndDrawerChanged;
    this[drawerScrimColor$] = drawerScrimColor;
    this[backgroundColor$] = backgroundColor;
    this[bottomSheet$] = bottomSheet;
    this[resizeToAvoidBottomInset$] = resizeToAvoidBottomInset;
    this[primary$] = primary;
    this[drawerDragStartBehavior$] = drawerDragStartBehavior;
    this[drawerEdgeDragWidth$] = drawerEdgeDragWidth;
    this[drawerEnableOpenDragGesture$] = drawerEnableOpenDragGesture;
    this[endDrawerEnableOpenDragGesture$] = endDrawerEnableOpenDragGesture;
    this[restorationId$] = restorationId;
    this[extendBody$] = extendBody;
    this[extendBodyBehindAppBar$] = extendBodyBehindAppBar;
    this[appBarBuilder$] = appBarBuilder;
    this[scaffoldKey$] = scaffoldKey;
    auto_tabs_scaffold.AutoTabsScaffold.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_scaffold.AutoTabsScaffold.prototype;
  dart.addTypeTests(auto_tabs_scaffold.AutoTabsScaffold);
  dart.addTypeCaches(auto_tabs_scaffold.AutoTabsScaffold);
  dart.setMethodSignature(auto_tabs_scaffold.AutoTabsScaffold, () => ({
    __proto__: dart.getMethods(auto_tabs_scaffold.AutoTabsScaffold.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_tabs_scaffold.AutoTabsScaffold, I[1]);
  dart.setFieldSignature(auto_tabs_scaffold.AutoTabsScaffold, () => ({
    __proto__: dart.getFields(auto_tabs_scaffold.AutoTabsScaffold.__proto__),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, animation.Animation$(core.double)]))),
    routes: dart.finalFieldType(core.List$(page_route_info.PageRouteInfo)),
    animationDuration: dart.finalFieldType(core.Duration),
    animationCurve: dart.finalFieldType(curves.Curve),
    lazyLoad: dart.finalFieldType(core.bool),
    bottomNavigationBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, routing_controller.TabsRouter]))),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    floatingActionButton: dart.finalFieldType(dart.nullable(framework.Widget)),
    floatingActionButtonLocation: dart.finalFieldType(dart.nullable(floating_action_button_location.FloatingActionButtonLocation)),
    floatingActionButtonAnimator: dart.finalFieldType(dart.nullable(floating_action_button_location.FloatingActionButtonAnimator)),
    persistentFooterButtons: dart.finalFieldType(dart.nullable(core.List$(framework.Widget))),
    drawer: dart.finalFieldType(dart.nullable(framework.Widget)),
    onDrawerChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    endDrawer: dart.finalFieldType(dart.nullable(framework.Widget)),
    onEndDrawerChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    drawerScrimColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    bottomSheet: dart.finalFieldType(dart.nullable(framework.Widget)),
    resizeToAvoidBottomInset: dart.finalFieldType(dart.nullable(core.bool)),
    primary: dart.finalFieldType(core.bool),
    drawerDragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    drawerEdgeDragWidth: dart.finalFieldType(dart.nullable(core.double)),
    drawerEnableOpenDragGesture: dart.finalFieldType(core.bool),
    endDrawerEnableOpenDragGesture: dart.finalFieldType(core.bool),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    extendBody: dart.finalFieldType(core.bool),
    extendBodyBehindAppBar: dart.finalFieldType(core.bool),
    appBarBuilder: dart.finalFieldType(dart.nullable(dart.fnType(preferred_size.PreferredSizeWidget, [framework.BuildContext, routing_controller.TabsRouter]))),
    scaffoldKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(scaffold.ScaffoldState)))
  }));
  var builder$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.builder");
  var routes$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.routes");
  var duration$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.duration");
  var curve$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.curve");
  var lazyLoad$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.lazyLoad");
  var navigatorObservers$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.navigatorObservers");
  var inheritNavigatorObservers$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.inheritNavigatorObservers");
  var _activeIndex = dart.privateName(auto_tabs_router, "AutoTabsRouter._activeIndex");
  var declarative = dart.privateName(auto_tabs_router, "AutoTabsRouter.declarative");
  var onNavigate$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.onNavigate");
  var _activeIndex$ = dart.privateName(auto_tabs_router, "_activeIndex");
  auto_tabs_router.AutoTabsRouter = class AutoTabsRouter extends framework.StatefulWidget {
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    get routes() {
      return this[routes$0];
    }
    set routes(value) {
      super.routes = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      super.curve = value;
    }
    get lazyLoad() {
      return this[lazyLoad$0];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$0];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$0];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get [_activeIndex$]() {
      return this[_activeIndex];
    }
    set [_activeIndex$](value) {
      super[_activeIndex$] = value;
    }
    get declarative() {
      return this[declarative];
    }
    set declarative(value) {
      super.declarative = value;
    }
    get onNavigate() {
      return this[onNavigate$];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    createState() {
      return new auto_tabs_router.AutoTabsRouterState.new();
    }
    static of(context) {
      let scope = controller_scope.TabsRouterScope.of(context);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("AutoTabsRouter operation requested with a context that does not include an AutoTabsRouter.\n" + "The context used to retrieve the AutoTabsRouter must be that of a widget that " + "is a descendant of an AutoTabsRouter widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 62, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'AutoTabsRouter operation requested with a context that does not include an AutoTabsRouter.\\n'\n            'The context used to retrieve the AutoTabsRouter must be that of a widget that '\n            'is a descendant of an AutoTabsRouter widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope).controller;
    }
  };
  (auto_tabs_router.AutoTabsRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
    let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$0] = routes;
    this[lazyLoad$0] = lazyLoad;
    this[duration$] = duration;
    this[curve$] = curve;
    this[builder$0] = builder;
    this[inheritNavigatorObservers$0] = inheritNavigatorObservers;
    this[navigatorObservers$0] = navigatorObservers;
    this[declarative] = false;
    this[_activeIndex] = null;
    this[onNavigate$] = null;
    auto_tabs_router.AutoTabsRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router.AutoTabsRouter.prototype;
  (auto_tabs_router.AutoTabsRouter.declarative = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let activeIndex = opts && 'activeIndex' in opts ? opts.activeIndex : null;
    let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
    let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$0] = routes;
    this[lazyLoad$0] = lazyLoad;
    this[duration$] = duration;
    this[curve$] = curve;
    this[builder$0] = builder;
    this[onNavigate$] = onNavigate;
    this[inheritNavigatorObservers$0] = inheritNavigatorObservers;
    this[navigatorObservers$0] = navigatorObservers;
    this[declarative] = true;
    this[_activeIndex] = activeIndex;
    auto_tabs_router.AutoTabsRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router.AutoTabsRouter.prototype;
  dart.addTypeTests(auto_tabs_router.AutoTabsRouter);
  dart.addTypeCaches(auto_tabs_router.AutoTabsRouter);
  dart.setMethodSignature(auto_tabs_router.AutoTabsRouter, () => ({
    __proto__: dart.getMethods(auto_tabs_router.AutoTabsRouter.__proto__),
    createState: dart.fnType(auto_tabs_router.AutoTabsRouterState, [])
  }));
  dart.setLibraryUri(auto_tabs_router.AutoTabsRouter, I[3]);
  dart.setFieldSignature(auto_tabs_router.AutoTabsRouter, () => ({
    __proto__: dart.getFields(auto_tabs_router.AutoTabsRouter.__proto__),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, animation.Animation$(core.double)]))),
    routes: dart.finalFieldType(core.List$(page_route_info.PageRouteInfo)),
    duration: dart.finalFieldType(core.Duration),
    curve: dart.finalFieldType(curves.Curve),
    lazyLoad: dart.finalFieldType(core.bool),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    [_activeIndex$]: dart.finalFieldType(dart.nullable(core.int)),
    declarative: dart.finalFieldType(core.bool),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, core.bool])))
  }));
  var _controller = dart.privateName(auto_tabs_router, "_controller");
  var __AutoTabsRouterState__animationController = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_animationController");
  var __AutoTabsRouterState__animation = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_animation");
  var _index = dart.privateName(auto_tabs_router, "_index");
  var __AutoTabsRouterState__parentController = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_parentController");
  var __AutoTabsRouterState__navigatorObservers = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_navigatorObservers");
  var __AutoTabsRouterState__inheritableObserversBuilder = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_inheritableObserversBuilder");
  var _animationController = dart.privateName(auto_tabs_router, "_animationController");
  var _animation = dart.privateName(auto_tabs_router, "_animation");
  var _parentController = dart.privateName(auto_tabs_router, "_parentController");
  var _navigatorObservers = dart.privateName(auto_tabs_router, "_navigatorObservers");
  var _inheritableObserversBuilder = dart.privateName(auto_tabs_router, "_inheritableObserversBuilder");
  var _setupController = dart.privateName(auto_tabs_router, "_setupController");
  var _defaultBuilder = dart.privateName(auto_tabs_router, "_defaultBuilder");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(auto_tabs_router.AutoTabsRouter) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(auto_tabs_router.AutoTabsRouter)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(auto_tabs_router.AutoTabsRouter));
  auto_tabs_router.AutoTabsRouterState = class AutoTabsRouterState extends State_SingleTickerProviderStateMixin$36 {
    get [_animationController]() {
      let t0;
      t0 = this[__AutoTabsRouterState__animationController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_animationController")) : t0;
    }
    set [_animationController](t0) {
      this[__AutoTabsRouterState__animationController] = t0;
    }
    get [_animation]() {
      let t1;
      t1 = this[__AutoTabsRouterState__animation];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t1;
    }
    set [_animation](t1) {
      this[__AutoTabsRouterState__animation] = t1;
    }
    get [_parentController]() {
      let t2;
      t2 = this[__AutoTabsRouterState__parentController];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t2;
    }
    set [_parentController](t2) {
      this[__AutoTabsRouterState__parentController] = t2;
    }
    get controller() {
      return this[_controller];
    }
    initState() {
      this[_animationController] = new animation_controller.AnimationController.new({vsync: this, duration: this.widget.duration});
      this[_animation] = new (T$.TweenOfdouble()).new({begin: 0.0, end: 1.0}).animate(new animations.CurvedAnimation.new({parent: this[_animationController], curve: this.widget.curve}));
      super.initState();
    }
    get [_navigatorObservers]() {
      let t3;
      t3 = this[__AutoTabsRouterState__navigatorObservers];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t3;
    }
    set [_navigatorObservers](t3) {
      this[__AutoTabsRouterState__navigatorObservers] = t3;
    }
    get [_inheritableObserversBuilder]() {
      let t4;
      t4 = this[__AutoTabsRouterState__inheritableObserversBuilder];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t4;
    }
    set [_inheritableObserversBuilder](t4) {
      this[__AutoTabsRouterState__inheritableObserversBuilder] = t4;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentRoute = route_data_scope.RouteDataScope.of(this.context);
      if (this[_controller] == null) {
        let parentScope = controller_scope.RouterScope.of(this.context);
        this[_inheritableObserversBuilder] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers] = this[_inheritableObserversBuilder]();
        this[_parentController] = parentScope.controller;
        this[_controller] = new routing_controller.TabsRouter.new({parent: this[_parentController], key: parentRoute.key, managedByWidget: this.widget.declarative, initialIndex: this.widget[_activeIndex$], routeData: parentRoute, onNavigate: this.widget.onNavigate, routeCollection: this[_parentController].routeCollection.subCollectionOf(parentRoute.name), pageBuilder: this[_parentController].pageBuilder, initialPreMatchedRoutes: parentRoute.preMatchedPendingRoutes});
        this[_parentController].attachChildController(dart.nullCheck(this[_controller]));
        this[_setupController]();
      }
    }
    [_setupController]() {
      if (!(this[_controller] != null)) dart.assertFailed(null, I[2], 137, 12, "_controller != null");
      dart.nullCheck(this[_controller]).setupRoutes(this.widget.routes);
      this[_index] = dart.nullCheck(this[_controller]).activeIndex;
      this[_animationController].value = 1.0;
      dart.nullCheck(this[_controller]).addListener(dart.fn(() => {
        if (this.widget[_activeIndex$] == null && dart.nullCheck(this[_controller]).activeIndex !== this[_index]) {
          this.setState(dart.fn(() => {
            this[_index] = dart.nullCheck(this[_controller]).activeIndex;
          }, T$.VoidTovoid()));
          this[_animationController].forward({from: 0.0});
        }
      }, T$.VoidTovoid()));
    }
    dispose() {
      super.dispose();
      if (this[_controller] != null) {
        dart.nullCheck(this[_controller]).dispose();
        this[_parentController].removeChildController(dart.nullCheck(this[_controller]));
        this[_controller] = null;
      }
    }
    didUpdateWidget(oldWidget) {
      let t5;
      auto_tabs_router.AutoTabsRouter.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!new equality.ListEquality.new().equals(this.widget.routes, oldWidget.routes)) {
        dart.nullCheck(this[_controller]).replaceAll(this.widget.routes);
      }
      if (this.widget.declarative && this.widget[_activeIndex$] != oldWidget[_activeIndex$]) {
        this[_animationController].value = 1.0;
        this[_index] = dart.nullCheck(this.widget[_activeIndex$]);
        this[_animationController].forward({from: 0.0});
        dart.nullCheck(this[_controller]).setActiveIndex(this[_index], {notify: false});
        t5 = binding.WidgetsBinding.instance;
        t5 == null ? null : t5.addPostFrameCallback(dart.fn(_ => {
          auto_router_delegate.AutoRouterDelegate.of(this.context).notifyUrlChanged();
        }, T$.DurationTovoid()));
      }
    }
    build(context) {
      let t5;
      if (!(this[_controller] != null)) dart.assertFailed(null, I[2], 180, 12, "_controller != null");
      let stack = dart.nullCheck(this[_controller]).stack;
      let builder = (t5 = this.widget.builder, t5 == null ? dart.bind(this, _defaultBuilder) : t5);
      let builderChild = stack[$isEmpty] ? new container.Container.new({color: theme.Theme.of(context).scaffoldBackgroundColor, $creationLocationd_0dea112b090073317d4: C[50] || CT.C50}) : new auto_tabs_router._IndexedStackBuilder.new({activeIndex: this[_index], lazyLoad: this.widget.lazyLoad, navigatorObservers: this[_navigatorObservers], itemBuilder: dart.fn((context, index) => stack[$_get](index).buildPage(context), T$.BuildContextAndintToWidget()), stack: stack, $creationLocationd_0dea112b090073317d4: C[53] || CT.C53});
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller]), inheritableObserversBuilder: this[_inheritableObserversBuilder], segmentsHash: segmentsHash, navigatorObservers: this[_navigatorObservers], child: new controller_scope.TabsRouterScope.new({controller: dart.nullCheck(this[_controller]), segmentsHash: segmentsHash, child: new transitions.AnimatedBuilder.new({animation: this[_animation], builder: dart.fn((context, child) => {
              let t5;
              return builder(context, (t5 = child, t5 == null ? builderChild : t5), this[_animation]);
            }, T$.BuildContextAndWidgetNToWidget()), child: builderChild, $creationLocationd_0dea112b090073317d4: C[60] || CT.C60}), $creationLocationd_0dea112b090073317d4: C[65] || CT.C65}), $creationLocationd_0dea112b090073317d4: C[70] || CT.C70});
    }
    [_defaultBuilder](_, child, animation) {
      return new transitions.FadeTransition.new({opacity: T$.AnimationOfdouble().as(animation), child: T$.WidgetN().as(child), $creationLocationd_0dea112b090073317d4: C[77] || CT.C77});
    }
  };
  (auto_tabs_router.AutoTabsRouterState.new = function() {
    this[_controller] = null;
    this[__AutoTabsRouterState__animationController] = null;
    this[__AutoTabsRouterState__animation] = null;
    this[_index] = 0;
    this[__AutoTabsRouterState__parentController] = null;
    this[__AutoTabsRouterState__navigatorObservers] = null;
    this[__AutoTabsRouterState__inheritableObserversBuilder] = null;
    auto_tabs_router.AutoTabsRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_tabs_router.AutoTabsRouterState.prototype;
  dart.addTypeTests(auto_tabs_router.AutoTabsRouterState);
  dart.addTypeCaches(auto_tabs_router.AutoTabsRouterState);
  dart.setMethodSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getMethods(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_setupController]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_defaultBuilder]: dart.fnType(framework.Widget, [dart.dynamic, dart.dynamic, dart.dynamic])
  }));
  dart.setGetterSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getGetters(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_parentController]: routing_controller.RoutingController,
    controller: dart.nullable(routing_controller.TabsRouter),
    [_navigatorObservers]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder]: dart.fnType(core.List$(navigator$.NavigatorObserver), [])
  }));
  dart.setSetterSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getSetters(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_parentController]: routing_controller.RoutingController,
    [_navigatorObservers]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder]: dart.fnType(core.List$(navigator$.NavigatorObserver), [])
  }));
  dart.setLibraryUri(auto_tabs_router.AutoTabsRouterState, I[3]);
  dart.setFieldSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getFields(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(routing_controller.TabsRouter)),
    [__AutoTabsRouterState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__AutoTabsRouterState__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_index]: dart.fieldType(core.int),
    [__AutoTabsRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController)),
    [__AutoTabsRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator$.NavigatorObserver))),
    [__AutoTabsRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator$.NavigatorObserver), [])))
  }));
  var activeIndex$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.activeIndex");
  var itemBuilder$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.itemBuilder");
  var lazyLoad$1 = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.lazyLoad");
  var stack$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.stack");
  var navigatorObservers$1 = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.navigatorObservers");
  auto_tabs_router._IndexedStackBuilder = class _IndexedStackBuilder extends framework.StatefulWidget {
    get activeIndex() {
      return this[activeIndex$];
    }
    set activeIndex(value) {
      super.activeIndex = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get lazyLoad() {
      return this[lazyLoad$1];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get stack() {
      return this[stack$];
    }
    set stack(value) {
      super.stack = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$1];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    createState() {
      return new auto_tabs_router._IndexedStackBuilderState.new();
    }
  };
  (auto_tabs_router._IndexedStackBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let activeIndex = opts && 'activeIndex' in opts ? opts.activeIndex : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[activeIndex$] = activeIndex;
    this[itemBuilder$] = itemBuilder;
    this[navigatorObservers$1] = navigatorObservers;
    this[stack$] = stack;
    this[lazyLoad$1] = lazyLoad;
    auto_tabs_router._IndexedStackBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router._IndexedStackBuilder.prototype;
  dart.addTypeTests(auto_tabs_router._IndexedStackBuilder);
  dart.addTypeCaches(auto_tabs_router._IndexedStackBuilder);
  dart.setMethodSignature(auto_tabs_router._IndexedStackBuilder, () => ({
    __proto__: dart.getMethods(auto_tabs_router._IndexedStackBuilder.__proto__),
    createState: dart.fnType(auto_tabs_router._IndexedStackBuilderState, [])
  }));
  dart.setLibraryUri(auto_tabs_router._IndexedStackBuilder, I[3]);
  dart.setFieldSignature(auto_tabs_router._IndexedStackBuilder, () => ({
    __proto__: dart.getFields(auto_tabs_router._IndexedStackBuilder.__proto__),
    activeIndex: dart.finalFieldType(core.int),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    lazyLoad: dart.finalFieldType(core.bool),
    stack: dart.finalFieldType(core.List$(auto_route_page.AutoRoutePage)),
    navigatorObservers: dart.finalFieldType(core.List$(navigator$.NavigatorObserver))
  }));
  var _dummyWidget = dart.privateName(auto_tabs_router, "_dummyWidget");
  var _initializedPagesTracker = dart.privateName(auto_tabs_router, "_initializedPagesTracker");
  var _didInitTabRoute = dart.privateName(auto_tabs_router, "_didInitTabRoute");
  var _didChangeTabRoute = dart.privateName(auto_tabs_router, "_didChangeTabRoute");
  auto_tabs_router._IndexedStackBuilderState = class _IndexedStackBuilderState extends framework.State$(auto_tabs_router._IndexedStackBuilder) {
    [_didInitTabRoute](index, previous = -1) {
      this.widget.navigatorObservers[$whereType](auto_route_observer.AutoRouterObserver)[$forEach](dart.fn(observer => {
        let routes = this.widget.stack[$map](route_match.RouteMatch, dart.fn(e => e.routeData.route, T$.AutoRoutePageToRouteMatch()))[$toList]();
        let previousRoute = null;
        if (previous !== -1) {
          previousRoute = new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](previous), index: previous});
        }
        observer.didInitTabRoute(new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](index), index: index}), T$.TabPageRouteN().as(previousRoute));
      }, T$.AutoRouterObserverTovoid()));
    }
    [_didChangeTabRoute](index, previous) {
      this.widget.navigatorObservers[$whereType](auto_route_observer.AutoRouterObserver)[$forEach](dart.fn(observer => {
        let routes = this.widget.stack[$map](route_match.RouteMatch, dart.fn(e => e.routeData.route, T$.AutoRoutePageToRouteMatch()))[$toList]();
        observer.didChangeTabRoute(new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](index), index: index}), new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](previous), index: previous}));
      }, T$.AutoRouterObserverTovoid()));
    }
    initState() {
      super.initState();
      for (let i = 0; i < this.widget.stack[$length]; i = i + 1) {
        if (i === this.widget.activeIndex || !this.widget.lazyLoad) {
          this[_initializedPagesTracker][$_set](i, true);
          this[_didInitTabRoute](i);
        } else {
          this[_initializedPagesTracker][$_set](i, false);
        }
      }
    }
    didUpdateWidget(oldWidget) {
      auto_tabs_router._IndexedStackBuilder.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.lazyLoad && this[_initializedPagesTracker][$_get](this.widget.activeIndex) === false) {
        this[_initializedPagesTracker][$_set](this.widget.activeIndex, true);
        this[_didInitTabRoute](this.widget.activeIndex, oldWidget.activeIndex);
      } else if (this.widget.activeIndex !== oldWidget.activeIndex) {
        this[_didChangeTabRoute](this.widget.activeIndex, oldWidget.activeIndex);
      }
    }
    build(context) {
      return new basic.IndexedStack.new({index: this.widget.activeIndex, sizing: stack.StackFit.expand, children: T$.ListOfWidget().generate(this.widget.stack[$length], dart.fn(index => {
          let t7, t6, t5;
          return this[_initializedPagesTracker][$_get](index) === true ? (t5 = this.widget, t6 = context, t7 = index, t5.itemBuilder(t6, t7)) : this[_dummyWidget];
        }, T$.intToWidget())), $creationLocationd_0dea112b090073317d4: C[83] || CT.C83});
    }
  };
  (auto_tabs_router._IndexedStackBuilderState.new = function() {
    this[_dummyWidget] = C[81] || CT.C81;
    this[_initializedPagesTracker] = new (T$.IdentityMapOfint$bool()).new();
    auto_tabs_router._IndexedStackBuilderState.__proto__.new.call(this);
    ;
  }).prototype = auto_tabs_router._IndexedStackBuilderState.prototype;
  dart.addTypeTests(auto_tabs_router._IndexedStackBuilderState);
  dart.addTypeCaches(auto_tabs_router._IndexedStackBuilderState);
  dart.setMethodSignature(auto_tabs_router._IndexedStackBuilderState, () => ({
    __proto__: dart.getMethods(auto_tabs_router._IndexedStackBuilderState.__proto__),
    [_didInitTabRoute]: dart.fnType(dart.void, [core.int], [core.int]),
    [_didChangeTabRoute]: dart.fnType(dart.void, [core.int, core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_tabs_router._IndexedStackBuilderState, I[3]);
  dart.setFieldSignature(auto_tabs_router._IndexedStackBuilderState, () => ({
    __proto__: dart.getFields(auto_tabs_router._IndexedStackBuilderState.__proto__),
    [_dummyWidget]: dart.finalFieldType(basic.SizedBox),
    [_initializedPagesTracker]: dart.finalFieldType(core.Map$(core.int, core.bool))
  }));
  var includePrefixMatches$ = dart.privateName(route_information_parser, "DefaultRouteParser.includePrefixMatches");
  var _matcher$ = dart.privateName(route_information_parser, "_matcher");
  var segments$ = dart.privateName(route_information_parser, "UrlState.segments");
  var uri$ = dart.privateName(route_information_parser, "UrlState.uri");
  var _findSegment = dart.privateName(route_information_parser, "_findSegment");
  route_information_parser.UrlState = class UrlState extends core.Object {
    get segments() {
      return this[segments$];
    }
    set segments(value) {
      super.segments = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    get url() {
      return this.uri.toString();
    }
    get path() {
      return this.uri.path;
    }
    static fromSegments(routes) {
      return new route_information_parser.UrlState.new(route_information_parser.UrlState._buildUri(routes), routes);
    }
    get hasSegments() {
      return this.segments[$isNotEmpty];
    }
    get topMatch() {
      return this.hasSegments ? this.segments[$last] : null;
    }
    [_findSegment](segments, predicate) {
      for (let segment of segments) {
        if (predicate(segment)) {
          return segment;
        } else if (segment.hasChildren) {
          let subSegment = this[_findSegment](dart.nullCheck(segment.children), predicate);
          if (subSegment != null) {
            return subSegment;
          }
        }
      }
    }
    childrenOfSegmentNamed(routeName) {
      let t5, t5$;
      t5$ = (t5 = this[_findSegment](this.segments, dart.fn(match => match.routeName === routeName, T$.RouteMatchTobool())), t5 == null ? null : t5.children);
      return t5$ == null ? C[88] || CT.C88 : t5$;
    }
    static _buildUri(routes) {
      let t5, t5$;
      let fullPath = "/";
      if (routes[$isEmpty]) {
        return core._Uri.new({path: fullPath});
      }
      fullPath = path.joinAll(routes[$where](dart.fn(e => e.stringMatch[$isNotEmpty], T$.RouteMatchTobool()))[$map](core.String, dart.fn(e => e.stringMatch, T$.RouteMatchToString())));
      let normalized = path.normalize(fullPath);
      let lastSegment = routes[$last];
      let queryParams = new (T$.IdentityMapOfString$dynamic()).new();
      if (lastSegment.queryParams.isNotEmpty) {
        let queries = lastSegment.queryParams.rawMap;
        for (let key of queries[$keys]) {
          let value = (t5$ = (t5 = queries[$_get](key), t5 == null ? null : dart.toString(t5)), t5$ == null ? "" : t5$);
          if (value[$isNotEmpty]) {
            queryParams[$_set](key, value[$toString]());
          }
        }
      }
      let fragment = null;
      if (lastSegment.fragment[$isNotEmpty] === true) {
        fragment = lastSegment.fragment;
      }
      return core._Uri.new({path: normalized, queryParameters: queryParams[$isNotEmpty] ? queryParams : null, fragment: T$.StringN().as(fragment)});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || route_information_parser.UrlState.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && new equality.ListEquality.new().equals(this.segments, other.segments);
    }
    get hashCode() {
      return new equality.ListEquality.new().hash(this.segments);
    }
  };
  (route_information_parser.UrlState.new = function(uri, segments) {
    this[uri$] = uri;
    this[segments$] = segments;
    ;
  }).prototype = route_information_parser.UrlState.prototype;
  dart.addTypeTests(route_information_parser.UrlState);
  dart.addTypeCaches(route_information_parser.UrlState);
  dart.setMethodSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getMethods(route_information_parser.UrlState.__proto__),
    [_findSegment]: dart.fnType(dart.nullable(route_match.RouteMatch), [core.List$(route_match.RouteMatch), dart.fnType(core.bool, [route_match.RouteMatch])]),
    childrenOfSegmentNamed: dart.fnType(core.List$(route_match.RouteMatch), [core.String])
  }));
  dart.setGetterSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getGetters(route_information_parser.UrlState.__proto__),
    url: core.String,
    path: core.String,
    hasSegments: core.bool,
    topMatch: dart.nullable(route_match.RouteMatch)
  }));
  dart.setLibraryUri(route_information_parser.UrlState, I[4]);
  dart.setFieldSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getFields(route_information_parser.UrlState.__proto__),
    segments: dart.finalFieldType(core.List$(route_match.RouteMatch)),
    uri: dart.finalFieldType(core.Uri)
  }));
  dart.defineExtensionMethods(route_information_parser.UrlState, ['_equals']);
  dart.defineExtensionAccessors(route_information_parser.UrlState, ['hashCode']);
  route_information_parser.DefaultRouteParser = class DefaultRouteParser extends router.RouteInformationParser$(route_information_parser.UrlState) {
    get includePrefixMatches() {
      return this[includePrefixMatches$];
    }
    set includePrefixMatches(value) {
      super.includePrefixMatches = value;
    }
    parseRouteInformation(routeInformation) {
      return async.async(route_information_parser.UrlState, (function* parseRouteInformation() {
        let t5, t5$;
        let uri = core.Uri.parse((t5 = routeInformation.location, t5 == null ? "" : t5));
        let matches = this[_matcher$].matchUri(uri, {includePrefixMatches: this.includePrefixMatches});
        return new (T$.SynchronousFutureOfUrlState()).new(new route_information_parser.UrlState.new(uri, (t5$ = matches, t5$ == null ? C[88] || CT.C88 : t5$)));
      }).bind(this));
    }
    restoreRouteInformation(tree) {
      route_information_parser.UrlState.as(tree);
      return new router.RouteInformation.new({location: tree.url[$isEmpty] ? "/" : tree.url});
    }
  };
  (route_information_parser.DefaultRouteParser.new = function(_matcher, opts) {
    let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
    this[_matcher$] = _matcher;
    this[includePrefixMatches$] = includePrefixMatches;
    route_information_parser.DefaultRouteParser.__proto__.new.call(this);
    ;
  }).prototype = route_information_parser.DefaultRouteParser.prototype;
  dart.addTypeTests(route_information_parser.DefaultRouteParser);
  dart.addTypeCaches(route_information_parser.DefaultRouteParser);
  dart.setMethodSignature(route_information_parser.DefaultRouteParser, () => ({
    __proto__: dart.getMethods(route_information_parser.DefaultRouteParser.__proto__),
    parseRouteInformation: dart.fnType(async.Future$(route_information_parser.UrlState), [router.RouteInformation]),
    restoreRouteInformation: dart.fnType(router.RouteInformation, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(route_information_parser.DefaultRouteParser, I[4]);
  dart.setFieldSignature(route_information_parser.DefaultRouteParser, () => ({
    __proto__: dart.getFields(route_information_parser.DefaultRouteParser.__proto__),
    [_matcher$]: dart.finalFieldType(route_matcher.RouteMatcher),
    includePrefixMatches: dart.finalFieldType(core.bool)
  }));
  var initialRoutes$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.initialRoutes");
  var controller$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.controller");
  var initialDeepLink$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.initialDeepLink");
  var navRestorationScopeId$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.navRestorationScopeId");
  var navigatorObservers$2 = dart.privateName(auto_router_delegate, "AutoRouterDelegate.navigatorObservers");
  var placeholder$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.placeholder");
  var __AutoRouterDelegate__navigatorObservers = dart.privateName(auto_router_delegate, "_#AutoRouterDelegate#_navigatorObservers");
  var _urlState = dart.privateName(auto_router_delegate, "_urlState");
  var _navigatorObservers$ = dart.privateName(auto_router_delegate, "_navigatorObservers");
  var _rebuildListener = dart.privateName(auto_router_delegate, "_rebuildListener");
  const RouterDelegate_ChangeNotifier$36 = class RouterDelegate_ChangeNotifier extends router.RouterDelegate$(route_information_parser.UrlState) {};
  (RouterDelegate_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
    RouterDelegate_ChangeNotifier$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_ChangeNotifier$36.prototype;
  dart.applyMixin(RouterDelegate_ChangeNotifier$36, change_notifier.ChangeNotifier);
  auto_router_delegate.AutoRouterDelegate = class AutoRouterDelegate extends RouterDelegate_ChangeNotifier$36 {
    get initialRoutes() {
      return this[initialRoutes$];
    }
    set initialRoutes(value) {
      super.initialRoutes = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get initialDeepLink() {
      return this[initialDeepLink$];
    }
    set initialDeepLink(value) {
      super.initialDeepLink = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$2];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get placeholder() {
      return this[placeholder$];
    }
    set placeholder(value) {
      this[placeholder$] = value;
    }
    static defaultNavigatorObserversBuilder() {
      return C[89] || CT.C89;
    }
    static of(context) {
      let delegate = router.Router.of(context).routerDelegate;
      if (!auto_router_delegate.AutoRouterDelegate.is(delegate)) dart.assertFailed(null, I[5], 36, 12, "delegate is AutoRouterDelegate");
      return auto_router_delegate.AutoRouterDelegate.as(delegate);
    }
    static reportUrlChanged(context, url) {
      let t5;
      t5 = router.Router.of(context).routeInformationProvider;
      t5 == null ? null : t5.routerReportsNewRouteInformation(new router.RouteInformation.new({location: url}));
    }
    popRoute() {
      return this.controller.topMost.pop(T$.ObjectN());
    }
    get [_navigatorObservers$]() {
      let t5;
      t5 = this[__AutoRouterDelegate__navigatorObservers];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t5;
    }
    set [_navigatorObservers$](t5) {
      this[__AutoRouterDelegate__navigatorObservers] = t5;
    }
    get urlState() {
      return this[_urlState];
    }
    get currentConfiguration() {
      let newState = route_information_parser.UrlState.fromSegments(this.controller.currentSegments);
      if (!this[_urlState]._equals(newState)) {
        this[_urlState] = newState;
        return newState;
      }
      return null;
    }
    setInitialRoutePath(tree) {
      let t6;
      route_information_parser.UrlState.as(tree);
      if (this.controller.hasEntries) {
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }
      if ((t6 = this.initialRoutes, t6 == null ? null : t6[$isNotEmpty]) === true) {
        return this.controller.pushAll(dart.nullCheck(this.initialRoutes));
      } else if (this.initialDeepLink != null) {
        return this.controller.pushNamed(T$.ObjectN(), dart.nullCheck(this.initialDeepLink), {includePrefixMatches: true});
      } else if (tree.hasSegments) {
        let routes = T$.ListOfPageRouteInfo().unmodifiable(tree.segments[$map](dart.dynamic, dart.fn(m => page_route_info.PageRouteInfo.fromMatch(m), T$.RouteMatchToPageRouteInfo())));
        return this.controller.pushAll(routes);
      } else {
        dart.throw(assertions.FlutterError.new("Can not resolve initial route"));
      }
    }
    setNewRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      if (tree.hasSegments) {
        return this.controller.navigateAll(tree.segments);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    build(context) {
      let segmentsHash = this.controller.currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: this.controller, navigatorObservers: this[_navigatorObservers$], inheritableObserversBuilder: this.navigatorObservers, segmentsHash: segmentsHash, child: new controller_scope.StackRouterScope.new({segmentsHash: segmentsHash, controller: this.controller, child: new auto_route_navigator.AutoRouteNavigator.new({router: this.controller, placeholder: this.placeholder, navRestorationScopeId: this.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$], $creationLocationd_0dea112b090073317d4: C[90] || CT.C90}), $creationLocationd_0dea112b090073317d4: C[96] || CT.C96}), $creationLocationd_0dea112b090073317d4: C[101] || CT.C101});
    }
    [_rebuildListener]() {
      this.notifyListeners();
    }
    dispose() {
      super.dispose();
      this.removeListener(dart.bind(this, _rebuildListener));
    }
    notifyUrlChanged() {
      this.notifyListeners();
    }
  };
  (auto_router_delegate.AutoRouterDelegate.new = function(controller, opts) {
    let initialRoutes = opts && 'initialRoutes' in opts ? opts.initialRoutes : null;
    let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let initialDeepLink = opts && 'initialDeepLink' in opts ? opts.initialDeepLink : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    this[__AutoRouterDelegate__navigatorObservers] = null;
    this[_urlState] = route_information_parser.UrlState.fromSegments(C[88] || CT.C88);
    this[controller$] = controller;
    this[initialRoutes$] = initialRoutes;
    this[placeholder$] = placeholder;
    this[navRestorationScopeId$] = navRestorationScopeId;
    this[initialDeepLink$] = initialDeepLink;
    this[navigatorObservers$2] = navigatorObservers;
    if (!(initialDeepLink == null || initialRoutes == null)) dart.assertFailed(null, I[5], 64, 15, "initialDeepLink == null || initialRoutes == null");
    auto_router_delegate.AutoRouterDelegate.__proto__.new.call(this);
    this[_navigatorObservers$] = this.navigatorObservers();
    this.controller.addListener(dart.bind(this, _rebuildListener));
  }).prototype = auto_router_delegate.AutoRouterDelegate.prototype;
  dart.addTypeTests(auto_router_delegate.AutoRouterDelegate);
  dart.addTypeCaches(auto_router_delegate.AutoRouterDelegate);
  dart.setMethodSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getMethods(auto_router_delegate.AutoRouterDelegate.__proto__),
    popRoute: dart.fnType(async.Future$(core.bool), []),
    setNewRoutePath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_rebuildListener]: dart.fnType(dart.void, []),
    notifyUrlChanged: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getGetters(auto_router_delegate.AutoRouterDelegate.__proto__),
    [_navigatorObservers$]: core.List$(navigator$.NavigatorObserver),
    urlState: route_information_parser.UrlState
  }));
  dart.setSetterSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getSetters(auto_router_delegate.AutoRouterDelegate.__proto__),
    [_navigatorObservers$]: core.List$(navigator$.NavigatorObserver)
  }));
  dart.setLibraryUri(auto_router_delegate.AutoRouterDelegate, I[6]);
  dart.setFieldSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getFields(auto_router_delegate.AutoRouterDelegate.__proto__),
    initialRoutes: dart.finalFieldType(dart.nullable(core.List$(page_route_info.PageRouteInfo))),
    controller: dart.finalFieldType(routing_controller.StackRouter),
    initialDeepLink: dart.finalFieldType(dart.nullable(core.String)),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    placeholder: dart.fieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
    [__AutoRouterDelegate__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator$.NavigatorObserver))),
    [_urlState]: dart.fieldType(route_information_parser.UrlState)
  }));
  var _managedByWidget = dart.privateName(auto_router_delegate, "_managedByWidget");
  var _onNavigate = dart.privateName(auto_router_delegate, "_onNavigate");
  auto_router_delegate._DeclarativeAutoRouterDelegate = class _DeclarativeAutoRouterDelegate extends auto_router_delegate.AutoRouterDelegate {
    setInitialRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      return this[_onNavigate](tree, true);
    }
    setNewRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      return async.async(dart.void, (function* setNewRoutePath() {
        return this[_onNavigate](tree);
      }).bind(this));
    }
    [_onNavigate](tree, initial = false) {
      this[_urlState] = tree;
      if (tree.hasSegments) {
        this.controller.navigateAll(tree.segments);
      }
      if (this.onNavigate != null) {
        dart.nullCheck(this.onNavigate)(tree, true);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    build(context) {
      let segmentsHash = this.controller.currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: this.controller, inheritableObserversBuilder: this.navigatorObservers, segmentsHash: segmentsHash, navigatorObservers: this[_navigatorObservers$], child: new controller_scope.StackRouterScope.new({controller: this.controller, segmentsHash: segmentsHash, child: new auto_route_navigator.AutoRouteNavigator.new({router: this.controller, declarativeRoutesBuilder: this.routes, navRestorationScopeId: this.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$], didPop: this.onPopRoute, $creationLocationd_0dea112b090073317d4: C[108] || CT.C108}), $creationLocationd_0dea112b090073317d4: C[115] || CT.C115}), $creationLocationd_0dea112b090073317d4: C[120] || CT.C120});
    }
  };
  (auto_router_delegate._DeclarativeAutoRouterDelegate.new = function(controller, opts) {
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    this.routes = routes;
    this.onPopRoute = onPopRoute;
    this.onNavigate = onNavigate;
    auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__.new.call(this, controller, {navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers});
    controller[_managedByWidget] = true;
  }).prototype = auto_router_delegate._DeclarativeAutoRouterDelegate.prototype;
  dart.addTypeTests(auto_router_delegate._DeclarativeAutoRouterDelegate);
  dart.addTypeCaches(auto_router_delegate._DeclarativeAutoRouterDelegate);
  dart.setMethodSignature(auto_router_delegate._DeclarativeAutoRouterDelegate, () => ({
    __proto__: dart.getMethods(auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__),
    [_onNavigate]: dart.fnType(async.Future$(dart.void), [route_information_parser.UrlState], [core.bool])
  }));
  dart.setLibraryUri(auto_router_delegate._DeclarativeAutoRouterDelegate, I[6]);
  dart.setFieldSignature(auto_router_delegate._DeclarativeAutoRouterDelegate, () => ({
    __proto__: dart.getFields(auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__),
    routes: dart.finalFieldType(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])),
    onPopRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_information_parser.UrlState, core.bool])))
  }));
  var _lazyRootDelegate = dart.privateName(auto_router_delegate, "_lazyRootDelegate");
  var ValueKey_value = dart.privateName(key, "ValueKey.value");
  var RouteMatch_key = dart.privateName(route_match, "RouteMatch.key");
  var RouteMatch_guards = dart.privateName(route_match, "RouteMatch.guards");
  var RouteMatch_args = dart.privateName(route_match, "RouteMatch.args");
  var RouteMatch_stringMatch = dart.privateName(route_match, "RouteMatch.stringMatch");
  var RouteMatch_path = dart.privateName(route_match, "RouteMatch.path");
  var RouteMatch_routeName = dart.privateName(route_match, "RouteMatch.routeName");
  var RouteMatch_redirectedFrom = dart.privateName(route_match, "RouteMatch.redirectedFrom");
  var RouteMatch_segments = dart.privateName(route_match, "RouteMatch.segments");
  var RouteMatch_fragment = dart.privateName(route_match, "RouteMatch.fragment");
  var RouteMatch_children = dart.privateName(route_match, "RouteMatch.children");
  var Parameters__params = dart.privateName(parameters, "Parameters._params");
  var RouteMatch_queryParams = dart.privateName(route_match, "RouteMatch.queryParams");
  var RouteMatch_pathParams = dart.privateName(route_match, "RouteMatch.pathParams");
  var _pageBuilder = dart.privateName(auto_router_delegate, "_pageBuilder");
  var _parent = dart.privateName(routing_controller, "StackRouter._parent");
  var key$ = dart.privateName(routing_controller, "StackRouter.key");
  var initialPreMatchedRoutes$ = dart.privateName(routing_controller, "StackRouter.initialPreMatchedRoutes");
  var onNavigate$0 = dart.privateName(routing_controller, "StackRouter.onNavigate");
  var _navigatorKey = dart.privateName(routing_controller, "_navigatorKey");
  var _parent$ = dart.privateName(routing_controller, "_parent");
  var _childControllers = dart.privateName(routing_controller, "_childControllers");
  var _pages = dart.privateName(routing_controller, "_pages");
  var _updateRoute = dart.privateName(routing_controller, "_updateRoute");
  var _updateSharedPathData = dart.privateName(routing_controller, "_updateSharedPathData");
  var _removeLast = dart.privateName(routing_controller, "_removeLast");
  var _findStackScope = dart.privateName(routing_controller, "_findStackScope");
  var _push = dart.privateName(routing_controller, "_push");
  var _canHandleNavigation = dart.privateName(routing_controller, "_canHandleNavigation");
  var _getAncestors = dart.privateName(routing_controller, "_getAncestors");
  var _pushAllGuarded = dart.privateName(routing_controller, "_pushAllGuarded");
  var _popUntilOrPushAll = dart.privateName(routing_controller, "_popUntilOrPushAll");
  var _matchOrReportFailure = dart.privateName(routing_controller, "_matchOrReportFailure");
  var _canNavigate = dart.privateName(routing_controller, "_canNavigate");
  var _addEntry = dart.privateName(routing_controller, "_addEntry");
  var _pushAll = dart.privateName(routing_controller, "_pushAll");
  var _removeUntil = dart.privateName(routing_controller, "_removeUntil");
  var _createRouteData = dart.privateName(routing_controller, "_createRouteData");
  var _matchAllOrReportFailure = dart.privateName(routing_controller, "_matchAllOrReportFailure");
  var _navigateAll = dart.privateName(routing_controller, "_navigateAll");
  var _reset = dart.privateName(routing_controller, "_reset");
  var _findPathScopeOrReportFailure = dart.privateName(routing_controller, "_findPathScopeOrReportFailure");
  var _isRouteActive = dart.privateName(routing_controller, "_isRouteActive");
  var _isPathActive = dart.privateName(routing_controller, "_isPathActive");
  var _findScope = dart.privateName(routing_controller, "_findScope");
  var _navigate = dart.privateName(routing_controller, "_navigate");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  const Object_ChangeNotifier$36 = class Object_ChangeNotifier extends core.Object {};
  (Object_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
  }).prototype = Object_ChangeNotifier$36.prototype;
  dart.applyMixin(Object_ChangeNotifier$36, change_notifier.ChangeNotifier);
  routing_controller.RoutingController = class RoutingController extends Object_ChangeNotifier$36 {
    attachChildController(childController) {
      this[_childControllers][$_set](childController.routeData.key, childController);
    }
    removeChildController(childController) {
      this[_childControllers][$remove](childController.routeData.key);
    }
    get stackData() {
      return T$.ListOfRouteData().unmodifiable(this[_pages][$map](dart.dynamic, dart.fn(e => e.routeData, T$.AutoRoutePageToRouteData())));
    }
    isRouteActive(routeName) {
      return this.root[_isRouteActive](routeName);
    }
    [_isRouteActive](routeName) {
      return this.currentSegments[$any](dart.fn(r => r.routeName === routeName, T$.RouteMatchTobool()));
    }
    [_createRouteData](route, parent) {
      return new routing_controller.RouteData.new({route: route, router: this, parent: parent, preMatchedPendingRoutes: route.children});
    }
    [_matchOrReportFailure](route, onFailure = null) {
      let match = this.matcher.matchByRoute(route);
      if (match != null) {
        return match;
      } else {
        if (onFailure != null) {
          onFailure(new navigation_failure.RouteNotFoundFailure.new(route));
          return null;
        } else {
          dart.throw(assertions.FlutterError.new("[" + this.toString() + "] Router can not navigate to " + route.fullPath));
        }
      }
    }
    [_matchAllOrReportFailure](routes, onFailure = null) {
      let matches = T$.JSArrayOfRouteMatch().of([]);
      for (let route of routes) {
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match != null) {
          matches[$add](match);
        } else {
          return null;
        }
      }
      return matches;
    }
    isPathActive(path) {
      return this.root[_isPathActive](path);
    }
    [_isPathActive](pattern) {
      return core.RegExp.new(pattern).hasMatch(path.joinAll(this.currentSegments[$map](core.String, dart.fn(e => e.stringMatch, T$.RouteMatchToString()))));
    }
    [_canHandleNavigation](route) {
      return this.routeCollection.containsKey(route.routeName);
    }
    [_findPathScopeOrReportFailure](T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let routers = (() => {
        let t6 = _interceptors.JSArray$(T).of([]);
        if (T.is(this)) t6[$add](T.as(this));
        t6[$addAll](this[_getAncestors]()[$whereType](T));
        return t6;
      })();
      for (let router of routers) {
        let matches = router.matcher.match(path, {includePrefixMatches: includePrefixMatches});
        if (matches != null) {
          return new (routing_controller._RouterScopeResult$(T)).new(router, matches);
        }
      }
      if (onFailure != null) {
        onFailure(new navigation_failure.RouteNotFoundFailure.new(new page_route_info.PageRouteInfo.new("", {path: path})));
      } else {
        dart.throw(assertions.FlutterError.new("Can not navigate to " + path));
      }
      return null;
    }
    [_findScope](T, route) {
      if (this[_parent$] == null || this[_canHandleNavigation](route)) {
        return this;
      }
      let routers = (() => {
        let t7 = T$.JSArrayOfRoutingController().of([this]);
        t7[$addAll](this[_getAncestors]());
        return t7;
      })();
      return routers[$firstWhere](dart.fn(r => r[_canHandleNavigation](route), T$.RoutingControllerTobool()), {orElse: dart.fn(() => this, T$.VoidToRoutingController())});
    }
    navigate(route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* navigate() {
        return this[_findScope](routing_controller.RoutingController, route)[_navigate](route, {onFailure: onFailure});
      }).bind(this));
    }
    [_navigate](route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* _navigate() {
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match != null) {
          return this[_navigateAll](T$.JSArrayOfRouteMatch().of([match]), {onFailure: onFailure});
        } else {
          return new synchronous_future.SynchronousFuture.new(null);
        }
      }).bind(this));
    }
    navigateNamed(path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.RoutingController, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        return scope.router[_navigateAll](scope.matches);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    [_getAncestors]() {
      function collectRouters(currentParent, all) {
        all[$add](currentParent);
        if (currentParent[_parent$] != null) {
          collectRouters(dart.nullCheck(currentParent[_parent$]), all);
        }
      }
      dart.fn(collectRouters, T$.RoutingControllerAndListOfRoutingControllerTovoid());
      let routers = T$.JSArrayOfRoutingController().of([]);
      if (this[_parent$] != null) {
        collectRouters(dart.nullCheck(this[_parent$]), routers);
      }
      return routers;
    }
    get currentSegmentsHash() {
      return (C[133] || CT.C133).hash(this.currentSegments);
    }
    parent(T) {
      return this[_parent$] == null ? null : T.as(this[_parent$]);
    }
    get root() {
      let t8, t8$;
      return routing_controller.StackRouter.as((t8$ = (t8 = this[_parent$], t8 == null ? null : t8.root), t8$ == null ? this : t8$));
    }
    get parentAsStackRouter() {
      return this.parent(routing_controller.StackRouter);
    }
    get isRoot() {
      return this[_parent$] == null;
    }
    get topRoute() {
      return this.topMost.current;
    }
    innerRouterOf(T, routeName) {
      if (this[_childControllers][$isEmpty]) {
        return null;
      }
      return utils['IterableExtenstion|lastOrNull'](T, this[_childControllers][$values][$whereType](T), dart.fn(c => c.routeData.name === routeName, dart.fnType(core.bool, [T])));
    }
    popTop(T, result = null) {
      return this.topMost.pop(T, result);
    }
    toString() {
      return this.routeData.name + " Router";
    }
  };
  (routing_controller.RoutingController.new = function() {
    this[_childControllers] = new (T$.LinkedMapOfLocalKey$RoutingController()).new();
    this[_pages] = T$.JSArrayOfAutoRoutePage().of([]);
    routing_controller.RoutingController.__proto__.new.call(this);
    ;
  }).prototype = routing_controller.RoutingController.prototype;
  dart.addTypeTests(routing_controller.RoutingController);
  dart.addTypeCaches(routing_controller.RoutingController);
  dart.setMethodSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getMethods(routing_controller.RoutingController.__proto__),
    attachChildController: dart.fnType(dart.void, [routing_controller.RoutingController]),
    removeChildController: dart.fnType(dart.void, [routing_controller.RoutingController]),
    isRouteActive: dart.fnType(core.bool, [core.String]),
    [_isRouteActive]: dart.fnType(core.bool, [core.String]),
    [_createRouteData]: dart.fnType(routing_controller.RouteData, [route_match.RouteMatch, routing_controller.RouteData]),
    [_matchOrReportFailure]: dart.fnType(dart.nullable(route_match.RouteMatch), [page_route_info.PageRouteInfo], [dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))]),
    [_matchAllOrReportFailure]: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [core.List$(page_route_info.PageRouteInfo)], [dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))]),
    isPathActive: dart.fnType(core.bool, [core.String]),
    [_isPathActive]: dart.fnType(core.bool, [core.String]),
    [_canHandleNavigation]: dart.fnType(core.bool, [page_route_info.PageRouteInfo]),
    [_findPathScopeOrReportFailure]: dart.gFnType(T => [dart.nullable(routing_controller._RouterScopeResult$(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [routing_controller.RoutingController]),
    [_findScope]: dart.gFnType(T => [routing_controller.RoutingController, [page_route_info.PageRouteInfo]], T => [routing_controller.RoutingController]),
    navigate: dart.fnType(async.Future, [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_navigate]: dart.fnType(async.Future, [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    navigateNamed: dart.fnType(async.Future$(dart.void), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_getAncestors]: dart.fnType(core.List$(routing_controller.RoutingController), []),
    parent: dart.gFnType(T => [dart.nullable(T), []], T => [routing_controller.RoutingController]),
    innerRouterOf: dart.gFnType(T => [dart.nullable(T), [core.String]], T => [routing_controller.RoutingController]),
    popTop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getGetters(routing_controller.RoutingController.__proto__),
    stackData: core.List$(routing_controller.RouteData),
    currentSegmentsHash: core.int,
    root: routing_controller.StackRouter,
    parentAsStackRouter: dart.nullable(routing_controller.StackRouter),
    isRoot: core.bool,
    topRoute: routing_controller.RouteData
  }));
  dart.setLibraryUri(routing_controller.RoutingController, I[9]);
  dart.setFieldSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getFields(routing_controller.RoutingController.__proto__),
    [_childControllers]: dart.finalFieldType(core.Map$(key.LocalKey, routing_controller.RoutingController)),
    [_pages]: dart.finalFieldType(core.List$(auto_route_page.AutoRoutePage))
  }));
  dart.defineExtensionMethods(routing_controller.RoutingController, ['toString']);
  routing_controller.StackRouter = class StackRouter extends routing_controller.RoutingController {
    get [_parent$]() {
      return this[_parent];
    }
    set [_parent$](value) {
      super[_parent$] = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get initialPreMatchedRoutes() {
      return this[initialPreMatchedRoutes$];
    }
    set initialPreMatchedRoutes(value) {
      super.initialPreMatchedRoutes = value;
    }
    get onNavigate() {
      return this[onNavigate$0];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    get navigatorKey() {
      return this[_navigatorKey];
    }
    get currentSegments() {
      let currentData = this.currentChild;
      let segments = T$.JSArrayOfRouteMatch().of([]);
      if (currentData != null) {
        segments[$add](currentData.route);
        if (this[_childControllers][$containsKey](currentData.key)) {
          segments[$addAll](dart.nullCheck(this[_childControllers][$_get](currentData.key)).currentSegments);
        }
      } else if (this.routeData.route.hasChildren) {
        segments[$addAll](dart.nullCheck(this.routeData.route.children)[$last].flattened);
      }
      return segments;
    }
    get canPopSelfOrChildren() {
      if (this[_pages][$length] > 1) {
        return true;
      } else if (this[_pages][$isNotEmpty] && this[_childControllers][$containsKey](this[_pages][$last].routeData.key)) {
        return dart.nullCheck(this[_childControllers][$_get](this[_pages][$last].routeData.key)).canPopSelfOrChildren;
      }
      return false;
    }
    get current() {
      let t6;
      t6 = this.currentChild;
      return t6 == null ? this.routeData : t6;
    }
    get currentChild() {
      if (this[_pages][$isNotEmpty]) {
        return this[_pages][$last].routeData;
      }
      return null;
    }
    get topMost() {
      if (this[_childControllers][$isNotEmpty]) {
        let topRouteKey = this[_pages][$last].routeData.key;
        if (this[_childControllers][$containsKey](topRouteKey)) {
          return dart.nullCheck(this[_childControllers][$_get](topRouteKey)).topMost;
        }
      }
      return this;
    }
    [_updateSharedPathData](opts) {
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[132] || CT.C132;
      let fragment = opts && 'fragment' in opts ? opts.fragment : "";
      let includeAncestors = opts && 'includeAncestors' in opts ? opts.includeAncestors : false;
      for (let index = 0; index < this[_pages][$length]; index = index + 1) {
        let data = this[_pages][$_get](index).routeData;
        let route = data.route;
        data[_updateRoute](route.copyWith({queryParams: new parameters.Parameters.new(queryParams), fragment: fragment}));
      }
      if (includeAncestors && this[_parent$] != null) {
        dart.nullCheck(this[_parent$])[_updateSharedPathData]({queryParams: queryParams, fragment: fragment, includeAncestors: includeAncestors});
      }
    }
    pop(T, result = null) {
      return async.async(core.bool, (function* pop() {
        let navigator = this[_navigatorKey].currentState;
        if (navigator == null) return new (T$.SynchronousFutureOfbool()).new(false);
        if (yield navigator.maybePop(T, result)) {
          return true;
        } else if (this[_parent$] != null) {
          return dart.nullCheck(this[_parent$]).pop(T, result);
        } else {
          return false;
        }
      }).bind(this));
    }
    popForced(T, result = null) {
      let navigator = this[_navigatorKey].currentState;
      if (navigator != null) {
        navigator.pop(T, result);
      }
    }
    removeLast() {
      return this[_removeLast]();
    }
    removeRoute(route, opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let pageIndex = this[_pages][$lastIndexWhere](dart.fn(p => p.routeKey[$_equals](route.key), T$.AutoRoutePageTobool()));
      if (pageIndex !== -1) {
        this[_pages][$removeAt](pageIndex);
      }
      this[_updateSharedPathData]({includeAncestors: true});
      if (this[_childControllers][$containsKey](route.key)) {
        this[_childControllers][$remove](route.key);
      }
      if (notify) {
        this.notifyListeners();
      }
    }
    [_removeLast](opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let didRemove = false;
      if (this[_pages][$isNotEmpty]) {
        this.removeRoute(this[_pages][$last].routeData);
        if (notify) {
          this.notifyListeners();
        }
        didRemove = true;
      }
      return didRemove;
    }
    get stack() {
      return T$.ListOfAutoRoutePage().unmodifiable(this[_pages]);
    }
    push(T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.nullable(T), (function* push() {
        return this[_findStackScope](route)[_push](T, route, {onFailure: onFailure});
      }).bind(this));
    }
    [_findStackScope](route) {
      if (this[_parent$] == null || this[_canHandleNavigation](route)) {
        return this;
      }
      let stackRouters = this[_getAncestors]()[$whereType](routing_controller.StackRouter);
      return stackRouters[$firstWhere](dart.fn(c => c[_canHandleNavigation](route), T$.StackRouterTobool()), {orElse: dart.fn(() => this, T$.VoidToStackRouter())});
    }
    [_popUntilOrPushAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* _popUntilOrPushAll() {
        let anchor = routes[$first];
        let anchorPage = utils['IterableExtenstion|lastOrNull'](auto_route_page.AutoRoutePage, this[_pages], dart.fn(p => p.routeKey[$_equals](anchor.key), T$.AutoRoutePageTobool()));
        if (anchorPage != null) {
          for (let candidate of T$.ListOfAutoRoutePage().unmodifiable(this[_pages])[$reversed]) {
            this[_pages][$removeLast]();
            if (candidate.routeKey[$_equals](anchorPage.routeKey)) {
              break;
            } else {
              if (this[_childControllers][$containsKey](candidate.routeKey)) {
                this[_childControllers][$remove](candidate.routeKey);
              }
            }
          }
        }
        return this[_pushAllGuarded](T$.ObjectN(), routes, {onFailure: onFailure, updateAncestorsPathData: false, returnLastRouteCompleter: false});
      }).bind(this));
    }
    [_push](T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      return async.async(dart.nullable(T), (function* _push() {
        if (!!this.managedByWidget) dart.assertFailed("Pages stack can be managed by either the Widget (AutoRouter.declarative) or the (StackRouter)", I[8], 692, 7, "!managedByWidget");
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match == null) {
          return null;
        }
        if (yield this[_canNavigate](match, onFailure)) {
          this[_updateSharedPathData]({queryParams: route.rawQueryParams, fragment: route.fragment, includeAncestors: true});
          return this[_addEntry](T, match, {notify: notify});
        }
        return null;
      }).bind(this));
    }
    replace(T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.removeLast();
      return scope[_push](T, route, {onFailure: onFailure});
    }
    pushAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      if (!routes[$isNotEmpty]) dart.assertFailed(null, I[8], 724, 12, "routes.isNotEmpty");
      return this[_findStackScope](routes[$first])[_pushAll](routes, {onFailure: onFailure, notify: true});
    }
    popAndPushAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      if (!routes[$isNotEmpty]) dart.assertFailed(null, I[8], 733, 12, "routes.isNotEmpty");
      let scope = this[_findStackScope](routes[$first]);
      scope.pop(T$.ObjectN());
      return scope[_pushAll](routes, {onFailure: T$.NavigationFailureToNvoid().as(onFailure), notify: true});
    }
    replaceAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](routes[$first]);
      scope[_pages][$clear]();
      return scope[_pushAll](routes, {onFailure: onFailure});
    }
    popUntilRoot() {
      let t6;
      if (!(this[_navigatorKey].currentState != null)) dart.assertFailed(null, I[8], 749, 12, "_navigatorKey.currentState != null");
      t6 = this[_navigatorKey].currentState;
      t6 == null ? null : t6.popUntil(dart.fn(route => route.isFirst, T$.RouteTobool()));
    }
    popAndPush(T, TO, route, opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.pop(TO, result);
      return scope[_push](T, route, {onFailure: onFailure});
    }
    removeUntil(predicate) {
      return this[_removeUntil](predicate);
    }
    popUntil(predicate) {
      let t6;
      t6 = this[_navigatorKey].currentState;
      t6 == null ? null : t6.popUntil(predicate);
    }
    [_removeUntil](predicate, opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let didRemove = false;
      for (let candidate of core.List.unmodifiable(this[_pages])[$reversed]) {
        if (predicate(routing_controller.RouteData.as(dart.dload(candidate, 'routeData')))) {
          break;
        } else {
          this[_removeLast]({notify: false});
          didRemove = true;
        }
      }
      if (didRemove && notify) {
        this.notifyListeners();
      }
      return didRemove;
    }
    removeWhere(predicate) {
      let didRemove = false;
      for (let entry of core.List.unmodifiable(this[_pages])) {
        if (predicate(routing_controller.RouteData.as(dart.dload(entry, 'routeData')))) {
          didRemove = true;
          this[_pages][$remove](entry);
        }
      }
      this.notifyListeners();
      return didRemove;
    }
    updateDeclarativeRoutes(routes) {
      return async.async(dart.void, (function* updateDeclarativeRoutes() {
        let t6;
        this[_pages][$clear]();
        for (let route of routes) {
          let match = this[_matchOrReportFailure](route);
          if (match == null) {
            break;
          }
          if (!utils.listNullOrEmpty(match.guards)) {
            dart.throw(assertions.FlutterError.new("Declarative routes can not have guards"));
          }
          let data = this[_createRouteData](match, this.routeData);
          this[_pages][$add]((t6 = data, this.pageBuilder(t6)));
        }
      }).bind(this));
    }
    [_pushAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      return async.async(dart.void, (function* _pushAll() {
        let matches = this[_matchAllOrReportFailure](routes, onFailure);
        if (matches != null) {
          this[_pushAllGuarded](T$.ObjectN(), matches, {onFailure: onFailure, notify: notify});
        }
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }).bind(this));
    }
    [_pushAllGuarded](T, routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let updateAncestorsPathData = opts && 'updateAncestorsPathData' in opts ? opts.updateAncestorsPathData : true;
      let returnLastRouteCompleter = opts && 'returnLastRouteCompleter' in opts ? opts.returnLastRouteCompleter : true;
      return async.async(dart.nullable(T), (function* _pushAllGuarded() {
        let t6;
        if (!!this.managedByWidget) dart.assertFailed("Pages stack can be managed by either the Widget (AutoRouter.declarative) or Router", I[8], 834, 7, "!managedByWidget");
        for (let i = 0; i < routes[$length]; i = i + 1) {
          let route = routes[$_get](i);
          if (yield this[_canNavigate](route, onFailure, {pendingRoutes: (t6 = routes[$toList](), (() => {
              t6[$removeAt](i);
              return t6;
            })())})) {
            if (i !== routes[$length] - 1) {
              this[_addEntry](T$.ObjectN(), route, {notify: false});
            } else {
              this[_updateSharedPathData]({queryParams: route.queryParams.rawMap, fragment: route.fragment, includeAncestors: updateAncestorsPathData});
              let completer = this[_addEntry](T, route, {notify: true});
              if (returnLastRouteCompleter) {
                return completer;
              }
            }
          } else {
            break;
          }
        }
        if (notify) {
          this.notifyListeners();
        }
        return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
      }).bind(this));
    }
    [_addEntry](T, route, opts) {
      let t6;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let data = this[_createRouteData](route, this.routeData);
      let page = (t6 = data, this.pageBuilder(t6));
      this[_pages][$add](page);
      if (notify) {
        this.notifyListeners();
      }
      return auto_route_page.AutoRoutePage$(T).as(page).popped;
    }
    [_canNavigate](route, onFailure, opts) {
      let pendingRoutes = opts && 'pendingRoutes' in opts ? opts.pendingRoutes : C[88] || CT.C88;
      return async.async(core.bool, (function* _canNavigate() {
        if (route.guards[$isEmpty]) {
          return true;
        }
        for (let guard of route.guards) {
          let completer = T$.CompleterOfbool().new();
          guard.onNavigation(new auto_route_guard.NavigationResolver.new(completer, route, {pendingRoutes: pendingRoutes}), this);
          if (!(yield completer.future)) {
            if (onFailure != null) {
              onFailure(new navigation_failure.RejectedByGuardFailure.new(route, guard));
            }
            return false;
          }
        }
        return true;
      }).bind(this));
    }
    navigateAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return this[_navigateAll](routes, {onFailure: onFailure});
    }
    [_navigateAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.void, (function* _navigateAll$() {
        let t6, t6$, t6$0;
        if (routes[$isNotEmpty]) {
          if (!this.managedByWidget) {
            yield this[_popUntilOrPushAll](routes, {onFailure: onFailure});
          }
          let mayUpdateRoute = routes[$last];
          let mayUpdateController = this[_childControllers][$_get](mayUpdateRoute.key);
          if (mayUpdateController != null) {
            let newChildren = (t6 = mayUpdateRoute.children, t6 == null ? C[88] || CT.C88 : t6);
            if (mayUpdateController.managedByWidget) {
              if (routing_controller.StackRouter.is(mayUpdateController)) {
                t6$ = mayUpdateController.onNavigate;
                t6$ == null ? null : t6$(newChildren, false);
              } else if (routing_controller.TabsRouter.is(mayUpdateController) && newChildren[$isNotEmpty]) {
                t6$0 = mayUpdateController.onNavigate;
                t6$0 == null ? null : t6$0(newChildren[$last], false);
              }
            }
            return mayUpdateController[_navigateAll](newChildren, {onFailure: onFailure});
          }
        } else if (!this.managedByWidget) {
          this[_reset]();
        }
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }).bind(this));
    }
    [_reset]() {
      this[_pages][$clear]();
      this[_childControllers][$clear]();
    }
    pushAndPopUntil(T, route, opts) {
      let predicate = opts && 'predicate' in opts ? opts.predicate : null;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.popUntil(predicate);
      return scope[_push](T, route, {onFailure: onFailure});
    }
    replaceNamed(T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.StackRouter, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        scope.router.removeLast();
        return scope.router[_pushAllGuarded](T, scope.matches, {onFailure: onFailure});
      }
      return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
    }
    pushNamed(T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.StackRouter, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        return scope.router[_pushAllGuarded](T, scope.matches, {onFailure: onFailure});
      }
      return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
    }
    popUntilRouteWithName(name) {
      this.popUntil(routes.ModalRoute.withName(name));
    }
    get hasEntries() {
      return this[_pages][$isNotEmpty];
    }
  };
  (routing_controller.StackRouter.new = function(opts) {
    let t6;
    let key = opts && 'key' in opts ? opts.key : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let initialPreMatchedRoutes = opts && 'initialPreMatchedRoutes' in opts ? opts.initialPreMatchedRoutes : null;
    this[key$] = key;
    this[onNavigate$0] = onNavigate;
    this[initialPreMatchedRoutes$] = initialPreMatchedRoutes;
    this[_navigatorKey] = (t6 = navigatorKey, t6 == null ? T$.GlobalKeyOfNavigatorState().new() : t6);
    this[_parent] = parent;
    routing_controller.StackRouter.__proto__.new.call(this);
    if (parent != null) {
      this.addListener(dart.bind(this.root, 'notifyListeners'));
    }
  }).prototype = routing_controller.StackRouter.prototype;
  dart.addTypeTests(routing_controller.StackRouter);
  dart.addTypeCaches(routing_controller.StackRouter);
  dart.setMethodSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getMethods(routing_controller.StackRouter.__proto__),
    [_updateSharedPathData]: dart.fnType(dart.void, [], {fragment: core.String, includeAncestors: core.bool, queryParams: core.Map$(core.String, dart.dynamic)}, {}),
    pop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    popForced: dart.gFnType(T => [dart.void, [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    removeLast: dart.fnType(core.bool, []),
    removeRoute: dart.fnType(dart.void, [routing_controller.RouteData], {notify: core.bool}, {}),
    [_removeLast]: dart.fnType(core.bool, [], {notify: core.bool}, {}),
    push: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    [_findStackScope]: dart.fnType(routing_controller.StackRouter, [page_route_info.PageRouteInfo]),
    [_popUntilOrPushAll]: dart.fnType(async.Future, [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_push]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    replace: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    pushAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    popAndPushAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.dynamic}, {}),
    replaceAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    popUntilRoot: dart.fnType(dart.void, []),
    popAndPush: dart.gFnType((T, TO) => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure])), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    removeUntil: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])]),
    popUntil: dart.fnType(dart.void, [dart.fnType(core.bool, [navigator$.Route])]),
    [_removeUntil]: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])], {notify: core.bool}, {}),
    removeWhere: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])]),
    updateDeclarativeRoutes: dart.fnType(dart.void, [core.List$(page_route_info.PageRouteInfo)]),
    [_pushAll]: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_pushAllGuarded]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.List$(route_match.RouteMatch)], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure])), returnLastRouteCompleter: core.bool, updateAncestorsPathData: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [_addEntry]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [route_match.RouteMatch], {notify: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [_canNavigate]: dart.fnType(async.Future$(core.bool), [route_match.RouteMatch, dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))], {pendingRoutes: core.List$(route_match.RouteMatch)}, {}),
    navigateAll: dart.fnType(async.Future$(dart.void), [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_navigateAll]: dart.fnType(async.Future$(dart.void), [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_reset]: dart.fnType(dart.void, []),
    pushAndPopUntil: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {predicate: dart.fnType(core.bool, [navigator$.Route])}], T => [dart.nullable(core.Object)]),
    replaceNamed: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    pushNamed: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    popUntilRouteWithName: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getGetters(routing_controller.StackRouter.__proto__),
    navigatorKey: framework.GlobalKey$(navigator$.NavigatorState),
    currentSegments: core.List$(route_match.RouteMatch),
    canPopSelfOrChildren: core.bool,
    current: routing_controller.RouteData,
    currentChild: dart.nullable(routing_controller.RouteData),
    topMost: routing_controller.RoutingController,
    stack: core.List$(auto_route_page.AutoRoutePage),
    hasEntries: core.bool
  }));
  dart.setLibraryUri(routing_controller.StackRouter, I[9]);
  dart.setFieldSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getFields(routing_controller.StackRouter.__proto__),
    [_parent$]: dart.finalFieldType(dart.nullable(routing_controller.RoutingController)),
    key: dart.finalFieldType(key.LocalKey),
    [_navigatorKey]: dart.finalFieldType(framework.GlobalKey$(navigator$.NavigatorState)),
    initialPreMatchedRoutes: dart.finalFieldType(dart.nullable(core.List$(route_match.RouteMatch))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(route_match.RouteMatch), core.bool])))
  }));
  auto_router_delegate.RootStackRouter = class RootStackRouter extends routing_controller.StackRouter {
    get routeData() {
      return new routing_controller.RouteData.new({router: this, route: C[128] || CT.C128});
    }
    get managedByWidget() {
      return this[_managedByWidget];
    }
    get pageBuilder() {
      return dart.bind(this, _pageBuilder);
    }
    delegate(opts) {
      let t6;
      let initialRoutes = opts && 'initialRoutes' in opts ? opts.initialRoutes : null;
      let initialDeepLink = opts && 'initialDeepLink' in opts ? opts.initialDeepLink : null;
      let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
      let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
      t6 = this[_lazyRootDelegate];
      return t6 == null ? this[_lazyRootDelegate] = new auto_router_delegate.AutoRouterDelegate.new(this, {initialDeepLink: initialDeepLink, initialRoutes: initialRoutes, navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers, placeholder: placeholder}) : t6;
    }
    defaultRouteParser(opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      return new route_information_parser.DefaultRouteParser.new(this.matcher, {includePrefixMatches: includePrefixMatches});
    }
    [_pageBuilder](data) {
      let builder = this.pagesMap[$_get](data.name);
      if (!(builder != null)) dart.assertFailed(null, I[7], 63, 12, "builder != null");
      return auto_route_page.AutoRoutePage.as(dart.nullCheck(builder)(data));
    }
    get matcher() {
      return new route_matcher.RouteMatcher.new(this.routeCollection);
    }
    get routeCollection() {
      return route_matcher.RouteCollection.from(this.routes);
    }
  };
  (auto_router_delegate.RootStackRouter.new = function(navigatorKey = null) {
    this[_managedByWidget] = false;
    this[_lazyRootDelegate] = null;
    auto_router_delegate.RootStackRouter.__proto__.new.call(this, {key: C[127] || CT.C127, navigatorKey: navigatorKey});
    ;
  }).prototype = auto_router_delegate.RootStackRouter.prototype;
  dart.addTypeTests(auto_router_delegate.RootStackRouter);
  dart.addTypeCaches(auto_router_delegate.RootStackRouter);
  dart.setMethodSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getMethods(auto_router_delegate.RootStackRouter.__proto__),
    delegate: dart.fnType(auto_router_delegate.AutoRouterDelegate, [], {initialDeepLink: dart.nullable(core.String), initialRoutes: dart.nullable(core.List$(page_route_info.PageRouteInfo)), navRestorationScopeId: dart.nullable(core.String), navigatorObservers: dart.fnType(core.List$(navigator$.NavigatorObserver), []), placeholder: dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))}, {}),
    defaultRouteParser: dart.fnType(route_information_parser.DefaultRouteParser, [], {includePrefixMatches: core.bool}, {}),
    [_pageBuilder]: dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData])
  }));
  dart.setGetterSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getGetters(auto_router_delegate.RootStackRouter.__proto__),
    routeData: routing_controller.RouteData,
    managedByWidget: core.bool,
    pageBuilder: dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData]),
    matcher: route_matcher.RouteMatcher,
    routeCollection: route_matcher.RouteCollection
  }));
  dart.setLibraryUri(auto_router_delegate.RootStackRouter, I[6]);
  dart.setFieldSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getFields(auto_router_delegate.RootStackRouter.__proto__),
    [_managedByWidget]: dart.fieldType(core.bool),
    [_lazyRootDelegate]: dart.fieldType(dart.nullable(auto_router_delegate.AutoRouterDelegate))
  }));
  var router$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.router");
  var navRestorationScopeId$0 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.navRestorationScopeId");
  var placeholder$0 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.placeholder");
  var navigatorObservers$3 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.navigatorObservers");
  var didPop$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.didPop");
  var declarativeRoutesBuilder$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.declarativeRoutesBuilder");
  auto_route_navigator.AutoRouteNavigator = class AutoRouteNavigator extends framework.StatefulWidget {
    get router() {
      return this[router$];
    }
    set router(value) {
      super.router = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$0];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get placeholder() {
      return this[placeholder$0];
    }
    set placeholder(value) {
      super.placeholder = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$3];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get didPop() {
      return this[didPop$];
    }
    set didPop(value) {
      super.didPop = value;
    }
    get declarativeRoutesBuilder() {
      return this[declarativeRoutesBuilder$];
    }
    set declarativeRoutesBuilder(value) {
      super.declarativeRoutesBuilder = value;
    }
    createState() {
      return new auto_route_navigator._AutoRouteNavigatorState.new();
    }
  };
  (auto_route_navigator.AutoRouteNavigator.new = function(opts) {
    let router = opts && 'router' in opts ? opts.router : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let didPop = opts && 'didPop' in opts ? opts.didPop : null;
    let declarativeRoutesBuilder = opts && 'declarativeRoutesBuilder' in opts ? opts.declarativeRoutesBuilder : null;
    let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[router$] = router;
    this[navigatorObservers$3] = navigatorObservers;
    this[navRestorationScopeId$0] = navRestorationScopeId;
    this[didPop$] = didPop;
    this[declarativeRoutesBuilder$] = declarativeRoutesBuilder;
    this[placeholder$0] = placeholder;
    auto_route_navigator.AutoRouteNavigator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_route_navigator.AutoRouteNavigator.prototype;
  dart.addTypeTests(auto_route_navigator.AutoRouteNavigator);
  dart.addTypeCaches(auto_route_navigator.AutoRouteNavigator);
  dart.setMethodSignature(auto_route_navigator.AutoRouteNavigator, () => ({
    __proto__: dart.getMethods(auto_route_navigator.AutoRouteNavigator.__proto__),
    createState: dart.fnType(auto_route_navigator._AutoRouteNavigatorState, [])
  }));
  dart.setLibraryUri(auto_route_navigator.AutoRouteNavigator, I[10]);
  dart.setFieldSignature(auto_route_navigator.AutoRouteNavigator, () => ({
    __proto__: dart.getFields(auto_route_navigator.AutoRouteNavigator.__proto__),
    router: dart.finalFieldType(routing_controller.StackRouter),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    placeholder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
    navigatorObservers: dart.finalFieldType(core.List$(navigator$.NavigatorObserver)),
    didPop: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    declarativeRoutesBuilder: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])))
  }));
  var _routesSnapshot = dart.privateName(auto_route_navigator, "_routesSnapshot");
  var _updateDeclarativeRoutes = dart.privateName(auto_route_navigator, "_updateDeclarativeRoutes");
  auto_route_navigator._AutoRouteNavigatorState = class _AutoRouteNavigatorState extends framework.State$(auto_route_navigator.AutoRouteNavigator) {
    didChangeDependencies() {
      super.didChangeDependencies();
      if (this.widget.declarativeRoutesBuilder != null && this[_routesSnapshot] == null) {
        this[_updateDeclarativeRoutes]();
      }
    }
    [_updateDeclarativeRoutes]() {
      let t8;
      let shouldNotify = false;
      let delegate = auto_router_delegate.AutoRouterDelegate.of(this.context);
      let newRoutes = dart.nullCheck(this.widget.declarativeRoutesBuilder)(this.context);
      if (!new equality.ListEquality.new().equals(newRoutes, this[_routesSnapshot])) {
        shouldNotify = true;
        this[_routesSnapshot] = newRoutes;
        this.widget.router.updateDeclarativeRoutes(newRoutes);
      } else if (!new equality.ListEquality.new().equals(delegate.urlState.segments, delegate.controller.currentSegments)) {
        shouldNotify = true;
      }
      if (shouldNotify) {
        t8 = binding.WidgetsBinding.instance;
        t8 == null ? null : t8.addPostFrameCallback(dart.fn(_ => {
          delegate.notifyUrlChanged();
        }, T$.DurationTovoid()));
      }
    }
    didUpdateWidget(oldWidget) {
      auto_route_navigator.AutoRouteNavigator.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.declarativeRoutesBuilder != null) {
        this[_updateDeclarativeRoutes]();
      }
    }
    build(context) {
      let t8;
      let navigator = new navigator$.Navigator.new({key: this.widget.router.navigatorKey, observers: this.widget.navigatorObservers, restorationScopeId: (t8 = this.widget.navRestorationScopeId, t8 == null ? this.widget.router.routeData.name : t8), pages: this.widget.router.hasEntries ? this.widget.router.stack : T$.JSArrayOfPage().of([new auto_route_navigator._PlaceHolderPage.new(this.widget.placeholder)]), transitionDelegate: new auto_route_navigator._CustomTransitionDelegate.new(), onPopPage: dart.fn((route, result) => {
          let t8;
          if (!route.didPop(result)) {
            return false;
          }
          if (auto_route_page.AutoRoutePage.is(route.settings)) {
            let routeData = auto_route_page.AutoRoutePage.as(route.settings).routeData;
            this.widget.router.removeRoute(routeData);
            t8 = this.widget.didPop;
            t8 == null ? null : t8(routeData.route, result);
          }
          return true;
        }, T$.RouteAnddynamicTobool()), $creationLocationd_0dea112b090073317d4: C[135] || CT.C135});
      if (!this.widget.router.isRoot) {
        return new will_pop_scope.WillPopScope.new({child: navigator, onWillPop: this.widget.router.canPopSelfOrChildren ? dart.fn(() => new (T$.SynchronousFutureOfbool()).new(true), T$.VoidToSynchronousFutureOfbool()) : null, $creationLocationd_0dea112b090073317d4: C[143] || CT.C143});
      }
      return navigator;
    }
  };
  (auto_route_navigator._AutoRouteNavigatorState.new = function() {
    this[_routesSnapshot] = null;
    auto_route_navigator._AutoRouteNavigatorState.__proto__.new.call(this);
    ;
  }).prototype = auto_route_navigator._AutoRouteNavigatorState.prototype;
  dart.addTypeTests(auto_route_navigator._AutoRouteNavigatorState);
  dart.addTypeCaches(auto_route_navigator._AutoRouteNavigatorState);
  dart.setMethodSignature(auto_route_navigator._AutoRouteNavigatorState, () => ({
    __proto__: dart.getMethods(auto_route_navigator._AutoRouteNavigatorState.__proto__),
    [_updateDeclarativeRoutes]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_route_navigator._AutoRouteNavigatorState, I[10]);
  dart.setFieldSignature(auto_route_navigator._AutoRouteNavigatorState, () => ({
    __proto__: dart.getFields(auto_route_navigator._AutoRouteNavigatorState.__proto__),
    [_routesSnapshot]: dart.fieldType(dart.nullable(core.List$(page_route_info.PageRouteInfo)))
  }));
  var placeholder$1 = dart.privateName(auto_route_navigator, "_PlaceHolderPage.placeholder");
  auto_route_navigator._PlaceHolderPage = class _PlaceHolderPage extends navigator$.Page {
    get placeholder() {
      return this[placeholder$1];
    }
    set placeholder(value) {
      super.placeholder = value;
    }
    createRoute(context) {
      return new pages.PageRouteBuilder.new({settings: this, pageBuilder: dart.fn((context, __, ___) => this.placeholder != null ? dart.nullCheck(this.placeholder)(context) : new container.Container.new({color: theme.Theme.of(context).scaffoldBackgroundColor, $creationLocationd_0dea112b090073317d4: C[148] || CT.C148}), T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget())});
    }
  };
  (auto_route_navigator._PlaceHolderPage.new = function(placeholder) {
    this[placeholder$1] = placeholder;
    auto_route_navigator._PlaceHolderPage.__proto__.new.call(this, {key: C[147] || CT.C147, name: "_placeHolder_"});
    ;
  }).prototype = auto_route_navigator._PlaceHolderPage.prototype;
  dart.addTypeTests(auto_route_navigator._PlaceHolderPage);
  dart.addTypeCaches(auto_route_navigator._PlaceHolderPage);
  dart.setMethodSignature(auto_route_navigator._PlaceHolderPage, () => ({
    __proto__: dart.getMethods(auto_route_navigator._PlaceHolderPage.__proto__),
    createRoute: dart.fnType(navigator$.Route, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_route_navigator._PlaceHolderPage, I[10]);
  dart.setFieldSignature(auto_route_navigator._PlaceHolderPage, () => ({
    __proto__: dart.getFields(auto_route_navigator._PlaceHolderPage.__proto__),
    placeholder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext])))
  }));
  const _is__CustomTransitionDelegate_default = Symbol('_is__CustomTransitionDelegate_default');
  auto_route_navigator._CustomTransitionDelegate$ = dart.generic(T => {
    class _CustomTransitionDelegate extends navigator$.TransitionDelegate$(T) {
      resolve(opts) {
        let newPageRouteHistory = opts && 'newPageRouteHistory' in opts ? opts.newPageRouteHistory : null;
        let locationToExitingPageRoute = opts && 'locationToExitingPageRoute' in opts ? opts.locationToExitingPageRoute : null;
        let pageRouteToPagelessRoutes = opts && 'pageRouteToPagelessRoutes' in opts ? opts.pageRouteToPagelessRoutes : null;
        let results = T$.JSArrayOfRouteTransitionRecord().of([]);
        function handleExitingRoute(location, isLast) {
          let exitingPageRoute = locationToExitingPageRoute[$_get](location);
          if (exitingPageRoute == null) return;
          if (exitingPageRoute.isWaitingForExitingDecision) {
            let hasPagelessRoute = pageRouteToPagelessRoutes[$containsKey](exitingPageRoute);
            let isLastExitingPageRoute = isLast && !locationToExitingPageRoute[$containsKey](exitingPageRoute);
            if (isLastExitingPageRoute && !hasPagelessRoute) {
              exitingPageRoute.markForPop(exitingPageRoute.route.currentResult);
            } else {
              exitingPageRoute.markForComplete(exitingPageRoute.route.currentResult);
            }
            if (hasPagelessRoute) {
              let pagelessRoutes = dart.nullCheck(pageRouteToPagelessRoutes[$_get](exitingPageRoute));
              for (let pagelessRoute of pagelessRoutes) {
                if (pagelessRoute.isWaitingForExitingDecision) {
                  if (isLastExitingPageRoute && pagelessRoute[$_equals](pagelessRoutes[$last])) {
                    pagelessRoute.markForPop(pagelessRoute.route.currentResult);
                  } else {
                    pagelessRoute.markForComplete(pagelessRoute.route.currentResult);
                  }
                }
              }
            }
          }
          results[$add](exitingPageRoute);
          handleExitingRoute(exitingPageRoute, isLast);
        }
        dart.fn(handleExitingRoute, T$.RouteTransitionRecordNAndboolTovoid());
        handleExitingRoute(null, newPageRouteHistory[$isEmpty]);
        for (let pageRoute of newPageRouteHistory) {
          let isLastIteration = newPageRouteHistory[$last][$_equals](pageRoute);
          let firstPageIsPlaceHolder = results[$isNotEmpty] && auto_route_navigator._PlaceHolderPage.is(results[$first].route.settings);
          if (pageRoute.isWaitingForEnteringDecision) {
            if (!locationToExitingPageRoute[$containsKey](pageRoute) && isLastIteration && !firstPageIsPlaceHolder) {
              pageRoute.markForPush();
            } else {
              pageRoute.markForAdd();
            }
          }
          results[$add](pageRoute);
          handleExitingRoute(pageRoute, isLastIteration);
        }
        return results;
      }
    }
    (_CustomTransitionDelegate.new = function() {
      _CustomTransitionDelegate.__proto__.new.call(this);
      ;
    }).prototype = _CustomTransitionDelegate.prototype;
    dart.addTypeTests(_CustomTransitionDelegate);
    _CustomTransitionDelegate.prototype[_is__CustomTransitionDelegate_default] = true;
    dart.addTypeCaches(_CustomTransitionDelegate);
    dart.setMethodSignature(_CustomTransitionDelegate, () => ({
      __proto__: dart.getMethods(_CustomTransitionDelegate.__proto__),
      resolve: dart.fnType(core.Iterable$(navigator$.RouteTransitionRecord), [], {}, {locationToExitingPageRoute: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), navigator$.RouteTransitionRecord), newPageRouteHistory: core.List$(navigator$.RouteTransitionRecord), pageRouteToPagelessRoutes: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), core.List$(navigator$.RouteTransitionRecord))})
    }));
    dart.setLibraryUri(_CustomTransitionDelegate, I[10]);
    return _CustomTransitionDelegate;
  });
  auto_route_navigator._CustomTransitionDelegate = auto_route_navigator._CustomTransitionDelegate$();
  dart.addTypeTests(auto_route_navigator._CustomTransitionDelegate, _is__CustomTransitionDelegate_default);
  var controller$0 = dart.privateName(controller_scope, "RouterScope.controller");
  var inheritableObserversBuilder$ = dart.privateName(controller_scope, "RouterScope.inheritableObserversBuilder");
  var segmentsHash$ = dart.privateName(controller_scope, "RouterScope.segmentsHash");
  var navigatorObservers$4 = dart.privateName(controller_scope, "RouterScope.navigatorObservers");
  controller_scope.RouterScope = class RouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$0];
    }
    set controller(value) {
      super.controller = value;
    }
    get inheritableObserversBuilder() {
      return this[inheritableObserversBuilder$];
    }
    set inheritableObserversBuilder(value) {
      super.inheritableObserversBuilder = value;
    }
    get segmentsHash() {
      return this[segmentsHash$];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$4];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    static of(context) {
      let scope = context.dependOnInheritedWidgetOfExactType(controller_scope.RouterScope);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("RouterScope operation requested with a context that does not include a RouterScope.\n" + "The context used to retrieve the Router must be that of a widget that " + "is a descendant of a RouterScope widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[11], 21, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'RouterScope operation requested with a context that does not include a RouterScope.\\n'\n            'The context used to retrieve the Router must be that of a widget that '\n            'is a descendant of a RouterScope widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope);
    }
    firstObserverOfType(T) {
      let typedObservers = this.navigatorObservers[$whereType](T);
      if (typedObservers[$isNotEmpty]) {
        return typedObservers[$first];
      } else {
        return null;
      }
    }
    updateShouldNotify(oldWidget) {
      controller_scope.RouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.RouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let inheritableObserversBuilder = opts && 'inheritableObserversBuilder' in opts ? opts.inheritableObserversBuilder : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$0] = controller;
    this[navigatorObservers$4] = navigatorObservers;
    this[inheritableObserversBuilder$] = inheritableObserversBuilder;
    this[segmentsHash$] = segmentsHash;
    controller_scope.RouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.RouterScope.prototype;
  dart.addTypeTests(controller_scope.RouterScope);
  dart.addTypeCaches(controller_scope.RouterScope);
  dart.setMethodSignature(controller_scope.RouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.RouterScope.__proto__),
    firstObserverOfType: dart.gFnType(T => [dart.nullable(T), []], T => [navigator$.NavigatorObserver]),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.RouterScope, I[12]);
  dart.setFieldSignature(controller_scope.RouterScope, () => ({
    __proto__: dart.getFields(controller_scope.RouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.RoutingController),
    inheritableObserversBuilder: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    segmentsHash: dart.finalFieldType(core.int),
    navigatorObservers: dart.finalFieldType(core.List$(navigator$.NavigatorObserver))
  }));
  var controller$1 = dart.privateName(controller_scope, "StackRouterScope.controller");
  var segmentsHash$0 = dart.privateName(controller_scope, "StackRouterScope.segmentsHash");
  controller_scope.StackRouterScope = class StackRouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$1];
    }
    set controller(value) {
      super.controller = value;
    }
    get segmentsHash() {
      return this[segmentsHash$0];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    static of(context) {
      return context.dependOnInheritedWidgetOfExactType(controller_scope.StackRouterScope);
    }
    updateShouldNotify(oldWidget) {
      controller_scope.StackRouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.StackRouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$1] = controller;
    this[segmentsHash$0] = segmentsHash;
    controller_scope.StackRouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.StackRouterScope.prototype;
  dart.addTypeTests(controller_scope.StackRouterScope);
  dart.addTypeCaches(controller_scope.StackRouterScope);
  dart.setMethodSignature(controller_scope.StackRouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.StackRouterScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.StackRouterScope, I[12]);
  dart.setFieldSignature(controller_scope.StackRouterScope, () => ({
    __proto__: dart.getFields(controller_scope.StackRouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.StackRouter),
    segmentsHash: dart.finalFieldType(core.int)
  }));
  var controller$2 = dart.privateName(controller_scope, "TabsRouterScope.controller");
  var segmentsHash$1 = dart.privateName(controller_scope, "TabsRouterScope.segmentsHash");
  controller_scope.TabsRouterScope = class TabsRouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$2];
    }
    set controller(value) {
      super.controller = value;
    }
    get segmentsHash() {
      return this[segmentsHash$1];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    static of(context) {
      return context.dependOnInheritedWidgetOfExactType(controller_scope.TabsRouterScope);
    }
    updateShouldNotify(oldWidget) {
      controller_scope.TabsRouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.TabsRouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[segmentsHash$1] = segmentsHash;
    this[controller$2] = controller;
    controller_scope.TabsRouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.TabsRouterScope.prototype;
  dart.addTypeTests(controller_scope.TabsRouterScope);
  dart.addTypeCaches(controller_scope.TabsRouterScope);
  dart.setMethodSignature(controller_scope.TabsRouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.TabsRouterScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.TabsRouterScope, I[12]);
  dart.setFieldSignature(controller_scope.TabsRouterScope, () => ({
    __proto__: dart.getFields(controller_scope.TabsRouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.TabsRouter),
    segmentsHash: dart.finalFieldType(core.int)
  }));
  var navigatorObservers$5 = dart.privateName(auto_router, "AutoRouter.navigatorObservers");
  var builder$1 = dart.privateName(auto_router, "AutoRouter.builder");
  var navRestorationScopeId$1 = dart.privateName(auto_router, "AutoRouter.navRestorationScopeId");
  var inheritNavigatorObservers$1 = dart.privateName(auto_router, "AutoRouter.inheritNavigatorObservers");
  var navigatorKey$ = dart.privateName(auto_router, "AutoRouter.navigatorKey");
  auto_router.AutoRouter = class AutoRouter extends framework.StatefulWidget {
    get navigatorObservers() {
      return this[navigatorObservers$5];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$1];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$1];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get navigatorKey() {
      return this[navigatorKey$];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    static declarative(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
      let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
      let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
      return new auto_router._DeclarativeAutoRouter.new({onPopRoute: onPopRoute, navigatorKey: navigatorKey, navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers, onNavigate: onNavigate, routes: routes, $creationLocationd_0dea112b090073317d4: C[151] || CT.C151});
    }
    createState() {
      return new auto_router.AutoRouterState.new();
    }
    static of(context) {
      let scope = controller_scope.StackRouterScope.of(context);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("AutoRouter operation requested with a context that does not include an AutoRouter.\n" + "The context used to retrieve the Router must be that of a widget that " + "is a descendant of an AutoRouter widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[13], 53, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'AutoRouter operation requested with a context that does not include an AutoRouter.\\n'\n            'The context used to retrieve the Router must be that of a widget that '\n            'is a descendant of an AutoRouter widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope).controller;
    }
    static innerRouterOf(context, routeName) {
      return auto_router.AutoRouter.of(context).innerRouterOf(routing_controller.StackRouter, routeName);
    }
  };
  (auto_router.AutoRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[navigatorObservers$5] = navigatorObservers;
    this[builder$1] = builder;
    this[navRestorationScopeId$1] = navRestorationScopeId;
    this[navigatorKey$] = navigatorKey;
    this[inheritNavigatorObservers$1] = inheritNavigatorObservers;
    auto_router.AutoRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.AutoRouter.prototype;
  dart.addTypeTests(auto_router.AutoRouter);
  dart.addTypeCaches(auto_router.AutoRouter);
  dart.setMethodSignature(auto_router.AutoRouter, () => ({
    __proto__: dart.getMethods(auto_router.AutoRouter.__proto__),
    createState: dart.fnType(auto_router.AutoRouterState, [])
  }));
  dart.setLibraryUri(auto_router.AutoRouter, I[14]);
  dart.setFieldSignature(auto_router.AutoRouter, () => ({
    __proto__: dart.getFields(auto_router.AutoRouter.__proto__),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget]))),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator$.NavigatorState)))
  }));
  var _controller$ = dart.privateName(auto_router, "_controller");
  var __AutoRouterState__navigatorObservers = dart.privateName(auto_router, "_#AutoRouterState#_navigatorObservers");
  var __AutoRouterState__inheritableObserversBuilder = dart.privateName(auto_router, "_#AutoRouterState#_inheritableObserversBuilder");
  var __AutoRouterState__parentController = dart.privateName(auto_router, "_#AutoRouterState#_parentController");
  var _navigatorObservers$0 = dart.privateName(auto_router, "_navigatorObservers");
  var _inheritableObserversBuilder$ = dart.privateName(auto_router, "_inheritableObserversBuilder");
  var _parentController$ = dart.privateName(auto_router, "_parentController");
  var _rebuildListener$ = dart.privateName(auto_router, "_rebuildListener");
  auto_router.AutoRouterState = class AutoRouterState extends framework.State$(auto_router.AutoRouter) {
    get controller() {
      return this[_controller$];
    }
    get [_navigatorObservers$0]() {
      let t8;
      t8 = this[__AutoRouterState__navigatorObservers];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t8;
    }
    set [_navigatorObservers$0](t8) {
      this[__AutoRouterState__navigatorObservers] = t8;
    }
    get [_inheritableObserversBuilder$]() {
      let t9;
      t9 = this[__AutoRouterState__inheritableObserversBuilder];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t9;
    }
    set [_inheritableObserversBuilder$](t9) {
      this[__AutoRouterState__inheritableObserversBuilder] = t9;
    }
    get [_parentController$]() {
      let t10;
      t10 = this[__AutoRouterState__parentController];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t10;
    }
    set [_parentController$](t10) {
      this[__AutoRouterState__parentController] = t10;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentData = route_data_scope.RouteDataScope.of(this.context);
      let parentScope = controller_scope.RouterScope.of(this.context);
      if (this[_controller$] == null) {
        this[_inheritableObserversBuilder$] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers$0] = this[_inheritableObserversBuilder$]();
        this[_parentController$] = parentScope.controller;
        this[_controller$] = new routing_controller.NestedStackRouter.new({parent: this[_parentController$], key: parentData.key, routeData: parentData, navigatorKey: this.widget.navigatorKey, routeCollection: this[_parentController$].routeCollection.subCollectionOf(parentData.name), pageBuilder: this[_parentController$].pageBuilder, preMatchedRoutes: parentData.preMatchedPendingRoutes});
        this[_parentController$].attachChildController(dart.nullCheck(this[_controller$]));
        dart.nullCheck(this[_controller$]).addListener(dart.bind(this, _rebuildListener$));
      }
    }
    [_rebuildListener$]() {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    build(context) {
      if (!(this[_controller$] != null)) dart.assertFailed(null, I[13], 120, 12, "_controller != null");
      let navigator = new auto_route_navigator.AutoRouteNavigator.new({router: dart.nullCheck(this[_controller$]), navRestorationScopeId: this.widget.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$0], $creationLocationd_0dea112b090073317d4: C[159] || CT.C159});
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller$]), inheritableObserversBuilder: this[_inheritableObserversBuilder$], navigatorObservers: this[_navigatorObservers$0], segmentsHash: segmentsHash, child: new controller_scope.StackRouterScope.new({controller: dart.nullCheck(this[_controller$]), segmentsHash: segmentsHash, child: this.widget.builder == null ? navigator : new basic.Builder.new({builder: dart.fn(ctx => dart.nullCheck(this.widget.builder)(ctx, navigator), T$.BuildContextToWidget()), $creationLocationd_0dea112b090073317d4: C[164] || CT.C164}), $creationLocationd_0dea112b090073317d4: C[167] || CT.C167}), $creationLocationd_0dea112b090073317d4: C[171] || CT.C171});
    }
    dispose() {
      super.dispose();
      if (this[_controller$] != null) {
        dart.nullCheck(this[_controller$]).removeListener(dart.bind(this, _rebuildListener$));
        dart.nullCheck(this[_controller$]).dispose();
        this[_parentController$].removeChildController(dart.nullCheck(this[_controller$]));
        this[_controller$] = null;
      }
    }
  };
  (auto_router.AutoRouterState.new = function() {
    this[_controller$] = null;
    this[__AutoRouterState__navigatorObservers] = null;
    this[__AutoRouterState__inheritableObserversBuilder] = null;
    this[__AutoRouterState__parentController] = null;
    auto_router.AutoRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_router.AutoRouterState.prototype;
  dart.addTypeTests(auto_router.AutoRouterState);
  dart.addTypeCaches(auto_router.AutoRouterState);
  dart.setMethodSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getMethods(auto_router.AutoRouterState.__proto__),
    [_rebuildListener$]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getGetters(auto_router.AutoRouterState.__proto__),
    controller: dart.nullable(routing_controller.StackRouter),
    [_navigatorObservers$0]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator$.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setSetterSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getSetters(auto_router.AutoRouterState.__proto__),
    [_navigatorObservers$0]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator$.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setLibraryUri(auto_router.AutoRouterState, I[14]);
  dart.setFieldSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getFields(auto_router.AutoRouterState.__proto__),
    [_controller$]: dart.fieldType(dart.nullable(routing_controller.StackRouter)),
    [__AutoRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator$.NavigatorObserver))),
    [__AutoRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator$.NavigatorObserver), []))),
    [__AutoRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController))
  }));
  var routes$1 = dart.privateName(auto_router, "_DeclarativeAutoRouter.routes");
  var onPopRoute$ = dart.privateName(auto_router, "_DeclarativeAutoRouter.onPopRoute");
  var navigatorObservers$6 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navigatorObservers");
  var navRestorationScopeId$2 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navRestorationScopeId");
  var inheritNavigatorObservers$2 = dart.privateName(auto_router, "_DeclarativeAutoRouter.inheritNavigatorObservers");
  var navigatorKey$0 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navigatorKey");
  var onNavigate$1 = dart.privateName(auto_router, "_DeclarativeAutoRouter.onNavigate");
  auto_router._DeclarativeAutoRouter = class _DeclarativeAutoRouter extends framework.StatefulWidget {
    get routes() {
      return this[routes$1];
    }
    set routes(value) {
      super.routes = value;
    }
    get onPopRoute() {
      return this[onPopRoute$];
    }
    set onPopRoute(value) {
      super.onPopRoute = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$6];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$2];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$2];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get navigatorKey() {
      return this[navigatorKey$0];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    get onNavigate() {
      return this[onNavigate$1];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    createState() {
      return new auto_router._DeclarativeAutoRouterState.new();
    }
  };
  (auto_router._DeclarativeAutoRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$1] = routes;
    this[navigatorObservers$6] = navigatorObservers;
    this[onPopRoute$] = onPopRoute;
    this[navigatorKey$0] = navigatorKey;
    this[navRestorationScopeId$2] = navRestorationScopeId;
    this[inheritNavigatorObservers$2] = inheritNavigatorObservers;
    this[onNavigate$1] = onNavigate;
    auto_router._DeclarativeAutoRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router._DeclarativeAutoRouter.prototype;
  dart.addTypeTests(auto_router._DeclarativeAutoRouter);
  dart.addTypeCaches(auto_router._DeclarativeAutoRouter);
  dart.setMethodSignature(auto_router._DeclarativeAutoRouter, () => ({
    __proto__: dart.getMethods(auto_router._DeclarativeAutoRouter.__proto__),
    createState: dart.fnType(auto_router._DeclarativeAutoRouterState, [])
  }));
  dart.setLibraryUri(auto_router._DeclarativeAutoRouter, I[14]);
  dart.setFieldSignature(auto_router._DeclarativeAutoRouter, () => ({
    __proto__: dart.getFields(auto_router._DeclarativeAutoRouter.__proto__),
    routes: dart.finalFieldType(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])),
    onPopRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator$.NavigatorObserver), [])),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator$.NavigatorState))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(route_match.RouteMatch), core.bool])))
  }));
  var ___DeclarativeAutoRouterState__heroController = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_heroController");
  var ___DeclarativeAutoRouterState__navigatorObservers = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_navigatorObservers");
  var ___DeclarativeAutoRouterState__inheritableObserversBuilder = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_inheritableObserversBuilder");
  var ___DeclarativeAutoRouterState__parentController = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_parentController");
  var _heroController = dart.privateName(auto_router, "_heroController");
  auto_router._DeclarativeAutoRouterState = class _DeclarativeAutoRouterState extends framework.State$(auto_router._DeclarativeAutoRouter) {
    get [_heroController]() {
      let t11;
      t11 = this[___DeclarativeAutoRouterState__heroController];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_heroController")) : t11;
    }
    set [_heroController](t11) {
      this[___DeclarativeAutoRouterState__heroController] = t11;
    }
    get controller() {
      return this[_controller$];
    }
    get [_navigatorObservers$0]() {
      let t12;
      t12 = this[___DeclarativeAutoRouterState__navigatorObservers];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t12;
    }
    set [_navigatorObservers$0](t12) {
      this[___DeclarativeAutoRouterState__navigatorObservers] = t12;
    }
    get [_inheritableObserversBuilder$]() {
      let t13;
      t13 = this[___DeclarativeAutoRouterState__inheritableObserversBuilder];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t13;
    }
    set [_inheritableObserversBuilder$](t13) {
      this[___DeclarativeAutoRouterState__inheritableObserversBuilder] = t13;
    }
    get [_parentController$]() {
      let t14;
      t14 = this[___DeclarativeAutoRouterState__parentController];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t14;
    }
    set [_parentController$](t14) {
      this[___DeclarativeAutoRouterState__parentController] = t14;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentData = route_data_scope.RouteDataScope.of(this.context);
      if (this[_controller$] == null) {
        this[_heroController] = new heroes.HeroController.new();
        let parentScope = controller_scope.RouterScope.of(this.context);
        this[_inheritableObserversBuilder$] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers$0] = this[_inheritableObserversBuilder$]();
        this[_parentController$] = parentScope.controller;
        this[_controller$] = new routing_controller.NestedStackRouter.new({parent: this[_parentController$], key: parentData.key, routeData: parentData, managedByWidget: true, onRoutes: this.widget.onNavigate, navigatorKey: this.widget.navigatorKey, preMatchedRoutes: parentData.preMatchedPendingRoutes, routeCollection: this[_parentController$].routeCollection.subCollectionOf(parentData.name), pageBuilder: this[_parentController$].pageBuilder});
        this[_parentController$].attachChildController(dart.nullCheck(this[_controller$]));
      }
    }
    dispose() {
      super.dispose();
      if (this[_controller$] != null) {
        dart.nullCheck(this[_controller$]).dispose();
        this[_parentController$].removeChildController(dart.nullCheck(this[_controller$]));
        this[_controller$] = null;
      }
    }
    build(context) {
      if (!(this[_controller$] != null)) dart.assertFailed(null, I[13], 238, 12, "_controller != null");
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller$]), inheritableObserversBuilder: this[_inheritableObserversBuilder$], navigatorObservers: this[_navigatorObservers$0], segmentsHash: segmentsHash, child: new navigator$.HeroControllerScope.new({controller: this[_heroController], child: new auto_route_navigator.AutoRouteNavigator.new({router: dart.nullCheck(this[_controller$]), declarativeRoutesBuilder: this.widget.routes, navRestorationScopeId: this.widget.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$0], didPop: this.widget.onPopRoute, $creationLocationd_0dea112b090073317d4: C[177] || CT.C177}), $creationLocationd_0dea112b090073317d4: C[184] || CT.C184}), $creationLocationd_0dea112b090073317d4: C[188] || CT.C188});
    }
  };
  (auto_router._DeclarativeAutoRouterState.new = function() {
    this[_controller$] = null;
    this[___DeclarativeAutoRouterState__heroController] = null;
    this[___DeclarativeAutoRouterState__navigatorObservers] = null;
    this[___DeclarativeAutoRouterState__inheritableObserversBuilder] = null;
    this[___DeclarativeAutoRouterState__parentController] = null;
    auto_router._DeclarativeAutoRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_router._DeclarativeAutoRouterState.prototype;
  dart.addTypeTests(auto_router._DeclarativeAutoRouterState);
  dart.addTypeCaches(auto_router._DeclarativeAutoRouterState);
  dart.setMethodSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getMethods(auto_router._DeclarativeAutoRouterState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getGetters(auto_router._DeclarativeAutoRouterState.__proto__),
    [_heroController]: heroes.HeroController,
    controller: dart.nullable(routing_controller.StackRouter),
    [_navigatorObservers$0]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator$.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setSetterSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getSetters(auto_router._DeclarativeAutoRouterState.__proto__),
    [_heroController]: heroes.HeroController,
    [_navigatorObservers$0]: core.List$(navigator$.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator$.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setLibraryUri(auto_router._DeclarativeAutoRouterState, I[14]);
  dart.setFieldSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getFields(auto_router._DeclarativeAutoRouterState.__proto__),
    [_controller$]: dart.fieldType(dart.nullable(routing_controller.StackRouter)),
    [___DeclarativeAutoRouterState__heroController]: dart.fieldType(dart.nullable(heroes.HeroController)),
    [___DeclarativeAutoRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator$.NavigatorObserver))),
    [___DeclarativeAutoRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator$.NavigatorObserver), []))),
    [___DeclarativeAutoRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController))
  }));
  auto_router.EmptyRouterPage = class EmptyRouterPage extends auto_router.AutoRouter {};
  (auto_router.EmptyRouterPage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    auto_router.EmptyRouterPage.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.EmptyRouterPage.prototype;
  dart.addTypeTests(auto_router.EmptyRouterPage);
  dart.addTypeCaches(auto_router.EmptyRouterPage);
  dart.setLibraryUri(auto_router.EmptyRouterPage, I[14]);
  auto_router.EmptyRouterScreen = class EmptyRouterScreen extends auto_router.AutoRouter {};
  (auto_router.EmptyRouterScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    auto_router.EmptyRouterScreen.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.EmptyRouterScreen.prototype;
  dart.addTypeTests(auto_router.EmptyRouterScreen);
  dart.addTypeCaches(auto_router.EmptyRouterScreen);
  dart.setLibraryUri(auto_router.EmptyRouterScreen, I[14]);
  auto_router_x['AutoRouterX|get#router'] = function AutoRouterX$124get$35router($this) {
    return auto_router.AutoRouter.of($this);
  };
  auto_router_x['AutoRouterX|pushRoute'] = function AutoRouterX$124pushRoute(T, $this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return auto_router_x['AutoRouterX|get#router']($this).push(T, route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#pushRoute'] = function AutoRouterX$124get$35pushRoute($this) {
    return dart.fn((T, route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|pushRoute'](T, $this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfTN());
  };
  auto_router_x['AutoRouterX|replaceRoute'] = function AutoRouterX$124replaceRoute(T, $this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return auto_router_x['AutoRouterX|get#router']($this).replace(T, route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#replaceRoute'] = function AutoRouterX$124get$35replaceRoute($this) {
    return dart.fn((T, route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|replaceRoute'](T, $this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfTN());
  };
  auto_router_x['AutoRouterX|popRoute'] = function AutoRouterX$124popRoute(T, $this, result = null) {
    return auto_router_x['AutoRouterX|get#router']($this).pop(T, result);
  };
  auto_router_x['AutoRouterX|get#popRoute'] = function AutoRouterX$124get$35popRoute($this) {
    return dart.fn((T, result = null) => auto_router_x['AutoRouterX|popRoute'](T, $this, result), T$.TNToFutureOfbool());
  };
  auto_router_x['AutoRouterX|navigateTo'] = function AutoRouterX$124navigateTo($this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return controller_scope.RouterScope.of($this).controller.navigate(route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#navigateTo'] = function AutoRouterX$124get$35navigateTo($this) {
    return dart.fn((route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|navigateTo']($this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfvoid());
  };
  auto_router_x['AutoRouterX|navigateNamedTo'] = function AutoRouterX$124navigateNamedTo($this, path, opts) {
    let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return controller_scope.RouterScope.of($this).controller.navigateNamed(path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#navigateNamedTo'] = function AutoRouterX$124get$35navigateNamedTo($this) {
    return dart.fn((path, opts) => {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|navigateNamedTo']($this, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
    }, T$.String__ToFutureOfvoid());
  };
  auto_router_x['AutoRouterX|get#tabsRouter'] = function AutoRouterX$124get$35tabsRouter($this) {
    return auto_tabs_router.AutoTabsRouter.of($this);
  };
  auto_router_x['AutoRouterX|get#topRoute'] = function AutoRouterX$124get$35topRoute($this) {
    return auto_router_x['AutoRouterX|get#router']($this).topRoute;
  };
  auto_router_x['AutoRouterX|innerRouterOf'] = function AutoRouterX$124innerRouterOf(T, $this, routeKey) {
    return controller_scope.RouterScope.of($this).controller.innerRouterOf(T, routeKey);
  };
  auto_router_x['AutoRouterX|get#innerRouterOf'] = function AutoRouterX$124get$35innerRouterOf($this) {
    return dart.fn((T, routeKey) => auto_router_x['AutoRouterX|innerRouterOf'](T, $this, routeKey), T$.StringToTN());
  };
  auto_router_x['AutoRouterX|get#routeData'] = function AutoRouterX$124get$35routeData($this) {
    return routing_controller.RouteData.of($this);
  };
  var name$ = dart.privateName(route_config, "RouteConfig.name");
  var path$ = dart.privateName(route_config, "RouteConfig.path");
  var fullMatch$ = dart.privateName(route_config, "RouteConfig.fullMatch");
  var redirectTo$ = dart.privateName(route_config, "RouteConfig.redirectTo");
  var guards$ = dart.privateName(route_config, "RouteConfig.guards");
  var usesPathAsKey$ = dart.privateName(route_config, "RouteConfig.usesPathAsKey");
  var _children = dart.privateName(route_config, "_children");
  route_config.RouteConfig = class RouteConfig extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get fullMatch() {
      return this[fullMatch$];
    }
    set fullMatch(value) {
      super.fullMatch = value;
    }
    get redirectTo() {
      return this[redirectTo$];
    }
    set redirectTo(value) {
      super.redirectTo = value;
    }
    get guards() {
      return this[guards$];
    }
    set guards(value) {
      super.guards = value;
    }
    get usesPathAsKey() {
      return this[usesPathAsKey$];
    }
    set usesPathAsKey(value) {
      super.usesPathAsKey = value;
    }
    get hasSubTree() {
      return this[_children] != null;
    }
    get children() {
      return this[_children];
    }
    get isRedirect() {
      return this.redirectTo != null;
    }
    toString() {
      return "RouteConfig{name: " + this.name + "}";
    }
  };
  (route_config.RouteConfig.new = function(name, opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let usesPathAsKey = opts && 'usesPathAsKey' in opts ? opts.usesPathAsKey : false;
    let guards = opts && 'guards' in opts ? opts.guards : C[129] || CT.C129;
    let fullMatch = opts && 'fullMatch' in opts ? opts.fullMatch : false;
    let redirectTo = opts && 'redirectTo' in opts ? opts.redirectTo : null;
    let children = opts && 'children' in opts ? opts.children : null;
    this[name$] = name;
    this[path$] = path;
    this[usesPathAsKey$] = usesPathAsKey;
    this[guards$] = guards;
    this[fullMatch$] = fullMatch;
    this[redirectTo$] = redirectTo;
    this[_children] = children != null ? route_matcher.RouteCollection.from(children) : null;
    ;
  }).prototype = route_config.RouteConfig.prototype;
  dart.addTypeTests(route_config.RouteConfig);
  dart.addTypeCaches(route_config.RouteConfig);
  dart.setGetterSignature(route_config.RouteConfig, () => ({
    __proto__: dart.getGetters(route_config.RouteConfig.__proto__),
    hasSubTree: core.bool,
    children: dart.nullable(route_matcher.RouteCollection),
    isRedirect: core.bool
  }));
  dart.setLibraryUri(route_config.RouteConfig, I[15]);
  dart.setFieldSignature(route_config.RouteConfig, () => ({
    __proto__: dart.getFields(route_config.RouteConfig.__proto__),
    name: dart.finalFieldType(core.String),
    path: dart.finalFieldType(core.String),
    fullMatch: dart.finalFieldType(core.bool),
    [_children]: dart.finalFieldType(dart.nullable(route_matcher.RouteCollection)),
    redirectTo: dart.finalFieldType(dart.nullable(core.String)),
    guards: dart.finalFieldType(core.List$(auto_route_guard.AutoRouteGuard)),
    usesPathAsKey: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(route_config.RouteConfig, ['toString']);
  auto_route_observer.AutoRouterObserver = class AutoRouterObserver extends navigator$.NavigatorObserver {
    didInitTabRoute(route, previousRoute) {
    }
    didChangeTabRoute(route, previousRoute) {
    }
  };
  (auto_route_observer.AutoRouterObserver.new = function() {
    auto_route_observer.AutoRouterObserver.__proto__.new.call(this);
    ;
  }).prototype = auto_route_observer.AutoRouterObserver.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouterObserver);
  dart.addTypeCaches(auto_route_observer.AutoRouterObserver);
  dart.setMethodSignature(auto_route_observer.AutoRouterObserver, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouterObserver.__proto__),
    didInitTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute, dart.nullable(auto_route_observer.TabPageRoute)]),
    didChangeTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute, auto_route_observer.TabPageRoute])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouterObserver, I[16]);
  auto_route_observer.AutoRouteAware = class AutoRouteAware extends core.Object {
    didPopNext() {
    }
    didPush() {
    }
    didPop() {
    }
    didPushNext() {
    }
    didInitTabRoute(previousRoute) {
    }
    didChangeTabRoute(previousRoute) {
    }
  };
  (auto_route_observer.AutoRouteAware.new = function() {
    ;
  }).prototype = auto_route_observer.AutoRouteAware.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouteAware);
  dart.addTypeCaches(auto_route_observer.AutoRouteAware);
  dart.setMethodSignature(auto_route_observer.AutoRouteAware, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouteAware.__proto__),
    didPopNext: dart.fnType(dart.void, []),
    didPush: dart.fnType(dart.void, []),
    didPop: dart.fnType(dart.void, []),
    didPushNext: dart.fnType(dart.void, []),
    didInitTabRoute: dart.fnType(dart.void, [dart.nullable(auto_route_observer.TabPageRoute)]),
    didChangeTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouteAware, I[16]);
  var _listeners = dart.privateName(auto_route_observer, "_listeners");
  auto_route_observer.AutoRouteObserver = class AutoRouteObserver extends auto_route_observer.AutoRouterObserver {
    subscribe(routeAware, route) {
      let subscribers = this[_listeners][$putIfAbsent](route.key, dart.fn(() => T$.LinkedHashSetOfAutoRouteAware().new(), T$.VoidToSetOfAutoRouteAware()));
      if (subscribers.add(routeAware)) {
        if (routing_controller.TabsRouter.is(route.router)) {
          routeAware.didInitTabRoute(null);
        } else {
          routeAware.didPush();
        }
      }
    }
    unsubscribe(routeAware) {
      let t31;
      for (let route of this[_listeners][$keys]) {
        let subscribers = this[_listeners][$_get](route);
        t31 = subscribers;
        t31 == null ? null : t31.remove(routeAware);
      }
    }
    didInitTabRoute(route, previousRoute) {
      let t31;
      let subscribers = (t31 = this[_listeners][$_get](route.routeInfo.key), t31 == null ? null : t31[$toList]());
      if (subscribers != null) {
        for (let routeAware of subscribers) {
          routeAware.didInitTabRoute(previousRoute);
        }
      }
    }
    didChangeTabRoute(route, previousRoute) {
      let t31;
      let subscribers = (t31 = this[_listeners][$_get](route.routeInfo.key), t31 == null ? null : t31[$toList]());
      if (subscribers != null) {
        for (let routeAware of subscribers) {
          routeAware.didChangeTabRoute(previousRoute);
        }
      }
    }
    didPop(route, previousRoute) {
      let t31, t31$, t31$0;
      if (auto_route_page.AutoRoutePage.is(route.settings) && auto_route_page.AutoRoutePage.is((t31 = previousRoute, t31 == null ? null : t31.settings))) {
        let previousKey = auto_route_page.AutoRoutePage.as(dart.nullCheck(previousRoute).settings).routeKey;
        let previousSubscribers = (t31$ = this[_listeners][$_get](previousKey), t31$ == null ? null : t31$[$toList]());
        if (previousSubscribers != null) {
          for (let routeAware of previousSubscribers) {
            routeAware.didPopNext();
          }
        }
        let key = auto_route_page.AutoRoutePage.as(route.settings).routeKey;
        let subscribers = (t31$0 = this[_listeners][$_get](key), t31$0 == null ? null : t31$0[$toList]());
        if (subscribers != null) {
          for (let routeAware of subscribers) {
            routeAware.didPop();
          }
        }
      }
    }
    didPush(route, previousRoute) {
      let t31;
      if (auto_route_page.AutoRoutePage.is(route.settings) && auto_route_page.AutoRoutePage.is((t31 = previousRoute, t31 == null ? null : t31.settings))) {
        let previousKey = auto_route_page.AutoRoutePage.as(dart.nullCheck(previousRoute).settings).routeKey;
        let previousSubscribers = this[_listeners][$_get](previousKey);
        if (previousSubscribers != null) {
          for (let routeAware of previousSubscribers) {
            routeAware.didPushNext();
          }
        }
      }
    }
  };
  (auto_route_observer.AutoRouteObserver.new = function() {
    this[_listeners] = new (T$.LinkedMapOfLocalKey$SetOfAutoRouteAware()).new();
    auto_route_observer.AutoRouteObserver.__proto__.new.call(this);
    ;
  }).prototype = auto_route_observer.AutoRouteObserver.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouteObserver);
  dart.addTypeCaches(auto_route_observer.AutoRouteObserver);
  dart.setMethodSignature(auto_route_observer.AutoRouteObserver, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouteObserver.__proto__),
    subscribe: dart.fnType(dart.void, [auto_route_observer.AutoRouteAware, routing_controller.RouteData]),
    unsubscribe: dart.fnType(dart.void, [auto_route_observer.AutoRouteAware])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouteObserver, I[16]);
  dart.setFieldSignature(auto_route_observer.AutoRouteObserver, () => ({
    __proto__: dart.getFields(auto_route_observer.AutoRouteObserver.__proto__),
    [_listeners]: dart.finalFieldType(core.Map$(key.LocalKey, core.Set$(auto_route_observer.AutoRouteAware)))
  }));
  var routeInfo$ = dart.privateName(auto_route_observer, "TabPageRoute.routeInfo");
  var index$ = dart.privateName(auto_route_observer, "TabPageRoute.index");
  auto_route_observer.TabPageRoute = class TabPageRoute extends core.Object {
    get routeInfo() {
      return this[routeInfo$];
    }
    set routeInfo(value) {
      super.routeInfo = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get name() {
      return this.routeInfo.routeName;
    }
    get path() {
      return this.routeInfo.path;
    }
    get match() {
      return this.routeInfo.stringMatch;
    }
  };
  (auto_route_observer.TabPageRoute.new = function(opts) {
    let routeInfo = opts && 'routeInfo' in opts ? opts.routeInfo : null;
    let index = opts && 'index' in opts ? opts.index : null;
    this[routeInfo$] = routeInfo;
    this[index$] = index;
    ;
  }).prototype = auto_route_observer.TabPageRoute.prototype;
  dart.addTypeTests(auto_route_observer.TabPageRoute);
  dart.addTypeCaches(auto_route_observer.TabPageRoute);
  dart.setGetterSignature(auto_route_observer.TabPageRoute, () => ({
    __proto__: dart.getGetters(auto_route_observer.TabPageRoute.__proto__),
    name: core.String,
    path: core.String,
    match: core.String
  }));
  dart.setLibraryUri(auto_route_observer.TabPageRoute, I[16]);
  dart.setFieldSignature(auto_route_observer.TabPageRoute, () => ({
    __proto__: dart.getFields(auto_route_observer.TabPageRoute.__proto__),
    routeInfo: dart.finalFieldType(route_match.RouteMatch),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(auto_route_observer, {
    /*auto_route_observer.observer*/get observer() {
      return new (T$.RouteObserverOfRoute()).new();
    }
  }, false);
  var routeData$ = dart.privateName(auto_route_page, "AutoRoutePage.routeData");
  var builder$2 = dart.privateName(auto_route_page, "AutoRoutePage.builder");
  var fullscreenDialog$ = dart.privateName(auto_route_page, "AutoRoutePage.fullscreenDialog");
  var maintainState$ = dart.privateName(auto_route_page, "AutoRoutePage.maintainState");
  var _popCompleter = dart.privateName(auto_route_page, "_popCompleter");
  const _is_AutoRoutePage_default = Symbol('_is_AutoRoutePage_default');
  auto_route_page.AutoRoutePage$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var CompleterOfTN = () => (CompleterOfTN = dart.constFn(async.Completer$(TN())))();
    class AutoRoutePage extends navigator$.Page$(T) {
      get routeData() {
        return this[routeData$];
      }
      set routeData(value) {
        super.routeData = value;
      }
      get builder() {
        return this[builder$2];
      }
      set builder(value) {
        super.builder = value;
      }
      get fullscreenDialog() {
        return this[fullscreenDialog$];
      }
      set fullscreenDialog(value) {
        super.fullscreenDialog = value;
      }
      get maintainState() {
        return this[maintainState$];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      get popped() {
        return this[_popCompleter].future;
      }
      canUpdate(other) {
        return other[$runtimeType]._equals(this[$runtimeType]) && auto_route_page.AutoRoutePage.as(other).routeKey[$_equals](this.routeKey);
      }
      get routeKey() {
        return this.routeData.key;
      }
      buildPage(context) {
        let t31;
        let childToBuild = (t31 = this.routeData, this.builder(t31));
        if (auto_route_wrapper.AutoRouteWrapper.is(childToBuild)) {
          childToBuild = auto_route_wrapper.AutoRouteWrapper.as(childToBuild).wrappedRoute(context);
        }
        return new route_data_scope.RouteDataScope.new({child: childToBuild, segmentsHash: this.routeData.hashCode, routeData: this.routeData, $creationLocationd_0dea112b090073317d4: C[195] || CT.C195});
      }
      createRoute(context) {
        let t31;
        t31 = this.onCreateRoute(context);
        return (() => {
          t31.popped.then(dart.void, dart.bind(this[_popCompleter], 'complete'));
          return t31;
        })();
      }
    }
    (AutoRoutePage.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let key = opts && 'key' in opts ? opts.key : null;
      this[_popCompleter] = CompleterOfTN().new();
      this[routeData$] = routeData;
      this[builder$2] = builder;
      this[fullscreenDialog$] = fullscreenDialog;
      this[maintainState$] = maintainState;
      AutoRoutePage.__proto__.new.call(this, {restorationId: "simple_page", name: routeData.name, arguments: routeData.route.args});
      ;
    }).prototype = AutoRoutePage.prototype;
    dart.addTypeTests(AutoRoutePage);
    AutoRoutePage.prototype[_is_AutoRoutePage_default] = true;
    dart.addTypeCaches(AutoRoutePage);
    dart.setMethodSignature(AutoRoutePage, () => ({
      __proto__: dart.getMethods(AutoRoutePage.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext]),
      createRoute: dart.fnType(navigator$.Route$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(AutoRoutePage, () => ({
      __proto__: dart.getGetters(AutoRoutePage.__proto__),
      popped: async.Future$(dart.nullable(T)),
      routeKey: key.LocalKey
    }));
    dart.setLibraryUri(AutoRoutePage, I[17]);
    dart.setFieldSignature(AutoRoutePage, () => ({
      __proto__: dart.getFields(AutoRoutePage.__proto__),
      routeData: dart.finalFieldType(routing_controller.RouteData),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [routing_controller.RouteData])),
      fullscreenDialog: dart.finalFieldType(core.bool),
      maintainState: dart.finalFieldType(core.bool),
      [_popCompleter]: dart.finalFieldType(async.Completer$(dart.nullable(T)))
    }));
    return AutoRoutePage;
  });
  auto_route_page.AutoRoutePage = auto_route_page.AutoRoutePage$();
  dart.addTypeTests(auto_route_page.AutoRoutePage, _is_AutoRoutePage_default);
  const _is_MaterialPageX_default = Symbol('_is_MaterialPageX_default');
  auto_route_page.MaterialPageX$ = dart.generic(T => {
    var _PageBasedMaterialPageRouteOfT = () => (_PageBasedMaterialPageRouteOfT = dart.constFn(auto_route_page._PageBasedMaterialPageRoute$(T)))();
    class MaterialPageX extends auto_route_page.AutoRoutePage$(T) {
      onCreateRoute(context) {
        return new (_PageBasedMaterialPageRouteOfT()).new({page: this});
      }
    }
    (MaterialPageX.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let key = opts && 'key' in opts ? opts.key : null;
      MaterialPageX.__proto__.new.call(this, {routeData: routeData, builder: builder, maintainState: maintainState, fullscreenDialog: fullscreenDialog, key: key});
      ;
    }).prototype = MaterialPageX.prototype;
    dart.addTypeTests(MaterialPageX);
    MaterialPageX.prototype[_is_MaterialPageX_default] = true;
    dart.addTypeCaches(MaterialPageX);
    dart.setMethodSignature(MaterialPageX, () => ({
      __proto__: dart.getMethods(MaterialPageX.__proto__),
      onCreateRoute: dart.fnType(navigator$.Route$(T), [framework.BuildContext])
    }));
    dart.setLibraryUri(MaterialPageX, I[17]);
    return MaterialPageX;
  });
  auto_route_page.MaterialPageX = auto_route_page.MaterialPageX$();
  dart.addTypeTests(auto_route_page.MaterialPageX, _is_MaterialPageX_default);
  var _page = dart.privateName(auto_route_page, "_page");
  const _is__PageBasedMaterialPageRoute_default = Symbol('_is__PageBasedMaterialPageRoute_default');
  auto_route_page._PageBasedMaterialPageRoute$ = dart.generic(T => {
    const PageRoute_MaterialRouteTransitionMixin$36 = class PageRoute_MaterialRouteTransitionMixin extends pages.PageRoute$(T) {};
    (PageRoute_MaterialRouteTransitionMixin$36.new = function(opts) {
      PageRoute_MaterialRouteTransitionMixin$36.__proto__.new.call(this, opts);
    }).prototype = PageRoute_MaterialRouteTransitionMixin$36.prototype;
    dart.applyMixin(PageRoute_MaterialRouteTransitionMixin$36, page.MaterialRouteTransitionMixin$(T));
    class _PageBasedMaterialPageRoute extends PageRoute_MaterialRouteTransitionMixin$36 {
      get [_page]() {
        return auto_route_page.AutoRoutePage.as(this.settings);
      }
      buildContent(context) {
        return this[_page].buildPage(context);
      }
      get maintainState() {
        return this[_page].maintainState;
      }
      get fullscreenDialog() {
        return this[_page].fullscreenDialog;
      }
      get debugLabel() {
        return super.debugLabel + "(" + dart.str(this[_page].name) + ")";
      }
    }
    (_PageBasedMaterialPageRoute.new = function(opts) {
      let page = opts && 'page' in opts ? opts.page : null;
      _PageBasedMaterialPageRoute.__proto__.new.call(this, {settings: page});
      ;
    }).prototype = _PageBasedMaterialPageRoute.prototype;
    dart.addTypeTests(_PageBasedMaterialPageRoute);
    _PageBasedMaterialPageRoute.prototype[_is__PageBasedMaterialPageRoute_default] = true;
    dart.addTypeCaches(_PageBasedMaterialPageRoute);
    dart.setMethodSignature(_PageBasedMaterialPageRoute, () => ({
      __proto__: dart.getMethods(_PageBasedMaterialPageRoute.__proto__),
      buildContent: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_PageBasedMaterialPageRoute, () => ({
      __proto__: dart.getGetters(_PageBasedMaterialPageRoute.__proto__),
      [_page]: auto_route_page.AutoRoutePage,
      maintainState: core.bool,
      fullscreenDialog: core.bool
    }));
    dart.setLibraryUri(_PageBasedMaterialPageRoute, I[17]);
    return _PageBasedMaterialPageRoute;
  });
  auto_route_page._PageBasedMaterialPageRoute = auto_route_page._PageBasedMaterialPageRoute$();
  dart.addTypeTests(auto_route_page._PageBasedMaterialPageRoute, _is__PageBasedMaterialPageRoute_default);
  var title$ = dart.privateName(auto_route_page, "_TitledAutoRoutePage.title");
  const _is__TitledAutoRoutePage_default = Symbol('_is__TitledAutoRoutePage_default');
  auto_route_page._TitledAutoRoutePage$ = dart.generic(T => {
    class _TitledAutoRoutePage extends auto_route_page.AutoRoutePage$(T) {
      get title() {
        return this[title$];
      }
      set title(value) {
        super.title = value;
      }
    }
    (_TitledAutoRoutePage.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      this[title$] = title;
      _TitledAutoRoutePage.__proto__.new.call(this, {routeData: routeData, builder: builder, maintainState: maintainState, fullscreenDialog: fullscreenDialog});
      ;
    }).prototype = _TitledAutoRoutePage.prototype;
    dart.addTypeTests(_TitledAutoRoutePage);
    _TitledAutoRoutePage.prototype[_is__TitledAutoRoutePage_default] = true;
    dart.addTypeCaches(_TitledAutoRoutePage);
    dart.setLibraryUri(_TitledAutoRoutePage, I[17]);
    dart.setFieldSignature(_TitledAutoRoutePage, () => ({
      __proto__: dart.getFields(_TitledAutoRoutePage.__proto__),
      title: dart.finalFieldType(dart.nullable(core.String))
    }));
    return _TitledAutoRoutePage;
  });
  auto_route_page._TitledAutoRoutePage = auto_route_page._TitledAutoRoutePage$();
  dart.addTypeTests(auto_route_page._TitledAutoRoutePage, _is__TitledAutoRoutePage_default);
  const _is_CupertinoPageX_default = Symbol('_is_CupertinoPageX_default');
  auto_route_page.CupertinoPageX$ = dart.generic(T => {
    var _PageBasedCupertinoPageRouteOfT = () => (_PageBasedCupertinoPageRouteOfT = dart.constFn(auto_route_page._PageBasedCupertinoPageRoute$(T)))();
    class CupertinoPageX extends auto_route_page._TitledAutoRoutePage$(T) {
      onCreateRoute(context) {
        return new (_PageBasedCupertinoPageRouteOfT()).new({page: this});
      }
    }
    (CupertinoPageX.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      CupertinoPageX.__proto__.new.call(this, {routeData: routeData, builder: builder, maintainState: maintainState, fullscreenDialog: fullscreenDialog, title: title});
      ;
    }).prototype = CupertinoPageX.prototype;
    dart.addTypeTests(CupertinoPageX);
    CupertinoPageX.prototype[_is_CupertinoPageX_default] = true;
    dart.addTypeCaches(CupertinoPageX);
    dart.setMethodSignature(CupertinoPageX, () => ({
      __proto__: dart.getMethods(CupertinoPageX.__proto__),
      onCreateRoute: dart.fnType(navigator$.Route$(T), [framework.BuildContext])
    }));
    dart.setLibraryUri(CupertinoPageX, I[17]);
    return CupertinoPageX;
  });
  auto_route_page.CupertinoPageX = auto_route_page.CupertinoPageX$();
  dart.addTypeTests(auto_route_page.CupertinoPageX, _is_CupertinoPageX_default);
  const _is__PageBasedCupertinoPageRoute_default = Symbol('_is__PageBasedCupertinoPageRoute_default');
  auto_route_page._PageBasedCupertinoPageRoute$ = dart.generic(T => {
    const PageRoute_CupertinoRouteTransitionMixin$36 = class PageRoute_CupertinoRouteTransitionMixin extends pages.PageRoute$(T) {};
    (PageRoute_CupertinoRouteTransitionMixin$36.new = function(opts) {
      route.CupertinoRouteTransitionMixin$(T)[dart.mixinNew].call(this);
      PageRoute_CupertinoRouteTransitionMixin$36.__proto__.new.call(this, opts);
    }).prototype = PageRoute_CupertinoRouteTransitionMixin$36.prototype;
    dart.applyMixin(PageRoute_CupertinoRouteTransitionMixin$36, route.CupertinoRouteTransitionMixin$(T));
    class _PageBasedCupertinoPageRoute extends PageRoute_CupertinoRouteTransitionMixin$36 {
      get [_page]() {
        return auto_route_page._TitledAutoRoutePage.as(this.settings);
      }
      buildContent(context) {
        return this[_page].buildPage(context);
      }
      get title() {
        return this[_page].title;
      }
      get maintainState() {
        return this[_page].maintainState;
      }
      get fullscreenDialog() {
        return this[_page].fullscreenDialog;
      }
      get debugLabel() {
        return super.debugLabel + "(" + dart.str(this[_page].name) + ")";
      }
    }
    (_PageBasedCupertinoPageRoute.new = function(opts) {
      let page = opts && 'page' in opts ? opts.page : null;
      _PageBasedCupertinoPageRoute.__proto__.new.call(this, {settings: page});
      ;
    }).prototype = _PageBasedCupertinoPageRoute.prototype;
    dart.addTypeTests(_PageBasedCupertinoPageRoute);
    _PageBasedCupertinoPageRoute.prototype[_is__PageBasedCupertinoPageRoute_default] = true;
    dart.addTypeCaches(_PageBasedCupertinoPageRoute);
    dart.setMethodSignature(_PageBasedCupertinoPageRoute, () => ({
      __proto__: dart.getMethods(_PageBasedCupertinoPageRoute.__proto__),
      buildContent: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_PageBasedCupertinoPageRoute, () => ({
      __proto__: dart.getGetters(_PageBasedCupertinoPageRoute.__proto__),
      [_page]: auto_route_page._TitledAutoRoutePage,
      title: dart.nullable(core.String),
      maintainState: core.bool,
      fullscreenDialog: core.bool
    }));
    dart.setLibraryUri(_PageBasedCupertinoPageRoute, I[17]);
    return _PageBasedCupertinoPageRoute;
  });
  auto_route_page._PageBasedCupertinoPageRoute = auto_route_page._PageBasedCupertinoPageRoute$();
  dart.addTypeTests(auto_route_page._PageBasedCupertinoPageRoute, _is__PageBasedCupertinoPageRoute_default);
  const _is_AdaptivePage_default = Symbol('_is_AdaptivePage_default');
  auto_route_page.AdaptivePage$ = dart.generic(T => {
    var PageRouteBuilderOfT = () => (PageRouteBuilderOfT = dart.constFn(pages.PageRouteBuilder$(T)))();
    var _PageBasedCupertinoPageRouteOfT = () => (_PageBasedCupertinoPageRouteOfT = dart.constFn(auto_route_page._PageBasedCupertinoPageRoute$(T)))();
    var _PageBasedMaterialPageRouteOfT = () => (_PageBasedMaterialPageRouteOfT = dart.constFn(auto_route_page._PageBasedMaterialPageRoute$(T)))();
    class AdaptivePage extends auto_route_page._TitledAutoRoutePage$(T) {
      onCreateRoute(context) {
        if (true) {
          return new (PageRouteBuilderOfT()).new({pageBuilder: dart.fn((_, __, ___) => this.buildPage(context), T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget()), settings: this, maintainState: this.maintainState, fullscreenDialog: this.fullscreenDialog});
        }
        let platform = theme.Theme.of(context).platform;
        if (platform === platform$.TargetPlatform.iOS || platform === platform$.TargetPlatform.macOS) {
          return new (_PageBasedCupertinoPageRouteOfT()).new({page: this});
        }
        return new (_PageBasedMaterialPageRouteOfT()).new({page: this});
      }
    }
    (AdaptivePage.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      AdaptivePage.__proto__.new.call(this, {routeData: routeData, builder: builder, title: title, maintainState: maintainState, fullscreenDialog: fullscreenDialog});
      ;
    }).prototype = AdaptivePage.prototype;
    dart.addTypeTests(AdaptivePage);
    AdaptivePage.prototype[_is_AdaptivePage_default] = true;
    dart.addTypeCaches(AdaptivePage);
    dart.setMethodSignature(AdaptivePage, () => ({
      __proto__: dart.getMethods(AdaptivePage.__proto__),
      onCreateRoute: dart.fnType(navigator$.Route$(T), [framework.BuildContext])
    }));
    dart.setLibraryUri(AdaptivePage, I[17]);
    return AdaptivePage;
  });
  auto_route_page.AdaptivePage = auto_route_page.AdaptivePage$();
  dart.addTypeTests(auto_route_page.AdaptivePage, _is_AdaptivePage_default);
  var opaque$ = dart.privateName(auto_route_page, "CustomPage.opaque");
  var durationInMilliseconds$ = dart.privateName(auto_route_page, "CustomPage.durationInMilliseconds");
  var reverseDurationInMilliseconds$ = dart.privateName(auto_route_page, "CustomPage.reverseDurationInMilliseconds");
  var barrierColor$ = dart.privateName(auto_route_page, "CustomPage.barrierColor");
  var barrierDismissible$ = dart.privateName(auto_route_page, "CustomPage.barrierDismissible");
  var barrierLabel$ = dart.privateName(auto_route_page, "CustomPage.barrierLabel");
  var transitionsBuilder$ = dart.privateName(auto_route_page, "CustomPage.transitionsBuilder");
  var customRouteBuilder$ = dart.privateName(auto_route_page, "CustomPage.customRouteBuilder");
  var _defaultTransitionsBuilder = dart.privateName(auto_route_page, "_defaultTransitionsBuilder");
  const _is_CustomPage_default = Symbol('_is_CustomPage_default');
  auto_route_page.CustomPage$ = dart.generic(T => {
    var PageRouteBuilderOfT = () => (PageRouteBuilderOfT = dart.constFn(pages.PageRouteBuilder$(T)))();
    class CustomPage extends auto_route_page.AutoRoutePage$(T) {
      get opaque() {
        return this[opaque$];
      }
      set opaque(value) {
        super.opaque = value;
      }
      get durationInMilliseconds() {
        return this[durationInMilliseconds$];
      }
      set durationInMilliseconds(value) {
        super.durationInMilliseconds = value;
      }
      get reverseDurationInMilliseconds() {
        return this[reverseDurationInMilliseconds$];
      }
      set reverseDurationInMilliseconds(value) {
        super.reverseDurationInMilliseconds = value;
      }
      get barrierColor() {
        return this[barrierColor$];
      }
      set barrierColor(value) {
        super.barrierColor = value;
      }
      get barrierDismissible() {
        return this[barrierDismissible$];
      }
      set barrierDismissible(value) {
        super.barrierDismissible = value;
      }
      get barrierLabel() {
        return this[barrierLabel$];
      }
      set barrierLabel(value) {
        super.barrierLabel = value;
      }
      get transitionsBuilder() {
        return this[transitionsBuilder$];
      }
      set transitionsBuilder(value) {
        super.transitionsBuilder = value;
      }
      get customRouteBuilder() {
        return this[customRouteBuilder$];
      }
      set customRouteBuilder(value) {
        super.customRouteBuilder = value;
      }
      onCreateRoute(context) {
        let t31;
        if (this.customRouteBuilder != null) {
          return dart.nullCheck(this.customRouteBuilder)(T, context, this.buildPage(context), this);
        }
        return new (PageRouteBuilderOfT()).new({pageBuilder: dart.fn((_, __, ___) => this.buildPage(context), T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget()), settings: this, opaque: this.opaque, transitionDuration: new core.Duration.new({milliseconds: this.durationInMilliseconds}), reverseTransitionDuration: new core.Duration.new({milliseconds: this.reverseDurationInMilliseconds}), barrierColor: this.barrierColor, barrierDismissible: this.barrierDismissible, barrierLabel: this.barrierLabel, transitionsBuilder: (t31 = this.transitionsBuilder, t31 == null ? dart.bind(this, _defaultTransitionsBuilder) : t31), fullscreenDialog: this.fullscreenDialog, maintainState: this.maintainState});
      }
      [_defaultTransitionsBuilder](context, animation, secondaryAnimation, child) {
        return child;
      }
    }
    (CustomPage.new = function(opts) {
      let routeData = opts && 'routeData' in opts ? opts.routeData : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let opaque = opts && 'opaque' in opts ? opts.opaque : true;
      let durationInMilliseconds = opts && 'durationInMilliseconds' in opts ? opts.durationInMilliseconds : 300;
      let reverseDurationInMilliseconds = opts && 'reverseDurationInMilliseconds' in opts ? opts.reverseDurationInMilliseconds : 300;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let transitionsBuilder = opts && 'transitionsBuilder' in opts ? opts.transitionsBuilder : null;
      let customRouteBuilder = opts && 'customRouteBuilder' in opts ? opts.customRouteBuilder : null;
      let key = opts && 'key' in opts ? opts.key : null;
      this[opaque$] = opaque;
      this[durationInMilliseconds$] = durationInMilliseconds;
      this[reverseDurationInMilliseconds$] = reverseDurationInMilliseconds;
      this[barrierColor$] = barrierColor;
      this[barrierDismissible$] = barrierDismissible;
      this[barrierLabel$] = barrierLabel;
      this[transitionsBuilder$] = transitionsBuilder;
      this[customRouteBuilder$] = customRouteBuilder;
      CustomPage.__proto__.new.call(this, {routeData: routeData, key: key, builder: builder, maintainState: maintainState, fullscreenDialog: fullscreenDialog});
      ;
    }).prototype = CustomPage.prototype;
    dart.addTypeTests(CustomPage);
    CustomPage.prototype[_is_CustomPage_default] = true;
    dart.addTypeCaches(CustomPage);
    dart.setMethodSignature(CustomPage, () => ({
      __proto__: dart.getMethods(CustomPage.__proto__),
      onCreateRoute: dart.fnType(navigator$.Route$(T), [framework.BuildContext]),
      [_defaultTransitionsBuilder]: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
    }));
    dart.setLibraryUri(CustomPage, I[17]);
    dart.setFieldSignature(CustomPage, () => ({
      __proto__: dart.getFields(CustomPage.__proto__),
      opaque: dart.finalFieldType(core.bool),
      durationInMilliseconds: dart.finalFieldType(core.int),
      reverseDurationInMilliseconds: dart.finalFieldType(core.int),
      barrierColor: dart.finalFieldType(dart.nullable(ui.Color)),
      barrierDismissible: dart.finalFieldType(core.bool),
      barrierLabel: dart.finalFieldType(dart.nullable(core.String)),
      transitionsBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget]))),
      customRouteBuilder: dart.finalFieldType(dart.nullable(dart.gFnType(T => [navigator$.Route$(T), [framework.BuildContext, framework.Widget, auto_route_page.CustomPage$(T)]], T => [dart.nullable(core.Object)])))
    }));
    return CustomPage;
  });
  auto_route_page.CustomPage = auto_route_page.CustomPage$();
  dart.addTypeTests(auto_route_page.CustomPage, _is_CustomPage_default);
  var routeData$0 = dart.privateName(route_data_scope, "RouteDataScope.routeData");
  var segmentsHash$2 = dart.privateName(route_data_scope, "RouteDataScope.segmentsHash");
  route_data_scope.RouteDataScope = class RouteDataScope extends framework.InheritedWidget {
    get routeData() {
      return this[routeData$0];
    }
    set routeData(value) {
      super.routeData = value;
    }
    get segmentsHash() {
      return this[segmentsHash$2];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    static of(context) {
      let scope = context.dependOnInheritedWidgetOfExactType(route_data_scope.RouteDataScope);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("RouteData operation requested with a context that does not include an RouteData.\n" + "The context used to retrieve the RouteData must be that of a widget that " + "is a descendant of a AutoRoutePage."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[18], 17, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'RouteData operation requested with a context that does not include an RouteData.\\n'\n            'The context used to retrieve the RouteData must be that of a widget that '\n            'is a descendant of a AutoRoutePage.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope).routeData;
    }
    updateShouldNotify(oldWidget) {
      route_data_scope.RouteDataScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (route_data_scope.RouteDataScope.new = function(opts) {
    let routeData = opts && 'routeData' in opts ? opts.routeData : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routeData$0] = routeData;
    this[segmentsHash$2] = segmentsHash;
    route_data_scope.RouteDataScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = route_data_scope.RouteDataScope.prototype;
  dart.addTypeTests(route_data_scope.RouteDataScope);
  dart.addTypeCaches(route_data_scope.RouteDataScope);
  dart.setMethodSignature(route_data_scope.RouteDataScope, () => ({
    __proto__: dart.getMethods(route_data_scope.RouteDataScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(route_data_scope.RouteDataScope, I[19]);
  dart.setFieldSignature(route_data_scope.RouteDataScope, () => ({
    __proto__: dart.getFields(route_data_scope.RouteDataScope.__proto__),
    routeData: dart.finalFieldType(routing_controller.RouteData),
    segmentsHash: dart.finalFieldType(core.int)
  }));
  var _routesMap$ = dart.privateName(route_matcher, "_routesMap");
  route_matcher.RouteCollection = class RouteCollection extends core.Object {
    static from(routes) {
      let routesMap = new (T$.IdentityMapOfString$RouteConfig()).new();
      routes[$forEach](dart.fn(r => {
        let t32, t31;
        t31 = r.name;
        t32 = r;
        routesMap[$_set](t31, t32);
        return t32;
      }, T$.RouteConfigTovoid()));
      return new route_matcher.RouteCollection.new(routesMap);
    }
    get routes() {
      return this[_routesMap$][$values];
    }
    _get(key) {
      return this[_routesMap$][$_get](key);
    }
    containsKey(key) {
      return this[_routesMap$][$containsKey](key);
    }
    subCollectionOf(key) {
      let t31;
      if (!((t31 = this._get(key), t31 == null ? null : t31.children) != null)) dart.assertFailed(key + " does not have children", I[20], 28, 12, "this[key]?.children != null");
      return dart.nullCheck(dart.nullCheck(this._get(key)).children);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || route_matcher.RouteCollection.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && new equality.MapEquality.new().equals(this[_routesMap$], other[_routesMap$]);
    }
    get hashCode() {
      return this[_routesMap$][$hashCode];
    }
  };
  (route_matcher.RouteCollection.new = function(_routesMap) {
    this[_routesMap$] = _routesMap;
    if (!_routesMap[$isNotEmpty]) dart.assertFailed(null, I[20], 13, 45, "_routesMap.isNotEmpty");
    ;
  }).prototype = route_matcher.RouteCollection.prototype;
  dart.addTypeTests(route_matcher.RouteCollection);
  dart.addTypeCaches(route_matcher.RouteCollection);
  dart.setMethodSignature(route_matcher.RouteCollection, () => ({
    __proto__: dart.getMethods(route_matcher.RouteCollection.__proto__),
    _get: dart.fnType(dart.nullable(route_config.RouteConfig), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    subCollectionOf: dart.fnType(route_matcher.RouteCollection, [core.String])
  }));
  dart.setGetterSignature(route_matcher.RouteCollection, () => ({
    __proto__: dart.getGetters(route_matcher.RouteCollection.__proto__),
    routes: core.Iterable$(route_config.RouteConfig)
  }));
  dart.setLibraryUri(route_matcher.RouteCollection, I[21]);
  dart.setFieldSignature(route_matcher.RouteCollection, () => ({
    __proto__: dart.getFields(route_matcher.RouteCollection.__proto__),
    [_routesMap$]: dart.finalFieldType(collection.LinkedHashMap$(core.String, route_config.RouteConfig))
  }));
  dart.defineExtensionMethods(route_matcher.RouteCollection, ['_equals']);
  dart.defineExtensionAccessors(route_matcher.RouteCollection, ['hashCode']);
  var collection$ = dart.privateName(route_matcher, "RouteMatcher.collection");
  var _match = dart.privateName(route_matcher, "_match");
  var _handleRedirect = dart.privateName(route_matcher, "_handleRedirect");
  var _normalizeSingleValues = dart.privateName(route_matcher, "_normalizeSingleValues");
  var _matchByRoute = dart.privateName(route_matcher, "_matchByRoute");
  route_matcher.RouteMatcher = class RouteMatcher extends core.Object {
    get collection() {
      return this[collection$];
    }
    set collection(value) {
      super.collection = value;
    }
    match(rawPath, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      return this[_match](core.Uri.parse(rawPath), this.collection, {includePrefixMatches: includePrefixMatches, root: true});
    }
    matchUri(uri, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      return this[_match](uri, this.collection, {includePrefixMatches: includePrefixMatches, root: true});
    }
    [_match](uri, collection, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let root = opts && 'root' in opts ? opts.root : false;
      let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
      let pathSegments = path.split(uri.path);
      let matches = T$.JSArrayOfRouteMatch().of([]);
      for (let config of collection.routes) {
        let match = this.matchByPath(uri, config, {redirectedFrom: redirectedFrom});
        if (match != null) {
          if (!includePrefixMatches || config.path === "*") {
            matches[$clear]();
          }
          if (config.isRedirect) {
            return this[_handleRedirect]({routesCollection: collection, includePrefixMatches: includePrefixMatches, redirectTo: uri.replace({path: core.Uri.parse(dart.nullCheck(config.redirectTo)).path}), redirectedFrom: config.path});
          }
          if (match.segments[$length] !== pathSegments[$length]) {
            if (config.hasSubTree) {
              let rest = uri.replace({pathSegments: pathSegments[$sublist](match.segments[$length])});
              let children = this[_match](rest, dart.nullCheck(config.children), {includePrefixMatches: includePrefixMatches});
              match = match.copyWith({children: children});
            }
            matches[$add](match);
            if (match.allSegments[$length] === pathSegments[$length]) {
              break;
            }
          } else {
            if (config.hasSubTree && !match.hasChildren) {
              match = match.copyWith({children: this[_match](uri.replace({path: ""}), dart.nullCheck(config.children))});
            }
            matches[$add](match);
            break;
          }
        }
      }
      if (matches[$isEmpty] || root && matches[$last].allSegments[$length] < pathSegments[$length]) {
        return null;
      }
      return matches;
    }
    [_handleRedirect](opts) {
      let routesCollection = opts && 'routesCollection' in opts ? opts.routesCollection : null;
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : null;
      let redirectTo = opts && 'redirectTo' in opts ? opts.redirectTo : null;
      let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
      let redirectMatches = this[_match](redirectTo, routesCollection, {includePrefixMatches: includePrefixMatches, redirectedFrom: redirectedFrom});
      if (redirectMatches != null && redirectMatches[$length] === 1) {
        redirectMatches = redirectMatches[$map](route_match.RouteMatch, dart.fn(e => e.copyWith({segments: path.split(redirectedFrom)}), T$.RouteMatchToRouteMatch()))[$toList]();
      }
      return redirectMatches;
    }
    matchByPath(url, config, opts) {
      let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
      let parts = path.split(config.path);
      let segments = path.split(url.path);
      if (parts[$length] > segments[$length]) {
        return null;
      }
      if (config.fullMatch && segments[$length] > parts[$length] && (parts[$isEmpty] || parts[$last] !== "*")) {
        return null;
      }
      let pathParams = new (T$.IdentityMapOfString$String()).new();
      for (let index = 0; index < parts[$length]; index = index + 1) {
        let segment = segments[$_get](index);
        let part = parts[$_get](index);
        if (part[$startsWith](":")) {
          pathParams[$_set](part[$substring](1), segment);
        } else if (segment !== part && part !== "*") {
          return null;
        }
      }
      let extractedSegments = segments[$sublist](0, parts[$length]);
      if (parts[$isNotEmpty] && parts[$last] === "*") {
        extractedSegments = segments;
      }
      let stringMatch = path.joinAll(extractedSegments);
      return new route_match.RouteMatch.new({path: config.path, routeName: config.name, key: new (T$.ValueKeyOfString()).new(config.usesPathAsKey ? stringMatch : config.name), stringMatch: stringMatch, segments: extractedSegments, redirectedFrom: redirectedFrom, guards: config.guards, pathParams: new parameters.Parameters.new(pathParams), queryParams: new parameters.Parameters.new(this[_normalizeSingleValues](url.queryParametersAll)), fragment: url.fragment});
    }
    matchByRoute(route) {
      return this[_matchByRoute](route, this.collection);
    }
    [_matchByRoute](route, routes) {
      let config = routes._get(route.routeName);
      if (config == null) {
        return null;
      }
      let childMatches = T$.JSArrayOfRouteMatch().of([]);
      if (config.hasSubTree) {
        let subRoutes = routes.subCollectionOf(route.routeName);
        if (route.hasChildren) {
          for (let childRoute of dart.nullCheck(route.initialChildren)) {
            let match = this[_matchByRoute](childRoute, subRoutes);
            if (match == null) {
              return null;
            } else {
              childMatches[$add](match);
            }
          }
        } else {
          let defaultMatches = this[_match](core._Uri.new({path: ""}), subRoutes);
          if (defaultMatches != null) {
            childMatches[$addAll](defaultMatches);
          }
        }
      } else if (route.hasChildren) {
        return null;
      }
      return new route_match.RouteMatch.new({routeName: route.routeName, segments: path.split(route.stringMatch), path: route.path, args: route.args, key: new (T$.ValueKeyOfString()).new(config.usesPathAsKey ? route.stringMatch : route.routeName), guards: config.guards, stringMatch: route.stringMatch, fragment: route.fragment, redirectedFrom: route.redirectedFrom, children: childMatches, pathParams: new parameters.Parameters.new(route.rawPathParams), queryParams: new parameters.Parameters.new(route.rawQueryParams)});
    }
    [_normalizeSingleValues](queryParametersAll) {
      let queryMap = new (T$.IdentityMapOfString$dynamic()).new();
      for (let key of queryParametersAll[$keys]) {
        let list = queryParametersAll[$_get](key);
        if (dart.nullCheck(list)[$length] > 1) {
          queryMap[$_set](key, list);
        } else if (list[$isNotEmpty]) {
          queryMap[$_set](key, list[$first]);
        } else {
          queryMap[$_set](key, null);
        }
      }
      return queryMap;
    }
  };
  (route_matcher.RouteMatcher.new = function(collection) {
    this[collection$] = collection;
    ;
  }).prototype = route_matcher.RouteMatcher.prototype;
  dart.addTypeTests(route_matcher.RouteMatcher);
  dart.addTypeCaches(route_matcher.RouteMatcher);
  dart.setMethodSignature(route_matcher.RouteMatcher, () => ({
    __proto__: dart.getMethods(route_matcher.RouteMatcher.__proto__),
    match: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [core.String], {includePrefixMatches: core.bool}, {}),
    matchUri: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [core.Uri], {includePrefixMatches: core.bool}, {}),
    [_match]: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [core.Uri, route_matcher.RouteCollection], {includePrefixMatches: core.bool, redirectedFrom: dart.nullable(core.String), root: core.bool}, {}),
    [_handleRedirect]: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [], {}, {includePrefixMatches: core.bool, redirectTo: core.Uri, redirectedFrom: core.String, routesCollection: route_matcher.RouteCollection}),
    matchByPath: dart.fnType(dart.nullable(route_match.RouteMatch), [core.Uri, route_config.RouteConfig], {redirectedFrom: dart.nullable(core.String)}, {}),
    matchByRoute: dart.fnType(dart.nullable(route_match.RouteMatch), [page_route_info.PageRouteInfo]),
    [_matchByRoute]: dart.fnType(dart.nullable(route_match.RouteMatch), [page_route_info.PageRouteInfo, route_matcher.RouteCollection]),
    [_normalizeSingleValues]: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map$(core.String, core.List$(core.String))])
  }));
  dart.setLibraryUri(route_matcher.RouteMatcher, I[21]);
  dart.setFieldSignature(route_matcher.RouteMatcher, () => ({
    __proto__: dart.getFields(route_matcher.RouteMatcher.__proto__),
    collection: dart.finalFieldType(route_matcher.RouteCollection)
  }));
  var _parent$0 = dart.privateName(routing_controller, "TabsRouter._parent");
  var key$0 = dart.privateName(routing_controller, "TabsRouter.key");
  var routeCollection$ = dart.privateName(routing_controller, "TabsRouter.routeCollection");
  var pageBuilder$ = dart.privateName(routing_controller, "TabsRouter.pageBuilder");
  var matcher = dart.privateName(routing_controller, "TabsRouter.matcher");
  var routeData$1 = dart.privateName(routing_controller, "TabsRouter.routeData");
  var initialPreMatchedRoutes$0 = dart.privateName(routing_controller, "TabsRouter.initialPreMatchedRoutes");
  var managedByWidget$ = dart.privateName(routing_controller, "TabsRouter.managedByWidget");
  var onNavigate$2 = dart.privateName(routing_controller, "TabsRouter.onNavigate");
  var _activeIndex$0 = dart.privateName(routing_controller, "_activeIndex");
  var _activePage = dart.privateName(routing_controller, "_activePage");
  routing_controller.TabsRouter = class TabsRouter extends routing_controller.RoutingController {
    get [_parent$]() {
      return this[_parent$0];
    }
    set [_parent$](value) {
      super[_parent$] = value;
    }
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get routeCollection() {
      return this[routeCollection$];
    }
    set routeCollection(value) {
      super.routeCollection = value;
    }
    get pageBuilder() {
      return this[pageBuilder$];
    }
    set pageBuilder(value) {
      super.pageBuilder = value;
    }
    get matcher() {
      return this[matcher];
    }
    set matcher(value) {
      super.matcher = value;
    }
    get routeData() {
      return this[routeData$1];
    }
    set routeData(value) {
      super.routeData = value;
    }
    get initialPreMatchedRoutes() {
      return this[initialPreMatchedRoutes$0];
    }
    set initialPreMatchedRoutes(value) {
      super.initialPreMatchedRoutes = value;
    }
    get managedByWidget() {
      return this[managedByWidget$];
    }
    set managedByWidget(value) {
      this[managedByWidget$] = value;
    }
    get onNavigate() {
      return this[onNavigate$2];
    }
    set onNavigate(value) {
      this[onNavigate$2] = value;
    }
    get current() {
      let t31;
      t31 = this.currentChild;
      return t31 == null ? this.routeData : t31;
    }
    get currentChild() {
      if (this[_activeIndex$0] < this[_pages][$length]) {
        return this[_pages][$_get](this[_activeIndex$0]).routeData;
      } else {
        return null;
      }
    }
    get activeIndex() {
      return this[_activeIndex$0];
    }
    setActiveIndex(index, opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      if (!(index >= 0 && index < this[_pages][$length])) dart.assertFailed(null, I[8], 310, 12, "index >= 0 && index < _pages.length");
      if (this[_activeIndex$0] !== index) {
        this[_activeIndex$0] = index;
        if (notify) {
          this.notifyListeners();
        }
      }
    }
    get stack() {
      return T$.ListOfAutoRoutePage().unmodifiable(this[_pages]);
    }
    get [_activePage]() {
      return this[_pages][$isEmpty] ? null : this[_pages][$_get](this[_activeIndex$0]);
    }
    get topMost() {
      let t31;
      let activeKey = (t31 = this[_activePage], t31 == null ? null : t31.routeData.key);
      if (this[_childControllers][$containsKey](activeKey)) {
        return dart.nullCheck(this[_childControllers][$_get](activeKey)).topMost;
      }
      return this;
    }
    get hasEntries() {
      return this[_pages][$isNotEmpty];
    }
    pop(T, result = null) {
      if (this[_parent$] != null) {
        return dart.nullCheck(this[_parent$]).pop(T, result);
      } else {
        return new (T$.SynchronousFutureOfbool()).new(false);
      }
    }
    setupRoutes(routes) {
      let t31, t31$;
      let routesToPush = dart.nullCheck(this[_matchAllOrReportFailure](routes));
      if ((t31 = this.initialPreMatchedRoutes, t31 == null ? null : t31[$isNotEmpty]) === true) {
        let preMatchedRoute = dart.nullCheck(this.initialPreMatchedRoutes)[$last];
        let correspondingRouteIndex = routes[$indexWhere](dart.fn(r => r.routeName === preMatchedRoute.routeName, T$.PageRouteInfoTobool()));
        if (correspondingRouteIndex !== -1) {
          if (this.managedByWidget) {
            t31$ = this.onNavigate;
            t31$ == null ? null : t31$(preMatchedRoute, true);
          }
          routesToPush[$_set](correspondingRouteIndex, preMatchedRoute);
          this[_activeIndex$0] = correspondingRouteIndex;
        }
      }
      if (routesToPush[$isNotEmpty]) {
        this[_pushAll](routesToPush);
      }
    }
    [_pushAll](routes) {
      let t31;
      for (let route of routes) {
        let data = this[_createRouteData](route, this.routeData);
        this[_pages][$add]((t31 = data, this.pageBuilder(t31)));
      }
    }
    replaceAll(routes) {
      let routesToPush = dart.nullCheck(this[_matchAllOrReportFailure](routes));
      this[_pages][$clear]();
      this[_pushAll](routesToPush);
    }
    [_navigateAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.void, (function* _navigateAll$() {
        let t31, t31$, t31$0, t31$1;
        if (routes[$isNotEmpty]) {
          let mayUpdateRoute = routes[$last];
          let pageToUpdateIndex = this[_pages][$indexWhere](dart.fn(p => p.routeKey[$_equals](mayUpdateRoute.key), T$.AutoRoutePageTobool()));
          if (pageToUpdateIndex !== -1) {
            if (!this.managedByWidget) {
              this.setActiveIndex(pageToUpdateIndex);
            } else if (this.onNavigate != null) {
              dart.nullCheck(this.onNavigate)(mayUpdateRoute, false);
            }
            let mayUpdateController = this[_childControllers][$_get](mayUpdateRoute.key);
            if (mayUpdateController != null) {
              let newRoutes = (t31 = mayUpdateRoute.children, t31 == null ? C[88] || CT.C88 : t31);
              if (mayUpdateController.managedByWidget) {
                if (routing_controller.StackRouter.is(mayUpdateController)) {
                  t31$ = mayUpdateController.onNavigate;
                  t31$ == null ? null : t31$(newRoutes, false);
                } else if (routing_controller.TabsRouter.is(mayUpdateController) && newRoutes[$isNotEmpty]) {
                  t31$0 = mayUpdateController.onNavigate;
                  t31$0 == null ? null : t31$0(newRoutes[$last], false);
                }
              }
              return mayUpdateController[_navigateAll](newRoutes, {onFailure: onFailure});
            } else {
              let data = this[_createRouteData](mayUpdateRoute, this.routeData);
              this[_pages][$_set](pageToUpdateIndex, (t31$1 = data, this.pageBuilder(t31$1)));
            }
          }
          this[_updateSharedPathData]({queryParams: mayUpdateRoute.queryParams.rawMap, fragment: mayUpdateRoute.fragment, includeAncestors: false});
        }
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }).bind(this));
    }
    stackRouterOfIndex(index) {
      if (this[_childControllers][$isEmpty]) {
        return null;
      }
      let routeKey = this[_pages][$_get](index).routeData.key;
      if (routing_controller.StackRouter.is(this[_childControllers][$_get](routeKey))) {
        return routing_controller.StackRouter.as(this[_childControllers][$_get](routeKey));
      } else {
        return null;
      }
    }
    get canPopSelfOrChildren() {
      if (this[_childControllers][$containsKey](this[_pages][$_get](this[_activeIndex$0]).routeData.key)) {
        return dart.nullCheck(this[_childControllers][$_get](this[_pages][$_get](this[_activeIndex$0]).routeData.key)).canPopSelfOrChildren;
      }
      return false;
    }
    get currentSegments() {
      let currentData = this.currentChild;
      let segments = T$.JSArrayOfRouteMatch().of([]);
      if (currentData != null) {
        segments[$add](currentData.route);
        if (this[_childControllers][$containsKey](currentData.key)) {
          segments[$addAll](dart.nullCheck(this[_childControllers][$_get](currentData.key)).currentSegments);
        }
      } else if (this.routeData.route.hasChildren) {
        segments[$addAll](dart.nullCheck(this.routeData.route.children)[$last].flattened);
      }
      return segments;
    }
    [_updateSharedPathData](opts) {
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[132] || CT.C132;
      let fragment = opts && 'fragment' in opts ? opts.fragment : "";
      let includeAncestors = opts && 'includeAncestors' in opts ? opts.includeAncestors : false;
      let newData = this[_pages][$_get](this.activeIndex).routeData;
      let route = newData.route;
      newData[_updateRoute](route.copyWith({queryParams: new parameters.Parameters.new(queryParams), fragment: fragment}));
      if (includeAncestors && this[_parent$] != null) {
        dart.nullCheck(this[_parent$])[_updateSharedPathData]({queryParams: queryParams, fragment: fragment});
      }
    }
  };
  (routing_controller.TabsRouter.new = function(opts) {
    let t31;
    let routeCollection = opts && 'routeCollection' in opts ? opts.routeCollection : null;
    let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let routeData = opts && 'routeData' in opts ? opts.routeData : null;
    let managedByWidget = opts && 'managedByWidget' in opts ? opts.managedByWidget : false;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let initialPreMatchedRoutes = opts && 'initialPreMatchedRoutes' in opts ? opts.initialPreMatchedRoutes : null;
    let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : null;
    this[_activeIndex$0] = 0;
    this[routeCollection$] = routeCollection;
    this[pageBuilder$] = pageBuilder;
    this[key$0] = key;
    this[routeData$1] = routeData;
    this[managedByWidget$] = managedByWidget;
    this[onNavigate$2] = onNavigate;
    this[initialPreMatchedRoutes$0] = initialPreMatchedRoutes;
    this[matcher] = new route_matcher.RouteMatcher.new(routeCollection);
    this[_activeIndex$0] = (t31 = initialIndex, t31 == null ? 0 : t31);
    this[_parent$0] = parent;
    routing_controller.TabsRouter.__proto__.new.call(this);
    if (parent != null) {
      this.addListener(dart.bind(this.root, 'notifyListeners'));
    }
  }).prototype = routing_controller.TabsRouter.prototype;
  dart.addTypeTests(routing_controller.TabsRouter);
  dart.addTypeCaches(routing_controller.TabsRouter);
  dart.setMethodSignature(routing_controller.TabsRouter, () => ({
    __proto__: dart.getMethods(routing_controller.TabsRouter.__proto__),
    setActiveIndex: dart.fnType(dart.void, [core.int], {notify: core.bool}, {}),
    pop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    setupRoutes: dart.fnType(dart.void, [core.List$(page_route_info.PageRouteInfo)]),
    [_pushAll]: dart.fnType(dart.void, [core.List$(route_match.RouteMatch)]),
    replaceAll: dart.fnType(dart.void, [core.List$(page_route_info.PageRouteInfo)]),
    [_navigateAll]: dart.fnType(async.Future$(dart.void), [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    stackRouterOfIndex: dart.fnType(dart.nullable(routing_controller.StackRouter), [core.int]),
    [_updateSharedPathData]: dart.fnType(dart.void, [], {fragment: core.String, includeAncestors: core.bool, queryParams: core.Map$(core.String, dart.dynamic)}, {})
  }));
  dart.setGetterSignature(routing_controller.TabsRouter, () => ({
    __proto__: dart.getGetters(routing_controller.TabsRouter.__proto__),
    current: routing_controller.RouteData,
    currentChild: dart.nullable(routing_controller.RouteData),
    activeIndex: core.int,
    stack: core.List$(auto_route_page.AutoRoutePage),
    [_activePage]: dart.nullable(auto_route_page.AutoRoutePage),
    topMost: routing_controller.RoutingController,
    hasEntries: core.bool,
    canPopSelfOrChildren: core.bool,
    currentSegments: core.List$(route_match.RouteMatch)
  }));
  dart.setLibraryUri(routing_controller.TabsRouter, I[9]);
  dart.setFieldSignature(routing_controller.TabsRouter, () => ({
    __proto__: dart.getFields(routing_controller.TabsRouter.__proto__),
    [_parent$]: dart.finalFieldType(dart.nullable(routing_controller.RoutingController)),
    key: dart.finalFieldType(key.LocalKey),
    routeCollection: dart.finalFieldType(route_matcher.RouteCollection),
    pageBuilder: dart.finalFieldType(dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData])),
    matcher: dart.finalFieldType(route_matcher.RouteMatcher),
    routeData: dart.finalFieldType(routing_controller.RouteData),
    initialPreMatchedRoutes: dart.finalFieldType(dart.nullable(core.List$(route_match.RouteMatch))),
    [_activeIndex$0]: dart.fieldType(core.int),
    managedByWidget: dart.fieldType(core.bool),
    onNavigate: dart.fieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, core.bool])))
  }));
  var matcher$ = dart.privateName(routing_controller, "NestedStackRouter.matcher");
  var routeCollection$0 = dart.privateName(routing_controller, "NestedStackRouter.routeCollection");
  var pageBuilder$0 = dart.privateName(routing_controller, "NestedStackRouter.pageBuilder");
  var managedByWidget$0 = dart.privateName(routing_controller, "NestedStackRouter.managedByWidget");
  var routeData$2 = dart.privateName(routing_controller, "NestedStackRouter.routeData");
  var _pushInitialRoutes = dart.privateName(routing_controller, "_pushInitialRoutes");
  routing_controller.NestedStackRouter = class NestedStackRouter extends routing_controller.StackRouter {
    get matcher() {
      return this[matcher$];
    }
    set matcher(value) {
      super.matcher = value;
    }
    get routeCollection() {
      return this[routeCollection$0];
    }
    set routeCollection(value) {
      super.routeCollection = value;
    }
    get pageBuilder() {
      return this[pageBuilder$0];
    }
    set pageBuilder(value) {
      super.pageBuilder = value;
    }
    get managedByWidget() {
      return this[managedByWidget$0];
    }
    set managedByWidget(value) {
      super.managedByWidget = value;
    }
    get routeData() {
      return this[routeData$2];
    }
    set routeData(value) {
      super.routeData = value;
    }
    [_pushInitialRoutes]() {
      let t31, t31$;
      if ((t31 = this.initialPreMatchedRoutes, t31 == null ? null : t31[$isNotEmpty]) === true) {
        if (this.managedByWidget) {
          t31$ = this.onNavigate;
          t31$ == null ? null : t31$(dart.nullCheck(this.initialPreMatchedRoutes), true);
        } else {
          this[_pushAllGuarded](T$.ObjectN(), dart.nullCheck(this.initialPreMatchedRoutes));
        }
      }
    }
  };
  (routing_controller.NestedStackRouter.new = function(opts) {
    let routeCollection = opts && 'routeCollection' in opts ? opts.routeCollection : null;
    let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let routeData = opts && 'routeData' in opts ? opts.routeData : null;
    let managedByWidget = opts && 'managedByWidget' in opts ? opts.managedByWidget : false;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let onRoutes = opts && 'onRoutes' in opts ? opts.onRoutes : null;
    let preMatchedRoutes = opts && 'preMatchedRoutes' in opts ? opts.preMatchedRoutes : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    this[routeCollection$0] = routeCollection;
    this[pageBuilder$0] = pageBuilder;
    this[routeData$2] = routeData;
    this[managedByWidget$0] = managedByWidget;
    this[matcher$] = new route_matcher.RouteMatcher.new(routeCollection);
    routing_controller.NestedStackRouter.__proto__.new.call(this, {key: key, initialPreMatchedRoutes: preMatchedRoutes, parent: parent, onNavigate: onRoutes, navigatorKey: navigatorKey});
    this[_pushInitialRoutes]();
  }).prototype = routing_controller.NestedStackRouter.prototype;
  dart.addTypeTests(routing_controller.NestedStackRouter);
  dart.addTypeCaches(routing_controller.NestedStackRouter);
  dart.setMethodSignature(routing_controller.NestedStackRouter, () => ({
    __proto__: dart.getMethods(routing_controller.NestedStackRouter.__proto__),
    [_pushInitialRoutes]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(routing_controller.NestedStackRouter, I[9]);
  dart.setFieldSignature(routing_controller.NestedStackRouter, () => ({
    __proto__: dart.getFields(routing_controller.NestedStackRouter.__proto__),
    matcher: dart.finalFieldType(route_matcher.RouteMatcher),
    routeCollection: dart.finalFieldType(route_matcher.RouteCollection),
    pageBuilder: dart.finalFieldType(dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData])),
    managedByWidget: dart.finalFieldType(core.bool),
    routeData: dart.finalFieldType(routing_controller.RouteData)
  }));
  var router$0 = dart.privateName(routing_controller, "_RouterScopeResult.router");
  var matches$ = dart.privateName(routing_controller, "_RouterScopeResult.matches");
  const _is__RouterScopeResult_default = Symbol('_is__RouterScopeResult_default');
  routing_controller._RouterScopeResult$ = dart.generic(T => {
    class _RouterScopeResult extends core.Object {
      get router() {
        return this[router$0];
      }
      set router(value) {
        super.router = value;
      }
      get matches() {
        return this[matches$];
      }
      set matches(value) {
        super.matches = value;
      }
    }
    (_RouterScopeResult.new = function(router, matches) {
      this[router$0] = router;
      this[matches$] = matches;
      ;
    }).prototype = _RouterScopeResult.prototype;
    dart.addTypeTests(_RouterScopeResult);
    _RouterScopeResult.prototype[_is__RouterScopeResult_default] = true;
    dart.addTypeCaches(_RouterScopeResult);
    dart.setLibraryUri(_RouterScopeResult, I[9]);
    dart.setFieldSignature(_RouterScopeResult, () => ({
      __proto__: dart.getFields(_RouterScopeResult.__proto__),
      router: dart.finalFieldType(T),
      matches: dart.finalFieldType(core.List$(route_match.RouteMatch))
    }));
    return _RouterScopeResult;
  });
  routing_controller._RouterScopeResult = routing_controller._RouterScopeResult$();
  dart.addTypeTests(routing_controller._RouterScopeResult, _is__RouterScopeResult_default);
  var parent$ = dart.privateName(routing_controller, "RouteData.parent");
  var router$1 = dart.privateName(routing_controller, "RouteData.router");
  var _route = dart.privateName(routing_controller, "_route");
  var _preMatchedPendingRoutes = dart.privateName(routing_controller, "_preMatchedPendingRoutes");
  routing_controller.RouteData = class RouteData extends core.Object {
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get router() {
      return this[router$1];
    }
    set router(value) {
      super.router = value;
    }
    get key() {
      return this[_route].key;
    }
    get breadcrumbs() {
      return T$.ListOfRouteMatch().unmodifiable((() => {
        let t31 = [];
        if (this.parent != null) t31[$addAll](dart.nullCheck(this.parent).breadcrumbs);
        t31[$add](this[_route]);
        return t31;
      })());
    }
    get preMatchedPendingRoutes() {
      let pending = this[_preMatchedPendingRoutes];
      this[_preMatchedPendingRoutes] = null;
      return pending;
    }
    get isActive() {
      return this.router.isRouteActive(this.name);
    }
    get hasPendingRoutes() {
      return this[_preMatchedPendingRoutes] != null;
    }
    static of(context) {
      return route_data_scope.RouteDataScope.of(context);
    }
    argsAs(T, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      let args = this[_route].args;
      if (args == null) {
        if (orElse == null) {
          dart.throw(assertions.FlutterError.new(dart.wrapType(T).toString() + " can not be null because it has a required parameter"));
        } else {
          return orElse();
        }
      } else if (!T.is(args)) {
        dart.throw(assertions.FlutterError.new("Expected [" + dart.wrapType(T).toString() + "],  found [" + dart.str(dart.runtimeType(args)) + "]"));
      } else {
        return T.as(args);
      }
    }
    [_updateRoute](value) {
      if (!this[_route]._equals(value)) {
        this[_route] = value;
      }
    }
    get route() {
      return this[_route];
    }
    get name() {
      return this[_route].routeName;
    }
    get path() {
      return this[_route].path;
    }
    get args() {
      return this[_route].args;
    }
    get match() {
      return this[_route].stringMatch;
    }
    get inheritedPathParams() {
      if (this.parent == null) {
        return C[131] || CT.C131;
      }
      return dart.nullCheck(this.parent).breadcrumbs[$map](parameters.Parameters, dart.fn(e => e.pathParams, T$.RouteMatchToParameters()))[$reduce](dart.fn((value, element) => value['+'](element), T$.ParametersAndParametersToParameters()));
    }
    get pathParams() {
      return this[_route].pathParams;
    }
    get queryParams() {
      return this[_route].queryParams;
    }
    get fragment() {
      return this[_route].fragment;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || routing_controller.RouteData.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.route._equals(other.route);
    }
    get hashCode() {
      return (this.route.hashCode ^ dart.hashCode(this.parent)) >>> 0;
    }
  };
  (routing_controller.RouteData.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let router = opts && 'router' in opts ? opts.router : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let preMatchedPendingRoutes = opts && 'preMatchedPendingRoutes' in opts ? opts.preMatchedPendingRoutes : null;
    this[router$1] = router;
    this[parent$] = parent;
    this[_route] = route;
    this[_preMatchedPendingRoutes] = preMatchedPendingRoutes;
    ;
  }).prototype = routing_controller.RouteData.prototype;
  dart.addTypeTests(routing_controller.RouteData);
  dart.addTypeCaches(routing_controller.RouteData);
  dart.setMethodSignature(routing_controller.RouteData, () => ({
    __proto__: dart.getMethods(routing_controller.RouteData.__proto__),
    argsAs: dart.gFnType(T => [T, [], {orElse: dart.nullable(dart.fnType(T, []))}, {}], T => [dart.nullable(core.Object)]),
    [_updateRoute]: dart.fnType(dart.void, [route_match.RouteMatch])
  }));
  dart.setGetterSignature(routing_controller.RouteData, () => ({
    __proto__: dart.getGetters(routing_controller.RouteData.__proto__),
    key: key.LocalKey,
    breadcrumbs: core.List$(route_match.RouteMatch),
    preMatchedPendingRoutes: dart.nullable(core.List$(route_match.RouteMatch)),
    isActive: core.bool,
    hasPendingRoutes: core.bool,
    route: route_match.RouteMatch,
    name: core.String,
    path: core.String,
    args: dart.nullable(core.Object),
    match: core.String,
    inheritedPathParams: parameters.Parameters,
    pathParams: parameters.Parameters,
    queryParams: parameters.Parameters,
    fragment: core.String
  }));
  dart.setLibraryUri(routing_controller.RouteData, I[9]);
  dart.setFieldSignature(routing_controller.RouteData, () => ({
    __proto__: dart.getFields(routing_controller.RouteData.__proto__),
    [_route]: dart.fieldType(route_match.RouteMatch),
    parent: dart.finalFieldType(dart.nullable(routing_controller.RouteData)),
    router: dart.finalFieldType(routing_controller.RoutingController),
    [_preMatchedPendingRoutes]: dart.fieldType(dart.nullable(core.List$(route_match.RouteMatch)))
  }));
  dart.defineExtensionMethods(routing_controller.RouteData, ['_equals']);
  dart.defineExtensionAccessors(routing_controller.RouteData, ['hashCode']);
  auto_route_guard.AutoRouteGuard = class AutoRouteGuard extends core.Object {};
  (auto_route_guard.AutoRouteGuard.new = function() {
    ;
  }).prototype = auto_route_guard.AutoRouteGuard.prototype;
  dart.addTypeTests(auto_route_guard.AutoRouteGuard);
  dart.addTypeCaches(auto_route_guard.AutoRouteGuard);
  dart.setLibraryUri(auto_route_guard.AutoRouteGuard, I[22]);
  var route$ = dart.privateName(auto_route_guard, "NavigationResolver.route");
  var pendingRoutes$ = dart.privateName(auto_route_guard, "NavigationResolver.pendingRoutes");
  var _completer$ = dart.privateName(auto_route_guard, "_completer");
  auto_route_guard.NavigationResolver = class NavigationResolver extends core.Object {
    get route() {
      return this[route$];
    }
    set route(value) {
      super.route = value;
    }
    get pendingRoutes() {
      return this[pendingRoutes$];
    }
    set pendingRoutes(value) {
      super.pendingRoutes = value;
    }
    next(continueNavigation = true) {
      if (!!this.isResolved) dart.assertFailed("Make sure `resolver.next()` is only called once.", I[23], 37, 12, "!isResolved");
      this[_completer$].complete(continueNavigation);
    }
    get isResolved() {
      return this[_completer$].isCompleted;
    }
  };
  (auto_route_guard.NavigationResolver.new = function(_completer, route, opts) {
    let pendingRoutes = opts && 'pendingRoutes' in opts ? opts.pendingRoutes : C[88] || CT.C88;
    this[_completer$] = _completer;
    this[route$] = route;
    this[pendingRoutes$] = pendingRoutes;
    ;
  }).prototype = auto_route_guard.NavigationResolver.prototype;
  dart.addTypeTests(auto_route_guard.NavigationResolver);
  dart.addTypeCaches(auto_route_guard.NavigationResolver);
  dart.setMethodSignature(auto_route_guard.NavigationResolver, () => ({
    __proto__: dart.getMethods(auto_route_guard.NavigationResolver.__proto__),
    next: dart.fnType(dart.void, [], [core.bool])
  }));
  dart.setGetterSignature(auto_route_guard.NavigationResolver, () => ({
    __proto__: dart.getGetters(auto_route_guard.NavigationResolver.__proto__),
    isResolved: core.bool
  }));
  dart.setLibraryUri(auto_route_guard.NavigationResolver, I[22]);
  dart.setFieldSignature(auto_route_guard.NavigationResolver, () => ({
    __proto__: dart.getFields(auto_route_guard.NavigationResolver.__proto__),
    [_completer$]: dart.finalFieldType(async.Completer$(core.bool)),
    route: dart.finalFieldType(route_match.RouteMatch),
    pendingRoutes: dart.finalFieldType(core.List$(route_match.RouteMatch))
  }));
  const pathParams$ = RouteMatch_pathParams;
  const queryParams$ = RouteMatch_queryParams;
  const children$ = RouteMatch_children;
  const fragment$ = RouteMatch_fragment;
  const segments$0 = RouteMatch_segments;
  const redirectedFrom$ = RouteMatch_redirectedFrom;
  const routeName$ = RouteMatch_routeName;
  const path$0 = RouteMatch_path;
  const stringMatch$ = RouteMatch_stringMatch;
  const args$ = RouteMatch_args;
  const guards$0 = RouteMatch_guards;
  const key$1 = RouteMatch_key;
  route_match.RouteMatch = class RouteMatch extends core.Object {
    get pathParams() {
      return this[pathParams$];
    }
    set pathParams(value) {
      super.pathParams = value;
    }
    get queryParams() {
      return this[queryParams$];
    }
    set queryParams(value) {
      super.queryParams = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get fragment() {
      return this[fragment$];
    }
    set fragment(value) {
      super.fragment = value;
    }
    get segments() {
      return this[segments$0];
    }
    set segments(value) {
      super.segments = value;
    }
    get redirectedFrom() {
      return this[redirectedFrom$];
    }
    set redirectedFrom(value) {
      super.redirectedFrom = value;
    }
    get routeName() {
      return this[routeName$];
    }
    set routeName(value) {
      super.routeName = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get stringMatch() {
      return this[stringMatch$];
    }
    set stringMatch(value) {
      super.stringMatch = value;
    }
    get args() {
      return this[args$];
    }
    set args(value) {
      super.args = value;
    }
    get guards() {
      return this[guards$0];
    }
    set guards(value) {
      super.guards = value;
    }
    get key() {
      return this[key$1];
    }
    set key(value) {
      super.key = value;
    }
    get hasChildren() {
      let t32;
      return (t32 = this.children, t32 == null ? null : t32[$isNotEmpty]) === true;
    }
    get fromRedirect() {
      return this.redirectedFrom != null;
    }
    get allSegments() {
      return (() => {
        let t32 = T$.ListOfString().of(this.segments);
        if (this.hasChildren) t32[$addAll](dart.nullCheck(this.children)[$last].allSegments);
        return t32;
      })();
    }
    get flattened() {
      return (() => {
        let t33 = T$.JSArrayOfRouteMatch().of([this]);
        if (this.hasChildren) t33[$addAll](dart.nullCheck(this.children)[$last].flattened);
        return t33;
      })();
    }
    copyWith(opts) {
      let t34, t34$, t34$0, t34$1, t34$2, t34$3, t34$4, t34$5, t34$6, t34$7, t34$8, t34$9;
      let path = opts && 'path' in opts ? opts.path : null;
      let stringMatch = opts && 'stringMatch' in opts ? opts.stringMatch : null;
      let pathParams = opts && 'pathParams' in opts ? opts.pathParams : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let fragment = opts && 'fragment' in opts ? opts.fragment : null;
      let segments = opts && 'segments' in opts ? opts.segments : null;
      let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
      let routeName = opts && 'routeName' in opts ? opts.routeName : null;
      let args = opts && 'args' in opts ? opts.args : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let guards = opts && 'guards' in opts ? opts.guards : null;
      return new route_match.RouteMatch.new({path: (t34 = path, t34 == null ? this.path : t34), stringMatch: (t34$ = stringMatch, t34$ == null ? this.stringMatch : t34$), routeName: (t34$0 = routeName, t34$0 == null ? this.routeName : t34$0), segments: (t34$1 = segments, t34$1 == null ? this.segments : t34$1), children: (t34$2 = children, t34$2 == null ? this.children : t34$2), pathParams: (t34$3 = pathParams, t34$3 == null ? this.pathParams : t34$3), queryParams: (t34$4 = queryParams, t34$4 == null ? this.queryParams : t34$4), fragment: (t34$5 = fragment, t34$5 == null ? this.fragment : t34$5), args: (t34$6 = args, t34$6 == null ? this.args : t34$6), key: (t34$7 = key, t34$7 == null ? this.key : t34$7), guards: (t34$8 = guards, t34$8 == null ? this.guards : t34$8), redirectedFrom: (t34$9 = redirectedFrom, t34$9 == null ? this.redirectedFrom : t34$9)});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || route_match.RouteMatch.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.path === other.path && this.routeName === other.routeName && this.stringMatch === other.stringMatch && this.pathParams._equals(other.pathParams) && this.key[$_equals](other.key) && new equality.ListEquality.new().equals(this.guards, other.guards) && this.queryParams._equals(other.queryParams) && new equality.ListEquality.new().equals(this.children, other.children) && this.fragment === other.fragment && this.redirectedFrom == other.redirectedFrom && new equality.ListEquality.new().equals(this.segments, other.segments);
    }
    get hashCode() {
      return (this.pathParams.hashCode ^ this.queryParams.hashCode ^ new equality.ListEquality.new().hash(this.children) ^ new equality.ListEquality.new().hash(this.guards) ^ this.fragment[$hashCode] ^ dart.hashCode(this.redirectedFrom) ^ this.path[$hashCode] ^ this.stringMatch[$hashCode] ^ this.routeName[$hashCode] ^ this.key[$hashCode] ^ new equality.ListEquality.new().hash(this.segments)) >>> 0;
    }
    toString() {
      return "RouteMatch{pathParams: " + dart.str(this.pathParams) + ", queryParams: " + dart.str(this.queryParams) + ", children: " + dart.str(this.children) + ", fragment: " + this.fragment + ", segments: " + dart.str(this.segments) + ", redirectedFrom: " + dart.str(this.redirectedFrom) + ", routeName: " + this.routeName + ", path: " + this.path + ", stringMatch: " + this.stringMatch + ", args: " + dart.str(this.args) + ", guards: " + dart.str(this.guards) + ", key: " + dart.str(this.key) + "}";
    }
    toRoute() {
      return page_route_info.PageRouteInfo.fromMatch(this);
    }
  };
  (route_match.RouteMatch.new = function(opts) {
    let routeName = opts && 'routeName' in opts ? opts.routeName : null;
    let segments = opts && 'segments' in opts ? opts.segments : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let stringMatch = opts && 'stringMatch' in opts ? opts.stringMatch : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let args = opts && 'args' in opts ? opts.args : null;
    let guards = opts && 'guards' in opts ? opts.guards : C[129] || CT.C129;
    let pathParams = opts && 'pathParams' in opts ? opts.pathParams : C[131] || CT.C131;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[131] || CT.C131;
    let fragment = opts && 'fragment' in opts ? opts.fragment : "";
    let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
    this[routeName$] = routeName;
    this[segments$0] = segments;
    this[path$0] = path;
    this[stringMatch$] = stringMatch;
    this[key$1] = key;
    this[children$] = children;
    this[args$] = args;
    this[guards$0] = guards;
    this[pathParams$] = pathParams;
    this[queryParams$] = queryParams;
    this[fragment$] = fragment;
    this[redirectedFrom$] = redirectedFrom;
    ;
  }).prototype = route_match.RouteMatch.prototype;
  dart.addTypeTests(route_match.RouteMatch);
  dart.addTypeCaches(route_match.RouteMatch);
  dart.setMethodSignature(route_match.RouteMatch, () => ({
    __proto__: dart.getMethods(route_match.RouteMatch.__proto__),
    copyWith: dart.fnType(route_match.RouteMatch, [], {args: dart.nullable(core.Object), children: dart.nullable(core.List$(route_match.RouteMatch)), fragment: dart.nullable(core.String), guards: dart.nullable(core.List$(auto_route_guard.AutoRouteGuard)), key: dart.nullable(key.LocalKey), path: dart.nullable(core.String), pathParams: dart.nullable(parameters.Parameters), queryParams: dart.nullable(parameters.Parameters), redirectedFrom: dart.nullable(core.String), routeName: dart.nullable(core.String), segments: dart.nullable(core.List$(core.String)), stringMatch: dart.nullable(core.String)}, {}),
    toRoute: dart.fnType(page_route_info.PageRouteInfo, [])
  }));
  dart.setGetterSignature(route_match.RouteMatch, () => ({
    __proto__: dart.getGetters(route_match.RouteMatch.__proto__),
    hasChildren: core.bool,
    fromRedirect: core.bool,
    allSegments: core.List$(core.String),
    flattened: core.List$(route_match.RouteMatch)
  }));
  dart.setLibraryUri(route_match.RouteMatch, I[24]);
  dart.setFieldSignature(route_match.RouteMatch, () => ({
    __proto__: dart.getFields(route_match.RouteMatch.__proto__),
    pathParams: dart.finalFieldType(parameters.Parameters),
    queryParams: dart.finalFieldType(parameters.Parameters),
    children: dart.finalFieldType(dart.nullable(core.List$(route_match.RouteMatch))),
    fragment: dart.finalFieldType(core.String),
    segments: dart.finalFieldType(core.List$(core.String)),
    redirectedFrom: dart.finalFieldType(dart.nullable(core.String)),
    routeName: dart.finalFieldType(core.String),
    path: dart.finalFieldType(core.String),
    stringMatch: dart.finalFieldType(core.String),
    args: dart.finalFieldType(dart.nullable(core.Object)),
    guards: dart.finalFieldType(core.List$(auto_route_guard.AutoRouteGuard)),
    key: dart.finalFieldType(key.LocalKey)
  }));
  dart.defineExtensionMethods(route_match.RouteMatch, ['_equals', 'toString']);
  dart.defineExtensionAccessors(route_match.RouteMatch, ['hashCode']);
  var _name$ = dart.privateName(page_route_info, "PageRouteInfo._name");
  var path$1 = dart.privateName(page_route_info, "PageRouteInfo.path");
  var args$0 = dart.privateName(page_route_info, "PageRouteInfo.args");
  var rawPathParams$ = dart.privateName(page_route_info, "PageRouteInfo.rawPathParams");
  var rawQueryParams$ = dart.privateName(page_route_info, "PageRouteInfo.rawQueryParams");
  var initialChildren$ = dart.privateName(page_route_info, "PageRouteInfo.initialChildren");
  var fragment$0 = dart.privateName(page_route_info, "PageRouteInfo.fragment");
  var _stringMatch = dart.privateName(page_route_info, "PageRouteInfo._stringMatch");
  var redirectedFrom$0 = dart.privateName(page_route_info, "PageRouteInfo.redirectedFrom");
  var _name$0 = dart.privateName(page_route_info, "_name");
  var _stringMatch$ = dart.privateName(page_route_info, "_stringMatch");
  const _is_PageRouteInfo_default = Symbol('_is_PageRouteInfo_default');
  page_route_info.PageRouteInfo$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class PageRouteInfo extends core.Object {
      get [_name$0]() {
        return this[_name$];
      }
      set [_name$0](value) {
        super[_name$0] = value;
      }
      get path() {
        return this[path$1];
      }
      set path(value) {
        super.path = value;
      }
      get args() {
        return this[args$0];
      }
      set args(value) {
        super.args = value;
      }
      get rawPathParams() {
        return this[rawPathParams$];
      }
      set rawPathParams(value) {
        super.rawPathParams = value;
      }
      get rawQueryParams() {
        return this[rawQueryParams$];
      }
      set rawQueryParams(value) {
        super.rawQueryParams = value;
      }
      get initialChildren() {
        return this[initialChildren$];
      }
      set initialChildren(value) {
        super.initialChildren = value;
      }
      get fragment() {
        return this[fragment$0];
      }
      set fragment(value) {
        super.fragment = value;
      }
      get [_stringMatch$]() {
        return this[_stringMatch];
      }
      set [_stringMatch$](value) {
        super[_stringMatch$] = value;
      }
      get redirectedFrom() {
        return this[redirectedFrom$0];
      }
      set redirectedFrom(value) {
        super.redirectedFrom = value;
      }
      get routeName() {
        return this[_name$0];
      }
      get stringMatch() {
        if (this[_stringMatch$] != null) {
          return dart.nullCheck(this[_stringMatch$]);
        }
        return page_route_info.PageRouteInfo._expand(this.path, this.rawPathParams);
      }
      get fullPath() {
        return path.joinAll((() => {
          let t34 = T$.JSArrayOfString().of([this.stringMatch]);
          if (this.hasChildren) t34[$add](dart.nullCheck(this.initialChildren)[$last].fullPath);
          return t34;
        })());
      }
      get hasChildren() {
        let t35;
        return (t35 = this.initialChildren, t35 == null ? null : t35[$isNotEmpty]) === true;
      }
      get fromRedirect() {
        return this.redirectedFrom != null;
      }
      get pathParams() {
        return new parameters.Parameters.new(this.rawPathParams);
      }
      get queryParams() {
        return new parameters.Parameters.new(this.rawQueryParams);
      }
      get params() {
        return this.rawPathParams;
      }
      static _expand(template, params) {
        if (utils.mapNullOrEmpty(params)) {
          return template;
        }
        let paramsRegex = core.RegExp.new(":(" + params[$keys][$join]("|") + ")");
        let path = template[$replaceAllMapped](paramsRegex, dart.fn(match => {
          let t35, t35$;
          t35$ = (t35 = params[$_get](match.group(1)), t35 == null ? null : dart.toString(t35));
          return t35$ == null ? "" : t35$;
        }, T$.MatchToString()));
        return path;
      }
      get flattened() {
        return (() => {
          let t35 = T$.JSArrayOfPageRouteInfo().of([this]);
          if (this.hasChildren) t35[$addAll](dart.nullCheck(this.initialChildren)[$last].flattened);
          return t35;
        })();
      }
      copyWith(opts) {
        let t36, t36$, t36$0, t36$1, t36$2, t36$3;
        let name = opts && 'name' in opts ? opts.name : null;
        let path = opts && 'path' in opts ? opts.path : null;
        let args = opts && 'args' in opts ? opts.args : null;
        TN().as(args);
        let match = opts && 'match' in opts ? opts.match : null;
        let params = opts && 'params' in opts ? opts.params : null;
        let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
        let children = opts && 'children' in opts ? opts.children : null;
        let fragment = opts && 'fragment' in opts ? opts.fragment : null;
        if ((name == null || name === this[_name$0]) && (path == null || path === this.path) && (fragment == null || fragment === this.fragment) && (args == null || core.identical(args, this.args)) && (params == null || params === this.rawPathParams) && (queryParams == null || queryParams === this.rawQueryParams) && (children == null || children == this.initialChildren)) {
          return this;
        }
        return new page_route_info.PageRouteInfo.new((t36 = name, t36 == null ? this[_name$0] : t36), {path: (t36$ = path, t36$ == null ? this.path : t36$), args: (t36$0 = args, t36$0 == null ? this.args : t36$0), rawPathParams: (t36$1 = params, t36$1 == null ? this.rawPathParams : t36$1), rawQueryParams: (t36$2 = queryParams, t36$2 == null ? this.rawQueryParams : t36$2), initialChildren: (t36$3 = children, t36$3 == null ? this.initialChildren : t36$3)});
      }
      toString() {
        let t36;
        return "Route{name: " + this[_name$0] + ", path: " + this.path + ", params: " + dart.str(this.rawPathParams) + "}, children: " + dart.str((t36 = this.initialChildren, t36 == null ? null : t36[$map](core.String, dart.fn(e => e.routeName, T$.PageRouteInfoToString()))));
      }
      static fromMatch(match) {
        let t36;
        return new (page_route_info.PageRouteInfo$(T)).new(match.routeName, {path: match.path, rawPathParams: match.pathParams.rawMap, rawQueryParams: match.queryParams.rawMap, fragment: match.fragment, redirectedFrom: match.redirectedFrom, stringMatch: match.stringMatch, initialChildren: (t36 = match.children, t36 == null ? null : t36[$map](page_route_info.PageRouteInfo, dart.fn(m => page_route_info.PageRouteInfo.fromMatch(m), T$.RouteMatchToPageRouteInfo()))[$toList]())});
      }
      show(context) {
        return auto_router_x['AutoRouterX|get#router'](context).push(T$.ObjectN(), this);
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || page_route_info.PageRouteInfo.is(other) && this[_name$0] === other[_name$0] && this.path === other.path && this.fragment === other.fragment && new equality.ListEquality.new().equals(this.initialChildren, other.initialChildren) && new equality.MapEquality.new().equals(this.rawPathParams, other.rawPathParams) && new equality.MapEquality.new().equals(this.rawQueryParams, other.rawQueryParams);
      }
      get hashCode() {
        return (this[_name$0][$hashCode] ^ this.path[$hashCode] ^ this.fragment[$hashCode] ^ new equality.MapEquality.new().hash(this.rawPathParams) ^ new equality.MapEquality.new().hash(this.rawQueryParams) ^ new equality.ListEquality.new().hash(this.initialChildren)) >>> 0;
      }
    }
    (PageRouteInfo.new = function(_name, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let initialChildren = opts && 'initialChildren' in opts ? opts.initialChildren : null;
      let args = opts && 'args' in opts ? opts.args : null;
      let rawPathParams = opts && 'rawPathParams' in opts ? opts.rawPathParams : C[132] || CT.C132;
      let rawQueryParams = opts && 'rawQueryParams' in opts ? opts.rawQueryParams : C[132] || CT.C132;
      let fragment = opts && 'fragment' in opts ? opts.fragment : "";
      let stringMatch = opts && 'stringMatch' in opts ? opts.stringMatch : null;
      let redirectedFrom = opts && 'redirectedFrom' in opts ? opts.redirectedFrom : null;
      this[_name$] = _name;
      this[path$1] = path;
      this[initialChildren$] = initialChildren;
      this[args$0] = args;
      this[rawPathParams$] = rawPathParams;
      this[rawQueryParams$] = rawQueryParams;
      this[fragment$0] = fragment;
      this[redirectedFrom$0] = redirectedFrom;
      this[_stringMatch] = stringMatch;
      ;
    }).prototype = PageRouteInfo.prototype;
    dart.addTypeTests(PageRouteInfo);
    PageRouteInfo.prototype[_is_PageRouteInfo_default] = true;
    dart.addTypeCaches(PageRouteInfo);
    dart.setMethodSignature(PageRouteInfo, () => ({
      __proto__: dart.getMethods(PageRouteInfo.__proto__),
      copyWith: dart.fnType(page_route_info.PageRouteInfo, [], {args: dart.nullable(core.Object), children: dart.nullable(core.List$(page_route_info.PageRouteInfo)), fragment: dart.nullable(core.String), match: dart.nullable(route_match.RouteMatch), name: dart.nullable(core.String), params: dart.nullable(core.Map$(core.String, dart.dynamic)), path: dart.nullable(core.String), queryParams: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
      show: dart.fnType(async.Future$(dart.void), [framework.BuildContext])
    }));
    dart.setGetterSignature(PageRouteInfo, () => ({
      __proto__: dart.getGetters(PageRouteInfo.__proto__),
      routeName: core.String,
      stringMatch: core.String,
      fullPath: core.String,
      hasChildren: core.bool,
      fromRedirect: core.bool,
      pathParams: parameters.Parameters,
      queryParams: parameters.Parameters,
      params: core.Map$(core.String, dart.dynamic),
      flattened: core.List$(page_route_info.PageRouteInfo)
    }));
    dart.setLibraryUri(PageRouteInfo, I[25]);
    dart.setFieldSignature(PageRouteInfo, () => ({
      __proto__: dart.getFields(PageRouteInfo.__proto__),
      [_name$0]: dart.finalFieldType(core.String),
      path: dart.finalFieldType(core.String),
      args: dart.finalFieldType(dart.nullable(T)),
      rawPathParams: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
      rawQueryParams: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
      initialChildren: dart.finalFieldType(dart.nullable(core.List$(page_route_info.PageRouteInfo))),
      fragment: dart.finalFieldType(core.String),
      [_stringMatch$]: dart.finalFieldType(dart.nullable(core.String)),
      redirectedFrom: dart.finalFieldType(dart.nullable(core.String))
    }));
    dart.defineExtensionMethods(PageRouteInfo, ['toString', '_equals']);
    dart.defineExtensionAccessors(PageRouteInfo, ['hashCode']);
    return PageRouteInfo;
  });
  page_route_info.PageRouteInfo = page_route_info.PageRouteInfo$();
  dart.addTypeTests(page_route_info.PageRouteInfo, _is_PageRouteInfo_default);
  navigation_failure.NavigationFailure = class NavigationFailure extends core.Object {};
  (navigation_failure.NavigationFailure.new = function() {
    ;
  }).prototype = navigation_failure.NavigationFailure.prototype;
  dart.addTypeTests(navigation_failure.NavigationFailure);
  dart.addTypeCaches(navigation_failure.NavigationFailure);
  dart.setLibraryUri(navigation_failure.NavigationFailure, I[26]);
  var route$0 = dart.privateName(navigation_failure, "RouteNotFoundFailure.route");
  navigation_failure.RouteNotFoundFailure = class RouteNotFoundFailure extends navigation_failure.NavigationFailure {
    get route() {
      return this[route$0];
    }
    set route(value) {
      super.route = value;
    }
    toString() {
      return "Failed to navigate to " + this.route.fullPath;
    }
  };
  (navigation_failure.RouteNotFoundFailure.new = function(route) {
    this[route$0] = route;
    navigation_failure.RouteNotFoundFailure.__proto__.new.call(this);
    ;
  }).prototype = navigation_failure.RouteNotFoundFailure.prototype;
  dart.addTypeTests(navigation_failure.RouteNotFoundFailure);
  dart.addTypeCaches(navigation_failure.RouteNotFoundFailure);
  dart.setLibraryUri(navigation_failure.RouteNotFoundFailure, I[26]);
  dart.setFieldSignature(navigation_failure.RouteNotFoundFailure, () => ({
    __proto__: dart.getFields(navigation_failure.RouteNotFoundFailure.__proto__),
    route: dart.finalFieldType(page_route_info.PageRouteInfo)
  }));
  dart.defineExtensionMethods(navigation_failure.RouteNotFoundFailure, ['toString']);
  var route$1 = dart.privateName(navigation_failure, "RejectedByGuardFailure.route");
  var guard$ = dart.privateName(navigation_failure, "RejectedByGuardFailure.guard");
  navigation_failure.RejectedByGuardFailure = class RejectedByGuardFailure extends navigation_failure.NavigationFailure {
    get route() {
      return this[route$1];
    }
    set route(value) {
      super.route = value;
    }
    get guard() {
      return this[guard$];
    }
    set guard(value) {
      super.guard = value;
    }
    toString() {
      return this.route.stringMatch + " rejected by guard " + dart.str(this.guard[$runtimeType]);
    }
  };
  (navigation_failure.RejectedByGuardFailure.new = function(route, guard) {
    this[route$1] = route;
    this[guard$] = guard;
    navigation_failure.RejectedByGuardFailure.__proto__.new.call(this);
    ;
  }).prototype = navigation_failure.RejectedByGuardFailure.prototype;
  dart.addTypeTests(navigation_failure.RejectedByGuardFailure);
  dart.addTypeCaches(navigation_failure.RejectedByGuardFailure);
  dart.setLibraryUri(navigation_failure.RejectedByGuardFailure, I[26]);
  dart.setFieldSignature(navigation_failure.RejectedByGuardFailure, () => ({
    __proto__: dart.getFields(navigation_failure.RejectedByGuardFailure.__proto__),
    route: dart.finalFieldType(route_match.RouteMatch),
    guard: dart.finalFieldType(auto_route_guard.AutoRouteGuard)
  }));
  dart.defineExtensionMethods(navigation_failure.RejectedByGuardFailure, ['toString']);
  dart.trackLibraries("packages/auto_route/src/router/widgets/auto_back_button.dart", {
    "package:auto_route/src/router/widgets/auto_back_button.dart": auto_back_button,
    "package:auto_route/src/router/widgets/auto_tabs_scaffold.dart": auto_tabs_scaffold,
    "package:auto_route/src/router/widgets/auto_tabs_router.dart": auto_tabs_router,
    "package:auto_route/src/router/parser/route_information_parser.dart": route_information_parser,
    "package:auto_route/src/router/widgets/auto_router_delegate.dart": auto_router_delegate,
    "package:auto_route/src/router/widgets/auto_route_navigator.dart": auto_route_navigator,
    "package:auto_route/src/router/controller/controller_scope.dart": controller_scope,
    "package:auto_route/src/router/widgets/auto_router.dart": auto_router,
    "package:auto_route/src/router/auto_router_x.dart": auto_router_x,
    "package:auto_route/src/route/route_config.dart": route_config,
    "package:auto_route/src/common/auto_route_observer.dart": auto_route_observer,
    "package:auto_route/src/common/common.dart": common,
    "package:auto_route/src/router/auto_route_page.dart": auto_route_page,
    "package:auto_route/src/route/route_data_scope.dart": route_data_scope,
    "package:auto_route/src/matcher/route_matcher.dart": route_matcher,
    "package:auto_route/src/router/controller/routing_controller.dart": routing_controller,
    "package:auto_route/src/auto_route_guard.dart": auto_route_guard,
    "package:auto_route/src/matcher/route_match.dart": route_match,
    "package:auto_route/src/route/page_route_info.dart": page_route_info,
    "package:auto_route/src/navigation_failure.dart": navigation_failure,
    "package:auto_route/auto_route.dart": auto_route
  }, {
    "package:auto_route/src/router/widgets/auto_router_delegate.dart": ["root_stack_router.dart"],
    "package:auto_route/src/router/controller/routing_controller.dart": ["../../route/route_data.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["auto_back_button.dart","auto_tabs_scaffold.dart","auto_tabs_router.dart","../parser/route_information_parser.dart","auto_router_delegate.dart","../controller/routing_controller.dart","root_stack_router.dart","auto_route_navigator.dart","../controller/controller_scope.dart","auto_router.dart","../auto_router_x.dart","../../route/route_config.dart","../../common/auto_route_observer.dart","../auto_route_page.dart","../../route/route_data_scope.dart","../../matcher/route_matcher.dart","../../route/route_data.dart","../../auto_route_guard.dart","../../matcher/route_match.dart","../../route/page_route_info.dart","../../navigation_failure.dart"],"names":[],"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","file":"../../../../../../../../../../packages/auto_route/src/router/widgets/auto_back_button.dart.lib.js"}');
  // Exports:
  return {
    src__router__widgets__auto_back_button: auto_back_button,
    src__router__widgets__auto_tabs_scaffold: auto_tabs_scaffold,
    src__router__widgets__auto_tabs_router: auto_tabs_router,
    src__router__parser__route_information_parser: route_information_parser,
    src__router__widgets__auto_router_delegate: auto_router_delegate,
    src__router__widgets__auto_route_navigator: auto_route_navigator,
    src__router__controller__controller_scope: controller_scope,
    src__router__widgets__auto_router: auto_router,
    src__router__auto_router_x: auto_router_x,
    src__route__route_config: route_config,
    src__common__auto_route_observer: auto_route_observer,
    src__common__common: common,
    src__router__auto_route_page: auto_route_page,
    src__route__route_data_scope: route_data_scope,
    src__matcher__route_matcher: route_matcher,
    src__router__controller__routing_controller: routing_controller,
    src__auto_route_guard: auto_route_guard,
    src__matcher__route_match: route_match,
    src__route__page_route_info: page_route_info,
    src__navigation_failure: navigation_failure,
    auto_route: auto_route
  };
}));

//# sourceMappingURL=auto_back_button.dart.lib.js.map
