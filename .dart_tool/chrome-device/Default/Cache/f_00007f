<<<<<<< HEAD
define(['dart_sdk'], (function load__packages__flutter__src__foundation__licenses_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var licenses = Object.create(dart.library);
  var $substring = dartx.substring;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $join = dartx.join;
  var $trimLeft = dartx.trimLeft;
  var $clear = dartx.clear;
  var $_get = dartx._get;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToLicenseParagraph: () => (T.VoidToLicenseParagraph = dart.constFn(dart.fnType(licenses.LicenseParagraph, [])))(),
    SyncIterableOfLicenseParagraph: () => (T.SyncIterableOfLicenseParagraph = dart.constFn(_js_helper.SyncIterable$(licenses.LicenseParagraph)))(),
    StreamOfLicenseEntry: () => (T.StreamOfLicenseEntry = dart.constFn(async.Stream$(licenses.LicenseEntry)))(),
    VoidToStreamOfLicenseEntry: () => (T.VoidToStreamOfLicenseEntry = dart.constFn(dart.fnType(T.StreamOfLicenseEntry(), [])))(),
    JSArrayOfVoidToStreamOfLicenseEntry: () => (T.JSArrayOfVoidToStreamOfLicenseEntry = dart.constFn(_interceptors.JSArray$(T.VoidToStreamOfLicenseEntry())))(),
    _AsyncStarImplOfLicenseEntry: () => (T._AsyncStarImplOfLicenseEntry = dart.constFn(async._AsyncStarImpl$(licenses.LicenseEntry)))()
=======
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__rendering__flow_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object$ = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var flow = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $isFinite = dartx.isFinite;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfRenderBox: () => (T.JSArrayOfRenderBox = dart.constFn(_interceptors.JSArray$(box.RenderBox)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, T.OffsetN()])))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: licenses._LicenseEntryWithLineBreaksParserState.prototype,
        [_name$]: "_LicenseEntryWithLineBreaksParserState.beforeParagraph",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: licenses._LicenseEntryWithLineBreaksParserState.prototype,
        [_name$]: "_LicenseEntryWithLineBreaksParserState.inParagraph",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], licenses._LicenseEntryWithLineBreaksParserState);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/foundation/licenses.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/foundation/licenses.dart"
  ];
  var text$ = dart.privateName(licenses, "LicenseParagraph.text");
  var indent$ = dart.privateName(licenses, "LicenseParagraph.indent");
  licenses.LicenseParagraph = class LicenseParagraph extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
  };
  (licenses.LicenseParagraph.new = function(text, indent) {
    this[text$] = text;
    this[indent$] = indent;
    ;
  }).prototype = licenses.LicenseParagraph.prototype;
  dart.addTypeTests(licenses.LicenseParagraph);
  dart.addTypeCaches(licenses.LicenseParagraph);
  dart.setLibraryUri(licenses.LicenseParagraph, I[0]);
  dart.setFieldSignature(licenses.LicenseParagraph, () => ({
    __proto__: dart.getFields(licenses.LicenseParagraph.__proto__),
    text: dart.finalFieldType(core.String),
    indent: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(licenses.LicenseParagraph, {
    /*licenses.LicenseParagraph.centeredIndent*/get centeredIndent() {
      return -1;
    }
  }, false);
  licenses.LicenseEntry = class LicenseEntry extends core.Object {};
  (licenses.LicenseEntry.new = function() {
    ;
  }).prototype = licenses.LicenseEntry.prototype;
  dart.addTypeTests(licenses.LicenseEntry);
  dart.addTypeCaches(licenses.LicenseEntry);
  dart.setLibraryUri(licenses.LicenseEntry, I[0]);
  var _name$ = dart.privateName(licenses, "_name");
  licenses._LicenseEntryWithLineBreaksParserState = class _LicenseEntryWithLineBreaksParserState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (licenses._LicenseEntryWithLineBreaksParserState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = licenses._LicenseEntryWithLineBreaksParserState.prototype;
  dart.addTypeTests(licenses._LicenseEntryWithLineBreaksParserState);
  dart.addTypeCaches(licenses._LicenseEntryWithLineBreaksParserState);
  dart.setLibraryUri(licenses._LicenseEntryWithLineBreaksParserState, I[0]);
  dart.setFieldSignature(licenses._LicenseEntryWithLineBreaksParserState, () => ({
    __proto__: dart.getFields(licenses._LicenseEntryWithLineBreaksParserState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(licenses._LicenseEntryWithLineBreaksParserState, ['toString']);
  licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph = C[0] || CT.C0;
  licenses._LicenseEntryWithLineBreaksParserState.inParagraph = C[1] || CT.C1;
  licenses._LicenseEntryWithLineBreaksParserState.values = C[2] || CT.C2;
  var packages$ = dart.privateName(licenses, "LicenseEntryWithLineBreaks.packages");
  var text$0 = dart.privateName(licenses, "LicenseEntryWithLineBreaks.text");
  licenses.LicenseEntryWithLineBreaks = class LicenseEntryWithLineBreaks extends licenses.LicenseEntry {
    get packages() {
      return this[packages$];
    }
    set packages(value) {
      super.packages = value;
    }
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get paragraphs() {
      return new (T.SyncIterableOfLicenseParagraph()).new((function* paragraphs() {
        let lineStart = 0;
        let currentPosition = 0;
        let lastLineIndent = 0;
        let currentLineIndent = 0;
        let currentParagraphIndentation = null;
        let state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
        let lines = T.JSArrayOfString().of([]);
        const addLine = () => {
          if (!(lineStart < currentPosition)) dart.assertFailed(null, I[1], 152, 14, "lineStart < currentPosition");
          lines[$add](this.text[$substring](lineStart, currentPosition));
        };
        dart.fn(addLine, T.VoidTovoid());
        function getParagraph() {
          if (!lines[$isNotEmpty]) dart.assertFailed(null, I[1], 157, 14, "lines.isNotEmpty");
          if (!(currentParagraphIndentation != null)) dart.assertFailed(null, I[1], 158, 14, "currentParagraphIndentation != null");
          let result = new licenses.LicenseParagraph.new(lines[$join](" "), dart.nullCheck(currentParagraphIndentation));
          if (!(result.text[$trimLeft]() === result.text)) dart.assertFailed(null, I[1], 160, 14, "result.text.trimLeft() == result.text");
          if (!result.text[$isNotEmpty]) dart.assertFailed(null, I[1], 161, 14, "result.text.isNotEmpty");
          lines[$clear]();
          return result;
        }
        dart.fn(getParagraph, T.VoidToLicenseParagraph());
        while (currentPosition < this.text.length) {
          switch (state) {
            case C[0] || CT.C0:
            {
              if (!(lineStart === currentPosition)) dart.assertFailed(null, I[1], 169, 18, "lineStart == currentPosition");
              let labelState = this.text[$_get](currentPosition);
              SL0:
                while (true) {
                  switch (labelState) {
                    case " ":
                    {
                      lineStart = currentPosition + 1;
                      currentLineIndent = currentLineIndent + 1;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "\t":
                    {
                      lineStart = currentPosition + 1;
                      currentLineIndent = currentLineIndent + 8;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "\r":
                    case "\n":
                    case "\f":
                    {
                      if (lines[$isNotEmpty]) {
                        yield getParagraph();
                      }
                      if (this.text[$_get](currentPosition) === "\r" && currentPosition < this.text.length - 1 && this.text[$_get](currentPosition + 1) === "\n") {
                        currentPosition = currentPosition + 1;
                      }
                      lastLineIndent = 0;
                      currentLineIndent = 0;
                      currentParagraphIndentation = null;
                      lineStart = currentPosition + 1;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "[":
                    {
                      currentLineIndent = currentLineIndent + 1;
                      labelState = Symbol('_default');
                      continue SL0;
                    }
                    default:
                    {
                      if (lines[$isNotEmpty] && currentLineIndent > lastLineIndent) {
                        yield getParagraph();
                        currentParagraphIndentation = null;
                      }
                      if (currentParagraphIndentation == null) {
                        if (currentLineIndent > 10)
                          currentParagraphIndentation = -1;
                        else
                          currentParagraphIndentation = (currentLineIndent / 3)[$truncate]();
                      }
                      state = licenses._LicenseEntryWithLineBreaksParserState.inParagraph;
                      break SL0;
                    }
                  }
                  break;
                }
              break;
            }
            case C[1] || CT.C1:
            {
              switch (this.text[$_get](currentPosition)) {
                case "\n":
                {
                  addLine();
                  lastLineIndent = currentLineIndent;
                  currentLineIndent = 0;
                  lineStart = currentPosition + 1;
                  state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                  break;
                }
                case "\f":
                {
                  addLine();
                  yield getParagraph();
                  lastLineIndent = 0;
                  currentLineIndent = 0;
                  currentParagraphIndentation = null;
                  lineStart = currentPosition + 1;
                  state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                  break;
                }
                default:
                {
                  state = licenses._LicenseEntryWithLineBreaksParserState.inParagraph;
                }
              }
              break;
            }
          }
          currentPosition = currentPosition + 1;
        }
        switch (state) {
          case C[0] || CT.C0:
          {
            if (lines[$isNotEmpty]) {
              yield getParagraph();
            }
            break;
          }
          case C[1] || CT.C1:
          {
            addLine();
            yield getParagraph();
            break;
          }
        }
      }).bind(this));
    }
  };
  (licenses.LicenseEntryWithLineBreaks.new = function(packages, text) {
    this[packages$] = packages;
    this[text$0] = text;
    licenses.LicenseEntryWithLineBreaks.__proto__.new.call(this);
    ;
  }).prototype = licenses.LicenseEntryWithLineBreaks.prototype;
  dart.addTypeTests(licenses.LicenseEntryWithLineBreaks);
  dart.addTypeCaches(licenses.LicenseEntryWithLineBreaks);
  dart.setGetterSignature(licenses.LicenseEntryWithLineBreaks, () => ({
    __proto__: dart.getGetters(licenses.LicenseEntryWithLineBreaks.__proto__),
    paragraphs: core.Iterable$(licenses.LicenseParagraph)
  }));
  dart.setLibraryUri(licenses.LicenseEntryWithLineBreaks, I[0]);
  dart.setFieldSignature(licenses.LicenseEntryWithLineBreaks, () => ({
    __proto__: dart.getFields(licenses.LicenseEntryWithLineBreaks.__proto__),
    packages: dart.finalFieldType(core.List$(core.String)),
    text: dart.finalFieldType(core.String)
  }));
  licenses.LicenseRegistry = class LicenseRegistry extends core.Object {
    static addLicense(collector) {
      licenses.LicenseRegistry._collectors == null ? licenses.LicenseRegistry._collectors = T.JSArrayOfVoidToStreamOfLicenseEntry().of([]) : null;
      dart.nullCheck(licenses.LicenseRegistry._collectors)[$add](collector);
    }
    static get licenses() {
      return new (T._AsyncStarImplOfLicenseEntry()).new(function* licenses$(stream) {
        if (licenses.LicenseRegistry._collectors == null) return;
        for (let collector of dart.nullCheck(licenses.LicenseRegistry._collectors)) {
          if (stream.addStream(collector())) return;
          yield;
        }
      }).stream;
    }
    static reset() {
      licenses.LicenseRegistry._collectors = null;
    }
  };
  (licenses.LicenseRegistry.__ = function() {
    ;
  }).prototype = licenses.LicenseRegistry.prototype;
  dart.addTypeTests(licenses.LicenseRegistry);
  dart.addTypeCaches(licenses.LicenseRegistry);
  dart.setLibraryUri(licenses.LicenseRegistry, I[0]);
  dart.defineLazy(licenses.LicenseRegistry, {
    /*licenses.LicenseRegistry._collectors*/get _collectors() {
      return null;
    },
    set _collectors(_) {}
  }, false);
  dart.trackLibraries("packages/flutter/src/foundation/licenses.dart", {
    "package:flutter/src/foundation/licenses.dart": licenses
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["licenses.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/foundation/licenses.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__licenses: licenses
  };
}));

//# sourceMappingURL=licenses.dart.lib.js.map
=======
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:flutter/src/rendering/flow.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/rendering/flow.dart"
  ];
  flow.FlowPaintingContext = class FlowPaintingContext extends core.Object {};
  (flow.FlowPaintingContext.new = function() {
    ;
  }).prototype = flow.FlowPaintingContext.prototype;
  dart.addTypeTests(flow.FlowPaintingContext);
  dart.addTypeCaches(flow.FlowPaintingContext);
  dart.setLibraryUri(flow.FlowPaintingContext, I[0]);
  var _repaint = dart.privateName(flow, "FlowDelegate._repaint");
  var _repaint$ = dart.privateName(flow, "_repaint");
  flow.FlowDelegate = class FlowDelegate extends core.Object {
    get [_repaint$]() {
      return this[_repaint];
    }
    set [_repaint$](value) {
      super[_repaint$] = value;
    }
    getSize(constraints) {
      return constraints.biggest;
    }
    getConstraintsForChild(i, constraints) {
      return constraints;
    }
    shouldRelayout(oldDelegate) {
      flow.FlowDelegate.as(oldDelegate);
      return false;
    }
    toString() {
      return object.objectRuntimeType(this, "FlowDelegate");
    }
  };
  (flow.FlowDelegate.new = function(opts) {
    let repaint = opts && 'repaint' in opts ? opts.repaint : null;
    this[_repaint] = repaint;
    ;
  }).prototype = flow.FlowDelegate.prototype;
  dart.addTypeTests(flow.FlowDelegate);
  dart.addTypeCaches(flow.FlowDelegate);
  dart.setMethodSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getMethods(flow.FlowDelegate.__proto__),
    getSize: dart.fnType(ui.Size, [box.BoxConstraints]),
    getConstraintsForChild: dart.fnType(box.BoxConstraints, [core.int, box.BoxConstraints]),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(flow.FlowDelegate, I[0]);
  dart.setFieldSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getFields(flow.FlowDelegate.__proto__),
    [_repaint$]: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  dart.defineExtensionMethods(flow.FlowDelegate, ['toString']);
  var _transform = dart.privateName(flow, "_transform");
  flow.FlowParentData = class FlowParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (flow.FlowParentData.new = function() {
    this[_transform] = null;
    flow.FlowParentData.__proto__.new.call(this);
    ;
  }).prototype = flow.FlowParentData.prototype;
  dart.addTypeTests(flow.FlowParentData);
  dart.addTypeCaches(flow.FlowParentData);
  dart.setLibraryUri(flow.FlowParentData, I[0]);
  dart.setFieldSignature(flow.FlowParentData, () => ({
    __proto__: dart.getFields(flow.FlowParentData.__proto__),
    [_transform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var _name = dart.privateName(ui, "_name");
  var _clipBehavior = dart.privateName(flow, "_clipBehavior");
  var _randomAccessChildren = dart.privateName(flow, "_randomAccessChildren");
  var _lastPaintOrder = dart.privateName(flow, "_lastPaintOrder");
  var _paintingContext = dart.privateName(flow, "_paintingContext");
  var _paintingOffset = dart.privateName(flow, "_paintingOffset");
  var _clipRectLayer = dart.privateName(flow, "_clipRectLayer");
  var _delegate = dart.privateName(flow, "_delegate");
  var _getSize = dart.privateName(flow, "_getSize");
  var _paintWithDelegate = dart.privateName(flow, "_paintWithDelegate");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, flow.FlowParentData));
  flow.RenderFlow = class RenderFlow extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    setupParentData(child) {
      box.RenderBox.as(child);
      let childParentData = child.parentData;
      if (flow.FlowParentData.is(childParentData))
        childParentData[_transform] = null;
      else
        child.parentData = new flow.FlowParentData.new();
    }
    get delegate() {
      return this[_delegate];
    }
    set delegate(newDelegate) {
      let t0, t0$;
      if (!(newDelegate !== null)) dart.assertFailed(null, I[1], 211, 12, "newDelegate != null");
      if (this[_delegate][$_equals](newDelegate)) return;
      let oldDelegate = this[_delegate];
      this[_delegate] = newDelegate;
      if (!newDelegate[$runtimeType]._equals(oldDelegate[$runtimeType]) || newDelegate.shouldRelayout(oldDelegate))
        this.markNeedsLayout();
      else if (newDelegate.shouldRepaint(oldDelegate)) this.markNeedsPaint();
      if (this.attached) {
        t0 = oldDelegate[_repaint$];
        t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t0$ = newDelegate[_repaint$];
        t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 234, 12, "value != null");
      if (value !== this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    attach(owner) {
      let t0;
      object$.PipelineOwner.as(owner);
      super.attach(owner);
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t0;
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    [_getSize](constraints) {
      if (!constraints.debugAssertIsValid()) dart.assertFailed(null, I[1], 255, 12, "constraints.debugAssertIsValid()");
      return constraints.constrain(this[_delegate].getSize(constraints));
    }
    get isRepaintBoundary() {
      return true;
    }
    computeMinIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeDryLayout(constraints) {
      return this[_getSize](constraints);
    }
    performLayout() {
      let constraints = this.constraints;
      this.size = this[_getSize](constraints);
      let i = 0;
      this[_randomAccessChildren][$clear]();
      let child = this.firstChild;
      while (child != null) {
        this[_randomAccessChildren][$add](child);
        let innerConstraints = this[_delegate].getConstraintsForChild(i, constraints);
        child.layout(innerConstraints, {parentUsesSize: true});
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData.offset = ui.Offset.zero;
        child = childParentData.nextSibling;
        i = i + 1;
      }
    }
    getChildSize(i) {
      if (i < 0 || i >= this[_randomAccessChildren][$length]) return null;
      return this[_randomAccessChildren][$_get](i).size;
    }
    paintChild(i, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
      transform == null ? transform = vector_math_64.Matrix4.identity() : null;
      let child = this[_randomAccessChildren][$_get](i);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (!dart.fn(() => {
        if (childParentData[_transform] != null) {
          dart.throw(assertions.FlutterError.new("Cannot call paintChild twice for the same child.\n" + "The flow delegate of type " + dart.str(this[_delegate][$runtimeType]) + " attempted to " + "paint child " + dart.str(i) + " multiple times, which is not permitted."));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 343, 12, "() {\r\n      if (childParentData._transform != null) {\r\n        throw FlutterError(\r\n          'Cannot call paintChild twice for the same child.\\n'\r\n          'The flow delegate of type ${_delegate.runtimeType} attempted to '\r\n          'paint child $i multiple times, which is not permitted.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      this[_lastPaintOrder][$add](i);
      childParentData[_transform] = transform;
      if (opacity === 0.0) return;
      function painter(context, offset) {
        context.paintChild(child, offset);
      }
      dart.fn(painter, T.PaintingContextAndOffsetTovoid());
      if (opacity === 1.0) {
        dart.nullCheck(this[_paintingContext]).pushTransform(this.needsCompositing, dart.nullCheck(this[_paintingOffset]), transform, painter);
      } else {
        dart.nullCheck(this[_paintingContext]).pushOpacity(dart.nullCheck(this[_paintingOffset]), ui.Color.getAlphaFromOpacity(opacity), dart.fn((context, offset) => {
          context.pushTransform(this.needsCompositing, offset, dart.nullCheck(transform), painter);
        }, T.PaintingContextAndOffsetTovoid()));
      }
    }
    [_paintWithDelegate](context, offset) {
      this[_lastPaintOrder][$clear]();
      this[_paintingContext] = context;
      this[_paintingOffset] = offset;
      for (let child of this[_randomAccessChildren]) {
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData[_transform] = null;
      }
      try {
        this[_delegate].paintChildren(this);
      } finally {
        this[_paintingContext] = null;
        this[_paintingOffset] = null;
      }
    }
    paint(context, offset) {
      if (this.clipBehavior === ui.Clip.none) {
        this[_clipRectLayer] = null;
        this[_paintWithDelegate](context, offset);
      } else {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintWithDelegate), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      }
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let children = this.getChildrenAsList();
      for (let i = this[_lastPaintOrder][$length] - 1; i >= 0; i = i - 1) {
        let childIndex = this[_lastPaintOrder][$_get](i);
        if (childIndex >= children[$length]) continue;
        let child = children[$_get](childIndex);
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        let transform = childParentData[_transform];
        if (transform == null) continue;
        let absorbed = result.addWithPaintTransform({transform: transform, position: position, hitTest: dart.fn((result, position) => child.hitTest(result, {position: dart.nullCheck(position)}), T.BoxHitTestResultAndOffsetNTobool())});
        if (absorbed) return true;
      }
      return false;
    }
    applyPaintTransform(child, transform) {
      box.RenderBox.as(child);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (childParentData[_transform] != null) transform.multiply(dart.nullCheck(childParentData[_transform]));
      super.applyPaintTransform(child, transform);
    }
  };
  (flow.RenderFlow.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_randomAccessChildren] = T.JSArrayOfRenderBox().of([]);
    this[_lastPaintOrder] = T.JSArrayOfint().of([]);
    this[_paintingContext] = null;
    this[_paintingOffset] = null;
    this[_clipRectLayer] = null;
    if (!(delegate !== null)) dart.assertFailed(null, I[1], 186, 15, "delegate != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 187, 15, "clipBehavior != null");
    this[_delegate] = delegate;
    this[_clipBehavior] = clipBehavior;
    flow.RenderFlow.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = flow.RenderFlow.prototype;
  dart.addTypeTests(flow.RenderFlow);
  dart.addTypeCaches(flow.RenderFlow);
  flow.RenderFlow[dart.implements] = () => [flow.FlowPaintingContext];
  dart.setMethodSignature(flow.RenderFlow, () => ({
    __proto__: dart.getMethods(flow.RenderFlow.__proto__),
    [_getSize]: dart.fnType(ui.Size, [box.BoxConstraints]),
    getChildSize: dart.fnType(dart.nullable(ui.Size), [core.int]),
    paintChild: dart.fnType(dart.void, [core.int], {opacity: core.double, transform: dart.nullable(vector_math_64.Matrix4)}, {}),
    [_paintWithDelegate]: dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getGetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setSetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getSetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(flow.RenderFlow, I[0]);
  dart.setFieldSignature(flow.RenderFlow, () => ({
    __proto__: dart.getFields(flow.RenderFlow.__proto__),
    [_delegate]: dart.fieldType(flow.FlowDelegate),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_randomAccessChildren]: dart.finalFieldType(core.List$(box.RenderBox)),
    [_lastPaintOrder]: dart.finalFieldType(core.List$(core.int)),
    [_paintingContext]: dart.fieldType(dart.nullable(object$.PaintingContext)),
    [_paintingOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  dart.trackLibraries("packages/flutter/src/rendering/flow.dart", {
    "package:flutter/src/rendering/flow.dart": flow
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["flow.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/flow.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__flow: flow
  };
}));

//# sourceMappingURL=flow.dart.lib.js.map
>>>>>>> AUg2
