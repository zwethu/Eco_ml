define(['dart_sdk', 'packages/audioplayers/src/api/release_mode.dart', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__audioplayers__src__audioplayers_web_dart(dart_sdk, packages__audioplayers__src__api__release_mode$46dart, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const html = dart_sdk.html;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const release_mode = packages__audioplayers__src__api__release_mode$46dart.src__api__release_mode;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  var audioplayers_web = Object.create(dart.library);
  var $volume = dartx.volume;
  var $playbackRate = dartx.playbackRate;
  var $loop = dartx.loop;
  var $onTimeUpdate = dartx.onTimeUpdate;
  var $currentTime = dartx.currentTime;
  var $round = dartx.round;
  var $play = dartx.play;
  var $putIfAbsent = dartx.putIfAbsent;
  var $firstWhere = dartx.firstWhere;
  var $_get = dartx._get;
  var $toInt = dartx.toInt;
  var $duration = dartx.duration;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    IdentityMapOfString$WrappedPlayer: () => (T.IdentityMapOfString$WrappedPlayer = dart.constFn(_js_helper.IdentityMap$(core.String, audioplayers_web.WrappedPlayer)))(),
    VoidToWrappedPlayer: () => (T.VoidToWrappedPlayer = dart.constFn(dart.fnType(audioplayers_web.WrappedPlayer, [])))(),
    ReleaseModeTobool: () => (T.ReleaseModeTobool = dart.constFn(dart.fnType(core.bool, [release_mode.ReleaseMode])))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[1] || CT.C1
      });
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = ["package:audioplayers/src/audioplayers_web.dart"];
  var playerId$ = dart.privateName(audioplayers_web, "WrappedPlayer.playerId");
  var plugin$ = dart.privateName(audioplayers_web, "WrappedPlayer.plugin");
  var pausedAt = dart.privateName(audioplayers_web, "WrappedPlayer.pausedAt");
  var currentVolume = dart.privateName(audioplayers_web, "WrappedPlayer.currentVolume");
  var currentPlaybackRate = dart.privateName(audioplayers_web, "WrappedPlayer.currentPlaybackRate");
  var currentReleaseMode = dart.privateName(audioplayers_web, "WrappedPlayer.currentReleaseMode");
  var currentUrl = dart.privateName(audioplayers_web, "WrappedPlayer.currentUrl");
  var isPlaying = dart.privateName(audioplayers_web, "WrappedPlayer.isPlaying");
  var player = dart.privateName(audioplayers_web, "WrappedPlayer.player");
  var playerTimeUpdateSubscription = dart.privateName(audioplayers_web, "WrappedPlayer.playerTimeUpdateSubscription");
  var _cancel = dart.privateName(audioplayers_web, "_cancel");
  audioplayers_web.WrappedPlayer = class WrappedPlayer extends core.Object {
    get playerId() {
      return this[playerId$];
    }
    set playerId(value) {
      super.playerId = value;
    }
    get plugin() {
      return this[plugin$];
    }
    set plugin(value) {
      super.plugin = value;
    }
    get pausedAt() {
      return this[pausedAt];
    }
    set pausedAt(value) {
      this[pausedAt] = value;
    }
    get currentVolume() {
      return this[currentVolume];
    }
    set currentVolume(value) {
      this[currentVolume] = value;
    }
    get currentPlaybackRate() {
      return this[currentPlaybackRate];
    }
    set currentPlaybackRate(value) {
      this[currentPlaybackRate] = value;
    }
    get currentReleaseMode() {
      return this[currentReleaseMode];
    }
    set currentReleaseMode(value) {
      this[currentReleaseMode] = value;
    }
    get currentUrl() {
      return this[currentUrl];
    }
    set currentUrl(value) {
      this[currentUrl] = value;
    }
    get isPlaying() {
      return this[isPlaying];
    }
    set isPlaying(value) {
      this[isPlaying] = value;
    }
    get player() {
      return this[player];
    }
    set player(value) {
      this[player] = value;
    }
    get playerTimeUpdateSubscription() {
      return this[playerTimeUpdateSubscription];
    }
    set playerTimeUpdateSubscription(value) {
      this[playerTimeUpdateSubscription] = value;
    }
    setUrl(url) {
      this.currentUrl = url;
      this.stop();
      this.recreateNode();
      if (this.isPlaying) {
        this.resume();
      }
    }
    setVolume(volume) {
      let t0;
      this.currentVolume = volume;
      t0 = this.player;
      t0 == null ? null : t0[$volume] = volume;
    }
    setPlaybackRate(rate) {
      let t0;
      this.currentPlaybackRate = rate;
      t0 = this.player;
      t0 == null ? null : t0[$playbackRate] = rate;
    }
    recreateNode() {
      let t0, t0$, t0$0, t0$1;
      if (this.currentUrl == null) {
        return;
      }
      this.player = html.AudioElement.new(this.currentUrl);
      t0 = this.player;
      t0 == null ? null : t0[$loop] = this.shouldLoop();
      t0$ = this.player;
      t0$ == null ? null : t0$[$volume] = this.currentVolume;
      t0$0 = this.player;
      t0$0 == null ? null : t0$0[$playbackRate] = this.currentPlaybackRate;
      this.playerTimeUpdateSubscription = (t0$1 = this.player, t0$1 == null ? null : t0$1[$onTimeUpdate].listen(dart.fn(_ => {
        let t1, t1$;
        return this.plugin.channel.invokeMethod(core.int, "audio.onCurrentPosition", new (T.IdentityMapOfString$Object()).from(["playerId", this.playerId, "value", (1000 * dart.notNull((t1$ = (t1 = this.player, t1 == null ? null : t1[$currentTime]), t1$ == null ? 0 : t1$)))[$round]()]));
      }, T.EventTovoid())));
    }
    shouldLoop() {
      return this.currentReleaseMode === release_mode.ReleaseMode.LOOP;
    }
    setReleaseMode(releaseMode) {
      let t0;
      this.currentReleaseMode = releaseMode;
      t0 = this.player;
      t0 == null ? null : t0[$loop] = this.shouldLoop();
    }
    release() {
      let t0;
      this[_cancel]();
      this.player = null;
      t0 = this.playerTimeUpdateSubscription;
      t0 == null ? null : t0.cancel();
      this.playerTimeUpdateSubscription = null;
    }
    start(position) {
      let t0, t0$;
      this.isPlaying = true;
      if (this.currentUrl == null) {
        return;
      }
      if (this.player == null) {
        this.recreateNode();
      }
      t0 = this.player;
      t0 == null ? null : t0[$play]();
      t0$ = this.player;
      t0$ == null ? null : t0$[$currentTime] = position;
    }
    resume() {
      let t0;
      this.start((t0 = this.pausedAt, t0 == null ? 0.0 : t0));
    }
    pause() {
      let t0;
      this.pausedAt = (t0 = this.player, t0 == null ? null : t0[$currentTime]);
      this[_cancel]();
    }
    stop() {
      this.pausedAt = 0.0;
      this[_cancel]();
    }
    seek(position) {
      let t0;
      t0 = this.player;
      t0 == null ? null : t0[$currentTime] = position / 1000.0;
    }
    [_cancel]() {
      let t0;
      this.isPlaying = false;
      t0 = this.player;
      t0 == null ? null : t0.pause();
      if (this.currentReleaseMode === release_mode.ReleaseMode.RELEASE) {
        this.player = null;
      }
    }
  };
  (audioplayers_web.WrappedPlayer.new = function(plugin, playerId) {
    this[pausedAt] = null;
    this[currentVolume] = 1.0;
    this[currentPlaybackRate] = 1.0;
    this[currentReleaseMode] = release_mode.ReleaseMode.RELEASE;
    this[currentUrl] = null;
    this[isPlaying] = false;
    this[player] = null;
    this[playerTimeUpdateSubscription] = null;
    this[plugin$] = plugin;
    this[playerId$] = playerId;
    ;
  }).prototype = audioplayers_web.WrappedPlayer.prototype;
  dart.addTypeTests(audioplayers_web.WrappedPlayer);
  dart.addTypeCaches(audioplayers_web.WrappedPlayer);
  dart.setMethodSignature(audioplayers_web.WrappedPlayer, () => ({
    __proto__: dart.getMethods(audioplayers_web.WrappedPlayer.__proto__),
    setUrl: dart.fnType(dart.void, [core.String]),
    setVolume: dart.fnType(dart.void, [core.double]),
    setPlaybackRate: dart.fnType(dart.void, [core.double]),
    recreateNode: dart.fnType(dart.void, []),
    shouldLoop: dart.fnType(core.bool, []),
    setReleaseMode: dart.fnType(dart.void, [release_mode.ReleaseMode]),
    release: dart.fnType(dart.void, []),
    start: dart.fnType(dart.void, [core.double]),
    resume: dart.fnType(dart.void, []),
    pause: dart.fnType(dart.void, []),
    stop: dart.fnType(dart.void, []),
    seek: dart.fnType(dart.void, [core.int]),
    [_cancel]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(audioplayers_web.WrappedPlayer, I[0]);
  dart.setFieldSignature(audioplayers_web.WrappedPlayer, () => ({
    __proto__: dart.getFields(audioplayers_web.WrappedPlayer.__proto__),
    playerId: dart.finalFieldType(core.String),
    plugin: dart.finalFieldType(audioplayers_web.AudioplayersPlugin),
    pausedAt: dart.fieldType(dart.nullable(core.double)),
    currentVolume: dart.fieldType(core.double),
    currentPlaybackRate: dart.fieldType(core.double),
    currentReleaseMode: dart.fieldType(release_mode.ReleaseMode),
    currentUrl: dart.fieldType(dart.nullable(core.String)),
    isPlaying: dart.fieldType(core.bool),
    player: dart.fieldType(dart.nullable(html.AudioElement)),
    playerTimeUpdateSubscription: dart.fieldType(dart.nullable(async.StreamSubscription))
  }));
  var channel$ = dart.privateName(audioplayers_web, "AudioplayersPlugin.channel");
  var players = dart.privateName(audioplayers_web, "AudioplayersPlugin.players");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  audioplayers_web.AudioplayersPlugin = class AudioplayersPlugin extends core.Object {
    get channel() {
      return this[channel$];
    }
    set channel(value) {
      super.channel = value;
    }
    get players() {
      return this[players];
    }
    set players(value) {
      this[players] = value;
    }
    static registerWith(registrar) {
      let channel = new platform_channel.MethodChannel.new("xyz.luan/audioplayers", C[0] || CT.C0, registrar);
      let instance = new audioplayers_web.AudioplayersPlugin.new(channel);
      channel.setMethodCallHandler(dart.bind(instance, 'handleMethodCall'));
    }
    getOrCreatePlayer(playerId) {
      return this.players[$putIfAbsent](playerId, dart.fn(() => new audioplayers_web.WrappedPlayer.new(this, playerId), T.VoidToWrappedPlayer()));
    }
    setUrl(playerId, url) {
      return async.async(audioplayers_web.WrappedPlayer, (function* setUrl() {
        let player = this.getOrCreatePlayer(playerId);
        if (player.currentUrl === url) {
          return player;
        }
        player.setUrl(url);
        return player;
      }).bind(this));
    }
    parseReleaseMode(value) {
      return release_mode.ReleaseMode.values[$firstWhere](dart.fn(e => e.toString() === value, T.ReleaseModeTobool()));
    }
    handleMethodCall(call) {
      return async.async(dart.dynamic, (function* handleMethodCall() {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
        let method = call.method;
        switch (method) {
          case "changeLogLevel":
          {
            {
              return 1;
            }
          }
        }
        let args = core.Map.as(call.arguments);
        let playerId = core.String.as(args[$_get]("playerId"));
        switch (method) {
          case "setUrl":
          {
            {
              let url = core.String.as(args[$_get]("url"));
              yield this.setUrl(playerId, url);
              return 1;
            }
          }
          case "play":
          {
            {
              let url = core.String.as(args[$_get]("url"));
              let volume = (t0 = T.doubleN().as(args[$_get]("volume")), t0 == null ? 1.0 : t0);
              let position = (t0$ = T.doubleN().as(args[$_get]("position")), t0$ == null ? 0.0 : t0$);
              let player = (yield this.setUrl(playerId, url));
              player.setVolume(volume);
              player.start(position);
              return 1;
            }
          }
          case "getCurrentPosition":
          {
            {
              let position = (t0$0 = this.getOrCreatePlayer(playerId).player, t0$0 == null ? null : t0$0[$currentTime]);
              if (position == null) {
                return null;
              }
              return (dart.notNull(position) * 1000)[$toInt]();
            }
          }
          case "getDuration":
          {
            {
              let duration = (t0$1 = this.getOrCreatePlayer(playerId).player, t0$1 == null ? null : t0$1[$duration]);
              if (duration == null) {
                return null;
              }
              return (dart.notNull(duration) * 1000)[$toInt]();
            }
          }
          case "pause":
          {
            {
              this.getOrCreatePlayer(playerId).pause();
              return 1;
            }
          }
          case "stop":
          {
            {
              this.getOrCreatePlayer(playerId).stop();
              return 1;
            }
          }
          case "resume":
          {
            {
              this.getOrCreatePlayer(playerId).resume();
              return 1;
            }
          }
          case "setVolume":
          {
            {
              let volume = (t0$2 = T.doubleN().as(args[$_get]("volume")), t0$2 == null ? 1.0 : t0$2);
              this.getOrCreatePlayer(playerId).setVolume(volume);
              return 1;
            }
          }
          case "setReleaseMode":
          {
            {
              let releaseMode = this.parseReleaseMode(core.String.as(args[$_get]("releaseMode")));
              this.getOrCreatePlayer(playerId).setReleaseMode(releaseMode);
              return 1;
            }
          }
          case "release":
          {
            {
              this.getOrCreatePlayer(playerId).release();
              return 1;
            }
          }
          case "setPlaybackRate":
          {
            {
              let rate = (t0$3 = T.doubleN().as(args[$_get]("playbackRate")), t0$3 == null ? 1.0 : t0$3);
              this.getOrCreatePlayer(playerId).setPlaybackRate(rate);
              return 1;
            }
          }
          case "seek":
          {
            {
              let position = (t0$4 = T.intN().as(args[$_get]("position")), t0$4 == null ? 0 : t0$4);
              this.getOrCreatePlayer(playerId).seek(position);
              return 1;
            }
          }
          default:
          {
            dart.throw(new message_codec.PlatformException.new({code: "Unimplemented", details: "The audioplayers plugin for web doesn't implement the method '" + method + "'"}));
          }
        }
      }).bind(this));
    }
  };
  (audioplayers_web.AudioplayersPlugin.new = function(channel) {
    this[players] = new (T.IdentityMapOfString$WrappedPlayer()).new();
    this[channel$] = channel;
    ;
  }).prototype = audioplayers_web.AudioplayersPlugin.prototype;
  dart.addTypeTests(audioplayers_web.AudioplayersPlugin);
  dart.addTypeCaches(audioplayers_web.AudioplayersPlugin);
  dart.setMethodSignature(audioplayers_web.AudioplayersPlugin, () => ({
    __proto__: dart.getMethods(audioplayers_web.AudioplayersPlugin.__proto__),
    getOrCreatePlayer: dart.fnType(audioplayers_web.WrappedPlayer, [core.String]),
    setUrl: dart.fnType(async.Future$(audioplayers_web.WrappedPlayer), [core.String, core.String]),
    parseReleaseMode: dart.fnType(release_mode.ReleaseMode, [core.String]),
    handleMethodCall: dart.fnType(async.Future, [message_codec.MethodCall])
  }));
  dart.setLibraryUri(audioplayers_web.AudioplayersPlugin, I[0]);
  dart.setFieldSignature(audioplayers_web.AudioplayersPlugin, () => ({
    __proto__: dart.getFields(audioplayers_web.AudioplayersPlugin.__proto__),
    channel: dart.finalFieldType(platform_channel.MethodChannel),
    players: dart.fieldType(core.Map$(core.String, audioplayers_web.WrappedPlayer))
  }));
  dart.trackLibraries("packages/audioplayers/src/audioplayers_web.dart", {
    "package:audioplayers/src/audioplayers_web.dart": audioplayers_web
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["audioplayers_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/audioplayers/src/audioplayers_web.dart.lib.js"}');
  // Exports:
  return {
    src__audioplayers_web: audioplayers_web
  };
}));

//# sourceMappingURL=audioplayers_web.dart.lib.js.map
