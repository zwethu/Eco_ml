<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/layer.dart'], (function load__packages__flutter__src__widgets__overflow_bar_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__layer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  var overflow_bar = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    EnumPropertyOfOverflowBarAlignment: () => (T.EnumPropertyOfOverflowBarAlignment = dart.constFn(diagnostics.EnumProperty$(overflow_bar.OverflowBarAlignment)))(),
    EnumPropertyOfVerticalDirection: () => (T.EnumPropertyOfVerticalDirection = dart.constFn(diagnostics.EnumProperty$(basic_types.VerticalDirection)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    RenderBoxN: () => (T.RenderBoxN = dart.constFn(dart.nullable(box.RenderBox)))(),
    VoidToRenderBoxN: () => (T.VoidToRenderBoxN = dart.constFn(dart.fnType(T.RenderBoxN(), [])))()
=======
define(['dart_sdk', 'packages/flutter/src/gestures/resampler.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/gestures/debug.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/pointer_router.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/pointer_signal_resolver.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/gestures/converter.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/binding.dart'], (function load__packages__flutter__src__gestures__binding_dart(dart_sdk, packages__flutter__src__gestures__resampler$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__gestures__debug$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__pointer_router$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__pointer_signal_resolver$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__gestures__converter$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__binding$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const resampler$ = packages__flutter__src__gestures__resampler$46dart.src__gestures__resampler;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const debug = packages__flutter__src__gestures__debug$46dart.src__gestures__debug;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const pointer_router = packages__flutter__src__gestures__pointer_router$46dart.src__gestures__pointer_router;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const pointer_signal_resolver = packages__flutter__src__gestures__pointer_signal_resolver$46dart.src__gestures__pointer_signal_resolver;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const converter = packages__flutter__src__gestures__converter$46dart.src__gestures__converter;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const binding$ = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  var binding$0 = Object.create(dart.library);
  var $putIfAbsent = dartx.putIfAbsent;
  var $truncate = dartx.truncate;
  var $values = dartx.values;
  var $removeWhere = dartx.removeWhere;
  var $isEmpty = dartx.isEmpty;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$PointerEventResampler: () => (T.IdentityMapOfint$PointerEventResampler = dart.constFn(_js_helper.IdentityMap$(core.int, resampler$.PointerEventResampler)))(),
    VoidToPointerEventResampler: () => (T.VoidToPointerEventResampler = dart.constFn(dart.fnType(resampler$.PointerEventResampler, [])))(),
    TimerTovoid: () => (T.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    intAndPointerEventResamplerTobool: () => (T.intAndPointerEventResamplerTobool = dart.constFn(dart.fnType(core.bool, [core.int, resampler$.PointerEventResampler])))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ListQueueOfPointerEvent: () => (T.ListQueueOfPointerEvent = dart.constFn(collection.ListQueue$(events.PointerEvent)))(),
    IdentityMapOfint$HitTestResult: () => (T.IdentityMapOfint$HitTestResult = dart.constFn(_js_helper.IdentityMap$(core.int, hit_test.HitTestResult)))(),
    DiagnosticsPropertyOfPointerEvent: () => (T.DiagnosticsPropertyOfPointerEvent = dart.constFn(diagnostics.DiagnosticsProperty$(events.PointerEvent)))(),
    SyncIterableOfDiagnosticsNode: () => (T.SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(diagnostics.DiagnosticsNode)))(),
    IterableOfDiagnosticsNode: () => (T.IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics.DiagnosticsNode)))(),
    VoidToIterableOfDiagnosticsNode: () => (T.VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T.IterableOfDiagnosticsNode(), [])))(),
    DiagnosticsPropertyOfHitTestTarget: () => (T.DiagnosticsPropertyOfHitTestTarget = dart.constFn(diagnostics.DiagnosticsProperty$(hit_test.HitTestTarget)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: overflow_bar.OverflowBarAlignment.prototype,
        [_name$]: "OverflowBarAlignment.start",
        index: 0
=======
        __proto__: core.Duration.prototype,
        [Duration__duration]: -38000
>>>>>>> AUg2
      });
    },
    get C1() {
      return C[1] = dart.const({
<<<<<<< HEAD
        __proto__: overflow_bar.OverflowBarAlignment.prototype,
        [_name$]: "OverflowBarAlignment.end",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: overflow_bar.OverflowBarAlignment.prototype,
        [_name$]: "OverflowBarAlignment.center",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], overflow_bar.OverflowBarAlignment);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name]: "VerticalDirection.down",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$0]: "Clip.none",
        index: 0
=======
        __proto__: core.Duration.prototype,
        [Duration__duration]: 16667
>>>>>>> AUg2
      });
    },
    get C6() {
      return C[6] = dart.constList([], framework.Widget);
    }
  }, false);
<<<<<<< HEAD
  var C = Array(7).fill(void 0);
  var I = [
    "package:flutter/src/widgets/overflow_bar.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/overflow_bar.dart"
  ];
  var _name$ = dart.privateName(overflow_bar, "_name");
  overflow_bar.OverflowBarAlignment = class OverflowBarAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (overflow_bar.OverflowBarAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = overflow_bar.OverflowBarAlignment.prototype;
  dart.addTypeTests(overflow_bar.OverflowBarAlignment);
  dart.addTypeCaches(overflow_bar.OverflowBarAlignment);
  dart.setLibraryUri(overflow_bar.OverflowBarAlignment, I[0]);
  dart.setFieldSignature(overflow_bar.OverflowBarAlignment, () => ({
    __proto__: dart.getFields(overflow_bar.OverflowBarAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(overflow_bar.OverflowBarAlignment, ['toString']);
  overflow_bar.OverflowBarAlignment.start = C[0] || CT.C0;
  overflow_bar.OverflowBarAlignment.end = C[1] || CT.C1;
  overflow_bar.OverflowBarAlignment.center = C[2] || CT.C2;
  overflow_bar.OverflowBarAlignment.values = C[3] || CT.C3;
  var spacing$ = dart.privateName(overflow_bar, "OverflowBar.spacing");
  var overflowSpacing$ = dart.privateName(overflow_bar, "OverflowBar.overflowSpacing");
  var overflowAlignment$ = dart.privateName(overflow_bar, "OverflowBar.overflowAlignment");
  var overflowDirection$ = dart.privateName(overflow_bar, "OverflowBar.overflowDirection");
  var textDirection$ = dart.privateName(overflow_bar, "OverflowBar.textDirection");
  var clipBehavior$ = dart.privateName(overflow_bar, "OverflowBar.clipBehavior");
  var _name = dart.privateName(basic_types, "_name");
  var _name$0 = dart.privateName(ui, "_name");
  overflow_bar.OverflowBar = class OverflowBar extends framework.MultiChildRenderObjectWidget {
    get spacing() {
      return this[spacing$];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get overflowSpacing() {
      return this[overflowSpacing$];
    }
    set overflowSpacing(value) {
      super.overflowSpacing = value;
    }
    get overflowAlignment() {
      return this[overflowAlignment$];
    }
    set overflowAlignment(value) {
      super.overflowAlignment = value;
    }
    get overflowDirection() {
      return this[overflowDirection$];
    }
    set overflowDirection(value) {
      super.overflowDirection = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    createRenderObject(context) {
      let t0;
      return new overflow_bar._RenderOverflowBar.new({spacing: this.spacing, overflowSpacing: this.overflowSpacing, overflowAlignment: this.overflowAlignment, overflowDirection: this.overflowDirection, textDirection: (t0 = this.textDirection, t0 == null ? basic.Directionality.of(context) : t0), clipBehavior: this.clipBehavior});
    }
    updateRenderObject(context, renderObject) {
      let t1, t0;
      overflow_bar._RenderOverflowBar.as(renderObject);
      t0 = renderObject;
      (() => {
        t0.spacing = this.spacing;
        t0.overflowSpacing = this.overflowSpacing;
        t0.overflowAlignment = this.overflowAlignment;
        t0.overflowDirection = this.overflowDirection;
        t0.textDirection = (t1 = this.textDirection, t1 == null ? basic.Directionality.of(context) : t1);
        t0.clipBehavior = this.clipBehavior;
        return t0;
      })();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("spacing", this.spacing, {defaultValue: 0}));
      properties.add(new diagnostics.DoubleProperty.new("overflowSpacing", this.overflowSpacing, {defaultValue: 0}));
      properties.add(new (T.EnumPropertyOfOverflowBarAlignment()).new("overflowAlignment", this.overflowAlignment, {defaultValue: overflow_bar.OverflowBarAlignment.start}));
      properties.add(new (T.EnumPropertyOfVerticalDirection()).new("overflowDirection", this.overflowDirection, {defaultValue: basic_types.VerticalDirection.down}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (overflow_bar.OverflowBar.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let overflowSpacing = opts && 'overflowSpacing' in opts ? opts.overflowSpacing : 0;
    let overflowAlignment = opts && 'overflowAlignment' in opts ? opts.overflowAlignment : C[0] || CT.C0;
    let overflowDirection = opts && 'overflowDirection' in opts ? opts.overflowDirection : C[4] || CT.C4;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    let children = opts && 'children' in opts ? opts.children : C[6] || CT.C6;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[spacing$] = spacing;
    this[overflowSpacing$] = overflowSpacing;
    this[overflowAlignment$] = overflowAlignment;
    this[overflowDirection$] = overflowDirection;
    this[textDirection$] = textDirection;
    this[clipBehavior$] = clipBehavior;
    if (!(spacing !== null)) dart.assertFailed(null, I[1], 112, 15, "spacing != null");
    if (!(overflowSpacing !== null)) dart.assertFailed(null, I[1], 113, 15, "overflowSpacing != null");
    if (!(overflowAlignment !== null)) dart.assertFailed(null, I[1], 114, 15, "overflowAlignment != null");
    if (!(overflowDirection !== null)) dart.assertFailed(null, I[1], 115, 15, "overflowDirection != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 116, 15, "clipBehavior != null");
    overflow_bar.OverflowBar.__proto__.new.call(this, {key: key, children: children, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overflow_bar.OverflowBar.prototype;
  dart.addTypeTests(overflow_bar.OverflowBar);
  dart.addTypeCaches(overflow_bar.OverflowBar);
  dart.setMethodSignature(overflow_bar.OverflowBar, () => ({
    __proto__: dart.getMethods(overflow_bar.OverflowBar.__proto__),
    createRenderObject: dart.fnType(overflow_bar._RenderOverflowBar, [framework.BuildContext])
  }));
  dart.setLibraryUri(overflow_bar.OverflowBar, I[0]);
  dart.setFieldSignature(overflow_bar.OverflowBar, () => ({
    __proto__: dart.getFields(overflow_bar.OverflowBar.__proto__),
    spacing: dart.finalFieldType(core.double),
    overflowSpacing: dart.finalFieldType(core.double),
    overflowAlignment: dart.finalFieldType(overflow_bar.OverflowBarAlignment),
    overflowDirection: dart.finalFieldType(basic_types.VerticalDirection),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  overflow_bar._OverflowBarParentData = class _OverflowBarParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (overflow_bar._OverflowBarParentData.new = function() {
    overflow_bar._OverflowBarParentData.__proto__.new.call(this);
    ;
  }).prototype = overflow_bar._OverflowBarParentData.prototype;
  dart.addTypeTests(overflow_bar._OverflowBarParentData);
  dart.addTypeCaches(overflow_bar._OverflowBarParentData);
  dart.setLibraryUri(overflow_bar._OverflowBarParentData, I[0]);
  var _clipBehavior = dart.privateName(overflow_bar, "_clipBehavior");
  var _spacing = dart.privateName(overflow_bar, "_spacing");
  var _overflowSpacing = dart.privateName(overflow_bar, "_overflowSpacing");
  var _overflowAlignment = dart.privateName(overflow_bar, "_overflowAlignment");
  var _overflowDirection = dart.privateName(overflow_bar, "_overflowDirection");
  var _textDirection = dart.privateName(overflow_bar, "_textDirection");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, overflow_bar._OverflowBarParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, overflow_bar._OverflowBarParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, overflow_bar._OverflowBarParentData));
  overflow_bar._RenderOverflowBar = class _RenderOverflowBar extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    get spacing() {
      return this[_spacing];
    }
    set spacing(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 284, 12, "value != null");
      if (this[_spacing] === value) return;
      this[_spacing] = value;
      this.markNeedsLayout();
    }
    get overflowSpacing() {
      return this[_overflowSpacing];
    }
    set overflowSpacing(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 294, 12, "value != null");
      if (this[_overflowSpacing] === value) return;
      this[_overflowSpacing] = value;
      this.markNeedsLayout();
    }
    get overflowAlignment() {
      return this[_overflowAlignment];
    }
    set overflowAlignment(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 304, 12, "value != null");
      if (this[_overflowAlignment] === value) return;
      this[_overflowAlignment] = value;
      this.markNeedsLayout();
    }
    get overflowDirection() {
      return this[_overflowDirection];
    }
    set overflowDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 314, 12, "value != null");
      if (this[_overflowDirection] === value) return;
      this[_overflowDirection] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] === value) return;
      this[_textDirection] = value;
      this.markNeedsLayout();
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 333, 12, "value != null");
      if (value === this[_clipBehavior]) return;
      this[_clipBehavior] = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (!overflow_bar._OverflowBarParentData.is(child.parentData)) child.parentData = new overflow_bar._OverflowBarParentData.new();
    }
    computeMinIntrinsicHeight(width) {
      let child = this.firstChild;
      if (child == null) return 0.0;
      let barWidth = 0.0;
      while (child != null) {
        barWidth = barWidth + child.getMinIntrinsicWidth(1 / 0);
        child = this.childAfter(child);
      }
      barWidth = barWidth + this.spacing * (this.childCount - 1);
      let height = 0.0;
      if (barWidth > width) {
        child = this.firstChild;
        while (child != null) {
          height = height + child.getMinIntrinsicHeight(width);
          child = this.childAfter(child);
        }
        return height + this.overflowSpacing * (this.childCount - 1);
      } else {
        child = this.firstChild;
        while (child != null) {
          height = math.max(core.double, height, child.getMinIntrinsicHeight(width));
          child = this.childAfter(child);
        }
        return height;
      }
    }
    computeMaxIntrinsicHeight(width) {
      let child = this.firstChild;
      if (child == null) return 0.0;
      let barWidth = 0.0;
      while (child != null) {
        barWidth = barWidth + child.getMinIntrinsicWidth(1 / 0);
        child = this.childAfter(child);
      }
      barWidth = barWidth + this.spacing * (this.childCount - 1);
      let height = 0.0;
      if (barWidth > width) {
        child = this.firstChild;
        while (child != null) {
          height = height + child.getMaxIntrinsicHeight(width);
          child = this.childAfter(child);
        }
        return height + this.overflowSpacing * (this.childCount - 1);
      } else {
        child = this.firstChild;
        while (child != null) {
          height = math.max(core.double, height, child.getMaxIntrinsicHeight(width));
          child = this.childAfter(child);
        }
        return height;
      }
    }
    computeMinIntrinsicWidth(height) {
      let child = this.firstChild;
      if (child == null) return 0.0;
      let width = 0.0;
      while (child != null) {
        width = width + child.getMinIntrinsicWidth(1 / 0);
        child = this.childAfter(child);
      }
      return width + this.spacing * (this.childCount - 1);
    }
    computeMaxIntrinsicWidth(height) {
      let child = this.firstChild;
      if (child == null) return 0.0;
      let width = 0.0;
      while (child != null) {
        width = width + child.getMaxIntrinsicWidth(1 / 0);
        child = this.childAfter(child);
      }
      return width + this.spacing * (this.childCount - 1);
    }
    computeDistanceToActualBaseline(baseline) {
      return this.defaultComputeDistanceToHighestActualBaseline(baseline);
    }
    computeDryLayout(constraints) {
      let child = this.firstChild;
      if (child == null) {
        return constraints.smallest;
      }
      let childConstraints = constraints.loosen();
      let childrenWidth = 0.0;
      let maxChildHeight = 0.0;
      let y = 0.0;
      while (child != null) {
        let childSize = child.getDryLayout(childConstraints);
        childrenWidth = childrenWidth + childSize.width;
        maxChildHeight = math.max(core.double, maxChildHeight, childSize.height);
        y = y + (childSize.height + this.overflowSpacing);
        child = this.childAfter(child);
      }
      let actualWidth = childrenWidth + this.spacing * (this.childCount - 1);
      if (actualWidth > constraints.maxWidth) {
        return constraints.constrain(new ui.Size.new(constraints.maxWidth, y - this.overflowSpacing));
      } else {
        return constraints.constrain(new ui.Size.new(actualWidth, maxChildHeight));
      }
    }
    performLayout() {
      let child = this.firstChild;
      if (child == null) {
        this.size = this.constraints.smallest;
        return;
      }
      let childConstraints = this.constraints.loosen();
      let childrenWidth = 0.0;
      let maxChildHeight = 0.0;
      let maxChildWidth = 0.0;
      while (child != null) {
        child.layout(childConstraints, {parentUsesSize: true});
        childrenWidth = childrenWidth + child.size.width;
        maxChildHeight = math.max(core.double, maxChildHeight, child.size.height);
        maxChildWidth = math.max(core.double, maxChildWidth, child.size.width);
        child = this.childAfter(child);
      }
      let rtl = this.textDirection === ui.TextDirection.rtl;
      let actualWidth = childrenWidth + this.spacing * (this.childCount - 1);
      if (actualWidth > this.constraints.maxWidth) {
        child = this.overflowDirection === basic_types.VerticalDirection.down ? this.firstChild : this.lastChild;
        const nextChild = () => {
          return this.overflowDirection === basic_types.VerticalDirection.down ? this.childAfter(dart.nullCheck(child)) : this.childBefore(dart.nullCheck(child));
        };
        dart.fn(nextChild, T.VoidToRenderBoxN());
        let y = 0.0;
        while (child != null) {
          let childParentData = overflow_bar._OverflowBarParentData.as(dart.nullCheck(child.parentData));
          let x = 0.0;
          switch (this.overflowAlignment) {
            case C[0] || CT.C0:
            {
              x = rtl ? this.constraints.maxWidth - child.size.width : 0.0;
              break;
            }
            case C[2] || CT.C2:
            {
              x = (this.constraints.maxWidth - child.size.width) / 2;
              break;
            }
            case C[1] || CT.C1:
            {
              x = rtl ? 0.0 : this.constraints.maxWidth - child.size.width;
              break;
            }
          }
          if (!(x !== null)) dart.assertFailed(null, I[1], 506, 16, "x != null");
          childParentData.offset = new ui.Offset.new(x, y);
          y = y + (child.size.height + this.overflowSpacing);
          child = nextChild();
        }
        this.size = this.constraints.constrain(new ui.Size.new(this.constraints.maxWidth, y - this.overflowSpacing));
      } else {
        child = rtl ? this.lastChild : this.firstChild;
        const nextChild = () => {
          return rtl ? this.childBefore(dart.nullCheck(child)) : this.childAfter(dart.nullCheck(child));
        };
        dart.fn(nextChild, T.VoidToRenderBoxN());
        let x = 0.0;
        while (child != null) {
          let childParentData = overflow_bar._OverflowBarParentData.as(dart.nullCheck(child.parentData));
          childParentData.offset = new ui.Offset.new(x, (maxChildHeight - child.size.height) / 2);
          x = x + (child.size.width + this.spacing);
          child = nextChild();
        }
        this.size = this.constraints.constrain(new ui.Size.new(actualWidth, maxChildHeight));
      }
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return this.defaultHitTestChildren(result, {position: position});
    }
    paint(context, offset) {
      this.defaultPaint(context, offset);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("spacing", this.spacing, {defaultValue: 0}));
      properties.add(new diagnostics.DoubleProperty.new("overflowSpacing", this.overflowSpacing, {defaultValue: 0}));
      properties.add(new (T.EnumPropertyOfOverflowBarAlignment()).new("overflowAlignment", this.overflowAlignment, {defaultValue: overflow_bar.OverflowBarAlignment.start}));
      properties.add(new (T.EnumPropertyOfVerticalDirection()).new("overflowDirection", this.overflowDirection, {defaultValue: basic_types.VerticalDirection.down}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (overflow_bar._RenderOverflowBar.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let overflowSpacing = opts && 'overflowSpacing' in opts ? opts.overflowSpacing : 0;
    let overflowAlignment = opts && 'overflowAlignment' in opts ? opts.overflowAlignment : C[0] || CT.C0;
    let overflowDirection = opts && 'overflowDirection' in opts ? opts.overflowDirection : C[4] || CT.C4;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[5] || CT.C5;
    this[_clipBehavior] = ui.Clip.none;
    if (!(spacing !== null)) dart.assertFailed(null, I[1], 267, 15, "spacing != null");
    if (!(overflowSpacing !== null)) dart.assertFailed(null, I[1], 268, 15, "overflowSpacing != null");
    if (!(overflowAlignment !== null)) dart.assertFailed(null, I[1], 269, 15, "overflowAlignment != null");
    if (!(textDirection !== null)) dart.assertFailed(null, I[1], 270, 15, "textDirection != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 271, 15, "clipBehavior != null");
    this[_spacing] = spacing;
    this[_overflowSpacing] = overflowSpacing;
    this[_overflowAlignment] = overflowAlignment;
    this[_overflowDirection] = overflowDirection;
    this[_textDirection] = textDirection;
    this[_clipBehavior] = clipBehavior;
    overflow_bar._RenderOverflowBar.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = overflow_bar._RenderOverflowBar.prototype;
  dart.addTypeTests(overflow_bar._RenderOverflowBar);
  dart.addTypeCaches(overflow_bar._RenderOverflowBar);
  dart.setGetterSignature(overflow_bar._RenderOverflowBar, () => ({
    __proto__: dart.getGetters(overflow_bar._RenderOverflowBar.__proto__),
    spacing: core.double,
    overflowSpacing: core.double,
    overflowAlignment: overflow_bar.OverflowBarAlignment,
    overflowDirection: basic_types.VerticalDirection,
    textDirection: ui.TextDirection,
    clipBehavior: ui.Clip
  }));
  dart.setSetterSignature(overflow_bar._RenderOverflowBar, () => ({
    __proto__: dart.getSetters(overflow_bar._RenderOverflowBar.__proto__),
    spacing: core.double,
    overflowSpacing: core.double,
    overflowAlignment: overflow_bar.OverflowBarAlignment,
    overflowDirection: basic_types.VerticalDirection,
    textDirection: ui.TextDirection,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(overflow_bar._RenderOverflowBar, I[0]);
  dart.setFieldSignature(overflow_bar._RenderOverflowBar, () => ({
    __proto__: dart.getFields(overflow_bar._RenderOverflowBar.__proto__),
    [_spacing]: dart.fieldType(core.double),
    [_overflowSpacing]: dart.fieldType(core.double),
    [_overflowAlignment]: dart.fieldType(overflow_bar.OverflowBarAlignment),
    [_overflowDirection]: dart.fieldType(basic_types.VerticalDirection),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_clipBehavior]: dart.fieldType(ui.Clip)
  }));
  dart.trackLibraries("packages/flutter/src/widgets/overflow_bar.dart", {
    "package:flutter/src/widgets/overflow_bar.dart": overflow_bar
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["overflow_bar.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/overflow_bar.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__overflow_bar: overflow_bar
  };
}));

//# sourceMappingURL=overflow_bar.dart.lib.js.map
=======
  var C = Array(2).fill(void 0);
  var I = [
    "package:flutter/src/gestures/binding.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/gestures/binding.dart"
  ];
  binding$0.SamplingClock = class SamplingClock extends core.Object {
    now() {
      return new core.DateTime.now();
    }
    stopwatch() {
      return new core.Stopwatch.new();
    }
  };
  (binding$0.SamplingClock.new = function() {
    ;
  }).prototype = binding$0.SamplingClock.prototype;
  dart.addTypeTests(binding$0.SamplingClock);
  dart.addTypeCaches(binding$0.SamplingClock);
  dart.setMethodSignature(binding$0.SamplingClock, () => ({
    __proto__: dart.getMethods(binding$0.SamplingClock.__proto__),
    now: dart.fnType(core.DateTime, []),
    stopwatch: dart.fnType(core.Stopwatch, [])
  }));
  dart.setLibraryUri(binding$0.SamplingClock, I[0]);
  var _resamplers = dart.privateName(binding$0, "_resamplers");
  var _frameCallbackScheduled = dart.privateName(binding$0, "_frameCallbackScheduled");
  var _frameTime = dart.privateName(binding$0, "_frameTime");
  var _frameTimeAge = dart.privateName(binding$0, "_frameTimeAge");
  var _lastSampleTime = dart.privateName(binding$0, "_lastSampleTime");
  var _lastEventTime = dart.privateName(binding$0, "_lastEventTime");
  var _timer = dart.privateName(binding$0, "_timer");
  var _handlePointerEvent$ = dart.privateName(binding$0, "_handlePointerEvent");
  var _handleSampleTimeChanged$ = dart.privateName(binding$0, "_handleSampleTimeChanged");
  var _samplingInterval$ = dart.privateName(binding$0, "_samplingInterval");
  var _onSampleTimeChanged = dart.privateName(binding$0, "_onSampleTimeChanged");
  binding$0._Resampler = class _Resampler extends core.Object {
    addOrDispatch(event) {
      let t0;
      let scheduler = binding.SchedulerBinding.instance;
      if (!(scheduler != null)) dart.assertFailed(null, I[1], 77, 12, "scheduler != null");
      if (event.kind === ui.PointerDeviceKind.touch) {
        this[_lastEventTime] = event.timeStamp;
        let resampler = this[_resamplers][$putIfAbsent](event.device, dart.fn(() => new resampler$.PointerEventResampler.new(), T.VoidToPointerEventResampler()));
        resampler.addEvent(event);
      } else {
        t0 = event;
        this[_handlePointerEvent$](t0);
      }
    }
    sample(samplingOffset, clock) {
      let t0, t0$, t0$0;
      let scheduler = binding.SchedulerBinding.instance;
      if (!(scheduler != null)) dart.assertFailed(null, I[1], 100, 12, "scheduler != null");
      if (this[_frameTime]._equals(core.Duration.zero)) {
        this[_frameTime] = new core.Duration.new({milliseconds: clock.now().millisecondsSinceEpoch});
        this[_frameTimeAge] = (t0 = clock.stopwatch(), (() => {
          t0.start();
          return t0;
        })());
      }
      if ((t0$ = this[_timer], t0$ == null ? null : t0$.isActive) !== true) {
        this[_timer] = async.Timer.periodic(this[_samplingInterval$], dart.fn(_ => this[_onSampleTimeChanged](), T.TimerTovoid()));
      }
      let samplingIntervalUs = this[_samplingInterval$].inMicroseconds;
      let elapsedIntervals = (this[_frameTimeAge].elapsedMicroseconds / samplingIntervalUs)[$truncate]();
      let elapsedUs = elapsedIntervals * samplingIntervalUs;
      let frameTime = this[_frameTime]['+'](new core.Duration.new({microseconds: elapsedUs}));
      let sampleTime = frameTime['+'](samplingOffset);
      let nextSampleTime = sampleTime['+'](this[_samplingInterval$]);
      for (let resampler of this[_resamplers][$values]) {
        resampler.sample(sampleTime, nextSampleTime, this[_handlePointerEvent$]);
      }
      this[_resamplers][$removeWhere](dart.fn((key, resampler) => !resampler.hasPendingEvents && !resampler.isDown, T.intAndPointerEventResamplerTobool()));
      this[_lastSampleTime] = sampleTime;
      if (this[_resamplers][$isEmpty]) {
        dart.nullCheck(this[_timer]).cancel();
        return;
      }
      if (!this[_frameCallbackScheduled]) {
        this[_frameCallbackScheduled] = true;
        t0$0 = scheduler;
        t0$0 == null ? null : t0$0.addPostFrameCallback(dart.fn(_ => {
          let t1;
          this[_frameCallbackScheduled] = false;
          this[_frameTime] = scheduler.currentSystemFrameTimeStamp;
          this[_frameTimeAge].reset();
          t1 = this[_timer];
          t1 == null ? null : t1.cancel();
          this[_timer] = async.Timer.periodic(this[_samplingInterval$], dart.fn(_ => this[_onSampleTimeChanged](), T.TimerTovoid()));
          this[_onSampleTimeChanged]();
        }, T.DurationTovoid()));
      }
    }
    stop() {
      for (let resampler of this[_resamplers][$values]) {
        resampler.stop(this[_handlePointerEvent$]);
      }
      this[_resamplers][$clear]();
      this[_frameTime] = core.Duration.zero;
    }
    [_onSampleTimeChanged]() {
      if (!dart.fn(() => {
        if (debug.debugPrintResamplingMargin) {
          let resamplingMargin = this[_lastEventTime]['-'](this[_lastSampleTime]);
          print.debugPrint(dart.str(resamplingMargin));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 185, 12, "() {\r\n      if (debugPrintResamplingMargin) {\r\n        final Duration resamplingMargin = _lastEventTime - _lastSampleTime;\r\n          debugPrint('$resamplingMargin');\r\n      }\r\n      return true;\r\n    }()");
      this[_handleSampleTimeChanged$]();
    }
  };
  (binding$0._Resampler.new = function(_handlePointerEvent, _handleSampleTimeChanged, _samplingInterval) {
    this[_resamplers] = new (T.IdentityMapOfint$PointerEventResampler()).new();
    this[_frameCallbackScheduled] = false;
    this[_frameTime] = core.Duration.zero;
    this[_frameTimeAge] = new core.Stopwatch.new();
    this[_lastSampleTime] = core.Duration.zero;
    this[_lastEventTime] = core.Duration.zero;
    this[_timer] = null;
    this[_handlePointerEvent$] = _handlePointerEvent;
    this[_handleSampleTimeChanged$] = _handleSampleTimeChanged;
    this[_samplingInterval$] = _samplingInterval;
    ;
  }).prototype = binding$0._Resampler.prototype;
  dart.addTypeTests(binding$0._Resampler);
  dart.addTypeCaches(binding$0._Resampler);
  dart.setMethodSignature(binding$0._Resampler, () => ({
    __proto__: dart.getMethods(binding$0._Resampler.__proto__),
    addOrDispatch: dart.fnType(dart.void, [events.PointerEvent]),
    sample: dart.fnType(dart.void, [core.Duration, binding$0.SamplingClock]),
    stop: dart.fnType(dart.void, []),
    [_onSampleTimeChanged]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(binding$0._Resampler, I[0]);
  dart.setFieldSignature(binding$0._Resampler, () => ({
    __proto__: dart.getFields(binding$0._Resampler.__proto__),
    [_resamplers]: dart.finalFieldType(core.Map$(core.int, resampler$.PointerEventResampler)),
    [_frameCallbackScheduled]: dart.fieldType(core.bool),
    [_frameTime]: dart.fieldType(core.Duration),
    [_frameTimeAge]: dart.fieldType(core.Stopwatch),
    [_lastSampleTime]: dart.fieldType(core.Duration),
    [_lastEventTime]: dart.fieldType(core.Duration),
    [_handlePointerEvent$]: dart.finalFieldType(dart.fnType(dart.void, [events.PointerEvent])),
    [_handleSampleTimeChanged$]: dart.finalFieldType(dart.fnType(dart.void, [])),
    [_samplingInterval$]: dart.finalFieldType(core.Duration),
    [_timer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  var pointerRouter = dart.privateName(binding$0, "GestureBinding.pointerRouter");
  var gestureArena = dart.privateName(binding$0, "GestureBinding.gestureArena");
  var pointerSignalResolver = dart.privateName(binding$0, "GestureBinding.pointerSignalResolver");
  var resamplingEnabled = dart.privateName(binding$0, "GestureBinding.resamplingEnabled");
  var samplingOffset = dart.privateName(binding$0, "GestureBinding.samplingOffset");
  var _pendingPointerEvents = dart.privateName(binding$0, "_pendingPointerEvents");
  var _hitTests = dart.privateName(binding$0, "_hitTests");
  var __GestureBinding__resampler = dart.privateName(binding$0, "_#GestureBinding#_resampler");
  var _handlePointerDataPacket = dart.privateName(binding$0, "_handlePointerDataPacket");
  var _flushPointerEventQueue = dart.privateName(binding$0, "_flushPointerEventQueue");
  var _resampler = dart.privateName(binding$0, "_resampler");
  var _samplingClock = dart.privateName(binding$0, "_samplingClock");
  var _handlePointerEventImmediately = dart.privateName(binding$0, "_handlePointerEventImmediately");
  binding$0.GestureBinding = class GestureBinding extends binding$.BindingBase {
    static get instance() {
      return binding$0.GestureBinding._instance;
    }
  };
  binding$0.GestureBinding[dart.mixinOn] = BindingBase => class GestureBinding extends BindingBase {
    get pointerRouter() {
      return this[pointerRouter];
    }
    set pointerRouter(value) {
      super.pointerRouter = value;
    }
    get gestureArena() {
      return this[gestureArena];
    }
    set gestureArena(value) {
      super.gestureArena = value;
    }
    get pointerSignalResolver() {
      return this[pointerSignalResolver];
    }
    set pointerSignalResolver(value) {
      super.pointerSignalResolver = value;
    }
    get resamplingEnabled() {
      return this[resamplingEnabled];
    }
    set resamplingEnabled(value) {
      this[resamplingEnabled] = value;
    }
    get samplingOffset() {
      return this[samplingOffset];
    }
    set samplingOffset(value) {
      this[samplingOffset] = value;
    }
    initInstances() {
      super.initInstances();
      binding$0.GestureBinding._instance = this;
      this.window.onPointerDataPacket = dart.bind(this, _handlePointerDataPacket);
    }
    unlocked() {
      super.unlocked();
      this[_flushPointerEventQueue]();
    }
    [_handlePointerDataPacket](packet) {
      this[_pendingPointerEvents].addAll(converter.PointerEventConverter.expand(packet.data, this.window.devicePixelRatio));
      if (!this.locked) this[_flushPointerEventQueue]();
    }
    cancelPointer(pointer) {
      if (this[_pendingPointerEvents][$isEmpty] && !this.locked) async.scheduleMicrotask(dart.bind(this, _flushPointerEventQueue));
      this[_pendingPointerEvents].addFirst(new events.PointerCancelEvent.new({pointer: pointer}));
    }
    [_flushPointerEventQueue]() {
      if (!!this.locked) dart.assertFailed(null, I[1], 293, 12, "!locked");
      while (this[_pendingPointerEvents][$isNotEmpty])
        this.handlePointerEvent(this[_pendingPointerEvents].removeFirst());
    }
    handlePointerEvent(event) {
      if (!!this.locked) dart.assertFailed(null, I[1], 327, 12, "!locked");
      if (this.resamplingEnabled) {
        this[_resampler].addOrDispatch(event);
        this[_resampler].sample(this.samplingOffset, this[_samplingClock]);
        return;
      }
      this[_resampler].stop();
      this[_handlePointerEventImmediately](event);
    }
    [_handlePointerEventImmediately](event) {
      let hitTestResult = null;
      if (events.PointerDownEvent.is(event) || events.PointerSignalEvent.is(event) || events.PointerHoverEvent.is(event)) {
        if (!!this[_hitTests][$containsKey](event.pointer)) dart.assertFailed(null, I[1], 344, 14, "!_hitTests.containsKey(event.pointer)");
        hitTestResult = new hit_test.HitTestResult.new();
        this.hitTest(hitTestResult, event.position);
        if (events.PointerDownEvent.is(event)) {
          this[_hitTests][$_set](event.pointer, hitTestResult);
        }
        if (!dart.fn(() => {
          if (debug.debugPrintHitTestResults) print.debugPrint(dart.str(event) + ": " + dart.str(hitTestResult));
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 350, 14, "() {\r\n        if (debugPrintHitTestResults)\r\n          debugPrint('$event: $hitTestResult');\r\n        return true;\r\n      }()");
      } else if (events.PointerUpEvent.is(event) || events.PointerCancelEvent.is(event)) {
        hitTestResult = this[_hitTests][$remove](event.pointer);
      } else if (event.down) {
        hitTestResult = this[_hitTests][$_get](event.pointer);
      }
      if (!dart.fn(() => {
        if (debug.debugPrintMouseHoverEvents && events.PointerHoverEvent.is(event)) print.debugPrint(dart.str(event));
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 365, 12, "() {\r\n      if (debugPrintMouseHoverEvents && event is PointerHoverEvent)\r\n        debugPrint('$event');\r\n      return true;\r\n    }()");
      if (hitTestResult != null || events.PointerAddedEvent.is(event) || events.PointerRemovedEvent.is(event)) {
        if (!(event.position !== null)) dart.assertFailed(null, I[1], 373, 14, "event.position != null");
        this.dispatchEvent(event, hitTestResult);
      }
    }
    hitTest(result, position) {
      result.add(new hit_test.HitTestEntry.new(this));
    }
    dispatchEvent(event, hitTestResult) {
      if (!!this.locked) dart.assertFailed(null, I[1], 394, 12, "!locked");
      if (hitTestResult == null) {
        if (!(events.PointerAddedEvent.is(event) || events.PointerRemovedEvent.is(event))) dart.assertFailed(null, I[1], 399, 14, "event is PointerAddedEvent || event is PointerRemovedEvent");
        try {
          this.pointerRouter.route(event);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new binding$0.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a non-hit-tested pointer event"), event: event, hitTestEntry: null, informationCollector: dart.fn(() => new (T.SyncIterableOfDiagnosticsNode()).new(function*() {
                yield new (T.DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
              }), T.VoidToIterableOfDiagnosticsNode())}));
          } else
            throw e;
        }
        return;
      }
      for (let entry of hitTestResult.path) {
        try {
          entry.target.handleEvent(event.transformed(entry.transform), entry);
        } catch (e$) {
          let exception = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new binding$0.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a pointer event"), event: event, hitTestEntry: entry, informationCollector: dart.fn(() => new (T.SyncIterableOfDiagnosticsNode()).new(function*() {
                yield new (T.DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
                yield new (T.DiagnosticsPropertyOfHitTestTarget()).new("Target", entry.target, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
              }), T.VoidToIterableOfDiagnosticsNode())}));
          } else
            throw e$;
        }
      }
    }
    handleEvent(event, entry) {
      this.pointerRouter.route(event);
      if (events.PointerDownEvent.is(event)) {
        this.gestureArena.close(event.pointer);
      } else if (events.PointerUpEvent.is(event)) {
        this.gestureArena.sweep(event.pointer);
      } else if (events.PointerSignalEvent.is(event)) {
        this.pointerSignalResolver.resolve(event);
      }
    }
    resetGestureBinding() {
      this[_hitTests][$clear]();
    }
    get debugSamplingClock() {
      return null;
    }
    [_handleSampleTimeChanged$]() {
      if (!this.locked) {
        if (this.resamplingEnabled) {
          this[_resampler].sample(this.samplingOffset, this[_samplingClock]);
        } else {
          this[_resampler].stop();
        }
      }
    }
    get [_samplingClock]() {
      let value = new binding$0.SamplingClock.new();
      if (!dart.fn(() => {
        let debugValue = this.debugSamplingClock;
        if (debugValue != null) value = debugValue;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 478, 12, "() {\r\n      final SamplingClock? debugValue = debugSamplingClock;\r\n      if (debugValue != null)\r\n        value = debugValue;\r\n      return true;\r\n    }()");
      return value;
    }
    get [_resampler]() {
      let t3, t2;
      t2 = this[__GestureBinding__resampler];
      return t2 == null ? (t3 = new binding$0._Resampler.new(dart.bind(this, _handlePointerEventImmediately), dart.bind(this, _handleSampleTimeChanged$), binding$0._samplingInterval), this[__GestureBinding__resampler] == null ? this[__GestureBinding__resampler] = t3 : dart.throw(new _internal.LateError.fieldADI("_resampler"))) : t2;
    }
  };
  (binding$0.GestureBinding[dart.mixinNew] = function() {
    this[_pendingPointerEvents] = new (T.ListQueueOfPointerEvent()).new();
    this[pointerRouter] = new pointer_router.PointerRouter.new();
    this[gestureArena] = new arena.GestureArenaManager.new();
    this[pointerSignalResolver] = new pointer_signal_resolver.PointerSignalResolver.new();
    this[_hitTests] = new (T.IdentityMapOfint$HitTestResult()).new();
    this[__GestureBinding__resampler] = null;
    this[resamplingEnabled] = false;
    this[samplingOffset] = binding$0._defaultSamplingOffset;
  }).prototype = binding$0.GestureBinding.prototype;
  dart.addTypeTests(binding$0.GestureBinding);
  dart.addTypeCaches(binding$0.GestureBinding);
  binding$0.GestureBinding[dart.implements] = () => [hit_test.HitTestable, hit_test.HitTestDispatcher, hit_test.HitTestTarget, binding$.BindingBase];
  dart.setMethodSignature(binding$0.GestureBinding, () => ({
    __proto__: dart.getMethods(binding$0.GestureBinding.__proto__),
    [_handlePointerDataPacket]: dart.fnType(dart.void, [ui.PointerDataPacket]),
    cancelPointer: dart.fnType(dart.void, [core.int]),
    [_flushPointerEventQueue]: dart.fnType(dart.void, []),
    handlePointerEvent: dart.fnType(dart.void, [events.PointerEvent]),
    [_handlePointerEventImmediately]: dart.fnType(dart.void, [events.PointerEvent]),
    hitTest: dart.fnType(dart.void, [hit_test.HitTestResult, ui.Offset]),
    dispatchEvent: dart.fnType(dart.void, [events.PointerEvent, dart.nullable(hit_test.HitTestResult)]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent, hit_test.HitTestEntry]),
    resetGestureBinding: dart.fnType(dart.void, []),
    [_handleSampleTimeChanged$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(binding$0.GestureBinding, () => ({
    __proto__: dart.getGetters(binding$0.GestureBinding.__proto__),
    debugSamplingClock: dart.nullable(binding$0.SamplingClock),
    [_samplingClock]: binding$0.SamplingClock,
    [_resampler]: binding$0._Resampler
  }));
  dart.setLibraryUri(binding$0.GestureBinding, I[0]);
  dart.setFieldSignature(binding$0.GestureBinding, () => ({
    __proto__: dart.getFields(binding$0.GestureBinding.__proto__),
    [_pendingPointerEvents]: dart.finalFieldType(collection.Queue$(events.PointerEvent)),
    pointerRouter: dart.finalFieldType(pointer_router.PointerRouter),
    gestureArena: dart.finalFieldType(arena.GestureArenaManager),
    pointerSignalResolver: dart.finalFieldType(pointer_signal_resolver.PointerSignalResolver),
    [_hitTests]: dart.finalFieldType(core.Map$(core.int, hit_test.HitTestResult)),
    [__GestureBinding__resampler]: dart.fieldType(dart.nullable(binding$0._Resampler)),
    resamplingEnabled: dart.fieldType(core.bool),
    samplingOffset: dart.fieldType(core.Duration)
  }));
  dart.defineLazy(binding$0.GestureBinding, {
    /*binding$0.GestureBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  var event$ = dart.privateName(binding$0, "FlutterErrorDetailsForPointerEventDispatcher.event");
  var hitTestEntry$ = dart.privateName(binding$0, "FlutterErrorDetailsForPointerEventDispatcher.hitTestEntry");
  binding$0.FlutterErrorDetailsForPointerEventDispatcher = class FlutterErrorDetailsForPointerEventDispatcher extends assertions.FlutterErrorDetails {
    get event() {
      return this[event$];
    }
    set event(value) {
      super.event = value;
    }
    get hitTestEntry() {
      return this[hitTestEntry$];
    }
    set hitTestEntry(value) {
      super.hitTestEntry = value;
    }
  };
  (binding$0.FlutterErrorDetailsForPointerEventDispatcher.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let hitTestEntry = opts && 'hitTestEntry' in opts ? opts.hitTestEntry : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[event$] = event;
    this[hitTestEntry$] = hitTestEntry;
    binding$0.FlutterErrorDetailsForPointerEventDispatcher.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = binding$0.FlutterErrorDetailsForPointerEventDispatcher.prototype;
  dart.addTypeTests(binding$0.FlutterErrorDetailsForPointerEventDispatcher);
  dart.addTypeCaches(binding$0.FlutterErrorDetailsForPointerEventDispatcher);
  dart.setLibraryUri(binding$0.FlutterErrorDetailsForPointerEventDispatcher, I[0]);
  dart.setFieldSignature(binding$0.FlutterErrorDetailsForPointerEventDispatcher, () => ({
    __proto__: dart.getFields(binding$0.FlutterErrorDetailsForPointerEventDispatcher.__proto__),
    event: dart.finalFieldType(dart.nullable(events.PointerEvent)),
    hitTestEntry: dart.finalFieldType(dart.nullable(hit_test.HitTestEntry))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(binding$0, {
    /*binding$0._defaultSamplingOffset*/get _defaultSamplingOffset() {
      return C[0] || CT.C0;
    },
    /*binding$0._samplingInterval*/get _samplingInterval() {
      return C[1] || CT.C1;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/gestures/binding.dart", {
    "package:flutter/src/gestures/binding.dart": binding$0
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/gestures/binding.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__binding: binding$0
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map
>>>>>>> AUg2
