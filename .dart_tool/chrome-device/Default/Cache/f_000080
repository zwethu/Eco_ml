<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/sliver_fill.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/rendering/sliver_padding.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__widgets__sliver_fill_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__sliver_fill$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__rendering__sliver_padding$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const sliver = packages__flutter__src__widgets__widget_span$46dart.src__widgets__sliver;
  const sliver_fill = packages__flutter__src__rendering__sliver_fill$46dart.src__rendering__sliver_fill;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const sliver_padding = packages__flutter__src__rendering__sliver_padding$46dart.src__rendering__sliver_padding;
  const sliver$ = packages__flutter__src__rendering__sliver$46dart.src__rendering__sliver;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var sliver_fill$ = Object.create(dart.library);
  var $clamp = dartx.clamp;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    DiagnosticsPropertyOfWidget: () => (T.DiagnosticsPropertyOfWidget = dart.constFn(diagnostics.DiagnosticsProperty$(framework.Widget)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IterablePropertyOfString: () => (T.IterablePropertyOfString = dart.constFn(diagnostics.IterableProperty$(core.String)))()
=======
define(['dart_sdk', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/box_fit.dart'], (function load__packages__flutter__src__rendering__image_dart(dart_sdk, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__box_fit$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _engine = dart_sdk._engine;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  var image$ = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    DiagnosticsPropertyOfImage: () => (T.DiagnosticsPropertyOfImage = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Image)))(),
    EnumPropertyOfBlendMode: () => (T.EnumPropertyOfBlendMode = dart.constFn(diagnostics.EnumProperty$(ui.BlendMode)))(),
    EnumPropertyOfBoxFit: () => (T.EnumPropertyOfBoxFit = dart.constFn(diagnostics.EnumProperty$(box_fit.BoxFit)))(),
    DiagnosticsPropertyOfAlignmentGeometry: () => (T.DiagnosticsPropertyOfAlignmentGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(alignment.AlignmentGeometry)))(),
    EnumPropertyOfImageRepeat: () => (T.EnumPropertyOfImageRepeat = dart.constFn(diagnostics.EnumProperty$(decoration_image.ImageRepeat)))(),
    DiagnosticsPropertyOfRect: () => (T.DiagnosticsPropertyOfRect = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Rect)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    EnumPropertyOfFilterQuality: () => (T.EnumPropertyOfFilterQuality = dart.constFn(diagnostics.EnumProperty$(ui.FilterQuality)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportFraction",
        [_Location_column]: 9,
        [_Location_line]: 66,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 9,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3], widget_inspector._Location);
    },
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 65,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportFraction",
        [_Location_column]: 7,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sliver",
        [_Location_column]: 7,
        [_Location_line]: 65,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7], widget_inspector._Location);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 63,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 49,
        [_Location_line]: 435,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12], widget_inspector._Location);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 435,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 52,
        [_Location_line]: 437,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.constList([C[15] || CT.C15], widget_inspector._Location);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[14] || CT.C14,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 437,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart"
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 46,
        [_Location_line]: 438,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18], widget_inspector._Location);
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[17] || CT.C17,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 438,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart"
      });
    }
  }, false);
  var C = Array(19).fill(void 0);
  var I = [
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/sliver_fill.dart",
    "package:flutter/src/widgets/sliver_fill.dart"
  ];
  var viewportFraction$ = dart.privateName(sliver_fill$, "SliverFillViewport.viewportFraction");
  var padEnds$ = dart.privateName(sliver_fill$, "SliverFillViewport.padEnds");
  var delegate$ = dart.privateName(sliver_fill$, "SliverFillViewport.delegate");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  sliver_fill$.SliverFillViewport = class SliverFillViewport extends framework.StatelessWidget {
    get viewportFraction() {
      return this[viewportFraction$];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    get padEnds() {
      return this[padEnds$];
    }
    set padEnds(value) {
      super.padEnds = value;
    }
    get delegate() {
      return this[delegate$];
    }
    set delegate(value) {
      super.delegate = value;
    }
    build(context) {
      return new sliver_fill$._SliverFractionalPadding.new({viewportFraction: this.padEnds ? (1 - this.viewportFraction)[$clamp](0, 1) / 2 : 0.0, sliver: new sliver_fill$._SliverFillViewportRenderObjectWidget.new({viewportFraction: this.viewportFraction, delegate: this.delegate, $creationLocationd_0dea112b090073317d4: C[0] || CT.C0}), $creationLocationd_0dea112b090073317d4: C[4] || CT.C4});
    }
  };
  (sliver_fill$.SliverFillViewport.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    let padEnds = opts && 'padEnds' in opts ? opts.padEnds : true;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[delegate$] = delegate;
    this[viewportFraction$] = viewportFraction;
    this[padEnds$] = padEnds;
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 33, 15, "viewportFraction != null");
    if (!(viewportFraction > 0.0)) dart.assertFailed(null, I[0], 34, 15, "viewportFraction > 0.0");
    if (!(padEnds !== null)) dart.assertFailed(null, I[0], 35, 15, "padEnds != null");
    sliver_fill$.SliverFillViewport.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$.SliverFillViewport.prototype;
  dart.addTypeTests(sliver_fill$.SliverFillViewport);
  dart.addTypeCaches(sliver_fill$.SliverFillViewport);
  dart.setMethodSignature(sliver_fill$.SliverFillViewport, () => ({
    __proto__: dart.getMethods(sliver_fill$.SliverFillViewport.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$.SliverFillViewport, I[1]);
  dart.setFieldSignature(sliver_fill$.SliverFillViewport, () => ({
    __proto__: dart.getFields(sliver_fill$.SliverFillViewport.__proto__),
    viewportFraction: dart.finalFieldType(core.double),
    padEnds: dart.finalFieldType(core.bool),
    delegate: dart.finalFieldType(sliver.SliverChildDelegate)
  }));
  var viewportFraction$0 = dart.privateName(sliver_fill$, "_SliverFillViewportRenderObjectWidget.viewportFraction");
  sliver_fill$._SliverFillViewportRenderObjectWidget = class _SliverFillViewportRenderObjectWidget extends sliver.SliverMultiBoxAdaptorWidget {
    get viewportFraction() {
      return this[viewportFraction$0];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    createRenderObject(context) {
      let element = sliver.SliverMultiBoxAdaptorElement.as(context);
      return new sliver_fill.RenderSliverFillViewport.new({childManager: element, viewportFraction: this.viewportFraction});
    }
    updateRenderObject(context, renderObject) {
      sliver_fill.RenderSliverFillViewport.as(renderObject);
      renderObject.viewportFraction = this.viewportFraction;
    }
  };
  (sliver_fill$._SliverFillViewportRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[viewportFraction$0] = viewportFraction;
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 78, 15, "viewportFraction != null");
    if (!(viewportFraction > 0.0)) dart.assertFailed(null, I[0], 79, 14, "viewportFraction > 0.0");
    sliver_fill$._SliverFillViewportRenderObjectWidget.__proto__.new.call(this, {key: key, delegate: delegate, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$._SliverFillViewportRenderObjectWidget.prototype;
  dart.addTypeTests(sliver_fill$._SliverFillViewportRenderObjectWidget);
  dart.addTypeCaches(sliver_fill$._SliverFillViewportRenderObjectWidget);
  dart.setMethodSignature(sliver_fill$._SliverFillViewportRenderObjectWidget, () => ({
    __proto__: dart.getMethods(sliver_fill$._SliverFillViewportRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType(sliver_fill.RenderSliverFillViewport, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$._SliverFillViewportRenderObjectWidget, I[1]);
  dart.setFieldSignature(sliver_fill$._SliverFillViewportRenderObjectWidget, () => ({
    __proto__: dart.getFields(sliver_fill$._SliverFillViewportRenderObjectWidget.__proto__),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var viewportFraction$1 = dart.privateName(sliver_fill$, "_SliverFractionalPadding.viewportFraction");
  sliver_fill$._SliverFractionalPadding = class _SliverFractionalPadding extends framework.SingleChildRenderObjectWidget {
    get viewportFraction() {
      return this[viewportFraction$1];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    createRenderObject(context) {
      return new sliver_fill$._RenderSliverFractionalPadding.new({viewportFraction: this.viewportFraction});
    }
    updateRenderObject(context, renderObject) {
      sliver_fill$._RenderSliverFractionalPadding.as(renderObject);
      renderObject.viewportFraction = this.viewportFraction;
    }
  };
  (sliver_fill$._SliverFractionalPadding.new = function(opts) {
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 0;
    let sliver = opts && 'sliver' in opts ? opts.sliver : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[viewportFraction$1] = viewportFraction;
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 100, 15, "viewportFraction != null");
    if (!(viewportFraction >= 0)) dart.assertFailed(null, I[0], 101, 14, "viewportFraction >= 0");
    if (!(viewportFraction <= 0.5)) dart.assertFailed(null, I[0], 102, 14, "viewportFraction <= 0.5");
    sliver_fill$._SliverFractionalPadding.__proto__.new.call(this, {child: sliver, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$._SliverFractionalPadding.prototype;
  dart.addTypeTests(sliver_fill$._SliverFractionalPadding);
  dart.addTypeCaches(sliver_fill$._SliverFractionalPadding);
  dart.setMethodSignature(sliver_fill$._SliverFractionalPadding, () => ({
    __proto__: dart.getMethods(sliver_fill$._SliverFractionalPadding.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$._SliverFractionalPadding, I[1]);
  dart.setFieldSignature(sliver_fill$._SliverFractionalPadding, () => ({
    __proto__: dart.getFields(sliver_fill$._SliverFractionalPadding.__proto__),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var _lastResolvedConstraints = dart.privateName(sliver_fill$, "_lastResolvedConstraints");
  var _resolvedPadding = dart.privateName(sliver_fill$, "_resolvedPadding");
  var _viewportFraction = dart.privateName(sliver_fill$, "_viewportFraction");
  var _markNeedsResolution = dart.privateName(sliver_fill$, "_markNeedsResolution");
  var _name = dart.privateName(basic_types, "_name");
  var _resolve = dart.privateName(sliver_fill$, "_resolve");
  sliver_fill$._RenderSliverFractionalPadding = class _RenderSliverFractionalPadding extends sliver_padding.RenderSliverEdgeInsetsPadding {
    get viewportFraction() {
      return this[_viewportFraction];
    }
    set viewportFraction(newValue) {
      if (!(newValue !== null)) dart.assertFailed(null, I[0], 129, 12, "newValue != null");
      if (this[_viewportFraction] === newValue) return;
      this[_viewportFraction] = newValue;
      this[_markNeedsResolution]();
    }
    get resolvedPadding() {
      return this[_resolvedPadding];
    }
    [_markNeedsResolution]() {
      this[_resolvedPadding] = null;
      this.markNeedsLayout();
    }
    [_resolve]() {
      if (this[_resolvedPadding] != null && dart.equals(this[_lastResolvedConstraints], this.constraints)) return;
      if (!(this.constraints.axis !== null)) dart.assertFailed(null, I[0], 149, 12, "constraints.axis != null");
      let paddingValue = this.constraints.viewportMainAxisExtent * this.viewportFraction;
      this[_lastResolvedConstraints] = this.constraints;
      switch (this.constraints.axis) {
        case C[8] || CT.C8:
        {
          this[_resolvedPadding] = new edge_insets.EdgeInsets.symmetric({horizontal: paddingValue});
          break;
        }
        case C[9] || CT.C9:
        {
          this[_resolvedPadding] = new edge_insets.EdgeInsets.symmetric({vertical: paddingValue});
          break;
        }
      }
      return;
    }
    performLayout() {
      this[_resolve]();
      super.performLayout();
    }
  };
  (sliver_fill$._RenderSliverFractionalPadding.new = function(opts) {
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 0;
    this[_lastResolvedConstraints] = null;
    this[_resolvedPadding] = null;
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 119, 15, "viewportFraction != null");
    if (!(viewportFraction <= 0.5)) dart.assertFailed(null, I[0], 120, 14, "viewportFraction <= 0.5");
    if (!(viewportFraction >= 0)) dart.assertFailed(null, I[0], 121, 14, "viewportFraction >= 0");
    this[_viewportFraction] = viewportFraction;
    sliver_fill$._RenderSliverFractionalPadding.__proto__.new.call(this);
    ;
  }).prototype = sliver_fill$._RenderSliverFractionalPadding.prototype;
  dart.addTypeTests(sliver_fill$._RenderSliverFractionalPadding);
  dart.addTypeCaches(sliver_fill$._RenderSliverFractionalPadding);
  dart.setMethodSignature(sliver_fill$._RenderSliverFractionalPadding, () => ({
    __proto__: dart.getMethods(sliver_fill$._RenderSliverFractionalPadding.__proto__),
    [_markNeedsResolution]: dart.fnType(dart.void, []),
    [_resolve]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(sliver_fill$._RenderSliverFractionalPadding, () => ({
    __proto__: dart.getGetters(sliver_fill$._RenderSliverFractionalPadding.__proto__),
    viewportFraction: core.double,
    resolvedPadding: dart.nullable(edge_insets.EdgeInsets)
  }));
  dart.setSetterSignature(sliver_fill$._RenderSliverFractionalPadding, () => ({
    __proto__: dart.getSetters(sliver_fill$._RenderSliverFractionalPadding.__proto__),
    viewportFraction: core.double
  }));
  dart.setLibraryUri(sliver_fill$._RenderSliverFractionalPadding, I[1]);
  dart.setFieldSignature(sliver_fill$._RenderSliverFractionalPadding, () => ({
    __proto__: dart.getFields(sliver_fill$._RenderSliverFractionalPadding.__proto__),
    [_lastResolvedConstraints]: dart.fieldType(dart.nullable(sliver$.SliverConstraints)),
    [_viewportFraction]: dart.fieldType(core.double),
    [_resolvedPadding]: dart.fieldType(dart.nullable(edge_insets.EdgeInsets))
  }));
  var child$ = dart.privateName(sliver_fill$, "SliverFillRemaining.child");
  var hasScrollBody$ = dart.privateName(sliver_fill$, "SliverFillRemaining.hasScrollBody");
  var fillOverscroll$ = dart.privateName(sliver_fill$, "SliverFillRemaining.fillOverscroll");
  sliver_fill$.SliverFillRemaining = class SliverFillRemaining extends framework.StatelessWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get hasScrollBody() {
      return this[hasScrollBody$];
    }
    set hasScrollBody(value) {
      super.hasScrollBody = value;
    }
    get fillOverscroll() {
      return this[fillOverscroll$];
    }
    set fillOverscroll(value) {
      super.fillOverscroll = value;
    }
    build(context) {
      if (this.hasScrollBody) return new sliver_fill$._SliverFillRemainingWithScrollable.new({child: this.child, $creationLocationd_0dea112b090073317d4: C[10] || CT.C10});
      if (!this.fillOverscroll) return new sliver_fill$._SliverFillRemainingWithoutScrollable.new({child: this.child, $creationLocationd_0dea112b090073317d4: C[13] || CT.C13});
      return new sliver_fill$._SliverFillRemainingAndOverscroll.new({child: this.child, $creationLocationd_0dea112b090073317d4: C[16] || CT.C16});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfWidget()).new("child", this.child));
      let flags = (() => {
        let t0 = T.JSArrayOfString().of([]);
        if (this.hasScrollBody) t0[$add]("scrollable");
        if (this.fillOverscroll) t0[$add]("fillOverscroll");
        return t0;
      })();
      if (flags[$isEmpty]) flags[$add]("nonscrollable");
      properties.add(new (T.IterablePropertyOfString()).new("mode", flags));
    }
  };
  (sliver_fill$.SliverFillRemaining.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let hasScrollBody = opts && 'hasScrollBody' in opts ? opts.hasScrollBody : true;
    let fillOverscroll = opts && 'fillOverscroll' in opts ? opts.fillOverscroll : false;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[hasScrollBody$] = hasScrollBody;
    this[fillOverscroll$] = fillOverscroll;
    if (!(hasScrollBody !== null)) dart.assertFailed(null, I[0], 401, 15, "hasScrollBody != null");
    if (!(fillOverscroll !== null)) dart.assertFailed(null, I[0], 402, 15, "fillOverscroll != null");
    sliver_fill$.SliverFillRemaining.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$.SliverFillRemaining.prototype;
  dart.addTypeTests(sliver_fill$.SliverFillRemaining);
  dart.addTypeCaches(sliver_fill$.SliverFillRemaining);
  dart.setMethodSignature(sliver_fill$.SliverFillRemaining, () => ({
    __proto__: dart.getMethods(sliver_fill$.SliverFillRemaining.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$.SliverFillRemaining, I[1]);
  dart.setFieldSignature(sliver_fill$.SliverFillRemaining, () => ({
    __proto__: dart.getFields(sliver_fill$.SliverFillRemaining.__proto__),
    child: dart.finalFieldType(dart.nullable(framework.Widget)),
    hasScrollBody: dart.finalFieldType(core.bool),
    fillOverscroll: dart.finalFieldType(core.bool)
  }));
  sliver_fill$._SliverFillRemainingWithScrollable = class _SliverFillRemainingWithScrollable extends framework.SingleChildRenderObjectWidget {
    createRenderObject(context) {
      return new sliver_fill.RenderSliverFillRemainingWithScrollable.new();
    }
  };
  (sliver_fill$._SliverFillRemainingWithScrollable.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    sliver_fill$._SliverFillRemainingWithScrollable.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$._SliverFillRemainingWithScrollable.prototype;
  dart.addTypeTests(sliver_fill$._SliverFillRemainingWithScrollable);
  dart.addTypeCaches(sliver_fill$._SliverFillRemainingWithScrollable);
  dart.setMethodSignature(sliver_fill$._SliverFillRemainingWithScrollable, () => ({
    __proto__: dart.getMethods(sliver_fill$._SliverFillRemainingWithScrollable.__proto__),
    createRenderObject: dart.fnType(sliver_fill.RenderSliverFillRemainingWithScrollable, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$._SliverFillRemainingWithScrollable, I[1]);
  sliver_fill$._SliverFillRemainingWithoutScrollable = class _SliverFillRemainingWithoutScrollable extends framework.SingleChildRenderObjectWidget {
    createRenderObject(context) {
      return new sliver_fill.RenderSliverFillRemaining.new();
    }
  };
  (sliver_fill$._SliverFillRemainingWithoutScrollable.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    sliver_fill$._SliverFillRemainingWithoutScrollable.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$._SliverFillRemainingWithoutScrollable.prototype;
  dart.addTypeTests(sliver_fill$._SliverFillRemainingWithoutScrollable);
  dart.addTypeCaches(sliver_fill$._SliverFillRemainingWithoutScrollable);
  dart.setMethodSignature(sliver_fill$._SliverFillRemainingWithoutScrollable, () => ({
    __proto__: dart.getMethods(sliver_fill$._SliverFillRemainingWithoutScrollable.__proto__),
    createRenderObject: dart.fnType(sliver_fill.RenderSliverFillRemaining, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$._SliverFillRemainingWithoutScrollable, I[1]);
  sliver_fill$._SliverFillRemainingAndOverscroll = class _SliverFillRemainingAndOverscroll extends framework.SingleChildRenderObjectWidget {
    createRenderObject(context) {
      return new sliver_fill.RenderSliverFillRemainingAndOverscroll.new();
    }
  };
  (sliver_fill$._SliverFillRemainingAndOverscroll.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    sliver_fill$._SliverFillRemainingAndOverscroll.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = sliver_fill$._SliverFillRemainingAndOverscroll.prototype;
  dart.addTypeTests(sliver_fill$._SliverFillRemainingAndOverscroll);
  dart.addTypeCaches(sliver_fill$._SliverFillRemainingAndOverscroll);
  dart.setMethodSignature(sliver_fill$._SliverFillRemainingAndOverscroll, () => ({
    __proto__: dart.getMethods(sliver_fill$._SliverFillRemainingAndOverscroll.__proto__),
    createRenderObject: dart.fnType(sliver_fill.RenderSliverFillRemainingAndOverscroll, [framework.BuildContext])
  }));
  dart.setLibraryUri(sliver_fill$._SliverFillRemainingAndOverscroll, I[1]);
  dart.trackLibraries("packages/flutter/src/widgets/sliver_fill.dart", {
    "package:flutter/src/widgets/sliver_fill.dart": sliver_fill$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sliver_fill.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/sliver_fill.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__sliver_fill: sliver_fill$
  };
}));

//# sourceMappingURL=sliver_fill.dart.lib.js.map
=======
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: decoration_image.ImageRepeat.prototype,
        [_name]: "ImageRepeat.noRepeat",
        index: 3
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$]: "FilterQuality.low",
        index: 1
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/rendering/image.dart",
    "package:flutter/src/rendering/image.dart"
  ];
  var debugImageLabel$ = dart.privateName(image$, "RenderImage.debugImageLabel");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _name = dart.privateName(decoration_image, "_name");
  var _name$ = dart.privateName(ui, "_name");
  var _resolvedAlignment = dart.privateName(image$, "_resolvedAlignment");
  var _flipHorizontally = dart.privateName(image$, "_flipHorizontally");
  var _colorFilter = dart.privateName(image$, "_colorFilter");
  var _image = dart.privateName(image$, "_image");
  var _width = dart.privateName(image$, "_width");
  var _height = dart.privateName(image$, "_height");
  var _scale = dart.privateName(image$, "_scale");
  var _color = dart.privateName(image$, "_color");
  var _colorBlendMode = dart.privateName(image$, "_colorBlendMode");
  var _fit = dart.privateName(image$, "_fit");
  var _alignment = dart.privateName(image$, "_alignment");
  var _repeat = dart.privateName(image$, "_repeat");
  var _centerSlice = dart.privateName(image$, "_centerSlice");
  var _matchTextDirection = dart.privateName(image$, "_matchTextDirection");
  var _invertColors = dart.privateName(image$, "_invertColors");
  var _textDirection = dart.privateName(image$, "_textDirection");
  var _isAntiAlias = dart.privateName(image$, "_isAntiAlias");
  var _filterQuality = dart.privateName(image$, "_filterQuality");
  var _updateColorFilter = dart.privateName(image$, "_updateColorFilter");
  var _resolve = dart.privateName(image$, "_resolve");
  var _markNeedResolution = dart.privateName(image$, "_markNeedResolution");
  var _sizeForConstraints = dart.privateName(image$, "_sizeForConstraints");
  image$.RenderImage = class RenderImage extends box.RenderBox {
    get debugImageLabel() {
      return this[debugImageLabel$];
    }
    set debugImageLabel(value) {
      this[debugImageLabel$] = value;
    }
    [_resolve]() {
      if (this[_resolvedAlignment] != null) return;
      this[_resolvedAlignment] = this.alignment.resolve(this.textDirection);
      this[_flipHorizontally] = this.matchTextDirection && this.textDirection === ui.TextDirection.rtl;
    }
    [_markNeedResolution]() {
      this[_resolvedAlignment] = null;
      this[_flipHorizontally] = null;
      this.markNeedsPaint();
    }
    get image() {
      return this[_image];
    }
    set image(value) {
      let t0;
      if (dart.equals(value, this[_image])) {
        return;
      }
      if (value != null && this[_image] != null && value.isCloneOf(dart.nullCheck(this[_image]))) {
        value.dispose();
        return;
      }
      t0 = this[_image];
      t0 == null ? null : t0.dispose();
      this[_image] = value;
      this.markNeedsPaint();
      if (this[_width] == null || this[_height] == null) this.markNeedsLayout();
    }
    get width() {
      return this[_width];
    }
    set width(value) {
      if (value == this[_width]) return;
      this[_width] = value;
      this.markNeedsLayout();
    }
    get height() {
      return this[_height];
    }
    set height(value) {
      if (value == this[_height]) return;
      this[_height] = value;
      this.markNeedsLayout();
    }
    get scale() {
      return this[_scale];
    }
    set scale(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 139, 12, "value != null");
      if (value === this[_scale]) return;
      this[_scale] = value;
      this.markNeedsLayout();
    }
    [_updateColorFilter]() {
      let t0;
      if (this[_color] == null)
        this[_colorFilter] = null;
      else
        this[_colorFilter] = new _engine._CkBlendModeColorFilter.new(dart.nullCheck(this[_color]), (t0 = this[_colorBlendMode], t0 == null ? ui.BlendMode.srcIn : t0));
    }
    get color() {
      return this[_color];
    }
    set color(value) {
      if (dart.equals(value, this[_color])) return;
      this[_color] = value;
      this[_updateColorFilter]();
      this.markNeedsPaint();
    }
    get filterQuality() {
      return this[_filterQuality];
    }
    set filterQuality(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 173, 12, "value != null");
      if (value === this[_filterQuality]) return;
      this[_filterQuality] = value;
      this.markNeedsPaint();
    }
    get colorBlendMode() {
      return this[_colorBlendMode];
    }
    set colorBlendMode(value) {
      if (value == this[_colorBlendMode]) return;
      this[_colorBlendMode] = value;
      this[_updateColorFilter]();
      this.markNeedsPaint();
    }
    get fit() {
      return this[_fit];
    }
    set fit(value) {
      if (value == this[_fit]) return;
      this[_fit] = value;
      this.markNeedsPaint();
    }
    get alignment() {
      return this[_alignment];
    }
    set alignment(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 219, 12, "value != null");
      if (value._equals(this[_alignment])) return;
      this[_alignment] = value;
      this[_markNeedResolution]();
    }
    get repeat() {
      return this[_repeat];
    }
    set repeat(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 230, 12, "value != null");
      if (value === this[_repeat]) return;
      this[_repeat] = value;
      this.markNeedsPaint();
    }
    get centerSlice() {
      return this[_centerSlice];
    }
    set centerSlice(value) {
      if (dart.equals(value, this[_centerSlice])) return;
      this[_centerSlice] = value;
      this.markNeedsPaint();
    }
    get invertColors() {
      return this[_invertColors];
    }
    set invertColors(value) {
      if (value === this[_invertColors]) return;
      this[_invertColors] = value;
      this.markNeedsPaint();
    }
    get matchTextDirection() {
      return this[_matchTextDirection];
    }
    set matchTextDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 284, 12, "value != null");
      if (value === this[_matchTextDirection]) return;
      this[_matchTextDirection] = value;
      this[_markNeedResolution]();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) return;
      this[_textDirection] = value;
      this[_markNeedResolution]();
    }
    get isAntiAlias() {
      return this[_isAntiAlias];
    }
    set isAntiAlias(value) {
      if (this[_isAntiAlias] === value) {
        return;
      }
      if (!(value !== null)) dart.assertFailed(null, I[0], 314, 12, "value != null");
      this[_isAntiAlias] = value;
      this.markNeedsPaint();
    }
    [_sizeForConstraints](constraints) {
      constraints = new box.BoxConstraints.tightFor({width: this[_width], height: this[_height]}).enforce(constraints);
      if (this[_image] == null) return constraints.smallest;
      return constraints.constrainSizeAndAttemptToPreserveAspectRatio(new ui.Size.new(dart.nullCheck(this[_image]).width[$toDouble]() / this[_scale], dart.nullCheck(this[_image]).height[$toDouble]() / this[_scale]));
    }
    computeMinIntrinsicWidth(height) {
      if (!(height >= 0.0)) dart.assertFailed(null, I[0], 345, 12, "height >= 0.0");
      if (this[_width] == null && this[_height] == null) return 0.0;
      return this[_sizeForConstraints](new box.BoxConstraints.tightForFinite({height: height})).width;
    }
    computeMaxIntrinsicWidth(height) {
      if (!(height >= 0.0)) dart.assertFailed(null, I[0], 353, 12, "height >= 0.0");
      return this[_sizeForConstraints](new box.BoxConstraints.tightForFinite({height: height})).width;
    }
    computeMinIntrinsicHeight(width) {
      if (!(width >= 0.0)) dart.assertFailed(null, I[0], 359, 12, "width >= 0.0");
      if (this[_width] == null && this[_height] == null) return 0.0;
      return this[_sizeForConstraints](new box.BoxConstraints.tightForFinite({width: width})).height;
    }
    computeMaxIntrinsicHeight(width) {
      if (!(width >= 0.0)) dart.assertFailed(null, I[0], 367, 12, "width >= 0.0");
      return this[_sizeForConstraints](new box.BoxConstraints.tightForFinite({width: width})).height;
    }
    hitTestSelf(position) {
      return true;
    }
    computeDryLayout(constraints) {
      return this[_sizeForConstraints](constraints);
    }
    performLayout() {
      this.size = this[_sizeForConstraints](this.constraints);
    }
    paint(context, offset) {
      if (this[_image] == null) return;
      this[_resolve]();
      if (!(this[_resolvedAlignment] != null)) dart.assertFailed(null, I[0], 389, 12, "_resolvedAlignment != null");
      if (!(this[_flipHorizontally] != null)) dart.assertFailed(null, I[0], 390, 12, "_flipHorizontally != null");
      decoration_image.paintImage({canvas: context.canvas, rect: offset['&'](this.size), image: dart.nullCheck(this[_image]), debugImageLabel: this.debugImageLabel, scale: this[_scale], colorFilter: this[_colorFilter], fit: this[_fit], alignment: dart.nullCheck(this[_resolvedAlignment]), centerSlice: this[_centerSlice], repeat: this[_repeat], flipHorizontally: dart.nullCheck(this[_flipHorizontally]), invertColors: this.invertColors, filterQuality: this[_filterQuality], isAntiAlias: this[_isAntiAlias]});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfImage()).new("image", this.image));
      properties.add(new diagnostics.DoubleProperty.new("width", this.width, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("height", this.height, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scale", this.scale, {defaultValue: 1.0}));
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfBlendMode()).new("colorBlendMode", this.colorBlendMode, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfBoxFit()).new("fit", this.fit, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfAlignmentGeometry()).new("alignment", this.alignment, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfImageRepeat()).new("repeat", this.repeat, {defaultValue: decoration_image.ImageRepeat.noRepeat}));
      properties.add(new (T.DiagnosticsPropertyOfRect()).new("centerSlice", this.centerSlice, {defaultValue: null}));
      properties.add(new diagnostics.FlagProperty.new("matchTextDirection", {value: this.matchTextDirection, ifTrue: "match text direction"}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("invertColors", this.invertColors));
      properties.add(new (T.EnumPropertyOfFilterQuality()).new("filterQuality", this.filterQuality));
    }
  };
  (image$.RenderImage.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    let debugImageLabel = opts && 'debugImageLabel' in opts ? opts.debugImageLabel : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : null;
    let fit = opts && 'fit' in opts ? opts.fit : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    let repeat = opts && 'repeat' in opts ? opts.repeat : C[1] || CT.C1;
    let centerSlice = opts && 'centerSlice' in opts ? opts.centerSlice : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let invertColors = opts && 'invertColors' in opts ? opts.invertColors : false;
    let isAntiAlias = opts && 'isAntiAlias' in opts ? opts.isAntiAlias : false;
    let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : C[2] || CT.C2;
    this[_resolvedAlignment] = null;
    this[_flipHorizontally] = null;
    this[_colorFilter] = null;
    this[debugImageLabel$] = debugImageLabel;
    if (!(scale !== null)) dart.assertFailed(null, I[0], 44, 15, "scale != null");
    if (!(repeat !== null)) dart.assertFailed(null, I[0], 45, 15, "repeat != null");
    if (!(alignment !== null)) dart.assertFailed(null, I[0], 46, 15, "alignment != null");
    if (!(filterQuality !== null)) dart.assertFailed(null, I[0], 47, 15, "filterQuality != null");
    if (!(matchTextDirection !== null)) dart.assertFailed(null, I[0], 48, 15, "matchTextDirection != null");
    if (!(isAntiAlias !== null)) dart.assertFailed(null, I[0], 49, 15, "isAntiAlias != null");
    this[_image] = image;
    this[_width] = width;
    this[_height] = height;
    this[_scale] = scale;
    this[_color] = color;
    this[_colorBlendMode] = colorBlendMode;
    this[_fit] = fit;
    this[_alignment] = alignment;
    this[_repeat] = repeat;
    this[_centerSlice] = centerSlice;
    this[_matchTextDirection] = matchTextDirection;
    this[_invertColors] = invertColors;
    this[_textDirection] = textDirection;
    this[_isAntiAlias] = isAntiAlias;
    this[_filterQuality] = filterQuality;
    image$.RenderImage.__proto__.new.call(this);
    this[_updateColorFilter]();
  }).prototype = image$.RenderImage.prototype;
  dart.addTypeTests(image$.RenderImage);
  dart.addTypeCaches(image$.RenderImage);
  dart.setMethodSignature(image$.RenderImage, () => ({
    __proto__: dart.getMethods(image$.RenderImage.__proto__),
    [_resolve]: dart.fnType(dart.void, []),
    [_markNeedResolution]: dart.fnType(dart.void, []),
    [_updateColorFilter]: dart.fnType(dart.void, []),
    [_sizeForConstraints]: dart.fnType(ui.Size, [box.BoxConstraints])
  }));
  dart.setGetterSignature(image$.RenderImage, () => ({
    __proto__: dart.getGetters(image$.RenderImage.__proto__),
    image: dart.nullable(ui.Image),
    width: dart.nullable(core.double),
    height: dart.nullable(core.double),
    scale: core.double,
    color: dart.nullable(ui.Color),
    filterQuality: ui.FilterQuality,
    colorBlendMode: dart.nullable(ui.BlendMode),
    fit: dart.nullable(box_fit.BoxFit),
    alignment: alignment.AlignmentGeometry,
    repeat: decoration_image.ImageRepeat,
    centerSlice: dart.nullable(ui.Rect),
    invertColors: core.bool,
    matchTextDirection: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    isAntiAlias: core.bool
  }));
  dart.setSetterSignature(image$.RenderImage, () => ({
    __proto__: dart.getSetters(image$.RenderImage.__proto__),
    image: dart.nullable(ui.Image),
    width: dart.nullable(core.double),
    height: dart.nullable(core.double),
    scale: core.double,
    color: dart.nullable(ui.Color),
    filterQuality: ui.FilterQuality,
    colorBlendMode: dart.nullable(ui.BlendMode),
    fit: dart.nullable(box_fit.BoxFit),
    alignment: alignment.AlignmentGeometry,
    repeat: decoration_image.ImageRepeat,
    centerSlice: dart.nullable(ui.Rect),
    invertColors: core.bool,
    matchTextDirection: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    isAntiAlias: core.bool
  }));
  dart.setLibraryUri(image$.RenderImage, I[1]);
  dart.setFieldSignature(image$.RenderImage, () => ({
    __proto__: dart.getFields(image$.RenderImage.__proto__),
    [_resolvedAlignment]: dart.fieldType(dart.nullable(alignment.Alignment)),
    [_flipHorizontally]: dart.fieldType(dart.nullable(core.bool)),
    [_image]: dart.fieldType(dart.nullable(ui.Image)),
    debugImageLabel: dart.fieldType(dart.nullable(core.String)),
    [_width]: dart.fieldType(dart.nullable(core.double)),
    [_height]: dart.fieldType(dart.nullable(core.double)),
    [_scale]: dart.fieldType(core.double),
    [_colorFilter]: dart.fieldType(dart.nullable(ui.ColorFilter)),
    [_color]: dart.fieldType(dart.nullable(ui.Color)),
    [_filterQuality]: dart.fieldType(ui.FilterQuality),
    [_colorBlendMode]: dart.fieldType(dart.nullable(ui.BlendMode)),
    [_fit]: dart.fieldType(dart.nullable(box_fit.BoxFit)),
    [_alignment]: dart.fieldType(alignment.AlignmentGeometry),
    [_repeat]: dart.fieldType(decoration_image.ImageRepeat),
    [_centerSlice]: dart.fieldType(dart.nullable(ui.Rect)),
    [_invertColors]: dart.fieldType(core.bool),
    [_matchTextDirection]: dart.fieldType(core.bool),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_isAntiAlias]: dart.fieldType(core.bool)
  }));
  dart.trackLibraries("packages/flutter/src/rendering/image.dart", {
    "package:flutter/src/rendering/image.dart": image$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/image.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__image: image$
  };
}));

//# sourceMappingURL=image.dart.lib.js.map
>>>>>>> AUg2
