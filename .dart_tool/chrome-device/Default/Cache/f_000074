<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__rendering__list_body_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var list_body = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    EnumPropertyOfAxisDirection: () => (T.EnumPropertyOfAxisDirection = dart.constFn(diagnostics.EnumProperty$(basic_types.AxisDirection)))(),
    RenderBoxTodouble: () => (T.RenderBoxTodouble = dart.constFn(dart.fnType(core.double, [box.RenderBox])))()
=======
define(['dart_sdk', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/events.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/constants.dart', 'packages/flutter/src/gestures/recognizer.dart'], (function load__packages__flutter__src__gestures__multitap_dart(dart_sdk, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__events$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__constants$46dart, packages__flutter__src__gestures__recognizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const constants = packages__flutter__src__gestures__constants$46dart.src__gestures__constants;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  var multitap = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $_equals = dartx._equals;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$_TapTracker: () => (T.IdentityMapOfint$_TapTracker = dart.constFn(_js_helper.IdentityMap$(core.int, multitap._TapTracker)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    IdentityMapOfint$_TapGesture: () => (T.IdentityMapOfint$_TapGesture = dart.constFn(_js_helper.IdentityMap$(core.int, multitap._TapGesture)))(),
    ListOf_TapGesture: () => (T.ListOf_TapGesture = dart.constFn(core.List$(multitap._TapGesture)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.down",
        index: 2
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.right",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.left",
        index: 3
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.up",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/rendering/list_body.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/rendering/list_body.dart"
  ];
  list_body.ListBodyParentData = class ListBodyParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (list_body.ListBodyParentData.new = function() {
    list_body.ListBodyParentData.__proto__.new.call(this);
    ;
  }).prototype = list_body.ListBodyParentData.prototype;
  dart.addTypeTests(list_body.ListBodyParentData);
  dart.addTypeCaches(list_body.ListBodyParentData);
  dart.setLibraryUri(list_body.ListBodyParentData, I[0]);
  var _name = dart.privateName(basic_types, "_name");
  var _axisDirection = dart.privateName(list_body, "_axisDirection");
  var _debugCheckConstraints = dart.privateName(list_body, "_debugCheckConstraints");
  var _getIntrinsicCrossAxis = dart.privateName(list_body, "_getIntrinsicCrossAxis");
  var _getIntrinsicMainAxis = dart.privateName(list_body, "_getIntrinsicMainAxis");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, list_body.ListBodyParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, list_body.ListBodyParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, list_body.ListBodyParentData));
  list_body.RenderListBody = class RenderListBody extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    setupParentData(child) {
      box.RenderBox.as(child);
      if (!list_body.ListBodyParentData.is(child.parentData)) child.parentData = new list_body.ListBodyParentData.new();
    }
    get axisDirection() {
      return this[_axisDirection];
    }
    set axisDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 53, 12, "value != null");
      if (this[_axisDirection] === value) return;
      this[_axisDirection] = value;
      this.markNeedsLayout();
    }
    get mainAxis() {
      return basic_types.axisDirectionToAxis(this.axisDirection);
    }
    computeDryLayout(constraints) {
      if (!this[_debugCheckConstraints](constraints)) dart.assertFailed(null, I[1], 66, 12, "_debugCheckConstraints(constraints)");
      let mainAxisExtent = 0.0;
      let child = this.firstChild;
      switch (this.axisDirection) {
        case C[1] || CT.C1:
        case C[2] || CT.C2:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({height: constraints.maxHeight});
          while (child != null) {
            let childSize = child.getDryLayout(innerConstraints);
            mainAxisExtent = mainAxisExtent + childSize.width;
            child = this.childAfter(child);
          }
          return constraints.constrain(new ui.Size.new(mainAxisExtent, constraints.maxHeight));
        }
        case C[3] || CT.C3:
        case C[0] || CT.C0:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({width: constraints.maxWidth});
          while (child != null) {
            let childSize = child.getDryLayout(innerConstraints);
            mainAxisExtent = mainAxisExtent + childSize.height;
            child = this.childAfter(child);
          }
          return constraints.constrain(new ui.Size.new(constraints.maxWidth, mainAxisExtent));
        }
      }
    }
    [_debugCheckConstraints](constraints) {
      if (!dart.fn(() => {
        switch (this.mainAxis) {
          case C[4] || CT.C4:
          {
            if (!constraints.hasBoundedWidth) return true;
            break;
          }
          case C[5] || CT.C5:
          {
            if (!constraints.hasBoundedHeight) return true;
            break;
          }
        }
        dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("RenderListBody must have unlimited space along its main axis."), new assertions.ErrorDescription.new("RenderListBody does not clip or resize its children, so it must be " + "placed in a parent that does not constrain the main " + "axis."), new assertions.ErrorHint.new("You probably want to put the RenderListBody inside a " + "RenderViewport with a matching main axis.")])));
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 92, 12, "() {\r\n      switch (mainAxis) {\r\n        case Axis.horizontal:\r\n          if (!constraints.hasBoundedWidth)\r\n            return true;\r\n          break;\r\n        case Axis.vertical:\r\n          if (!constraints.hasBoundedHeight)\r\n            return true;\r\n          break;\r\n      }\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('RenderListBody must have unlimited space along its main axis.'),\r\n        ErrorDescription(\r\n          'RenderListBody does not clip or resize its children, so it must be '\r\n          'placed in a parent that does not constrain the main '\r\n          'axis.',\r\n        ),\r\n        ErrorHint(\r\n          'You probably want to put the RenderListBody inside a '\r\n          'RenderViewport with a matching main axis.',\r\n        ),\r\n      ]);\r\n    }()");
      if (!dart.fn(() => {
        switch (this.mainAxis) {
          case C[4] || CT.C4:
          {
            if (constraints.hasBoundedHeight) return true;
=======
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/gestures/multitap.dart",
    "package:flutter/src/gestures/multitap.dart"
  ];
  var _timeout = dart.privateName(multitap, "_timeout");
  var _onTimeout = dart.privateName(multitap, "_onTimeout");
  multitap._CountdownZoned = class _CountdownZoned extends core.Object {
    get timeout() {
      return this[_timeout];
    }
    [_onTimeout]() {
      this[_timeout] = true;
    }
  };
  (multitap._CountdownZoned.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[_timeout] = false;
    if (!(duration !== null)) dart.assertFailed(null, I[0], 43, 17, "duration != null");
    async.Timer.new(duration, dart.bind(this, _onTimeout));
  }).prototype = multitap._CountdownZoned.prototype;
  dart.addTypeTests(multitap._CountdownZoned);
  dart.addTypeCaches(multitap._CountdownZoned);
  dart.setMethodSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getMethods(multitap._CountdownZoned.__proto__),
    [_onTimeout]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getGetters(multitap._CountdownZoned.__proto__),
    timeout: core.bool
  }));
  dart.setLibraryUri(multitap._CountdownZoned, I[1]);
  dart.setFieldSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getFields(multitap._CountdownZoned.__proto__),
    [_timeout]: dart.fieldType(core.bool)
  }));
  var _isTrackingPointer = dart.privateName(multitap, "_isTrackingPointer");
  var _initialGlobalPosition = dart.privateName(multitap, "_initialGlobalPosition");
  var _doubleTapMinTimeCountdown = dart.privateName(multitap, "_doubleTapMinTimeCountdown");
  multitap._TapTracker = class _TapTracker extends core.Object {
    startTrackingPointer(route, transform) {
      if (!this[_isTrackingPointer]) {
        this[_isTrackingPointer] = true;
        dart.nullCheck(binding.GestureBinding.instance).pointerRouter.addRoute(this.pointer, route, transform);
      }
    }
    stopTrackingPointer(route) {
      if (this[_isTrackingPointer]) {
        this[_isTrackingPointer] = false;
        dart.nullCheck(binding.GestureBinding.instance).pointerRouter.removeRoute(this.pointer, route);
      }
    }
    isWithinGlobalTolerance(event, tolerance) {
      let offset = event.position['-'](this[_initialGlobalPosition]);
      return offset.distance <= tolerance;
    }
    hasElapsedMinTime() {
      return this[_doubleTapMinTimeCountdown].timeout;
    }
    hasSameButton(event) {
      return event.buttons === this.initialButtons;
    }
  };
  (multitap._TapTracker.new = function(opts) {
    let event = opts && 'event' in opts ? opts.event : null;
    let entry = opts && 'entry' in opts ? opts.entry : null;
    let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
    this[_isTrackingPointer] = false;
    this.entry = entry;
    if (!(doubleTapMinTime !== null)) dart.assertFailed(null, I[0], 63, 15, "doubleTapMinTime != null");
    if (!(event !== null)) dart.assertFailed(null, I[0], 64, 15, "event != null");
    if (!(event.buttons !== null)) dart.assertFailed(null, I[0], 65, 15, "event.buttons != null");
    this.pointer = event.pointer;
    this[_initialGlobalPosition] = event.position;
    this.initialButtons = event.buttons;
    this[_doubleTapMinTimeCountdown] = new multitap._CountdownZoned.new({duration: doubleTapMinTime});
    ;
  }).prototype = multitap._TapTracker.prototype;
  dart.addTypeTests(multitap._TapTracker);
  dart.addTypeCaches(multitap._TapTracker);
  dart.setMethodSignature(multitap._TapTracker, () => ({
    __proto__: dart.getMethods(multitap._TapTracker.__proto__),
    startTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent]), dart.nullable(vector_math_64.Matrix4)]),
    stopTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent])]),
    isWithinGlobalTolerance: dart.fnType(core.bool, [events.PointerEvent, core.double]),
    hasElapsedMinTime: dart.fnType(core.bool, []),
    hasSameButton: dart.fnType(core.bool, [events.PointerDownEvent])
  }));
  dart.setLibraryUri(multitap._TapTracker, I[1]);
  dart.setFieldSignature(multitap._TapTracker, () => ({
    __proto__: dart.getFields(multitap._TapTracker.__proto__),
    pointer: dart.finalFieldType(core.int),
    entry: dart.finalFieldType(arena.GestureArenaEntry),
    [_initialGlobalPosition]: dart.finalFieldType(ui.Offset),
    initialButtons: dart.finalFieldType(core.int),
    [_doubleTapMinTimeCountdown]: dart.finalFieldType(multitap._CountdownZoned),
    [_isTrackingPointer]: dart.fieldType(core.bool)
  }));
  var onDoubleTapDown = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTapDown");
  var onDoubleTap = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTap");
  var onDoubleTapCancel = dart.privateName(multitap, "DoubleTapGestureRecognizer.onDoubleTapCancel");
  var _doubleTapTimer = dart.privateName(multitap, "_doubleTapTimer");
  var _firstTap = dart.privateName(multitap, "_firstTap");
  var _trackers = dart.privateName(multitap, "_trackers");
  var _reset = dart.privateName(multitap, "_reset");
  var _trackTap = dart.privateName(multitap, "_trackTap");
  var _stopDoubleTapTimer = dart.privateName(multitap, "_stopDoubleTapTimer");
  var _handleEvent = dart.privateName(multitap, "_handleEvent");
  var _registerFirstTap = dart.privateName(multitap, "_registerFirstTap");
  var _registerSecondTap = dart.privateName(multitap, "_registerSecondTap");
  var _reject = dart.privateName(multitap, "_reject");
  var _freezeTracker = dart.privateName(multitap, "_freezeTracker");
  var _checkCancel = dart.privateName(multitap, "_checkCancel");
  var _clearTrackers = dart.privateName(multitap, "_clearTrackers");
  var _startDoubleTapTimer = dart.privateName(multitap, "_startDoubleTapTimer");
  var _checkUp = dart.privateName(multitap, "_checkUp");
  multitap.DoubleTapGestureRecognizer = class DoubleTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onDoubleTapDown() {
      return this[onDoubleTapDown];
    }
    set onDoubleTapDown(value) {
      this[onDoubleTapDown] = value;
    }
    get onDoubleTap() {
      return this[onDoubleTap];
    }
    set onDoubleTap(value) {
      this[onDoubleTap] = value;
    }
    get onDoubleTapCancel() {
      return this[onDoubleTapCancel];
    }
    set onDoubleTapCancel(value) {
      this[onDoubleTapCancel] = value;
    }
    isPointerAllowed(event) {
      if (this[_firstTap] == null) {
        switch (event.buttons) {
          case 1:
          {
            if (this.onDoubleTapDown == null && this.onDoubleTap == null && this.onDoubleTapCancel == null) return false;
>>>>>>> AUg2
            break;
          }
          default:
          {
<<<<<<< HEAD
            if (constraints.hasBoundedWidth) return true;
            break;
          }
        }
        dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("RenderListBody must have a bounded constraint for its cross axis."), new assertions.ErrorDescription.new("RenderListBody forces its children to expand to fit the RenderListBody's container, " + "so it must be placed in a parent that constrains the cross " + "axis to a finite dimension."), new assertions.ErrorHint.new("If you are attempting to nest a RenderListBody with " + "one direction inside one of another direction, you will want to " + "wrap the inner one inside a box that fixes the dimension in that direction, " + "for example, a RenderIntrinsicWidth or RenderIntrinsicHeight object. " + "This is relatively expensive, however.")])));
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 116, 12, "() {\r\n      switch (mainAxis) {\r\n        case Axis.horizontal:\r\n          if (constraints.hasBoundedHeight)\r\n            return true;\r\n          break;\r\n        case Axis.vertical:\r\n          if (constraints.hasBoundedWidth)\r\n            return true;\r\n          break;\r\n      }\r\n      // TODO(ianh): Detect if we're actually nested blocks and say something\r\n      // more specific to the exact situation in that case, and don't mention\r\n      // nesting blocks in the negative case.\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('RenderListBody must have a bounded constraint for its cross axis.'),\r\n        ErrorDescription(\r\n          \"RenderListBody forces its children to expand to fit the RenderListBody's container, \"\r\n          'so it must be placed in a parent that constrains the cross '\r\n          'axis to a finite dimension.',\r\n        ),\r\n        // TODO(jacobr): this hint is a great candidate to promote to being an\r\n        // automated quick fix in the future.\r\n        ErrorHint(\r\n          'If you are attempting to nest a RenderListBody with '\r\n          'one direction inside one of another direction, you will want to '\r\n          'wrap the inner one inside a box that fixes the dimension in that direction, '\r\n          'for example, a RenderIntrinsicWidth or RenderIntrinsicHeight object. '\r\n          'This is relatively expensive, however.', // (that's why we don't do it automatically)\r\n        ),\r\n      ]);\r\n    }()");
      return true;
    }
    performLayout() {
      let constraints = this.constraints;
      if (!this[_debugCheckConstraints](constraints)) dart.assertFailed(null, I[1], 154, 12, "_debugCheckConstraints(constraints)");
      let mainAxisExtent = 0.0;
      let child = this.firstChild;
      switch (this.axisDirection) {
        case C[1] || CT.C1:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({height: constraints.maxHeight});
          while (child != null) {
            child.layout(innerConstraints, {parentUsesSize: true});
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            childParentData.offset = new ui.Offset.new(mainAxisExtent, 0.0);
            mainAxisExtent = mainAxisExtent + child.size.width;
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 165, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          this.size = constraints.constrain(new ui.Size.new(mainAxisExtent, constraints.maxHeight));
          break;
        }
        case C[2] || CT.C2:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({height: constraints.maxHeight});
          while (child != null) {
            child.layout(innerConstraints, {parentUsesSize: true});
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            mainAxisExtent = mainAxisExtent + child.size.width;
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 176, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          let position = 0.0;
          child = this.firstChild;
          while (child != null) {
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            position = position + child.size.width;
            childParentData.offset = new ui.Offset.new(mainAxisExtent - position, 0.0);
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 185, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          this.size = constraints.constrain(new ui.Size.new(mainAxisExtent, constraints.maxHeight));
          break;
        }
        case C[0] || CT.C0:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({width: constraints.maxWidth});
          while (child != null) {
            child.layout(innerConstraints, {parentUsesSize: true});
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            childParentData.offset = new ui.Offset.new(0.0, mainAxisExtent);
            mainAxisExtent = mainAxisExtent + child.size.height;
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 197, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          this.size = constraints.constrain(new ui.Size.new(constraints.maxWidth, mainAxisExtent));
          break;
        }
        case C[3] || CT.C3:
        {
          let innerConstraints = new box.BoxConstraints.tightFor({width: constraints.maxWidth});
          while (child != null) {
            child.layout(innerConstraints, {parentUsesSize: true});
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            mainAxisExtent = mainAxisExtent + child.size.height;
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 208, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          let position = 0.0;
          child = this.firstChild;
          while (child != null) {
            let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
            position = position + child.size.height;
            childParentData.offset = new ui.Offset.new(0.0, mainAxisExtent - position);
            if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[1], 217, 18, "child.parentData == childParentData");
            child = childParentData.nextSibling;
          }
          this.size = constraints.constrain(new ui.Size.new(constraints.maxWidth, mainAxisExtent));
          break;
        }
      }
      if (!this.size.isFinite) dart.assertFailed(null, I[1], 223, 12, "size.isFinite");
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfAxisDirection()).new("axisDirection", this.axisDirection));
    }
    [_getIntrinsicCrossAxis](childSize) {
      let extent = 0.0;
      let child = this.firstChild;
      while (child != null) {
        extent = math.max(core.double, extent, childSize(child));
        let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
        child = childParentData.nextSibling;
      }
      return extent;
    }
    [_getIntrinsicMainAxis](childSize) {
      let extent = 0.0;
      let child = this.firstChild;
      while (child != null) {
        extent = extent + childSize(child);
        let childParentData = list_body.ListBodyParentData.as(dart.nullCheck(child.parentData));
        child = childParentData.nextSibling;
      }
      return extent;
    }
    computeMinIntrinsicWidth(height) {
      if (!(this.mainAxis !== null)) dart.assertFailed(null, I[1], 256, 12, "mainAxis != null");
      switch (this.mainAxis) {
        case C[4] || CT.C4:
        {
          return this[_getIntrinsicMainAxis](dart.fn(child => child.getMinIntrinsicWidth(height), T.RenderBoxTodouble()));
        }
        case C[5] || CT.C5:
        {
          return this[_getIntrinsicCrossAxis](dart.fn(child => child.getMinIntrinsicWidth(height), T.RenderBoxTodouble()));
        }
      }
    }
    computeMaxIntrinsicWidth(height) {
      if (!(this.mainAxis !== null)) dart.assertFailed(null, I[1], 267, 12, "mainAxis != null");
      switch (this.mainAxis) {
        case C[4] || CT.C4:
        {
          return this[_getIntrinsicMainAxis](dart.fn(child => child.getMaxIntrinsicWidth(height), T.RenderBoxTodouble()));
        }
        case C[5] || CT.C5:
        {
          return this[_getIntrinsicCrossAxis](dart.fn(child => child.getMaxIntrinsicWidth(height), T.RenderBoxTodouble()));
        }
      }
    }
    computeMinIntrinsicHeight(width) {
      if (!(this.mainAxis !== null)) dart.assertFailed(null, I[1], 278, 12, "mainAxis != null");
      switch (this.mainAxis) {
        case C[4] || CT.C4:
        {
          return this[_getIntrinsicMainAxis](dart.fn(child => child.getMinIntrinsicHeight(width), T.RenderBoxTodouble()));
        }
        case C[5] || CT.C5:
        {
          return this[_getIntrinsicCrossAxis](dart.fn(child => child.getMinIntrinsicHeight(width), T.RenderBoxTodouble()));
        }
      }
    }
    computeMaxIntrinsicHeight(width) {
      if (!(this.mainAxis !== null)) dart.assertFailed(null, I[1], 289, 12, "mainAxis != null");
      switch (this.mainAxis) {
        case C[4] || CT.C4:
        {
          return this[_getIntrinsicMainAxis](dart.fn(child => child.getMaxIntrinsicHeight(width), T.RenderBoxTodouble()));
        }
        case C[5] || CT.C5:
        {
          return this[_getIntrinsicCrossAxis](dart.fn(child => child.getMaxIntrinsicHeight(width), T.RenderBoxTodouble()));
        }
      }
    }
    computeDistanceToActualBaseline(baseline) {
      return this.defaultComputeDistanceToFirstActualBaseline(baseline);
    }
    paint(context, offset) {
      this.defaultPaint(context, offset);
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return this.defaultHitTestChildren(result, {position: position});
    }
  };
  (list_body.RenderListBody.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C[0] || CT.C0;
    if (!(axisDirection !== null)) dart.assertFailed(null, I[1], 35, 15, "axisDirection != null");
    this[_axisDirection] = axisDirection;
    list_body.RenderListBody.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = list_body.RenderListBody.prototype;
  dart.addTypeTests(list_body.RenderListBody);
  dart.addTypeCaches(list_body.RenderListBody);
  dart.setMethodSignature(list_body.RenderListBody, () => ({
    __proto__: dart.getMethods(list_body.RenderListBody.__proto__),
    [_debugCheckConstraints]: dart.fnType(core.bool, [box.BoxConstraints]),
    [_getIntrinsicCrossAxis]: dart.fnType(core.double, [dart.fnType(core.double, [box.RenderBox])]),
    [_getIntrinsicMainAxis]: dart.fnType(core.double, [dart.fnType(core.double, [box.RenderBox])])
  }));
  dart.setGetterSignature(list_body.RenderListBody, () => ({
    __proto__: dart.getGetters(list_body.RenderListBody.__proto__),
    axisDirection: basic_types.AxisDirection,
    mainAxis: basic_types.Axis
  }));
  dart.setSetterSignature(list_body.RenderListBody, () => ({
    __proto__: dart.getSetters(list_body.RenderListBody.__proto__),
    axisDirection: basic_types.AxisDirection
  }));
  dart.setLibraryUri(list_body.RenderListBody, I[0]);
  dart.setFieldSignature(list_body.RenderListBody, () => ({
    __proto__: dart.getFields(list_body.RenderListBody.__proto__),
    [_axisDirection]: dart.fieldType(basic_types.AxisDirection)
  }));
  dart.trackLibraries("packages/flutter/src/rendering/list_body.dart", {
    "package:flutter/src/rendering/list_body.dart": list_body
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["list_body.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/list_body.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__list_body: list_body
  };
}));

//# sourceMappingURL=list_body.dart.lib.js.map
=======
            return false;
          }
        }
      }
      return super.isPointerAllowed(event);
    }
    addAllowedPointer(event) {
      if (this[_firstTap] != null) {
        if (!dart.nullCheck(this[_firstTap]).isWithinGlobalTolerance(event, 100)) {
          return;
        } else if (!dart.nullCheck(this[_firstTap]).hasElapsedMinTime() || !dart.nullCheck(this[_firstTap]).hasSameButton(event)) {
          this[_reset]();
          return this[_trackTap](event);
        } else if (this.onDoubleTapDown != null) {
          let details = new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: this.getKindForPointer(event.pointer)});
          this.invokeCallback(dart.void, "onDoubleTapDown", dart.fn(() => dart.nullCheck(this.onDoubleTapDown)(details), T.VoidTovoid()));
        }
      }
      this[_trackTap](event);
    }
    [_trackTap](event) {
      this[_stopDoubleTapTimer]();
      let tracker = new multitap._TapTracker.new({event: event, entry: dart.nullCheck(binding.GestureBinding.instance).gestureArena.add(event.pointer, this), doubleTapMinTime: constants.kDoubleTapMinTime});
      this[_trackers][$_set](event.pointer, tracker);
      tracker.startTrackingPointer(dart.bind(this, _handleEvent), event.transform);
    }
    [_handleEvent](event) {
      let tracker = dart.nullCheck(this[_trackers][$_get](event.pointer));
      if (events.PointerUpEvent.is(event)) {
        if (this[_firstTap] == null)
          this[_registerFirstTap](tracker);
        else
          this[_registerSecondTap](tracker);
      } else if (events.PointerMoveEvent.is(event)) {
        if (!tracker.isWithinGlobalTolerance(event, 18)) this[_reject](tracker);
      } else if (events.PointerCancelEvent.is(event)) {
        this[_reject](tracker);
      }
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
      let tracker = this[_trackers][$_get](pointer);
      if (tracker == null && this[_firstTap] != null && dart.nullCheck(this[_firstTap]).pointer === pointer) tracker = this[_firstTap];
      if (tracker != null) this[_reject](tracker);
    }
    [_reject](tracker) {
      this[_trackers][$remove](tracker.pointer);
      tracker.entry.resolve(arena.GestureDisposition.rejected);
      this[_freezeTracker](tracker);
      if (this[_firstTap] != null) {
        if (tracker[$_equals](this[_firstTap])) {
          this[_reset]();
        } else {
          this[_checkCancel]();
          if (this[_trackers][$isEmpty]) this[_reset]();
        }
      }
    }
    dispose() {
      this[_reset]();
      super.dispose();
    }
    [_reset]() {
      this[_stopDoubleTapTimer]();
      if (this[_firstTap] != null) {
        if (this[_trackers][$isNotEmpty]) this[_checkCancel]();
        let tracker = dart.nullCheck(this[_firstTap]);
        this[_firstTap] = null;
        this[_reject](tracker);
        dart.nullCheck(binding.GestureBinding.instance).gestureArena.release(tracker.pointer);
      }
      this[_clearTrackers]();
    }
    [_registerFirstTap](tracker) {
      this[_startDoubleTapTimer]();
      dart.nullCheck(binding.GestureBinding.instance).gestureArena.hold(tracker.pointer);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_clearTrackers]();
      this[_firstTap] = tracker;
    }
    [_registerSecondTap](tracker) {
      dart.nullCheck(this[_firstTap]).entry.resolve(arena.GestureDisposition.accepted);
      tracker.entry.resolve(arena.GestureDisposition.accepted);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_checkUp](tracker.initialButtons);
      this[_reset]();
    }
    [_clearTrackers]() {
      this[_trackers][$values][$toList]()[$forEach](dart.bind(this, _reject));
      if (!this[_trackers][$isEmpty]) dart.assertFailed(null, I[0], 332, 12, "_trackers.isEmpty");
    }
    [_freezeTracker](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent));
    }
    [_startDoubleTapTimer]() {
      this[_doubleTapTimer] == null ? this[_doubleTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _reset)) : null;
    }
    [_stopDoubleTapTimer]() {
      if (this[_doubleTapTimer] != null) {
        dart.nullCheck(this[_doubleTapTimer]).cancel();
        this[_doubleTapTimer] = null;
      }
    }
    [_checkUp](buttons) {
      if (!(buttons === 1)) dart.assertFailed(null, I[0], 351, 12, "buttons == kPrimaryButton");
      if (this.onDoubleTap != null) this.invokeCallback(dart.void, "onDoubleTap", dart.nullCheck(this.onDoubleTap));
    }
    [_checkCancel]() {
      if (this.onDoubleTapCancel != null) this.invokeCallback(dart.void, "onDoubleTapCancel", dart.nullCheck(this.onDoubleTapCancel));
    }
    get debugDescription() {
      return "double tap";
    }
  };
  (multitap.DoubleTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onDoubleTapDown] = null;
    this[onDoubleTap] = null;
    this[onDoubleTapCancel] = null;
    this[_doubleTapTimer] = null;
    this[_firstTap] = null;
    this[_trackers] = new (T.IdentityMapOfint$_TapTracker()).new();
    multitap.DoubleTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.DoubleTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.DoubleTapGestureRecognizer);
  dart.addTypeCaches(multitap.DoubleTapGestureRecognizer);
  dart.setMethodSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.DoubleTapGestureRecognizer.__proto__),
    [_trackTap]: dart.fnType(dart.void, [events.PointerDownEvent]),
    [_handleEvent]: dart.fnType(dart.void, [events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_reject]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_reset]: dart.fnType(dart.void, []),
    [_registerFirstTap]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_registerSecondTap]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_clearTrackers]: dart.fnType(dart.void, []),
    [_freezeTracker]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_startDoubleTapTimer]: dart.fnType(dart.void, []),
    [_stopDoubleTapTimer]: dart.fnType(dart.void, []),
    [_checkUp]: dart.fnType(dart.void, [core.int]),
    [_checkCancel]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.DoubleTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multitap.DoubleTapGestureRecognizer, I[1]);
  dart.setFieldSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.DoubleTapGestureRecognizer.__proto__),
    onDoubleTapDown: dart.fieldType(dart.nullable(dart.fnType(dart.void, [tap.TapDownDetails]))),
    onDoubleTap: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDoubleTapCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_doubleTapTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_firstTap]: dart.fieldType(dart.nullable(multitap._TapTracker)),
    [_trackers]: dart.finalFieldType(core.Map$(core.int, multitap._TapTracker))
  }));
  var _wonArena = dart.privateName(multitap, "_wonArena");
  var _timer = dart.privateName(multitap, "_timer");
  var _finalPosition = dart.privateName(multitap, "_finalPosition");
  var _lastPosition = dart.privateName(multitap, "_lastPosition");
  var _dispatchLongTap = dart.privateName(multitap, "_dispatchLongTap");
  var _check = dart.privateName(multitap, "_check");
  var _dispatchCancel = dart.privateName(multitap, "_dispatchCancel");
  var _dispatchTap = dart.privateName(multitap, "_dispatchTap");
  multitap._TapGesture = class _TapGesture extends multitap._TapTracker {
    handleEvent(event) {
      if (!(event.pointer === this.pointer)) dart.assertFailed(null, I[0], 398, 12, "event.pointer == pointer");
      if (events.PointerMoveEvent.is(event)) {
        if (!this.isWithinGlobalTolerance(event, events.computeHitSlop(event.kind)))
          this.cancel();
        else
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
      } else if (events.PointerCancelEvent.is(event)) {
        this.cancel();
      } else if (events.PointerUpEvent.is(event)) {
        this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
        this[_finalPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_check]();
      }
    }
    stopTrackingPointer(route) {
      let t0;
      t0 = this[_timer];
      t0 == null ? null : t0.cancel();
      this[_timer] = null;
      super.stopTrackingPointer(route);
    }
    accept() {
      this[_wonArena] = true;
      this[_check]();
    }
    reject() {
      this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
      this.gestureRecognizer[_dispatchCancel](this.pointer);
    }
    cancel() {
      if (this[_wonArena])
        this.reject();
      else
        this.entry.resolve(arena.GestureDisposition.rejected);
    }
    [_check]() {
      if (this[_wonArena] && this[_finalPosition] != null) this.gestureRecognizer[_dispatchTap](this.pointer, dart.nullCheck(this[_finalPosition]));
    }
  };
  (multitap._TapGesture.new = function(opts) {
    let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
    this[_wonArena] = false;
    this[_timer] = null;
    this[_finalPosition] = null;
    this.gestureRecognizer = gestureRecognizer;
    this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
    multitap._TapGesture.__proto__.new.call(this, {event: events.PointerDownEvent.as(event), entry: dart.nullCheck(binding.GestureBinding.instance).gestureArena.add(event.pointer, gestureRecognizer), doubleTapMinTime: constants.kDoubleTapMinTime});
    this.startTrackingPointer(dart.bind(this, 'handleEvent'), event.transform);
    if (longTapDelay['>'](core.Duration.zero)) {
      this[_timer] = async.Timer.new(longTapDelay, dart.fn(() => {
        this[_timer] = null;
        this.gestureRecognizer[_dispatchLongTap](event.pointer, this[_lastPosition]);
      }, T.VoidTovoid()));
    }
  }).prototype = multitap._TapGesture.prototype;
  dart.addTypeTests(multitap._TapGesture);
  dart.addTypeCaches(multitap._TapGesture);
  dart.setMethodSignature(multitap._TapGesture, () => ({
    __proto__: dart.getMethods(multitap._TapGesture.__proto__),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    accept: dart.fnType(dart.void, []),
    reject: dart.fnType(dart.void, []),
    cancel: dart.fnType(dart.void, []),
    [_check]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(multitap._TapGesture, I[1]);
  dart.setFieldSignature(multitap._TapGesture, () => ({
    __proto__: dart.getFields(multitap._TapGesture.__proto__),
    gestureRecognizer: dart.finalFieldType(multitap.MultiTapGestureRecognizer),
    [_wonArena]: dart.fieldType(core.bool),
    [_timer]: dart.fieldType(dart.nullable(async.Timer)),
    [_lastPosition]: dart.fieldType(recognizer.OffsetPair),
    [_finalPosition]: dart.fieldType(dart.nullable(recognizer.OffsetPair))
  }));
  var onTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapDown");
  var onTapUp = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapUp");
  var onTap = dart.privateName(multitap, "MultiTapGestureRecognizer.onTap");
  var onTapCancel = dart.privateName(multitap, "MultiTapGestureRecognizer.onTapCancel");
  var longTapDelay$ = dart.privateName(multitap, "MultiTapGestureRecognizer.longTapDelay");
  var onLongTapDown = dart.privateName(multitap, "MultiTapGestureRecognizer.onLongTapDown");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _gestureMap = dart.privateName(multitap, "_gestureMap");
  multitap.MultiTapGestureRecognizer = class MultiTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onTap() {
      return this[onTap];
    }
    set onTap(value) {
      this[onTap] = value;
    }
    get onTapCancel() {
      return this[onTapCancel];
    }
    set onTapCancel(value) {
      this[onTapCancel] = value;
    }
    get longTapDelay() {
      return this[longTapDelay$];
    }
    set longTapDelay(value) {
      this[longTapDelay$] = value;
    }
    get onLongTapDown() {
      return this[onLongTapDown];
    }
    set onLongTapDown(value) {
      this[onLongTapDown] = value;
    }
    addAllowedPointer(event) {
      if (!!this[_gestureMap][$containsKey](event.pointer)) dart.assertFailed(null, I[0], 491, 12, "!_gestureMap.containsKey(event.pointer)");
      this[_gestureMap][$_set](event.pointer, new multitap._TapGesture.new({gestureRecognizer: this, event: event, longTapDelay: this.longTapDelay}));
      if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => {
        dart.nullCheck(this.onTapDown)(event.pointer, new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: event.kind}));
      }, T.VoidTovoid()));
    }
    acceptGesture(pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 509, 12, "_gestureMap.containsKey(pointer)");
      dart.nullCheck(this[_gestureMap][$_get](pointer)).accept();
    }
    rejectGesture(pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 515, 12, "_gestureMap.containsKey(pointer)");
      dart.nullCheck(this[_gestureMap][$_get](pointer)).reject();
      if (!!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 517, 12, "!_gestureMap.containsKey(pointer)");
    }
    [_dispatchCancel](pointer) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 521, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapCancel != null) this.invokeCallback(dart.void, "onTapCancel", dart.fn(() => dart.nullCheck(this.onTapCancel)(pointer), T.VoidTovoid()));
    }
    [_dispatchTap](pointer, position) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 528, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => {
        dart.nullCheck(this.onTapUp)(pointer, new tap.TapUpDetails.new({kind: this.getKindForPointer(pointer), localPosition: position.local, globalPosition: position.global}));
      }, T.VoidTovoid()));
      if (this.onTap != null) this.invokeCallback(dart.void, "onTap", dart.fn(() => dart.nullCheck(this.onTap)(pointer), T.VoidTovoid()));
    }
    [_dispatchLongTap](pointer, lastPosition) {
      if (!this[_gestureMap][$containsKey](pointer)) dart.assertFailed(null, I[0], 543, 12, "_gestureMap.containsKey(pointer)");
      if (this.onLongTapDown != null) this.invokeCallback(dart.void, "onLongTapDown", dart.fn(() => {
        dart.nullCheck(this.onLongTapDown)(pointer, new tap.TapDownDetails.new({globalPosition: lastPosition.global, localPosition: lastPosition.local, kind: this.getKindForPointer(pointer)}));
      }, T.VoidTovoid()));
    }
    dispose() {
      let localGestures = T.ListOf_TapGesture().from(this[_gestureMap][$values]);
      for (let gesture of localGestures)
        gesture.cancel();
      if (!this[_gestureMap][$isEmpty]) dart.assertFailed(null, I[0], 563, 12, "_gestureMap.isEmpty");
      super.dispose();
    }
    get debugDescription() {
      return "multitap";
    }
  };
  (multitap.MultiTapGestureRecognizer.new = function(opts) {
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : C[0] || CT.C0;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onTap] = null;
    this[onTapCancel] = null;
    this[onLongTapDown] = null;
    this[_gestureMap] = new (T.IdentityMapOfint$_TapGesture()).new();
    this[longTapDelay$] = longTapDelay;
    multitap.MultiTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.MultiTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.MultiTapGestureRecognizer);
  dart.addTypeCaches(multitap.MultiTapGestureRecognizer);
  dart.setMethodSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.MultiTapGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_dispatchCancel]: dart.fnType(dart.void, [core.int]),
    [_dispatchTap]: dart.fnType(dart.void, [core.int, recognizer.OffsetPair]),
    [_dispatchLongTap]: dart.fnType(dart.void, [core.int, recognizer.OffsetPair])
  }));
  dart.setGetterSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.MultiTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multitap.MultiTapGestureRecognizer, I[1]);
  dart.setFieldSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.MultiTapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, tap.TapDownDetails]))),
    onTapUp: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, tap.TapUpDetails]))),
    onTap: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    onTapCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    longTapDelay: dart.fieldType(core.Duration),
    onLongTapDown: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, tap.TapDownDetails]))),
    [_gestureMap]: dart.finalFieldType(core.Map$(core.int, multitap._TapGesture))
  }));
  dart.trackLibraries("packages/flutter/src/gestures/multitap.dart", {
    "package:flutter/src/gestures/multitap.dart": multitap
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multitap.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/gestures/multitap.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__multitap: multitap
  };
}));

//# sourceMappingURL=multitap.dart.lib.js.map
>>>>>>> AUg2
