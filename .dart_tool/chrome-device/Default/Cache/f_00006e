<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/painting/circle_border.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/painting/rounded_rectangle_border.dart', 'packages/flutter/src/painting/box_decoration.dart', 'packages/flutter/src/painting/gradient.dart', 'packages/flutter/src/painting/box_shadow.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/decoration.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/_network_image_web.dart'], (function load__packages__flutter__src__painting__shape_decoration_dart(dart_sdk, packages__flutter__src__painting__circle_border$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__painting__rounded_rectangle_border$46dart, packages__flutter__src__painting__box_decoration$46dart, packages__flutter__src__painting__gradient$46dart, packages__flutter__src__painting__box_shadow$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__decoration$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting___network_image_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const circle_border = packages__flutter__src__painting__circle_border$46dart.src__painting__circle_border;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const rounded_rectangle_border = packages__flutter__src__painting__rounded_rectangle_border$46dart.src__painting__rounded_rectangle_border;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  const box_shadow = packages__flutter__src__painting__box_shadow$46dart.src__painting__box_shadow;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  var shape_decoration = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $length = dartx.length;
  var $map = dartx.map;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ShapeDecorationN: () => (T.ShapeDecorationN = dart.constFn(dart.nullable(shape_decoration.ShapeDecoration)))(),
    DiagnosticsPropertyOfGradient: () => (T.DiagnosticsPropertyOfGradient = dart.constFn(diagnostics.DiagnosticsProperty$(gradient.Gradient)))(),
    DiagnosticsPropertyOfDecorationImage: () => (T.DiagnosticsPropertyOfDecorationImage = dart.constFn(diagnostics.DiagnosticsProperty$(decoration_image.DecorationImage)))(),
    IterablePropertyOfBoxShadow: () => (T.IterablePropertyOfBoxShadow = dart.constFn(diagnostics.IterableProperty$(box_shadow.BoxShadow)))(),
    DiagnosticsPropertyOfShapeBorder: () => (T.DiagnosticsPropertyOfShapeBorder = dart.constFn(diagnostics.DiagnosticsProperty$(borders.ShapeBorder)))(),
    ListOfPaint: () => (T.ListOfPaint = dart.constFn(core.List$(ui.Paint)))(),
    BoxShadowToPaint: () => (T.BoxShadowToPaint = dart.constFn(dart.fnType(ui.Paint, [box_shadow.BoxShadow])))(),
    ListOfPath: () => (T.ListOfPath = dart.constFn(core.List$(ui.Path)))(),
    BoxShadowToPath: () => (T.BoxShadowToPath = dart.constFn(dart.fnType(ui.Path, [box_shadow.BoxShadow])))()
=======
define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/rendering/layout_helper.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__rendering__wrap_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__rendering__layout_helper$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const layout_helper = packages__flutter__src__rendering__layout_helper$46dart.src__rendering__layout_helper;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var wrap = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $isNotEmpty = dartx.isNotEmpty;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    RenderBoxAndBoxConstraintsToSize: () => (T.RenderBoxAndBoxConstraintsToSize = dart.constFn(dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])))(),
    JSArrayOf_RunMetrics: () => (T.JSArrayOf_RunMetrics = dart.constFn(_interceptors.JSArray$(wrap._RunMetrics)))(),
    EnumPropertyOfAxis: () => (T.EnumPropertyOfAxis = dart.constFn(diagnostics.EnumProperty$(basic_types.Axis)))(),
    EnumPropertyOfWrapAlignment: () => (T.EnumPropertyOfWrapAlignment = dart.constFn(diagnostics.EnumProperty$(wrap.WrapAlignment)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    EnumPropertyOfVerticalDirection: () => (T.EnumPropertyOfVerticalDirection = dart.constFn(diagnostics.EnumProperty$(basic_types.VerticalDirection)))()
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
<<<<<<< HEAD
    get C2() {
      return C[2] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.none",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[2] || CT.C2,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[3] || CT.C3
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: circle_border.CircleBorder.prototype,
        [OutlinedBorder_side]: C[1] || CT.C1
=======
    get C0() {
      return C[0] = dart.const({
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.start",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.end",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.center",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.spaceBetween",
        index: 3
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C4() {
      return C[4] = dart.const({
<<<<<<< HEAD
        __proto__: box_border.BoxShape.prototype,
        [_name$]: "BoxShape.circle",
        index: 1
=======
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.spaceAround",
        index: 4
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C5() {
      return C[5] = dart.const({
<<<<<<< HEAD
        __proto__: box_border.Border.prototype,
        [Border_left]: C[1] || CT.C1,
        [Border_bottom]: C[1] || CT.C1,
        [Border_right]: C[1] || CT.C1,
        [Border_top]: C[1] || CT.C1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [_name$]: "BoxShape.rectangle",
        index: 0
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/painting/shape_decoration.dart",
    "package:flutter/src/painting/shape_decoration.dart"
  ];
  var color$ = dart.privateName(shape_decoration, "ShapeDecoration.color");
  var gradient$ = dart.privateName(shape_decoration, "ShapeDecoration.gradient");
  var image$ = dart.privateName(shape_decoration, "ShapeDecoration.image");
  var shadows$ = dart.privateName(shape_decoration, "ShapeDecoration.shadows");
  var shape$ = dart.privateName(shape_decoration, "ShapeDecoration.shape");
  var _name = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var OutlinedBorder_side = dart.privateName(borders, "OutlinedBorder.side");
  var _name$ = dart.privateName(box_border, "_name");
  var Border_left = dart.privateName(box_border, "Border.left");
  var Border_bottom = dart.privateName(box_border, "Border.bottom");
  var Border_right = dart.privateName(box_border, "Border.right");
  var Border_top = dart.privateName(box_border, "Border.top");
  shape_decoration.ShapeDecoration = class ShapeDecoration extends decoration.Decoration {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get gradient() {
      return this[gradient$];
    }
    set gradient(value) {
      super.gradient = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get shadows() {
      return this[shadows$];
    }
    set shadows(value) {
      super.shadows = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    static fromBoxDecoration(source) {
      let t0, t0$, t0$0;
      let shape = null;
      if (!(source.shape !== null)) dart.assertFailed(null, I[0], 95, 12, "source.shape != null");
      switch (source.shape) {
        case C[4] || CT.C4:
        {
          if (source.border != null) {
            if (!dart.nullCheck(source.border).isUniform) dart.assertFailed(null, I[0], 99, 18, "source.border!.isUniform");
            shape = new circle_border.CircleBorder.new({side: dart.nullCheck(source.border).top});
          } else {
            shape = C[0] || CT.C0;
          }
          break;
        }
        case C[6] || CT.C6:
        {
          if (source.borderRadius != null) {
            if (!(source.border == null || dart.nullCheck(source.border).isUniform)) dart.assertFailed(null, I[0], 107, 18, "source.border == null || source.border!.isUniform");
            shape = new rounded_rectangle_border.RoundedRectangleBorder.new({side: (t0$ = (t0 = source.border, t0 == null ? null : t0.top), t0$ == null ? borders.BorderSide.none : t0$), borderRadius: dart.nullCheck(source.borderRadius)});
          } else {
            shape = (t0$0 = source.border, t0$0 == null ? C[5] || CT.C5 : t0$0);
          }
          break;
        }
      }
      return new shape_decoration.ShapeDecoration.new({color: source.color, image: source.image, gradient: source.gradient, shadows: source.boxShadow, shape: shape});
    }
    getClipPath(rect, textDirection) {
      return this.shape.getOuterPath(rect, {textDirection: textDirection});
    }
    get padding() {
      return this.shape.dimensions;
    }
    get isComplex() {
      return this.shadows != null;
    }
    lerpFrom(a, t) {
      if (box_decoration.BoxDecoration.is(a)) {
        return shape_decoration.ShapeDecoration.lerp(shape_decoration.ShapeDecoration.fromBoxDecoration(a), this, t);
      } else if (a == null || shape_decoration.ShapeDecoration.is(a)) {
        return shape_decoration.ShapeDecoration.lerp(T.ShapeDecorationN().as(a), this, t);
      }
      return T.ShapeDecorationN().as(super.lerpFrom(a, t));
    }
    lerpTo(b, t) {
      if (box_decoration.BoxDecoration.is(b)) {
        return shape_decoration.ShapeDecoration.lerp(this, shape_decoration.ShapeDecoration.fromBoxDecoration(b), t);
      } else if (b == null || shape_decoration.ShapeDecoration.is(b)) {
        return shape_decoration.ShapeDecoration.lerp(this, T.ShapeDecorationN().as(b), t);
      }
      return T.ShapeDecorationN().as(super.lerpTo(b, t));
    }
    static lerp(a, b, t) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (!(t !== null)) dart.assertFailed(null, I[0], 231, 12, "t != null");
      if (a == null && b == null) return null;
      if (a != null && b != null) {
        if (t === 0.0) return a;
        if (t === 1.0) return b;
      }
      return new shape_decoration.ShapeDecoration.new({color: ui.Color.lerp((t0 = a, t0 == null ? null : t0.color), (t0$ = b, t0$ == null ? null : t0$.color), t), gradient: gradient.Gradient.lerp((t0$0 = a, t0$0 == null ? null : t0$0.gradient), (t0$1 = b, t0$1 == null ? null : t0$1.gradient), t), image: t < 0.5 ? dart.nullCheck(a).image : dart.nullCheck(b).image, shadows: box_shadow.BoxShadow.lerpList((t0$2 = a, t0$2 == null ? null : t0$2.shadows), (t0$3 = b, t0$3 == null ? null : t0$3.shadows), t), shape: dart.nullCheck(borders.ShapeBorder.lerp((t0$4 = a, t0$4 == null ? null : t0$4.shape), (t0$5 = b, t0$5 == null ? null : t0$5.shape), t))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return shape_decoration.ShapeDecoration.is(other) && dart.equals(other.color, this.color) && dart.equals(other.gradient, this.gradient) && dart.equals(other.image, this.image) && collections.listEquals(box_shadow.BoxShadow, other.shadows, this.shadows) && other.shape[$_equals](this.shape);
    }
    get hashCode() {
      return ui.hashValues(this.color, this.gradient, this.image, this.shape, ui.hashList(this.shadows));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics.DiagnosticsTreeStyle.whitespace;
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfGradient()).new("gradient", this.gradient, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfDecorationImage()).new("image", this.image, {defaultValue: null}));
      properties.add(new (T.IterablePropertyOfBoxShadow()).new("shadows", this.shadows, {defaultValue: null, style: diagnostics.DiagnosticsTreeStyle.whitespace}));
      properties.add(new (T.DiagnosticsPropertyOfShapeBorder()).new("shape", this.shape));
    }
    hitTest(size, position, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return this.shape.getOuterPath(ui.Offset.zero['&'](size), {textDirection: textDirection}).contains(position);
    }
    createBoxPainter(onChanged = null) {
      if (!(onChanged != null || this.image == null)) dart.assertFailed(null, I[0], 292, 12, "onChanged != null || image == null");
      return new shape_decoration._ShapeDecorationPainter.new(this, dart.nullCheck(onChanged));
    }
  };
  (shape_decoration.ShapeDecoration.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let gradient = opts && 'gradient' in opts ? opts.gradient : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    this[color$] = color;
    this[image$] = image;
    this[gradient$] = gradient;
    this[shadows$] = shadows;
    this[shape$] = shape;
    if (!!(color != null && gradient != null)) dart.assertFailed(null, I[0], 80, 15, "!(color != null && gradient != null)");
    if (!(shape !== null)) dart.assertFailed(null, I[0], 81, 15, "shape != null");
    shape_decoration.ShapeDecoration.__proto__.new.call(this);
    ;
  }).prototype = shape_decoration.ShapeDecoration.prototype;
  dart.addTypeTests(shape_decoration.ShapeDecoration);
  dart.addTypeCaches(shape_decoration.ShapeDecoration);
  dart.setMethodSignature(shape_decoration.ShapeDecoration, () => ({
    __proto__: dart.getMethods(shape_decoration.ShapeDecoration.__proto__),
    lerpFrom: dart.fnType(dart.nullable(shape_decoration.ShapeDecoration), [dart.nullable(decoration.Decoration), core.double]),
    lerpTo: dart.fnType(dart.nullable(shape_decoration.ShapeDecoration), [dart.nullable(decoration.Decoration), core.double]),
    createBoxPainter: dart.fnType(shape_decoration._ShapeDecorationPainter, [], [dart.nullable(dart.fnType(dart.void, []))])
  }));
  dart.setGetterSignature(shape_decoration.ShapeDecoration, () => ({
    __proto__: dart.getGetters(shape_decoration.ShapeDecoration.__proto__),
    padding: edge_insets.EdgeInsetsGeometry
  }));
  dart.setLibraryUri(shape_decoration.ShapeDecoration, I[1]);
  dart.setFieldSignature(shape_decoration.ShapeDecoration, () => ({
    __proto__: dart.getFields(shape_decoration.ShapeDecoration.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    gradient: dart.finalFieldType(dart.nullable(gradient.Gradient)),
    image: dart.finalFieldType(dart.nullable(decoration_image.DecorationImage)),
    shadows: dart.finalFieldType(dart.nullable(core.List$(box_shadow.BoxShadow))),
    shape: dart.finalFieldType(borders.ShapeBorder)
  }));
  dart.defineExtensionMethods(shape_decoration.ShapeDecoration, ['_equals']);
  dart.defineExtensionAccessors(shape_decoration.ShapeDecoration, ['hashCode']);
  var _lastRect = dart.privateName(shape_decoration, "_lastRect");
  var _lastTextDirection = dart.privateName(shape_decoration, "_lastTextDirection");
  var ___ShapeDecorationPainter__outerPath = dart.privateName(shape_decoration, "_#_ShapeDecorationPainter#_outerPath");
  var _innerPath = dart.privateName(shape_decoration, "_innerPath");
  var _interiorPaint = dart.privateName(shape_decoration, "_interiorPaint");
  var _shadowCount = dart.privateName(shape_decoration, "_shadowCount");
  var ___ShapeDecorationPainter__shadowPaths = dart.privateName(shape_decoration, "_#_ShapeDecorationPainter#_shadowPaths");
  var ___ShapeDecorationPainter__shadowPaints = dart.privateName(shape_decoration, "_#_ShapeDecorationPainter#_shadowPaints");
  var _imagePainter = dart.privateName(shape_decoration, "_imagePainter");
  var _decoration$ = dart.privateName(shape_decoration, "_decoration");
  var _outerPath = dart.privateName(shape_decoration, "_outerPath");
  var _shadowPaths = dart.privateName(shape_decoration, "_shadowPaths");
  var _shadowPaints = dart.privateName(shape_decoration, "_shadowPaints");
  var _precache = dart.privateName(shape_decoration, "_precache");
  var _paintShadows = dart.privateName(shape_decoration, "_paintShadows");
  var _paintInterior = dart.privateName(shape_decoration, "_paintInterior");
  var _paintImage = dart.privateName(shape_decoration, "_paintImage");
  shape_decoration._ShapeDecorationPainter = class _ShapeDecorationPainter extends decoration.BoxPainter {
    get [_outerPath]() {
      let t0;
      t0 = this[___ShapeDecorationPainter__outerPath];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_outerPath")) : t0;
    }
    set [_outerPath](t0) {
      this[___ShapeDecorationPainter__outerPath] = t0;
    }
    get [_shadowPaths]() {
      let t1;
      t1 = this[___ShapeDecorationPainter__shadowPaths];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_shadowPaths")) : t1;
    }
    set [_shadowPaths](t1) {
      this[___ShapeDecorationPainter__shadowPaths] = t1;
    }
    get [_shadowPaints]() {
      let t2;
      t2 = this[___ShapeDecorationPainter__shadowPaints];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_shadowPaints")) : t2;
    }
    set [_shadowPaints](t2) {
      this[___ShapeDecorationPainter__shadowPaints] = t2;
    }
    get onChanged() {
      return dart.nullCheck(super.onChanged);
    }
    [_precache](rect, textDirection) {
      if (!(rect !== null)) dart.assertFailed(null, I[0], 318, 12, "rect != null");
      if (rect._equals(this[_lastRect]) && textDirection == this[_lastTextDirection]) return;
      if (this[_interiorPaint] == null && (this[_decoration$].color != null || this[_decoration$].gradient != null)) {
        this[_interiorPaint] = ui.Paint.new();
        if (this[_decoration$].color != null) dart.nullCheck(this[_interiorPaint]).color = dart.nullCheck(this[_decoration$].color);
      }
      if (this[_decoration$].gradient != null) dart.nullCheck(this[_interiorPaint]).shader = dart.nullCheck(this[_decoration$].gradient).createShader(rect, {textDirection: textDirection});
      if (this[_decoration$].shadows != null) {
        if (this[_shadowCount] == null) {
          this[_shadowCount] = dart.nullCheck(this[_decoration$].shadows)[$length];
          this[_shadowPaints] = (() => {
            let t3 = T.ListOfPaint().of(dart.nullCheck(this[_decoration$].shadows)[$map](ui.Paint, dart.fn(shadow => shadow.toPaint(), T.BoxShadowToPaint())));
            return t3;
          })();
        }
        this[_shadowPaths] = (() => {
          let t4 = T.ListOfPath().of(dart.nullCheck(this[_decoration$].shadows)[$map](ui.Path, dart.fn(shadow => this[_decoration$].shape.getOuterPath(rect.shift(shadow.offset).inflate(shadow.spreadRadius), {textDirection: textDirection}), T.BoxShadowToPath())));
          return t4;
        })();
      }
      if (this[_interiorPaint] != null || this[_shadowCount] != null) this[_outerPath] = this[_decoration$].shape.getOuterPath(rect, {textDirection: textDirection});
      if (this[_decoration$].image != null) this[_innerPath] = this[_decoration$].shape.getInnerPath(rect, {textDirection: textDirection});
      this[_lastRect] = rect;
      this[_lastTextDirection] = textDirection;
    }
    [_paintShadows](canvas) {
      if (this[_shadowCount] != null) {
        for (let index = 0; index < dart.nullCheck(this[_shadowCount]); index = index + 1)
          canvas.drawPath(this[_shadowPaths][$_get](index), this[_shadowPaints][$_get](index));
      }
    }
    [_paintInterior](canvas) {
      if (this[_interiorPaint] != null) canvas.drawPath(this[_outerPath], dart.nullCheck(this[_interiorPaint]));
    }
    [_paintImage](canvas, configuration) {
      if (this[_decoration$].image == null) return;
      this[_imagePainter] == null ? this[_imagePainter] = dart.nullCheck(this[_decoration$].image).createPainter(this.onChanged) : null;
      dart.nullCheck(this[_imagePainter]).paint(canvas, dart.nullCheck(this[_lastRect]), this[_innerPath], configuration);
    }
    dispose() {
      let t5;
      t5 = this[_imagePainter];
      t5 == null ? null : t5.dispose();
      super.dispose();
    }
    paint(canvas, offset, configuration) {
      if (!(configuration !== null)) dart.assertFailed(null, I[0], 383, 12, "configuration != null");
      if (!(configuration.size != null)) dart.assertFailed(null, I[0], 384, 12, "configuration.size != null");
      let rect = offset['&'](dart.nullCheck(configuration.size));
      let textDirection = configuration.textDirection;
      this[_precache](rect, textDirection);
      this[_paintShadows](canvas);
      this[_paintInterior](canvas);
      this[_paintImage](canvas, configuration);
      this[_decoration$].shape.paint(canvas, rect, {textDirection: textDirection});
    }
  };
  (shape_decoration._ShapeDecorationPainter.new = function(_decoration, onChanged) {
    this[_lastRect] = null;
    this[_lastTextDirection] = null;
    this[___ShapeDecorationPainter__outerPath] = null;
    this[_innerPath] = null;
    this[_interiorPaint] = null;
    this[_shadowCount] = null;
    this[___ShapeDecorationPainter__shadowPaths] = null;
    this[___ShapeDecorationPainter__shadowPaints] = null;
    this[_imagePainter] = null;
    this[_decoration$] = _decoration;
    if (!(_decoration !== null)) dart.assertFailed(null, I[0], 300, 14, "_decoration != null");
    shape_decoration._ShapeDecorationPainter.__proto__.new.call(this, onChanged);
    ;
  }).prototype = shape_decoration._ShapeDecorationPainter.prototype;
  dart.addTypeTests(shape_decoration._ShapeDecorationPainter);
  dart.addTypeCaches(shape_decoration._ShapeDecorationPainter);
  dart.setMethodSignature(shape_decoration._ShapeDecorationPainter, () => ({
    __proto__: dart.getMethods(shape_decoration._ShapeDecorationPainter.__proto__),
    [_precache]: dart.fnType(dart.void, [ui.Rect, dart.nullable(ui.TextDirection)]),
    [_paintShadows]: dart.fnType(dart.void, [ui.Canvas]),
    [_paintInterior]: dart.fnType(dart.void, [ui.Canvas]),
    [_paintImage]: dart.fnType(dart.void, [ui.Canvas, image_provider.ImageConfiguration]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Offset, image_provider.ImageConfiguration])
  }));
  dart.setGetterSignature(shape_decoration._ShapeDecorationPainter, () => ({
    __proto__: dart.getGetters(shape_decoration._ShapeDecorationPainter.__proto__),
    [_outerPath]: ui.Path,
    [_shadowPaths]: core.List$(ui.Path),
    [_shadowPaints]: core.List$(ui.Paint),
    onChanged: dart.fnType(dart.void, [])
  }));
  dart.setSetterSignature(shape_decoration._ShapeDecorationPainter, () => ({
    __proto__: dart.getSetters(shape_decoration._ShapeDecorationPainter.__proto__),
    [_outerPath]: ui.Path,
    [_shadowPaths]: core.List$(ui.Path),
    [_shadowPaints]: core.List$(ui.Paint)
  }));
  dart.setLibraryUri(shape_decoration._ShapeDecorationPainter, I[1]);
  dart.setFieldSignature(shape_decoration._ShapeDecorationPainter, () => ({
    __proto__: dart.getFields(shape_decoration._ShapeDecorationPainter.__proto__),
    [_decoration$]: dart.finalFieldType(shape_decoration.ShapeDecoration),
    [_lastRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_lastTextDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [___ShapeDecorationPainter__outerPath]: dart.fieldType(dart.nullable(ui.Path)),
    [_innerPath]: dart.fieldType(dart.nullable(ui.Path)),
    [_interiorPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [_shadowCount]: dart.fieldType(dart.nullable(core.int)),
    [___ShapeDecorationPainter__shadowPaths]: dart.fieldType(dart.nullable(core.List$(ui.Path))),
    [___ShapeDecorationPainter__shadowPaints]: dart.fieldType(dart.nullable(core.List$(ui.Paint))),
    [_imagePainter]: dart.fieldType(dart.nullable(decoration_image.DecorationImagePainter))
  }));
  dart.trackLibraries("packages/flutter/src/painting/shape_decoration.dart", {
    "package:flutter/src/painting/shape_decoration.dart": shape_decoration
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["shape_decoration.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/shape_decoration.dart.lib.js"}');
  // Exports:
  return {
    src__painting__shape_decoration: shape_decoration
  };
}));

//# sourceMappingURL=shape_decoration.dart.lib.js.map
=======
        __proto__: wrap.WrapAlignment.prototype,
        [_name$]: "WrapAlignment.spaceEvenly",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], wrap.WrapAlignment);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: wrap.WrapCrossAlignment.prototype,
        [_name$]: "WrapCrossAlignment.start",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: wrap.WrapCrossAlignment.prototype,
        [_name$]: "WrapCrossAlignment.end",
        index: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: wrap.WrapCrossAlignment.prototype,
        [_name$]: "WrapCrossAlignment.center",
        index: 2
      });
    },
    get C10() {
      return C[10] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], wrap.WrapCrossAlignment);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name]: "VerticalDirection.down",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$0]: "Clip.none",
        index: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C15() {
      return C[15] = dart.fn(layout_helper.ChildLayoutHelper.dryLayoutChild, T.RenderBoxAndBoxConstraintsToSize());
    }
  }, false);
  var C = Array(16).fill(void 0);
  var I = [
    "package:flutter/src/rendering/wrap.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/rendering/wrap.dart"
  ];
  var _name$ = dart.privateName(wrap, "_name");
  wrap.WrapAlignment = class WrapAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (wrap.WrapAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = wrap.WrapAlignment.prototype;
  dart.addTypeTests(wrap.WrapAlignment);
  dart.addTypeCaches(wrap.WrapAlignment);
  dart.setLibraryUri(wrap.WrapAlignment, I[0]);
  dart.setFieldSignature(wrap.WrapAlignment, () => ({
    __proto__: dart.getFields(wrap.WrapAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(wrap.WrapAlignment, ['toString']);
  wrap.WrapAlignment.start = C[0] || CT.C0;
  wrap.WrapAlignment.end = C[1] || CT.C1;
  wrap.WrapAlignment.center = C[2] || CT.C2;
  wrap.WrapAlignment.spaceBetween = C[3] || CT.C3;
  wrap.WrapAlignment.spaceAround = C[4] || CT.C4;
  wrap.WrapAlignment.spaceEvenly = C[5] || CT.C5;
  wrap.WrapAlignment.values = C[6] || CT.C6;
  wrap.WrapCrossAlignment = class WrapCrossAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (wrap.WrapCrossAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = wrap.WrapCrossAlignment.prototype;
  dart.addTypeTests(wrap.WrapCrossAlignment);
  dart.addTypeCaches(wrap.WrapCrossAlignment);
  dart.setLibraryUri(wrap.WrapCrossAlignment, I[0]);
  dart.setFieldSignature(wrap.WrapCrossAlignment, () => ({
    __proto__: dart.getFields(wrap.WrapCrossAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(wrap.WrapCrossAlignment, ['toString']);
  wrap.WrapCrossAlignment.start = C[7] || CT.C7;
  wrap.WrapCrossAlignment.end = C[8] || CT.C8;
  wrap.WrapCrossAlignment.center = C[9] || CT.C9;
  wrap.WrapCrossAlignment.values = C[10] || CT.C10;
  wrap._RunMetrics = class _RunMetrics extends core.Object {};
  (wrap._RunMetrics.new = function(mainAxisExtent, crossAxisExtent, childCount) {
    this.mainAxisExtent = mainAxisExtent;
    this.crossAxisExtent = crossAxisExtent;
    this.childCount = childCount;
    ;
  }).prototype = wrap._RunMetrics.prototype;
  dart.addTypeTests(wrap._RunMetrics);
  dart.addTypeCaches(wrap._RunMetrics);
  dart.setLibraryUri(wrap._RunMetrics, I[0]);
  dart.setFieldSignature(wrap._RunMetrics, () => ({
    __proto__: dart.getFields(wrap._RunMetrics.__proto__),
    mainAxisExtent: dart.finalFieldType(core.double),
    crossAxisExtent: dart.finalFieldType(core.double),
    childCount: dart.finalFieldType(core.int)
  }));
  var _runIndex = dart.privateName(wrap, "_runIndex");
  wrap.WrapParentData = class WrapParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (wrap.WrapParentData.new = function() {
    this[_runIndex] = 0;
    wrap.WrapParentData.__proto__.new.call(this);
    ;
  }).prototype = wrap.WrapParentData.prototype;
  dart.addTypeTests(wrap.WrapParentData);
  dart.addTypeCaches(wrap.WrapParentData);
  dart.setLibraryUri(wrap.WrapParentData, I[0]);
  dart.setFieldSignature(wrap.WrapParentData, () => ({
    __proto__: dart.getFields(wrap.WrapParentData.__proto__),
    [_runIndex]: dart.fieldType(core.int)
  }));
  var _name = dart.privateName(basic_types, "_name");
  var _name$0 = dart.privateName(ui, "_name");
  var _clipBehavior = dart.privateName(wrap, "_clipBehavior");
  var _hasVisualOverflow = dart.privateName(wrap, "_hasVisualOverflow");
  var _clipRectLayer = dart.privateName(wrap, "_clipRectLayer");
  var _direction = dart.privateName(wrap, "_direction");
  var _alignment = dart.privateName(wrap, "_alignment");
  var _spacing = dart.privateName(wrap, "_spacing");
  var _runAlignment = dart.privateName(wrap, "_runAlignment");
  var _runSpacing = dart.privateName(wrap, "_runSpacing");
  var _crossAxisAlignment = dart.privateName(wrap, "_crossAxisAlignment");
  var _textDirection = dart.privateName(wrap, "_textDirection");
  var _verticalDirection = dart.privateName(wrap, "_verticalDirection");
  var _debugHasNecessaryDirections = dart.privateName(wrap, "_debugHasNecessaryDirections");
  var _getMainAxisExtent = dart.privateName(wrap, "_getMainAxisExtent");
  var _getCrossAxisExtent = dart.privateName(wrap, "_getCrossAxisExtent");
  var _getOffset = dart.privateName(wrap, "_getOffset");
  var _getChildCrossAxisOffset = dart.privateName(wrap, "_getChildCrossAxisOffset");
  var _computeDryLayout = dart.privateName(wrap, "_computeDryLayout");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, wrap.WrapParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, wrap.WrapParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, wrap.WrapParentData));
  wrap.RenderWrap = class RenderWrap extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    get direction() {
      return this[_direction];
    }
    set direction(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 152, 12, "value != null");
      if (this[_direction] === value) return;
      this[_direction] = value;
      this.markNeedsLayout();
    }
    get alignment() {
      return this[_alignment];
    }
    set alignment(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 175, 12, "value != null");
      if (this[_alignment] === value) return;
      this[_alignment] = value;
      this.markNeedsLayout();
    }
    get spacing() {
      return this[_spacing];
    }
    set spacing(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 196, 12, "value != null");
      if (this[_spacing] === value) return;
      this[_spacing] = value;
      this.markNeedsLayout();
    }
    get runAlignment() {
      return this[_runAlignment];
    }
    set runAlignment(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 220, 12, "value != null");
      if (this[_runAlignment] === value) return;
      this[_runAlignment] = value;
      this.markNeedsLayout();
    }
    get runSpacing() {
      return this[_runSpacing];
    }
    set runSpacing(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 240, 12, "value != null");
      if (this[_runSpacing] === value) return;
      this[_runSpacing] = value;
      this.markNeedsLayout();
    }
    get crossAxisAlignment() {
      return this[_crossAxisAlignment];
    }
    set crossAxisAlignment(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 265, 12, "value != null");
      if (this[_crossAxisAlignment] === value) return;
      this[_crossAxisAlignment] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] != value) {
        this[_textDirection] = value;
        this.markNeedsLayout();
      }
    }
    get verticalDirection() {
      return this[_verticalDirection];
    }
    set verticalDirection(value) {
      if (this[_verticalDirection] !== value) {
        this[_verticalDirection] = value;
        this.markNeedsLayout();
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 341, 12, "value != null");
      if (value !== this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    get [_debugHasNecessaryDirections]() {
      if (!(this.direction !== null)) dart.assertFailed(null, I[1], 350, 12, "direction != null");
      if (!(this.alignment !== null)) dart.assertFailed(null, I[1], 351, 12, "alignment != null");
      if (!(this.runAlignment !== null)) dart.assertFailed(null, I[1], 352, 12, "runAlignment != null");
      if (!(this.crossAxisAlignment !== null)) dart.assertFailed(null, I[1], 353, 12, "crossAxisAlignment != null");
      if (this.firstChild != null && !dart.equals(this.lastChild, this.firstChild)) {
        switch (this.direction) {
          case C[11] || CT.C11:
          {
            if (!(this.textDirection != null)) dart.assertFailed("Horizontal " + dart.str(this[$runtimeType]) + " with multiple children has a null textDirection, so the layout order is undefined.", I[1], 358, 18, "textDirection != null");
            break;
          }
          case C[14] || CT.C14:
          {
            if (!(this.verticalDirection !== null)) dart.assertFailed("Vertical " + dart.str(this[$runtimeType]) + " with multiple children has a null verticalDirection, so the layout order is undefined.", I[1], 361, 18, "verticalDirection != null");
            break;
          }
        }
      }
      if (this.alignment === wrap.WrapAlignment.start || this.alignment === wrap.WrapAlignment.end) {
        switch (this.direction) {
          case C[11] || CT.C11:
          {
            if (!(this.textDirection != null)) dart.assertFailed("Horizontal " + dart.str(this[$runtimeType]) + " with alignment " + dart.str(this.alignment) + " has a null textDirection, so the alignment cannot be resolved.", I[1], 368, 18, "textDirection != null");
            break;
          }
          case C[14] || CT.C14:
          {
            if (!(this.verticalDirection !== null)) dart.assertFailed("Vertical " + dart.str(this[$runtimeType]) + " with alignment " + dart.str(this.alignment) + " has a null verticalDirection, so the alignment cannot be resolved.", I[1], 371, 18, "verticalDirection != null");
            break;
          }
        }
      }
      if (this.runAlignment === wrap.WrapAlignment.start || this.runAlignment === wrap.WrapAlignment.end) {
        switch (this.direction) {
          case C[11] || CT.C11:
          {
            if (!(this.verticalDirection !== null)) dart.assertFailed("Horizontal " + dart.str(this[$runtimeType]) + " with runAlignment " + dart.str(this.runAlignment) + " has a null verticalDirection, so the alignment cannot be resolved.", I[1], 378, 18, "verticalDirection != null");
            break;
          }
          case C[14] || CT.C14:
          {
            if (!(this.textDirection != null)) dart.assertFailed("Vertical " + dart.str(this[$runtimeType]) + " with runAlignment " + dart.str(this.runAlignment) + " has a null textDirection, so the alignment cannot be resolved.", I[1], 381, 18, "textDirection != null");
            break;
          }
        }
      }
      if (this.crossAxisAlignment === wrap.WrapCrossAlignment.start || this.crossAxisAlignment === wrap.WrapCrossAlignment.end) {
        switch (this.direction) {
          case C[11] || CT.C11:
          {
            if (!(this.verticalDirection !== null)) dart.assertFailed("Horizontal " + dart.str(this[$runtimeType]) + " with crossAxisAlignment " + dart.str(this.crossAxisAlignment) + " has a null verticalDirection, so the alignment cannot be resolved.", I[1], 388, 18, "verticalDirection != null");
            break;
          }
          case C[14] || CT.C14:
          {
            if (!(this.textDirection != null)) dart.assertFailed("Vertical " + dart.str(this[$runtimeType]) + " with crossAxisAlignment " + dart.str(this.crossAxisAlignment) + " has a null textDirection, so the alignment cannot be resolved.", I[1], 391, 18, "textDirection != null");
            break;
          }
        }
      }
      return true;
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (!wrap.WrapParentData.is(child.parentData)) child.parentData = new wrap.WrapParentData.new();
    }
    computeMinIntrinsicWidth(height) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          let width = 0.0;
          let child = this.firstChild;
          while (child != null) {
            width = math.max(core.double, width, child.getMinIntrinsicWidth(1 / 0));
            child = this.childAfter(child);
          }
          return width;
        }
        case C[14] || CT.C14:
        {
          return this.computeDryLayout(new box.BoxConstraints.new({maxHeight: height})).width;
        }
      }
    }
    computeMaxIntrinsicWidth(height) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          let width = 0.0;
          let child = this.firstChild;
          while (child != null) {
            width = width + child.getMaxIntrinsicWidth(1 / 0);
            child = this.childAfter(child);
          }
          return width;
        }
        case C[14] || CT.C14:
        {
          return this.computeDryLayout(new box.BoxConstraints.new({maxHeight: height})).width;
        }
      }
    }
    computeMinIntrinsicHeight(width) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return this.computeDryLayout(new box.BoxConstraints.new({maxWidth: width})).height;
        }
        case C[14] || CT.C14:
        {
          let height = 0.0;
          let child = this.firstChild;
          while (child != null) {
            height = math.max(core.double, height, child.getMinIntrinsicHeight(1 / 0));
            child = this.childAfter(child);
          }
          return height;
        }
      }
    }
    computeMaxIntrinsicHeight(width) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return this.computeDryLayout(new box.BoxConstraints.new({maxWidth: width})).height;
        }
        case C[14] || CT.C14:
        {
          let height = 0.0;
          let child = this.firstChild;
          while (child != null) {
            height = height + child.getMaxIntrinsicHeight(1 / 0);
            child = this.childAfter(child);
          }
          return height;
        }
      }
    }
    computeDistanceToActualBaseline(baseline) {
      return this.defaultComputeDistanceToHighestActualBaseline(baseline);
    }
    [_getMainAxisExtent](childSize) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return childSize.width;
        }
        case C[14] || CT.C14:
        {
          return childSize.height;
        }
      }
    }
    [_getCrossAxisExtent](childSize) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return childSize.height;
        }
        case C[14] || CT.C14:
        {
          return childSize.width;
        }
      }
    }
    [_getOffset](mainAxisOffset, crossAxisOffset) {
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return new ui.Offset.new(mainAxisOffset, crossAxisOffset);
        }
        case C[14] || CT.C14:
        {
          return new ui.Offset.new(crossAxisOffset, mainAxisOffset);
        }
      }
    }
    [_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent) {
      let freeSpace = runCrossAxisExtent - childCrossAxisExtent;
      switch (this.crossAxisAlignment) {
        case C[7] || CT.C7:
        {
          return flipCrossAxis ? freeSpace : 0.0;
        }
        case C[8] || CT.C8:
        {
          return flipCrossAxis ? 0.0 : freeSpace;
        }
        case C[9] || CT.C9:
        {
          return freeSpace / 2.0;
        }
      }
    }
    computeDryLayout(constraints) {
      return this[_computeDryLayout](constraints);
    }
    [_computeDryLayout](constraints, layoutChild = C[15] || CT.C15) {
      let childConstraints = null;
      let mainAxisLimit = 0.0;
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          childConstraints = new box.BoxConstraints.new({maxWidth: constraints.maxWidth});
          mainAxisLimit = constraints.maxWidth;
          break;
        }
        case C[14] || CT.C14:
        {
          childConstraints = new box.BoxConstraints.new({maxHeight: constraints.maxHeight});
          mainAxisLimit = constraints.maxHeight;
          break;
        }
      }
      let mainAxisExtent = 0.0;
      let crossAxisExtent = 0.0;
      let runMainAxisExtent = 0.0;
      let runCrossAxisExtent = 0.0;
      let childCount = 0;
      let child = this.firstChild;
      while (child != null) {
        let childSize = layoutChild(child, childConstraints);
        let childMainAxisExtent = this[_getMainAxisExtent](childSize);
        let childCrossAxisExtent = this[_getCrossAxisExtent](childSize);
        if (childCount > 0 && runMainAxisExtent + childMainAxisExtent + this.spacing > mainAxisLimit) {
          mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
          crossAxisExtent = crossAxisExtent + (runCrossAxisExtent + this.runSpacing);
          runMainAxisExtent = 0.0;
          runCrossAxisExtent = 0.0;
          childCount = 0;
        }
        runMainAxisExtent = runMainAxisExtent + childMainAxisExtent;
        runCrossAxisExtent = math.max(core.double, runCrossAxisExtent, childCrossAxisExtent);
        if (childCount > 0) runMainAxisExtent = runMainAxisExtent + this.spacing;
        childCount = childCount + 1;
        child = this.childAfter(child);
      }
      crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
      mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          return constraints.constrain(new ui.Size.new(mainAxisExtent, crossAxisExtent));
        }
        case C[14] || CT.C14:
        {
          return constraints.constrain(new ui.Size.new(crossAxisExtent, mainAxisExtent));
        }
      }
    }
    performLayout() {
      let constraints = this.constraints;
      if (!this[_debugHasNecessaryDirections]) dart.assertFailed(null, I[1], 572, 12, "_debugHasNecessaryDirections");
      this[_hasVisualOverflow] = false;
      let child = this.firstChild;
      if (child == null) {
        this.size = constraints.smallest;
        return;
      }
      let childConstraints = null;
      let mainAxisLimit = 0.0;
      let flipMainAxis = false;
      let flipCrossAxis = false;
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          childConstraints = new box.BoxConstraints.new({maxWidth: constraints.maxWidth});
          mainAxisLimit = constraints.maxWidth;
          if (this.textDirection === ui.TextDirection.rtl) flipMainAxis = true;
          if (this.verticalDirection === basic_types.VerticalDirection.up) flipCrossAxis = true;
          break;
        }
        case C[14] || CT.C14:
        {
          childConstraints = new box.BoxConstraints.new({maxHeight: constraints.maxHeight});
          mainAxisLimit = constraints.maxHeight;
          if (this.verticalDirection === basic_types.VerticalDirection.up) flipMainAxis = true;
          if (this.textDirection === ui.TextDirection.rtl) flipCrossAxis = true;
          break;
        }
      }
      if (!(childConstraints !== null)) dart.assertFailed(null, I[1], 601, 12, "childConstraints != null");
      if (!(mainAxisLimit !== null)) dart.assertFailed(null, I[1], 602, 12, "mainAxisLimit != null");
      let spacing = this.spacing;
      let runSpacing = this.runSpacing;
      let runMetrics = T.JSArrayOf_RunMetrics().of([]);
      let mainAxisExtent = 0.0;
      let crossAxisExtent = 0.0;
      let runMainAxisExtent = 0.0;
      let runCrossAxisExtent = 0.0;
      let childCount = 0;
      while (child != null) {
        child.layout(childConstraints, {parentUsesSize: true});
        let childMainAxisExtent = this[_getMainAxisExtent](child.size);
        let childCrossAxisExtent = this[_getCrossAxisExtent](child.size);
        if (childCount > 0 && runMainAxisExtent + spacing + childMainAxisExtent > mainAxisLimit) {
          mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
          crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
          if (runMetrics[$isNotEmpty]) crossAxisExtent = crossAxisExtent + runSpacing;
          runMetrics[$add](new wrap._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
          runMainAxisExtent = 0.0;
          runCrossAxisExtent = 0.0;
          childCount = 0;
        }
        runMainAxisExtent = runMainAxisExtent + childMainAxisExtent;
        if (childCount > 0) runMainAxisExtent = runMainAxisExtent + spacing;
        runCrossAxisExtent = math.max(core.double, runCrossAxisExtent, childCrossAxisExtent);
        childCount = childCount + 1;
        let childParentData = wrap.WrapParentData.as(dart.nullCheck(child.parentData));
        childParentData[_runIndex] = runMetrics[$length];
        child = childParentData.nextSibling;
      }
      if (childCount > 0) {
        mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
        crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
        if (runMetrics[$isNotEmpty]) crossAxisExtent = crossAxisExtent + runSpacing;
        runMetrics[$add](new wrap._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
      }
      let runCount = runMetrics[$length];
      if (!(runCount > 0)) dart.assertFailed(null, I[1], 643, 12, "runCount > 0");
      let containerMainAxisExtent = 0.0;
      let containerCrossAxisExtent = 0.0;
      switch (this.direction) {
        case C[11] || CT.C11:
        {
          this.size = constraints.constrain(new ui.Size.new(mainAxisExtent, crossAxisExtent));
          containerMainAxisExtent = this.size.width;
          containerCrossAxisExtent = this.size.height;
          break;
        }
        case C[14] || CT.C14:
        {
          this.size = constraints.constrain(new ui.Size.new(crossAxisExtent, mainAxisExtent));
          containerMainAxisExtent = this.size.height;
          containerCrossAxisExtent = this.size.width;
          break;
        }
      }
      this[_hasVisualOverflow] = containerMainAxisExtent < mainAxisExtent || containerCrossAxisExtent < crossAxisExtent;
      let crossAxisFreeSpace = math.max(core.double, 0.0, containerCrossAxisExtent - crossAxisExtent);
      let runLeadingSpace = 0.0;
      let runBetweenSpace = 0.0;
      switch (this.runAlignment) {
        case C[0] || CT.C0:
        {
          break;
        }
        case C[1] || CT.C1:
        {
          runLeadingSpace = crossAxisFreeSpace;
          break;
        }
        case C[2] || CT.C2:
        {
          runLeadingSpace = crossAxisFreeSpace / 2.0;
          break;
        }
        case C[3] || CT.C3:
        {
          runBetweenSpace = runCount > 1 ? crossAxisFreeSpace / (runCount - 1) : 0.0;
          break;
        }
        case C[4] || CT.C4:
        {
          runBetweenSpace = crossAxisFreeSpace / runCount;
          runLeadingSpace = runBetweenSpace / 2.0;
          break;
        }
        case C[5] || CT.C5:
        {
          runBetweenSpace = crossAxisFreeSpace / (runCount + 1);
          runLeadingSpace = runBetweenSpace;
          break;
        }
      }
      runBetweenSpace = runBetweenSpace + runSpacing;
      let crossAxisOffset = flipCrossAxis ? containerCrossAxisExtent - runLeadingSpace : runLeadingSpace;
      child = this.firstChild;
      for (let i = 0; i < runCount; i = i + 1) {
        let metrics = runMetrics[$_get](i);
        let runMainAxisExtent = metrics.mainAxisExtent;
        let runCrossAxisExtent = metrics.crossAxisExtent;
        let childCount = metrics.childCount;
        let mainAxisFreeSpace = math.max(core.double, 0.0, containerMainAxisExtent - runMainAxisExtent);
        let childLeadingSpace = 0.0;
        let childBetweenSpace = 0.0;
        switch (this.alignment) {
          case C[0] || CT.C0:
          {
            break;
          }
          case C[1] || CT.C1:
          {
            childLeadingSpace = mainAxisFreeSpace;
            break;
          }
          case C[2] || CT.C2:
          {
            childLeadingSpace = mainAxisFreeSpace / 2.0;
            break;
          }
          case C[3] || CT.C3:
          {
            childBetweenSpace = childCount > 1 ? mainAxisFreeSpace / (childCount - 1) : 0.0;
            break;
          }
          case C[4] || CT.C4:
          {
            childBetweenSpace = mainAxisFreeSpace / childCount;
            childLeadingSpace = childBetweenSpace / 2.0;
            break;
          }
          case C[5] || CT.C5:
          {
            childBetweenSpace = mainAxisFreeSpace / (childCount + 1);
            childLeadingSpace = childBetweenSpace;
            break;
          }
        }
        childBetweenSpace = childBetweenSpace + spacing;
        let childMainPosition = flipMainAxis ? containerMainAxisExtent - childLeadingSpace : childLeadingSpace;
        if (flipCrossAxis) crossAxisOffset = crossAxisOffset - runCrossAxisExtent;
        while (child != null) {
          let childParentData = wrap.WrapParentData.as(dart.nullCheck(child.parentData));
          if (childParentData[_runIndex] !== i) break;
          let childMainAxisExtent = this[_getMainAxisExtent](child.size);
          let childCrossAxisExtent = this[_getCrossAxisExtent](child.size);
          let childCrossAxisOffset = this[_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent);
          if (flipMainAxis) childMainPosition = childMainPosition - childMainAxisExtent;
          childParentData.offset = this[_getOffset](childMainPosition, crossAxisOffset + childCrossAxisOffset);
          if (flipMainAxis)
            childMainPosition = childMainPosition - childBetweenSpace;
          else
            childMainPosition = childMainPosition + (childMainAxisExtent + childBetweenSpace);
          child = childParentData.nextSibling;
        }
        if (flipCrossAxis)
          crossAxisOffset = crossAxisOffset - runBetweenSpace;
        else
          crossAxisOffset = crossAxisOffset + (runCrossAxisExtent + runBetweenSpace);
      }
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      return this.defaultHitTestChildren(result, {position: position});
    }
    paint(context, offset) {
      if (this[_hasVisualOverflow] && this.clipBehavior !== ui.Clip.none) {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, 'defaultPaint'), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      } else {
        this[_clipRectLayer] = null;
        this.defaultPaint(context, offset);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfAxis()).new("direction", this.direction));
      properties.add(new (T.EnumPropertyOfWrapAlignment()).new("alignment", this.alignment));
      properties.add(new diagnostics.DoubleProperty.new("spacing", this.spacing));
      properties.add(new (T.EnumPropertyOfWrapAlignment()).new("runAlignment", this.runAlignment));
      properties.add(new diagnostics.DoubleProperty.new("runSpacing", this.runSpacing));
      properties.add(new diagnostics.DoubleProperty.new("crossAxisAlignment", this.runSpacing));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfVerticalDirection()).new("verticalDirection", this.verticalDirection, {defaultValue: basic_types.VerticalDirection.down}));
    }
  };
  (wrap.RenderWrap.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let direction = opts && 'direction' in opts ? opts.direction : C[11] || CT.C11;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let runAlignment = opts && 'runAlignment' in opts ? opts.runAlignment : C[0] || CT.C0;
    let runSpacing = opts && 'runSpacing' in opts ? opts.runSpacing : 0;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[7] || CT.C7;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[12] || CT.C12;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[13] || CT.C13;
    this[_clipBehavior] = ui.Clip.none;
    this[_hasVisualOverflow] = false;
    this[_clipRectLayer] = null;
    if (!(direction !== null)) dart.assertFailed(null, I[1], 124, 15, "direction != null");
    if (!(alignment !== null)) dart.assertFailed(null, I[1], 125, 15, "alignment != null");
    if (!(spacing !== null)) dart.assertFailed(null, I[1], 126, 15, "spacing != null");
    if (!(runAlignment !== null)) dart.assertFailed(null, I[1], 127, 15, "runAlignment != null");
    if (!(runSpacing !== null)) dart.assertFailed(null, I[1], 128, 15, "runSpacing != null");
    if (!(crossAxisAlignment !== null)) dart.assertFailed(null, I[1], 129, 15, "crossAxisAlignment != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 130, 15, "clipBehavior != null");
    this[_direction] = direction;
    this[_alignment] = alignment;
    this[_spacing] = spacing;
    this[_runAlignment] = runAlignment;
    this[_runSpacing] = runSpacing;
    this[_crossAxisAlignment] = crossAxisAlignment;
    this[_textDirection] = textDirection;
    this[_verticalDirection] = verticalDirection;
    this[_clipBehavior] = clipBehavior;
    wrap.RenderWrap.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = wrap.RenderWrap.prototype;
  dart.addTypeTests(wrap.RenderWrap);
  dart.addTypeCaches(wrap.RenderWrap);
  dart.setMethodSignature(wrap.RenderWrap, () => ({
    __proto__: dart.getMethods(wrap.RenderWrap.__proto__),
    [_getMainAxisExtent]: dart.fnType(core.double, [ui.Size]),
    [_getCrossAxisExtent]: dart.fnType(core.double, [ui.Size]),
    [_getOffset]: dart.fnType(ui.Offset, [core.double, core.double]),
    [_getChildCrossAxisOffset]: dart.fnType(core.double, [core.bool, core.double, core.double]),
    [_computeDryLayout]: dart.fnType(ui.Size, [box.BoxConstraints], [dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])])
  }));
  dart.setGetterSignature(wrap.RenderWrap, () => ({
    __proto__: dart.getGetters(wrap.RenderWrap.__proto__),
    direction: basic_types.Axis,
    alignment: wrap.WrapAlignment,
    spacing: core.double,
    runAlignment: wrap.WrapAlignment,
    runSpacing: core.double,
    crossAxisAlignment: wrap.WrapCrossAlignment,
    textDirection: dart.nullable(ui.TextDirection),
    verticalDirection: basic_types.VerticalDirection,
    clipBehavior: ui.Clip,
    [_debugHasNecessaryDirections]: core.bool
  }));
  dart.setSetterSignature(wrap.RenderWrap, () => ({
    __proto__: dart.getSetters(wrap.RenderWrap.__proto__),
    direction: basic_types.Axis,
    alignment: wrap.WrapAlignment,
    spacing: core.double,
    runAlignment: wrap.WrapAlignment,
    runSpacing: core.double,
    crossAxisAlignment: wrap.WrapCrossAlignment,
    textDirection: dart.nullable(ui.TextDirection),
    verticalDirection: basic_types.VerticalDirection,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(wrap.RenderWrap, I[0]);
  dart.setFieldSignature(wrap.RenderWrap, () => ({
    __proto__: dart.getFields(wrap.RenderWrap.__proto__),
    [_direction]: dart.fieldType(basic_types.Axis),
    [_alignment]: dart.fieldType(wrap.WrapAlignment),
    [_spacing]: dart.fieldType(core.double),
    [_runAlignment]: dart.fieldType(wrap.WrapAlignment),
    [_runSpacing]: dart.fieldType(core.double),
    [_crossAxisAlignment]: dart.fieldType(wrap.WrapCrossAlignment),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_verticalDirection]: dart.fieldType(basic_types.VerticalDirection),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_hasVisualOverflow]: dart.fieldType(core.bool),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  dart.trackLibraries("packages/flutter/src/rendering/wrap.dart", {
    "package:flutter/src/rendering/wrap.dart": wrap
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["wrap.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/wrap.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__wrap: wrap
  };
}));

//# sourceMappingURL=wrap.dart.lib.js.map
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
