<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__services__text_input_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__services__text_editing$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const io = dart_sdk.io;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var text_input = Object.create(dart.library);
  var autofill = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $contains = dartx.contains;
  var $keys = dartx.keys;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $any = dartx.any;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    TextInputConfigurationToMapOfString$dynamic: () => (T.TextInputConfigurationToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [text_input.TextInputConfiguration])))(),
    AutofillClientTobool: () => (T.AutofillClientTobool = dart.constFn(dart.fnType(core.bool, [autofill.AutofillClient])))(),
    AutofillClientToTextInputConfiguration: () => (T.AutofillClientToTextInputConfiguration = dart.constFn(dart.fnType(text_input.TextInputConfiguration, [autofill.AutofillClient])))()
=======
define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/widgets/scroll_simulation.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__widgets__draggable_scrollable_sheet_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__widgets__scroll_simulation$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const notification_listener = packages__flutter__src__widgets__widget_span$46dart.src__widgets__notification_listener;
  const scroll_notification = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_notification;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const scroll_context = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_context;
  const scroll_position = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_position;
  const scroll_position_with_single_context = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_position_with_single_context;
  const inherited_notifier = packages__flutter__src__widgets__widget_span$46dart.src__widgets__inherited_notifier;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const scroll_simulation = packages__flutter__src__widgets__scroll_simulation$46dart.src__widgets__scroll_simulation;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var draggable_scrollable_sheet = Object.create(dart.library);
  var $add = dartx.add;
  var $clamp = dartx.clamp;
  var $sign = dartx.sign;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ValueNotifierOfdouble: () => (T.ValueNotifierOfdouble = dart.constFn(change_notifier.ValueNotifier$(core.double)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    BuildContextAndBoxConstraintsToWidget: () => (T.BuildContextAndBoxConstraintsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.disabled",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.enabled",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], text_input.SmartDashesType);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.disabled",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.enabled",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], text_input.SmartQuotesType);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: false,
        [signed$]: false,
        [index$]: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 4
=======
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1000
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "heightFactor",
        [_Location_column]: 11,
        [_Location_line]: 337,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 338,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 11,
        [_Location_line]: 339,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], widget_inspector._Location);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 30,
        [_Location_line]: 336,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/widgets/draggable_scrollable_sheet.dart"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 48,
        [_Location_line]: 341,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8], widget_inspector._Location);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[7] || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 41,
        [_Location_line]: 341,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/widgets/draggable_scrollable_sheet.dart"
>>>>>>> AUg2
      });
    },
    get C11() {
      return C[11] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 5
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 6
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 7
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 334,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11], widget_inspector._Location);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 333,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/widgets/draggable_scrollable_sheet.dart"
>>>>>>> AUg2
      });
    },
    get C14() {
      return C[14] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 8
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 36,
        [_Location_line]: 557,
        [_Location_file]: null
>>>>>>> AUg2
      });
    },
    get C15() {
      return C[15] = dart.const({
<<<<<<< HEAD
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 9
      });
    },
    get C16() {
      return C[16] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15], text_input.TextInputType);
    },
    get C17() {
      return C[17] = dart.constList(["text", "multiline", "number", "phone", "datetime", "emailAddress", "url", "visiblePassword", "name", "address"], core.String);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.none",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.unspecified",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.done",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.go",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.search",
        index: 4
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.send",
        index: 5
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.next",
        index: 6
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.previous",
        index: 7
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.continueAction",
        index: 8
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.join",
        index: 9
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.route",
        index: 10
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.emergencyCall",
        index: 11
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.newline",
        index: 12
      });
    },
    get C31() {
      return C[31] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], text_input.TextInputAction);
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.words",
        index: 0
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.sentences",
        index: 1
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.characters",
        index: 2
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.none",
        index: 3
      });
    },
    get C36() {
      return C[36] = dart.constList([C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35], text_input.TextCapitalization);
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Start",
        index: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Update",
        index: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.End",
        index: 2
      });
    },
    get C41() {
      return C[41] = dart.constList([C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], text_input.FloatingCursorDragState);
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1,
        [TextSelection_isDirectional]: false,
        [TextSelection_affinity]: C[43] || CT.C43,
        [TextSelection_extentOffset]: -1,
        [TextSelection_baseOffset]: -1
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: ui.TextRange.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: text_input.TextEditingValue.prototype,
        [composing$]: C[44] || CT.C44,
        [selection$]: C[42] || CT.C42,
        [text$]: ""
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.tap",
        index: 0
=======
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "notifier",
        [_Location_column]: 50,
        [_Location_line]: 557,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], widget_inspector._Location);
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[13] || CT.C13,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 557,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/widgets/draggable_scrollable_sheet.dart"
>>>>>>> AUg2
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.doubleTap",
        index: 1
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.longPress",
        index: 2
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.forcePress",
        index: 3
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.keyboard",
        index: 4
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.toolBar",
        index: 5
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.drag",
        index: 6
      });
    },
    get C53() {
      return C[53] = dart.constList([C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52], text_input.SelectionChangedCause);
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: -1
      });
    },
    get C55() {
      return C[55] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[25] || CT.C25, C[30] || CT.C30], text_input.TextInputAction);
    },
    get C56() {
      return C[56] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[30] || CT.C30, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29], text_input.TextInputAction);
    }
  }, false);
<<<<<<< HEAD
  var C = Array(57).fill(void 0);
  var I = [
    "package:flutter/src/services/text_input.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/text_input.dart",
    "package:flutter/src/services/autofill.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/autofill.dart"
  ];
  var _name$ = dart.privateName(text_input, "_name");
  text_input.SmartDashesType = class SmartDashesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartDashesType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartDashesType.prototype;
  dart.addTypeTests(text_input.SmartDashesType);
  dart.addTypeCaches(text_input.SmartDashesType);
  dart.setLibraryUri(text_input.SmartDashesType, I[0]);
  dart.setFieldSignature(text_input.SmartDashesType, () => ({
    __proto__: dart.getFields(text_input.SmartDashesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartDashesType, ['toString']);
  text_input.SmartDashesType.disabled = C[0] || CT.C0;
  text_input.SmartDashesType.enabled = C[1] || CT.C1;
  text_input.SmartDashesType.values = C[2] || CT.C2;
  text_input.SmartQuotesType = class SmartQuotesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartQuotesType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartQuotesType.prototype;
  dart.addTypeTests(text_input.SmartQuotesType);
  dart.addTypeCaches(text_input.SmartQuotesType);
  dart.setLibraryUri(text_input.SmartQuotesType, I[0]);
  dart.setFieldSignature(text_input.SmartQuotesType, () => ({
    __proto__: dart.getFields(text_input.SmartQuotesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartQuotesType, ['toString']);
  text_input.SmartQuotesType.disabled = C[3] || CT.C3;
  text_input.SmartQuotesType.enabled = C[4] || CT.C4;
  text_input.SmartQuotesType.values = C[5] || CT.C5;
  var index$ = dart.privateName(text_input, "TextInputType.index");
  var signed$ = dart.privateName(text_input, "TextInputType.signed");
  var decimal$ = dart.privateName(text_input, "TextInputType.decimal");
  text_input.TextInputType = class TextInputType extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get signed() {
      return this[signed$];
    }
    set signed(value) {
      super.signed = value;
    }
    get decimal() {
      return this[decimal$];
    }
    set decimal(value) {
      super.decimal = value;
    }
    get [_name$]() {
      return "TextInputType." + text_input.TextInputType._names[$_get](this.index);
    }
    toJson() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this[_name$], "signed", this.signed, "decimal", this.decimal]);
    }
    toString() {
      return object.objectRuntimeType(this, "TextInputType") + "(" + "name: " + this[_name$] + ", " + "signed: " + dart.str(this.signed) + ", " + "decimal: " + dart.str(this.decimal) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return text_input.TextInputType.is(other) && other.index === this.index && other.signed == this.signed && other.decimal == this.decimal;
    }
    get hashCode() {
      return ui.hashValues(this.index, this.signed, this.decimal);
    }
  };
  (text_input.TextInputType.__ = function(index) {
    this[index$] = index;
    this[signed$] = null;
    this[decimal$] = null;
    ;
  }).prototype = text_input.TextInputType.prototype;
  (text_input.TextInputType.numberWithOptions = function(opts) {
    let signed = opts && 'signed' in opts ? opts.signed : false;
    let decimal = opts && 'decimal' in opts ? opts.decimal : false;
    this[signed$] = signed;
    this[decimal$] = decimal;
    this[index$] = 2;
    ;
  }).prototype = text_input.TextInputType.prototype;
  dart.addTypeTests(text_input.TextInputType);
  dart.addTypeCaches(text_input.TextInputType);
  dart.setMethodSignature(text_input.TextInputType, () => ({
    __proto__: dart.getMethods(text_input.TextInputType.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(text_input.TextInputType, () => ({
    __proto__: dart.getGetters(text_input.TextInputType.__proto__),
    [_name$]: core.String
  }));
  dart.setLibraryUri(text_input.TextInputType, I[0]);
  dart.setFieldSignature(text_input.TextInputType, () => ({
    __proto__: dart.getFields(text_input.TextInputType.__proto__),
    index: dart.finalFieldType(core.int),
    signed: dart.finalFieldType(dart.nullable(core.bool)),
    decimal: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(text_input.TextInputType, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextInputType, ['hashCode']);
  dart.defineLazy(text_input.TextInputType, {
    /*text_input.TextInputType.text*/get text() {
      return C[6] || CT.C6;
    },
    /*text_input.TextInputType.multiline*/get multiline() {
      return C[7] || CT.C7;
    },
    /*text_input.TextInputType.number*/get number() {
      return C[8] || CT.C8;
    },
    /*text_input.TextInputType.phone*/get phone() {
      return C[9] || CT.C9;
    },
    /*text_input.TextInputType.datetime*/get datetime() {
      return C[10] || CT.C10;
    },
    /*text_input.TextInputType.emailAddress*/get emailAddress() {
      return C[11] || CT.C11;
    },
    /*text_input.TextInputType.url*/get url() {
      return C[12] || CT.C12;
    },
    /*text_input.TextInputType.visiblePassword*/get visiblePassword() {
      return C[13] || CT.C13;
    },
    /*text_input.TextInputType.name_*/get name_() {
      return C[14] || CT.C14;
    },
    /*text_input.TextInputType.streetAddress*/get streetAddress() {
      return C[15] || CT.C15;
    },
    /*text_input.TextInputType.values*/get values() {
      return C[16] || CT.C16;
    },
    /*text_input.TextInputType._names*/get _names() {
      return C[17] || CT.C17;
    }
  }, false);
  text_input.TextInputAction = class TextInputAction extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextInputAction.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextInputAction.prototype;
  dart.addTypeTests(text_input.TextInputAction);
  dart.addTypeCaches(text_input.TextInputAction);
  dart.setLibraryUri(text_input.TextInputAction, I[0]);
  dart.setFieldSignature(text_input.TextInputAction, () => ({
    __proto__: dart.getFields(text_input.TextInputAction.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextInputAction, ['toString']);
  text_input.TextInputAction.none = C[18] || CT.C18;
  text_input.TextInputAction.unspecified = C[19] || CT.C19;
  text_input.TextInputAction.done = C[20] || CT.C20;
  text_input.TextInputAction.go = C[21] || CT.C21;
  text_input.TextInputAction.search = C[22] || CT.C22;
  text_input.TextInputAction.send = C[23] || CT.C23;
  text_input.TextInputAction.next = C[24] || CT.C24;
  text_input.TextInputAction.previous = C[25] || CT.C25;
  text_input.TextInputAction.continueAction = C[26] || CT.C26;
  text_input.TextInputAction.join = C[27] || CT.C27;
  text_input.TextInputAction.route = C[28] || CT.C28;
  text_input.TextInputAction.emergencyCall = C[29] || CT.C29;
  text_input.TextInputAction.newline = C[30] || CT.C30;
  text_input.TextInputAction.values = C[31] || CT.C31;
  text_input.TextCapitalization = class TextCapitalization extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextCapitalization.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextCapitalization.prototype;
  dart.addTypeTests(text_input.TextCapitalization);
  dart.addTypeCaches(text_input.TextCapitalization);
  dart.setLibraryUri(text_input.TextCapitalization, I[0]);
  dart.setFieldSignature(text_input.TextCapitalization, () => ({
    __proto__: dart.getFields(text_input.TextCapitalization.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextCapitalization, ['toString']);
  text_input.TextCapitalization.words = C[32] || CT.C32;
  text_input.TextCapitalization.sentences = C[33] || CT.C33;
  text_input.TextCapitalization.characters = C[34] || CT.C34;
  text_input.TextCapitalization.none = C[35] || CT.C35;
  text_input.TextCapitalization.values = C[36] || CT.C36;
  var inputType$ = dart.privateName(text_input, "TextInputConfiguration.inputType");
  var readOnly$ = dart.privateName(text_input, "TextInputConfiguration.readOnly");
  var obscureText$ = dart.privateName(text_input, "TextInputConfiguration.obscureText");
  var autocorrect$ = dart.privateName(text_input, "TextInputConfiguration.autocorrect");
  var autofillConfiguration$ = dart.privateName(text_input, "TextInputConfiguration.autofillConfiguration");
  var smartDashesType$ = dart.privateName(text_input, "TextInputConfiguration.smartDashesType");
  var smartQuotesType$ = dart.privateName(text_input, "TextInputConfiguration.smartQuotesType");
  var enableSuggestions$ = dart.privateName(text_input, "TextInputConfiguration.enableSuggestions");
  var actionLabel$ = dart.privateName(text_input, "TextInputConfiguration.actionLabel");
  var inputAction$ = dart.privateName(text_input, "TextInputConfiguration.inputAction");
  var textCapitalization$ = dart.privateName(text_input, "TextInputConfiguration.textCapitalization");
  var keyboardAppearance$ = dart.privateName(text_input, "TextInputConfiguration.keyboardAppearance");
  var _name = dart.privateName(ui, "_name");
  text_input.TextInputConfiguration = class TextInputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
    get autocorrect() {
      return this[autocorrect$];
    }
    set autocorrect(value) {
      super.autocorrect = value;
    }
    get autofillConfiguration() {
      return this[autofillConfiguration$];
    }
    set autofillConfiguration(value) {
      super.autofillConfiguration = value;
    }
    get smartDashesType() {
      return this[smartDashesType$];
    }
    set smartDashesType(value) {
      super.smartDashesType = value;
    }
    get smartQuotesType() {
      return this[smartQuotesType$];
    }
    set smartQuotesType(value) {
      super.smartQuotesType = value;
    }
    get enableSuggestions() {
      return this[enableSuggestions$];
    }
    set enableSuggestions(value) {
      super.enableSuggestions = value;
    }
    get actionLabel() {
      return this[actionLabel$];
    }
    set actionLabel(value) {
      super.actionLabel = value;
    }
    get inputAction() {
      return this[inputAction$];
    }
    set inputAction(value) {
      super.inputAction = value;
    }
    get textCapitalization() {
      return this[textCapitalization$];
    }
    set textCapitalization(value) {
      super.textCapitalization = value;
    }
    get keyboardAppearance() {
      return this[keyboardAppearance$];
    }
    set keyboardAppearance(value) {
      super.keyboardAppearance = value;
    }
    toJson() {
      return (() => {
        let t0 = new (T.IdentityMapOfString$dynamic()).new();
        t0[$_set]("inputType", this.inputType.toJson());
        t0[$_set]("readOnly", this.readOnly);
        t0[$_set]("obscureText", this.obscureText);
        t0[$_set]("autocorrect", this.autocorrect);
        t0[$_set]("smartDashesType", this.smartDashesType.index[$toString]());
        t0[$_set]("smartQuotesType", this.smartQuotesType.index[$toString]());
        t0[$_set]("enableSuggestions", this.enableSuggestions);
        t0[$_set]("actionLabel", this.actionLabel);
        t0[$_set]("inputAction", this.inputAction.toString());
        t0[$_set]("textCapitalization", this.textCapitalization.toString());
        t0[$_set]("keyboardAppearance", this.keyboardAppearance.toString());
        if (this.autofillConfiguration != null) t0[$_set]("autofill", dart.nullCheck(this.autofillConfiguration).toJson());
        return t0;
      })();
    }
  };
  (text_input.TextInputConfiguration.new = function(opts) {
    let t0, t0$;
    let inputType = opts && 'inputType' in opts ? opts.inputType : C[6] || CT.C6;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
    let inputAction = opts && 'inputAction' in opts ? opts.inputAction : C[20] || CT.C20;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : C[37] || CT.C37;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[35] || CT.C35;
    let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : null;
    this[inputType$] = inputType;
    this[readOnly$] = readOnly;
    this[obscureText$] = obscureText;
    this[autocorrect$] = autocorrect;
    this[enableSuggestions$] = enableSuggestions;
    this[actionLabel$] = actionLabel;
    this[inputAction$] = inputAction;
    this[keyboardAppearance$] = keyboardAppearance;
    this[textCapitalization$] = textCapitalization;
    this[autofillConfiguration$] = autofillConfiguration;
    if (!(inputType !== null)) dart.assertFailed(null, I[1], 466, 15, "inputType != null");
    if (!(obscureText !== null)) dart.assertFailed(null, I[1], 467, 15, "obscureText != null");
    this[smartDashesType$] = (t0 = smartDashesType, t0 == null ? obscureText ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0);
    this[smartQuotesType$] = (t0$ = smartQuotesType, t0$ == null ? obscureText ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$);
    if (!(autocorrect !== null)) dart.assertFailed(null, I[1], 470, 15, "autocorrect != null");
    if (!(enableSuggestions !== null)) dart.assertFailed(null, I[1], 471, 15, "enableSuggestions != null");
    if (!(keyboardAppearance !== null)) dart.assertFailed(null, I[1], 472, 15, "keyboardAppearance != null");
    if (!(inputAction !== null)) dart.assertFailed(null, I[1], 473, 15, "inputAction != null");
    if (!(textCapitalization !== null)) dart.assertFailed(null, I[1], 474, 15, "textCapitalization != null");
    ;
  }).prototype = text_input.TextInputConfiguration.prototype;
  dart.addTypeTests(text_input.TextInputConfiguration);
  dart.addTypeCaches(text_input.TextInputConfiguration);
  dart.setMethodSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getMethods(text_input.TextInputConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(text_input.TextInputConfiguration, I[0]);
  dart.setFieldSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getFields(text_input.TextInputConfiguration.__proto__),
    inputType: dart.finalFieldType(text_input.TextInputType),
    readOnly: dart.finalFieldType(core.bool),
    obscureText: dart.finalFieldType(core.bool),
    autocorrect: dart.finalFieldType(core.bool),
    autofillConfiguration: dart.finalFieldType(dart.nullable(autofill.AutofillConfiguration)),
    smartDashesType: dart.finalFieldType(text_input.SmartDashesType),
    smartQuotesType: dart.finalFieldType(text_input.SmartQuotesType),
    enableSuggestions: dart.finalFieldType(core.bool),
    actionLabel: dart.finalFieldType(dart.nullable(core.String)),
    inputAction: dart.finalFieldType(text_input.TextInputAction),
    textCapitalization: dart.finalFieldType(text_input.TextCapitalization),
    keyboardAppearance: dart.finalFieldType(ui.Brightness)
  }));
  text_input.FloatingCursorDragState = class FloatingCursorDragState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.FloatingCursorDragState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.FloatingCursorDragState.prototype;
  dart.addTypeTests(text_input.FloatingCursorDragState);
  dart.addTypeCaches(text_input.FloatingCursorDragState);
  dart.setLibraryUri(text_input.FloatingCursorDragState, I[0]);
  dart.setFieldSignature(text_input.FloatingCursorDragState, () => ({
    __proto__: dart.getFields(text_input.FloatingCursorDragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.FloatingCursorDragState, ['toString']);
  text_input.FloatingCursorDragState.Start = C[38] || CT.C38;
  text_input.FloatingCursorDragState.Update = C[39] || CT.C39;
  text_input.FloatingCursorDragState.End = C[40] || CT.C40;
  text_input.FloatingCursorDragState.values = C[41] || CT.C41;
  var offset$ = dart.privateName(text_input, "RawFloatingCursorPoint.offset");
  var state$ = dart.privateName(text_input, "RawFloatingCursorPoint.state");
  text_input.RawFloatingCursorPoint = class RawFloatingCursorPoint extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
  };
  (text_input.RawFloatingCursorPoint.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[offset$] = offset;
    this[state$] = state;
    if (!(state !== null)) dart.assertFailed(null, I[1], 643, 15, "state != null");
    if (!(state !== text_input.FloatingCursorDragState.Update || offset != null)) dart.assertFailed(null, I[1], 644, 15, "state != FloatingCursorDragState.Update || offset != null");
    ;
  }).prototype = text_input.RawFloatingCursorPoint.prototype;
  dart.addTypeTests(text_input.RawFloatingCursorPoint);
  dart.addTypeCaches(text_input.RawFloatingCursorPoint);
  dart.setLibraryUri(text_input.RawFloatingCursorPoint, I[0]);
  dart.setFieldSignature(text_input.RawFloatingCursorPoint, () => ({
    __proto__: dart.getFields(text_input.RawFloatingCursorPoint.__proto__),
    offset: dart.finalFieldType(dart.nullable(ui.Offset)),
    state: dart.finalFieldType(text_input.FloatingCursorDragState)
  }));
  var text$ = dart.privateName(text_input, "TextEditingValue.text");
  var selection$ = dart.privateName(text_input, "TextEditingValue.selection");
  var composing$ = dart.privateName(text_input, "TextEditingValue.composing");
  var TextRange_end = dart.privateName(ui, "TextRange.end");
  var TextRange_start = dart.privateName(ui, "TextRange.start");
  var TextSelection_isDirectional = dart.privateName(text_editing, "TextSelection.isDirectional");
  var TextSelection_affinity = dart.privateName(text_editing, "TextSelection.affinity");
  var TextSelection_extentOffset = dart.privateName(text_editing, "TextSelection.extentOffset");
  var TextSelection_baseOffset = dart.privateName(text_editing, "TextSelection.baseOffset");
  text_input.TextEditingValue = class TextEditingValue extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get selection() {
      return this[selection$];
    }
    set selection(value) {
      super.selection = value;
    }
    get composing() {
      return this[composing$];
    }
    set composing(value) {
      super.composing = value;
    }
    static fromJSON(encoded) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      return new text_input.TextEditingValue.new({text: core.String.as(encoded[$_get]("text")), selection: new text_editing.TextSelection.new({baseOffset: (t1 = T.intN().as(encoded[$_get]("selectionBase")), t1 == null ? -1 : t1), extentOffset: (t1$ = T.intN().as(encoded[$_get]("selectionExtent")), t1$ == null ? -1 : t1$), affinity: (t1$0 = text_input._toTextAffinity(T.StringN().as(encoded[$_get]("selectionAffinity"))), t1$0 == null ? ui.TextAffinity.downstream : t1$0), isDirectional: (t1$1 = T.boolN().as(encoded[$_get]("selectionIsDirectional")), t1$1 == null ? false : t1$1)}), composing: new ui.TextRange.new({start: (t1$2 = T.intN().as(encoded[$_get]("composingBase")), t1$2 == null ? -1 : t1$2), end: (t1$3 = T.intN().as(encoded[$_get]("composingExtent")), t1$3 == null ? -1 : t1$3)})});
    }
    toJSON() {
      return new (T.IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.selection.baseOffset, "selectionExtent", this.selection.extentOffset, "selectionAffinity", this.selection.affinity.toString(), "selectionIsDirectional", this.selection.isDirectional, "composingBase", this.composing.start, "composingExtent", this.composing.end]);
    }
    copyWith(opts) {
      let t1, t1$, t1$0;
      let text = opts && 'text' in opts ? opts.text : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_input.TextEditingValue.new({text: (t1 = text, t1 == null ? this.text : t1), selection: (t1$ = selection, t1$ == null ? this.selection : t1$), composing: (t1$0 = composing, t1$0 == null ? this.composing : t1$0)});
    }
    get isComposingRangeValid() {
      return this.composing.isValid && this.composing.isNormalized && this.composing.end <= this.text.length;
    }
    toString() {
      return object.objectRuntimeType(this, "TextEditingValue") + "(text: ┤" + this.text + "├, selection: " + dart.str(this.selection) + ", composing: " + dart.str(this.composing) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return text_input.TextEditingValue.is(other) && other.text === this.text && other.selection._equals(this.selection) && other.composing._equals(this.composing);
    }
    get hashCode() {
      return ui.hashValues(this.text[$hashCode], this.selection.hashCode, this.composing.hashCode);
    }
  };
  (text_input.TextEditingValue.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : "";
    let selection = opts && 'selection' in opts ? opts.selection : C[42] || CT.C42;
    let composing = opts && 'composing' in opts ? opts.composing : C[44] || CT.C44;
    this[text$] = text;
    this[selection$] = selection;
    this[composing$] = composing;
    if (!(text !== null)) dart.assertFailed(null, I[1], 666, 15, "text != null");
    if (!(selection !== null)) dart.assertFailed(null, I[1], 667, 15, "selection != null");
    if (!(composing !== null)) dart.assertFailed(null, I[1], 668, 15, "composing != null");
    ;
  }).prototype = text_input.TextEditingValue.prototype;
  dart.addTypeTests(text_input.TextEditingValue);
  dart.addTypeCaches(text_input.TextEditingValue);
  dart.setMethodSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getMethods(text_input.TextEditingValue.__proto__),
    toJSON: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(text_input.TextEditingValue, [], {composing: dart.nullable(ui.TextRange), selection: dart.nullable(text_editing.TextSelection), text: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getGetters(text_input.TextEditingValue.__proto__),
    isComposingRangeValid: core.bool
  }));
  dart.setLibraryUri(text_input.TextEditingValue, I[0]);
  dart.setFieldSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getFields(text_input.TextEditingValue.__proto__),
    text: dart.finalFieldType(core.String),
    selection: dart.finalFieldType(text_editing.TextSelection),
    composing: dart.finalFieldType(ui.TextRange)
  }));
  dart.defineExtensionMethods(text_input.TextEditingValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextEditingValue, ['hashCode']);
  dart.defineLazy(text_input.TextEditingValue, {
    /*text_input.TextEditingValue.empty*/get empty() {
      return C[45] || CT.C45;
    }
  }, false);
  text_input.SelectionChangedCause = class SelectionChangedCause extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SelectionChangedCause.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SelectionChangedCause.prototype;
  dart.addTypeTests(text_input.SelectionChangedCause);
  dart.addTypeCaches(text_input.SelectionChangedCause);
  dart.setLibraryUri(text_input.SelectionChangedCause, I[0]);
  dart.setFieldSignature(text_input.SelectionChangedCause, () => ({
    __proto__: dart.getFields(text_input.SelectionChangedCause.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SelectionChangedCause, ['toString']);
  text_input.SelectionChangedCause.tap = C[46] || CT.C46;
  text_input.SelectionChangedCause.doubleTap = C[47] || CT.C47;
  text_input.SelectionChangedCause.longPress = C[48] || CT.C48;
  text_input.SelectionChangedCause.forcePress = C[49] || CT.C49;
  text_input.SelectionChangedCause.keyboard = C[50] || CT.C50;
  text_input.SelectionChangedCause.toolBar = C[51] || CT.C51;
  text_input.SelectionChangedCause.drag = C[52] || CT.C52;
  text_input.SelectionChangedCause.values = C[53] || CT.C53;
  text_input.TextSelectionDelegate = class TextSelectionDelegate extends core.Object {};
  text_input.TextSelectionDelegate[dart.mixinOn] = Object => class TextSelectionDelegate extends Object {
    set textEditingValue(value) {
    }
    get cutEnabled() {
      return true;
    }
    get copyEnabled() {
      return true;
    }
    get pasteEnabled() {
      return true;
    }
    get selectAllEnabled() {
      return true;
    }
  };
  (text_input.TextSelectionDelegate[dart.mixinNew] = function() {
  }).prototype = text_input.TextSelectionDelegate.prototype;
  dart.addTypeTests(text_input.TextSelectionDelegate);
  dart.addTypeCaches(text_input.TextSelectionDelegate);
  text_input.TextSelectionDelegate[dart.implements] = () => [core.Object];
  dart.setGetterSignature(text_input.TextSelectionDelegate, () => ({
    __proto__: dart.getGetters(text_input.TextSelectionDelegate.__proto__),
    cutEnabled: core.bool,
    copyEnabled: core.bool,
    pasteEnabled: core.bool,
    selectAllEnabled: core.bool
  }));
  dart.setSetterSignature(text_input.TextSelectionDelegate, () => ({
    __proto__: dart.getSetters(text_input.TextSelectionDelegate.__proto__),
    textEditingValue: text_input.TextEditingValue
  }));
  dart.setLibraryUri(text_input.TextSelectionDelegate, I[0]);
  text_input.TextInputClient = class TextInputClient extends core.Object {};
  (text_input.TextInputClient.new = function() {
    ;
  }).prototype = text_input.TextInputClient.prototype;
  dart.addTypeTests(text_input.TextInputClient);
  dart.addTypeCaches(text_input.TextInputClient);
  dart.setLibraryUri(text_input.TextInputClient, I[0]);
  var _cachedSize = dart.privateName(text_input, "_cachedSize");
  var _cachedTransform = dart.privateName(text_input, "_cachedTransform");
  var _cachedRect = dart.privateName(text_input, "_cachedRect");
  var _cachedCaretRect = dart.privateName(text_input, "_cachedCaretRect");
  var _client$ = dart.privateName(text_input, "_client");
  var _id = dart.privateName(text_input, "_id");
  var _currentConnection = dart.privateName(text_input, "_currentConnection");
  var _show = dart.privateName(text_input, "_show");
  var _requestAutofill = dart.privateName(text_input, "_requestAutofill");
  var _updateConfig = dart.privateName(text_input, "_updateConfig");
  var _setEditingState = dart.privateName(text_input, "_setEditingState");
  var _setEditableSizeAndTransform = dart.privateName(text_input, "_setEditableSizeAndTransform");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _setComposingTextRect = dart.privateName(text_input, "_setComposingTextRect");
  var _setCaretRect = dart.privateName(text_input, "_setCaretRect");
  var _setStyle = dart.privateName(text_input, "_setStyle");
  var _clearClient = dart.privateName(text_input, "_clearClient");
  text_input.TextInputConnection = class TextInputConnection extends core.Object {
    static debugResetId(opts) {
      let to = opts && 'to' in opts ? opts.to : 1;
      if (!(to !== null)) dart.assertFailed(null, I[1], 940, 12, "to != null");
      if (!dart.fn(() => {
        text_input.TextInputConnection._nextId = to;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 941, 12, "() {\r\n      _nextId = to;\r\n      return true;\r\n    }()");
    }
    get attached() {
      return dart.equals(text_input.TextInput._instance[_currentConnection], this);
    }
    show() {
      if (!this.attached) dart.assertFailed(null, I[1], 954, 12, "attached");
      text_input.TextInput._instance[_show]();
    }
    requestAutofill() {
      if (!this.attached) dart.assertFailed(null, I[1], 967, 12, "attached");
      text_input.TextInput._instance[_requestAutofill]();
    }
    updateConfig(configuration) {
      if (!this.attached) dart.assertFailed(null, I[1], 974, 12, "attached");
      text_input.TextInput._instance[_updateConfig](configuration);
    }
    setEditingState(value) {
      if (!this.attached) dart.assertFailed(null, I[1], 981, 12, "attached");
      text_input.TextInput._instance[_setEditingState](value);
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
      if (!editableBoxSize._equals(this[_cachedSize]) || !transform._equals(this[_cachedTransform])) {
        this[_cachedSize] = editableBoxSize;
        this[_cachedTransform] = transform;
        text_input.TextInput._instance[_setEditableSizeAndTransform](new (T.IdentityMapOfString$dynamic()).from(["width", editableBoxSize.width, "height", editableBoxSize.height, "transform", transform.storage]));
      }
    }
    setComposingRect(rect) {
      if (!(rect !== null)) dart.assertFailed(null, I[1], 1017, 12, "rect != null");
      if (rect._equals(this[_cachedRect])) return;
      this[_cachedRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[54] || CT.C54);
      text_input.TextInput._instance[_setComposingTextRect](new (T.IdentityMapOfString$dynamic()).from(["width", validRect.width, "height", validRect.height, "x", validRect.left, "y", validRect.top]));
    }
    setCaretRect(rect) {
      if (!(rect !== null)) dart.assertFailed(null, I[1], 1035, 12, "rect != null");
      if (rect._equals(this[_cachedCaretRect])) return;
      this[_cachedCaretRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[54] || CT.C54);
      text_input.TextInput._instance[_setCaretRect](new (T.IdentityMapOfString$dynamic()).from(["width", validRect.width, "height", validRect.height, "x", validRect.left, "y", validRect.top]));
    }
    setStyle(opts) {
      let t1;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      if (!this.attached) dart.assertFailed(null, I[1], 1062, 12, "attached");
      text_input.TextInput._instance[_setStyle](new (T.IdentityMapOfString$dynamic()).from(["fontFamily", fontFamily, "fontSize", fontSize, "fontWeightIndex", (t1 = fontWeight, t1 == null ? null : t1.index), "textAlignIndex", textAlign.index, "textDirectionIndex", textDirection.index]));
    }
    close() {
      if (this.attached) {
        text_input.TextInput._instance[_clearClient]();
      }
      if (!!this.attached) dart.assertFailed(null, I[1], 1083, 12, "!attached");
    }
    connectionClosedReceived() {
      text_input.TextInput._instance[_currentConnection] = null;
      if (!!this.attached) dart.assertFailed(null, I[1], 1091, 12, "!attached");
    }
  };
  (text_input.TextInputConnection.__ = function(_client) {
    let t1;
    this[_cachedSize] = null;
    this[_cachedTransform] = null;
    this[_cachedRect] = null;
    this[_cachedCaretRect] = null;
    this[_client$] = _client;
    if (!(_client !== null)) dart.assertFailed(null, I[1], 923, 16, "_client != null");
    this[_id] = (t1 = text_input.TextInputConnection._nextId, text_input.TextInputConnection._nextId = dart.notNull(t1) + 1, t1);
    ;
  }).prototype = text_input.TextInputConnection.prototype;
  dart.addTypeTests(text_input.TextInputConnection);
  dart.addTypeCaches(text_input.TextInputConnection);
  dart.setMethodSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getMethods(text_input.TextInputConnection.__proto__),
    show: dart.fnType(dart.void, []),
    requestAutofill: dart.fnType(dart.void, []),
    updateConfig: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    setEditingState: dart.fnType(dart.void, [text_input.TextEditingValue]),
    setEditableSizeAndTransform: dart.fnType(dart.void, [ui.Size, vector_math_64.Matrix4]),
    setComposingRect: dart.fnType(dart.void, [ui.Rect]),
    setCaretRect: dart.fnType(dart.void, [ui.Rect]),
    setStyle: dart.fnType(dart.void, [], {}, {fontFamily: dart.nullable(core.String), fontSize: dart.nullable(core.double), fontWeight: dart.nullable(ui.FontWeight), textAlign: ui.TextAlign, textDirection: ui.TextDirection}),
    close: dart.fnType(dart.void, []),
    connectionClosedReceived: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getGetters(text_input.TextInputConnection.__proto__),
    attached: core.bool
  }));
  dart.setLibraryUri(text_input.TextInputConnection, I[0]);
  dart.setFieldSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getFields(text_input.TextInputConnection.__proto__),
    [_cachedSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_cachedTransform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4)),
    [_cachedRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_cachedCaretRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_id]: dart.finalFieldType(core.int),
    [_client$]: dart.finalFieldType(text_input.TextInputClient)
  }));
  dart.defineLazy(text_input.TextInputConnection, {
    /*text_input.TextInputConnection._nextId*/get _nextId() {
      return 1;
    },
    set _nextId(_) {}
  }, false);
  var __TextInput__channel = dart.privateName(text_input, "_#TextInput#_channel");
  var __TextInput__currentConfiguration = dart.privateName(text_input, "_#TextInput#_currentConfiguration");
  var _hidePending = dart.privateName(text_input, "_hidePending");
  var _channel = dart.privateName(text_input, "_channel");
  var _handleTextInputInvocation = dart.privateName(text_input, "_handleTextInputInvocation");
  var _attach = dart.privateName(text_input, "_attach");
  var _currentConfiguration = dart.privateName(text_input, "_currentConfiguration");
  var _scheduleHide = dart.privateName(text_input, "_scheduleHide");
  text_input.TextInput = class TextInput extends core.Object {
    static setChannel(newChannel) {
      if (!dart.fn(() => {
        let t1;
        text_input.TextInput._instance[_channel] = (t1 = newChannel, (() => {
          t1.setMethodCallHandler(dart.bind(text_input.TextInput._instance, _handleTextInputInvocation));
          return t1;
        })());
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1216, 12, "() {\r\n      _instance._channel = newChannel..setMethodCallHandler(_instance._handleTextInputInvocation);\r\n      return true;\r\n    }()");
    }
    static attach(client, configuration) {
      if (!(client !== null)) dart.assertFailed(null, I[1], 1261, 12, "client != null");
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1262, 12, "configuration != null");
      let connection = new text_input.TextInputConnection.__(client);
      text_input.TextInput._instance[_attach](connection, configuration);
      return connection;
    }
    [_attach](connection, configuration) {
      if (!(connection !== null)) dart.assertFailed(null, I[1], 1272, 12, "connection != null");
      if (!(connection[_client$] !== null)) dart.assertFailed(null, I[1], 1273, 12, "connection._client != null");
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1274, 12, "configuration != null");
      if (!text_input.TextInput._debugEnsureInputActionWorksOnPlatform(configuration.inputAction)) dart.assertFailed(null, I[1], 1275, 12, "_debugEnsureInputActionWorksOnPlatform(configuration.inputAction)");
      this[_channel].invokeMethod(dart.void, "TextInput.setClient", [connection[_id], configuration.toJson()]);
      this[_currentConnection] = connection;
      this[_currentConfiguration] = configuration;
    }
    static _debugEnsureInputActionWorksOnPlatform(inputAction) {
      if (!dart.fn(() => {
        if (true) {
          return true;
        }
        if (io.Platform.isIOS) {
          if (!text_input.TextInput._iOSSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on iOS.", I[1], 1292, 11, "_iOSSupportedInputActions.contains(inputAction)");
        } else if (io.Platform.isAndroid) {
          if (!text_input.TextInput._androidSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on Android.", I[1], 1297, 11, "_androidSupportedInputActions.contains(inputAction)");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1285, 12, "() {\r\n      if (kIsWeb) {\r\n        // TODO(flutterweb): what makes sense here?\r\n        return true;\r\n      }\r\n      if (Platform.isIOS) {\r\n        assert(\r\n          _iOSSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on iOS.',\r\n        );\r\n      } else if (Platform.isAndroid) {\r\n        assert(\r\n          _androidSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on Android.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    get [_channel]() {
      let t1;
      t1 = this[__TextInput__channel];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_channel")) : t1;
    }
    set [_channel](t1) {
      this[__TextInput__channel] = t1;
    }
    get [_currentConfiguration]() {
      let t2;
      t2 = this[__TextInput__currentConfiguration];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_currentConfiguration")) : t2;
    }
    set [_currentConfiguration](t2) {
      this[__TextInput__currentConfiguration] = t2;
    }
    [_handleTextInputInvocation](methodCall) {
      return async.async(dart.dynamic, (function* _handleTextInputInvocation() {
        let t4, t3;
        if (this[_currentConnection] == null) return;
        let method = methodCall.method;
        if (method === "TextInputClient.requestExistingInputState") {
          if (!(dart.nullCheck(this[_currentConnection])[_client$] !== null)) dart.assertFailed(null, I[1], 1319, 14, "_currentConnection!._client != null");
          this[_attach](dart.nullCheck(this[_currentConnection]), this[_currentConfiguration]);
          let editingValue = dart.nullCheck(this[_currentConnection])[_client$].currentTextEditingValue;
          if (editingValue != null) {
            this[_setEditingState](editingValue);
          }
          return;
        }
        let args = core.List.as(methodCall.arguments);
        if (method === "TextInputClient.updateEditingStateWithTag") {
          let client = dart.nullCheck(this[_currentConnection])[_client$];
          if (!(client !== null)) dart.assertFailed(null, I[1], 1332, 14, "client != null");
          let scope = client.currentAutofillScope;
          let editingValue = T.MapOfString$dynamic().as(args[$_get](1));
          for (let tag of editingValue[$keys]) {
            let textEditingValue = text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(editingValue[$_get](tag)));
            t3 = scope;
            t3 == null ? null : (t4 = t3.getAutofillClient(tag), t4 == null ? null : t4.updateEditingValue(textEditingValue));
          }
          return;
        }
        let client = core.int.as(args[$_get](0));
        if (client !== dart.nullCheck(this[_currentConnection])[_id]) return;
        switch (method) {
          case "TextInputClient.updateEditingState":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateEditingValue(text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performAction":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performAction(text_input._toTextInputAction(core.String.as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performPrivateCommand":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performPrivateCommand(core.String.as(dart.dsend(args[$_get](1), '_get', ["action"])), T.MapOfString$dynamic().as(dart.dsend(args[$_get](1), '_get', ["data"])));
            break;
          }
          case "TextInputClient.updateFloatingCursor":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateFloatingCursor(text_input._toTextPoint(text_input._toTextCursorAction(core.String.as(args[$_get](1))), T.MapOfString$dynamic().as(args[$_get](2))));
            break;
          }
          case "TextInputClient.onConnectionClosed":
          {
            dart.nullCheck(this[_currentConnection])[_client$].connectionClosed();
            break;
          }
          case "TextInputClient.showAutocorrectionPromptRect":
          {
            dart.nullCheck(this[_currentConnection])[_client$].showAutocorrectionPromptRect(core.int.as(args[$_get](1)), core.int.as(args[$_get](2)));
            break;
          }
          default:
          {
            dart.throw(new message_codec.MissingPluginException.new());
          }
        }
      }).bind(this));
    }
    [_scheduleHide]() {
      if (this[_hidePending]) return;
      this[_hidePending] = true;
      async.scheduleMicrotask(dart.fn(() => {
        this[_hidePending] = false;
        if (this[_currentConnection] == null) this[_channel].invokeMethod(dart.void, "TextInput.hide");
      }, T.VoidTovoid()));
    }
    [_clearClient]() {
      this[_channel].invokeMethod(dart.void, "TextInput.clearClient");
      this[_currentConnection] = null;
      this[_scheduleHide]();
    }
    [_updateConfig](configuration) {
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1402, 12, "configuration != null");
      this[_channel].invokeMethod(dart.void, "TextInput.updateConfig", configuration.toJson());
    }
    [_setEditingState](value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 1410, 12, "value != null");
      this[_channel].invokeMethod(dart.void, "TextInput.setEditingState", value.toJSON());
    }
    [_show]() {
      this[_channel].invokeMethod(dart.void, "TextInput.show");
    }
    [_requestAutofill]() {
      this[_channel].invokeMethod(dart.void, "TextInput.requestAutofill");
    }
    [_setEditableSizeAndTransform](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setEditableSizeAndTransform", args);
    }
    [_setComposingTextRect](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setMarkedTextRect", args);
    }
    [_setCaretRect](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setCaretRect", args);
    }
    [_setStyle](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setStyle", args);
    }
    static finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
      if (!(shouldSave !== null)) dart.assertFailed(null, I[1], 1502, 12, "shouldSave != null");
      text_input.TextInput._instance[_channel].invokeMethod(dart.void, "TextInput.finishAutofillContext", shouldSave);
    }
  };
  (text_input.TextInput.__ = function() {
    this[__TextInput__channel] = null;
    this[_currentConnection] = null;
    this[__TextInput__currentConfiguration] = null;
    this[_hidePending] = false;
    this[_channel] = system_channels.SystemChannels.textInput;
    this[_channel].setMethodCallHandler(dart.bind(this, _handleTextInputInvocation));
  }).prototype = text_input.TextInput.prototype;
  dart.addTypeTests(text_input.TextInput);
  dart.addTypeCaches(text_input.TextInput);
  dart.setMethodSignature(text_input.TextInput, () => ({
    __proto__: dart.getMethods(text_input.TextInput.__proto__),
    [_attach]: dart.fnType(dart.void, [text_input.TextInputConnection, text_input.TextInputConfiguration]),
    [_handleTextInputInvocation]: dart.fnType(async.Future, [message_codec.MethodCall]),
    [_scheduleHide]: dart.fnType(dart.void, []),
    [_clearClient]: dart.fnType(dart.void, []),
    [_updateConfig]: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    [_setEditingState]: dart.fnType(dart.void, [text_input.TextEditingValue]),
    [_show]: dart.fnType(dart.void, []),
    [_requestAutofill]: dart.fnType(dart.void, []),
    [_setEditableSizeAndTransform]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setComposingTextRect]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setCaretRect]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setStyle]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setGetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getGetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setSetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getSetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setLibraryUri(text_input.TextInput, I[0]);
  dart.setFieldSignature(text_input.TextInput, () => ({
    __proto__: dart.getFields(text_input.TextInput.__proto__),
    [__TextInput__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [_currentConnection]: dart.fieldType(dart.nullable(text_input.TextInputConnection)),
    [__TextInput__currentConfiguration]: dart.fieldType(dart.nullable(text_input.TextInputConfiguration)),
    [_hidePending]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text_input.TextInput, {
    /*text_input.TextInput._instance*/get _instance() {
      return new text_input.TextInput.__();
    },
    /*text_input.TextInput._androidSupportedInputActions*/get _androidSupportedInputActions() {
      return C[55] || CT.C55;
    },
    /*text_input.TextInput._iOSSupportedInputActions*/get _iOSSupportedInputActions() {
      return C[56] || CT.C56;
    }
  }, false);
  text_input._toTextAffinity = function _toTextAffinity(affinity) {
    switch (affinity) {
      case "TextAffinity.downstream":
      {
        return ui.TextAffinity.downstream;
      }
      case "TextAffinity.upstream":
      {
        return ui.TextAffinity.upstream;
      }
    }
    return null;
  };
  text_input._toTextInputAction = function _toTextInputAction(action) {
    switch (action) {
      case "TextInputAction.none":
      {
        return text_input.TextInputAction.none;
      }
      case "TextInputAction.unspecified":
      {
        return text_input.TextInputAction.unspecified;
      }
      case "TextInputAction.go":
      {
        return text_input.TextInputAction.go;
      }
      case "TextInputAction.search":
      {
        return text_input.TextInputAction.search;
      }
      case "TextInputAction.send":
      {
        return text_input.TextInputAction.send;
      }
      case "TextInputAction.next":
      {
        return text_input.TextInputAction.next;
      }
      case "TextInputAction.previous":
      {
        return text_input.TextInputAction.previous;
      }
      case "TextInputAction.continue_action":
      {
        return text_input.TextInputAction.continueAction;
      }
      case "TextInputAction.join":
      {
        return text_input.TextInputAction.join;
      }
      case "TextInputAction.route":
      {
        return text_input.TextInputAction.route;
      }
      case "TextInputAction.emergencyCall":
      {
        return text_input.TextInputAction.emergencyCall;
      }
      case "TextInputAction.done":
      {
        return text_input.TextInputAction.done;
      }
      case "TextInputAction.newline":
      {
        return text_input.TextInputAction.newline;
      }
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text input action: " + action)])));
  };
  text_input._toTextCursorAction = function _toTextCursorAction(state) {
    switch (state) {
      case "FloatingCursorDragState.start":
      {
        return text_input.FloatingCursorDragState.Start;
      }
      case "FloatingCursorDragState.update":
      {
        return text_input.FloatingCursorDragState.Update;
      }
      case "FloatingCursorDragState.end":
      {
        return text_input.FloatingCursorDragState.End;
      }
=======
  var C = Array(16).fill(void 0);
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/widgets/draggable_scrollable_sheet.dart",
    "package:flutter/src/widgets/draggable_scrollable_sheet.dart"
  ];
  var initialChildSize$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableSheet.initialChildSize");
  var minChildSize$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableSheet.minChildSize");
  var maxChildSize$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableSheet.maxChildSize");
  var expand$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableSheet.expand");
  var builder$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableSheet.builder");
  draggable_scrollable_sheet.DraggableScrollableSheet = class DraggableScrollableSheet extends framework.StatefulWidget {
    get initialChildSize() {
      return this[initialChildSize$];
    }
    set initialChildSize(value) {
      super.initialChildSize = value;
    }
    get minChildSize() {
      return this[minChildSize$];
    }
    set minChildSize(value) {
      super.minChildSize = value;
    }
    get maxChildSize() {
      return this[maxChildSize$];
    }
    set maxChildSize(value) {
      super.maxChildSize = value;
    }
    get expand() {
      return this[expand$];
    }
    set expand(value) {
      super.expand = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    createState() {
      return new draggable_scrollable_sheet._DraggableScrollableSheetState.new();
    }
  };
  (draggable_scrollable_sheet.DraggableScrollableSheet.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let initialChildSize = opts && 'initialChildSize' in opts ? opts.initialChildSize : 0.5;
    let minChildSize = opts && 'minChildSize' in opts ? opts.minChildSize : 0.25;
    let maxChildSize = opts && 'maxChildSize' in opts ? opts.maxChildSize : 1;
    let expand = opts && 'expand' in opts ? opts.expand : true;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[initialChildSize$] = initialChildSize;
    this[minChildSize$] = minChildSize;
    this[maxChildSize$] = maxChildSize;
    this[expand$] = expand;
    this[builder$] = builder;
    if (!(initialChildSize !== null)) dart.assertFailed(null, I[0], 110, 16, "initialChildSize != null");
    if (!(minChildSize !== null)) dart.assertFailed(null, I[0], 111, 16, "minChildSize != null");
    if (!(maxChildSize !== null)) dart.assertFailed(null, I[0], 112, 16, "maxChildSize != null");
    if (!(minChildSize >= 0.0)) dart.assertFailed(null, I[0], 113, 16, "minChildSize >= 0.0");
    if (!(maxChildSize <= 1.0)) dart.assertFailed(null, I[0], 114, 16, "maxChildSize <= 1.0");
    if (!(minChildSize <= initialChildSize)) dart.assertFailed(null, I[0], 115, 16, "minChildSize <= initialChildSize");
    if (!(initialChildSize <= maxChildSize)) dart.assertFailed(null, I[0], 116, 16, "initialChildSize <= maxChildSize");
    if (!(expand !== null)) dart.assertFailed(null, I[0], 117, 16, "expand != null");
    if (!(builder !== null)) dart.assertFailed(null, I[0], 118, 16, "builder != null");
    draggable_scrollable_sheet.DraggableScrollableSheet.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = draggable_scrollable_sheet.DraggableScrollableSheet.prototype;
  dart.addTypeTests(draggable_scrollable_sheet.DraggableScrollableSheet);
  dart.addTypeCaches(draggable_scrollable_sheet.DraggableScrollableSheet);
  dart.setMethodSignature(draggable_scrollable_sheet.DraggableScrollableSheet, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet.DraggableScrollableSheet.__proto__),
    createState: dart.fnType(draggable_scrollable_sheet._DraggableScrollableSheetState, [])
  }));
  dart.setLibraryUri(draggable_scrollable_sheet.DraggableScrollableSheet, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet.DraggableScrollableSheet, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet.DraggableScrollableSheet.__proto__),
    initialChildSize: dart.finalFieldType(core.double),
    minChildSize: dart.finalFieldType(core.double),
    maxChildSize: dart.finalFieldType(core.double),
    expand: dart.finalFieldType(core.bool),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, scroll_controller.ScrollController]))
  }));
  var extent$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableNotification.extent");
  var minExtent$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableNotification.minExtent");
  var maxExtent$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableNotification.maxExtent");
  var initialExtent$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableNotification.initialExtent");
  var context$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableNotification.context");
  const Notification_ViewportNotificationMixin$36 = class Notification_ViewportNotificationMixin extends notification_listener.Notification {};
  (Notification_ViewportNotificationMixin$36.new = function() {
    scroll_notification.ViewportNotificationMixin[dart.mixinNew].call(this);
    Notification_ViewportNotificationMixin$36.__proto__.new.call(this);
  }).prototype = Notification_ViewportNotificationMixin$36.prototype;
  dart.applyMixin(Notification_ViewportNotificationMixin$36, scroll_notification.ViewportNotificationMixin);
  draggable_scrollable_sheet.DraggableScrollableNotification = class DraggableScrollableNotification extends Notification_ViewportNotificationMixin$36 {
    get extent() {
      return this[extent$];
    }
    set extent(value) {
      super.extent = value;
    }
    get minExtent() {
      return this[minExtent$];
    }
    set minExtent(value) {
      super.minExtent = value;
    }
    get maxExtent() {
      return this[maxExtent$];
    }
    set maxExtent(value) {
      super.maxExtent = value;
    }
    get initialExtent() {
      return this[initialExtent$];
    }
    set initialExtent(value) {
      super.initialExtent = value;
    }
    get context() {
      return this[context$];
    }
    set context(value) {
      super.context = value;
    }
    debugFillDescription(description) {
      super.debugFillDescription(description);
      description[$add]("minExtent: " + dart.str(this.minExtent) + ", extent: " + dart.str(this.extent) + ", maxExtent: " + dart.str(this.maxExtent) + ", initialExtent: " + dart.str(this.initialExtent));
    }
  };
  (draggable_scrollable_sheet.DraggableScrollableNotification.new = function(opts) {
    let extent = opts && 'extent' in opts ? opts.extent : null;
    let minExtent = opts && 'minExtent' in opts ? opts.minExtent : null;
    let maxExtent = opts && 'maxExtent' in opts ? opts.maxExtent : null;
    let initialExtent = opts && 'initialExtent' in opts ? opts.initialExtent : null;
    let context = opts && 'context' in opts ? opts.context : null;
    this[extent$] = extent;
    this[minExtent$] = minExtent;
    this[maxExtent$] = maxExtent;
    this[initialExtent$] = initialExtent;
    this[context$] = context;
    if (!(extent !== null)) dart.assertFailed(null, I[0], 190, 15, "extent != null");
    if (!(initialExtent !== null)) dart.assertFailed(null, I[0], 191, 15, "initialExtent != null");
    if (!(minExtent !== null)) dart.assertFailed(null, I[0], 192, 15, "minExtent != null");
    if (!(maxExtent !== null)) dart.assertFailed(null, I[0], 193, 15, "maxExtent != null");
    if (!(0.0 <= minExtent)) dart.assertFailed(null, I[0], 194, 15, "0.0 <= minExtent");
    if (!(maxExtent <= 1.0)) dart.assertFailed(null, I[0], 195, 15, "maxExtent <= 1.0");
    if (!(minExtent <= extent)) dart.assertFailed(null, I[0], 196, 15, "minExtent <= extent");
    if (!(minExtent <= initialExtent)) dart.assertFailed(null, I[0], 197, 15, "minExtent <= initialExtent");
    if (!(extent <= maxExtent)) dart.assertFailed(null, I[0], 198, 15, "extent <= maxExtent");
    if (!(initialExtent <= maxExtent)) dart.assertFailed(null, I[0], 199, 15, "initialExtent <= maxExtent");
    if (!(context !== null)) dart.assertFailed(null, I[0], 200, 15, "context != null");
    draggable_scrollable_sheet.DraggableScrollableNotification.__proto__.new.call(this);
    ;
  }).prototype = draggable_scrollable_sheet.DraggableScrollableNotification.prototype;
  dart.addTypeTests(draggable_scrollable_sheet.DraggableScrollableNotification);
  dart.addTypeCaches(draggable_scrollable_sheet.DraggableScrollableNotification);
  dart.setLibraryUri(draggable_scrollable_sheet.DraggableScrollableNotification, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet.DraggableScrollableNotification, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet.DraggableScrollableNotification.__proto__),
    extent: dart.finalFieldType(core.double),
    minExtent: dart.finalFieldType(core.double),
    maxExtent: dart.finalFieldType(core.double),
    initialExtent: dart.finalFieldType(core.double),
    context: dart.finalFieldType(framework.BuildContext)
  }));
  var _currentExtent = dart.privateName(draggable_scrollable_sheet, "_currentExtent");
  draggable_scrollable_sheet._DraggableSheetExtent = class _DraggableSheetExtent extends core.Object {
    get isAtMin() {
      return this.minExtent >= this[_currentExtent].value;
    }
    get isAtMax() {
      return this.maxExtent <= this[_currentExtent].value;
    }
    set currentExtent(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 265, 12, "value != null");
      this[_currentExtent].value = value[$clamp](this.minExtent, this.maxExtent);
    }
    get currentExtent() {
      return this[_currentExtent].value;
    }
    get additionalMinExtent() {
      return this.isAtMin ? 0.0 : 1.0;
    }
    get additionalMaxExtent() {
      return this.isAtMax ? 0.0 : 1.0;
    }
    addPixelDelta(delta, context) {
      if (this.availablePixels === 0) {
        return;
      }
      this.currentExtent = this.currentExtent + delta / this.availablePixels * this.maxExtent;
      new draggable_scrollable_sheet.DraggableScrollableNotification.new({minExtent: this.minExtent, maxExtent: this.maxExtent, extent: this.currentExtent, initialExtent: this.initialExtent, context: context}).dispatch(context);
    }
  };
  (draggable_scrollable_sheet._DraggableSheetExtent.new = function(opts) {
    let t0;
    let minExtent = opts && 'minExtent' in opts ? opts.minExtent : null;
    let maxExtent = opts && 'maxExtent' in opts ? opts.maxExtent : null;
    let initialExtent = opts && 'initialExtent' in opts ? opts.initialExtent : null;
    let listener = opts && 'listener' in opts ? opts.listener : null;
    this.minExtent = minExtent;
    this.maxExtent = maxExtent;
    this.initialExtent = initialExtent;
    if (!(minExtent !== null)) dart.assertFailed(null, I[0], 245, 15, "minExtent != null");
    if (!(maxExtent !== null)) dart.assertFailed(null, I[0], 246, 15, "maxExtent != null");
    if (!(initialExtent !== null)) dart.assertFailed(null, I[0], 247, 15, "initialExtent != null");
    if (!(minExtent >= 0)) dart.assertFailed(null, I[0], 248, 15, "minExtent >= 0");
    if (!(maxExtent <= 1)) dart.assertFailed(null, I[0], 249, 15, "maxExtent <= 1");
    if (!(minExtent <= initialExtent)) dart.assertFailed(null, I[0], 250, 15, "minExtent <= initialExtent");
    if (!(initialExtent <= maxExtent)) dart.assertFailed(null, I[0], 251, 15, "initialExtent <= maxExtent");
    this[_currentExtent] = (t0 = new (T.ValueNotifierOfdouble()).new(initialExtent), (() => {
      t0.addListener(listener);
      return t0;
    })());
    this.availablePixels = 1 / 0;
    ;
  }).prototype = draggable_scrollable_sheet._DraggableSheetExtent.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._DraggableSheetExtent);
  dart.addTypeCaches(draggable_scrollable_sheet._DraggableSheetExtent);
  dart.setMethodSignature(draggable_scrollable_sheet._DraggableSheetExtent, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet._DraggableSheetExtent.__proto__),
    addPixelDelta: dart.fnType(dart.void, [core.double, framework.BuildContext])
  }));
  dart.setGetterSignature(draggable_scrollable_sheet._DraggableSheetExtent, () => ({
    __proto__: dart.getGetters(draggable_scrollable_sheet._DraggableSheetExtent.__proto__),
    isAtMin: core.bool,
    isAtMax: core.bool,
    currentExtent: core.double,
    additionalMinExtent: core.double,
    additionalMaxExtent: core.double
  }));
  dart.setSetterSignature(draggable_scrollable_sheet._DraggableSheetExtent, () => ({
    __proto__: dart.getSetters(draggable_scrollable_sheet._DraggableSheetExtent.__proto__),
    currentExtent: core.double
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._DraggableSheetExtent, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet._DraggableSheetExtent, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet._DraggableSheetExtent.__proto__),
    minExtent: dart.finalFieldType(core.double),
    maxExtent: dart.finalFieldType(core.double),
    initialExtent: dart.finalFieldType(core.double),
    [_currentExtent]: dart.finalFieldType(change_notifier.ValueNotifier$(core.double)),
    availablePixels: dart.fieldType(core.double)
  }));
  var ___DraggableScrollableSheetState__scrollController = dart.privateName(draggable_scrollable_sheet, "_#_DraggableScrollableSheetState#_scrollController");
  var ___DraggableScrollableSheetState__extent = dart.privateName(draggable_scrollable_sheet, "_#_DraggableScrollableSheetState#_extent");
  var _scrollController = dart.privateName(draggable_scrollable_sheet, "_scrollController");
  var _extent = dart.privateName(draggable_scrollable_sheet, "_extent");
  var _setExtent = dart.privateName(draggable_scrollable_sheet, "_setExtent");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  draggable_scrollable_sheet._DraggableScrollableSheetState = class _DraggableScrollableSheetState extends framework.State$(draggable_scrollable_sheet.DraggableScrollableSheet) {
    get [_scrollController]() {
      let t0;
      t0 = this[___DraggableScrollableSheetState__scrollController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_scrollController")) : t0;
    }
    set [_scrollController](t0) {
      this[___DraggableScrollableSheetState__scrollController] = t0;
    }
    get [_extent]() {
      let t1;
      t1 = this[___DraggableScrollableSheetState__extent];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_extent")) : t1;
    }
    set [_extent](t1) {
      this[___DraggableScrollableSheetState__extent] = t1;
    }
    initState() {
      super.initState();
      this[_extent] = new draggable_scrollable_sheet._DraggableSheetExtent.new({minExtent: this.widget.minChildSize, maxExtent: this.widget.maxChildSize, initialExtent: this.widget.initialChildSize, listener: dart.bind(this, _setExtent)});
      this[_scrollController] = new draggable_scrollable_sheet._DraggableScrollableSheetScrollController.new({extent: this[_extent]});
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      if (draggable_scrollable_sheet._InheritedResetNotifier.shouldReset(this.context)) {
        if (this[_scrollController].offset !== 0.0) {
          this[_scrollController].animateTo(0.0, {duration: C[0] || CT.C0, curve: curves.Curves.linear});
        }
        this[_extent][_currentExtent].value = this[_extent].initialExtent;
      }
    }
    [_setExtent]() {
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          let t4, t3, t2;
          this[_extent].availablePixels = this.widget.maxChildSize * constraints.biggest.height;
          let sheet = new basic.FractionallySizedBox.new({heightFactor: this[_extent].currentExtent, child: (t2 = this.widget, t3 = context, t4 = this[_scrollController], t2.builder(t3, t4)), alignment: alignment.Alignment.bottomCenter, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
          return this.widget.expand ? new basic.SizedBox.expand({child: sheet, $creationLocationd_0dea112b090073317d4: C[6] || CT.C6}) : sheet;
        }, T.BuildContextAndBoxConstraintsToWidget()), $creationLocationd_0dea112b090073317d4: C[9] || CT.C9});
    }
    dispose() {
      this[_scrollController].dispose();
      super.dispose();
>>>>>>> AUg2
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text cursor action: " + state)])));
  };
<<<<<<< HEAD
  text_input._toTextPoint = function _toTextPoint(state, encoded) {
    if (!(state !== null)) dart.assertFailed("You must provide a state to set a new editing point.", I[1], 1140, 10, "state != null");
    if (!(encoded[$_get]("X") != null)) dart.assertFailed("You must provide a value for the horizontal location of the floating cursor.", I[1], 1141, 10, "encoded['X'] != null");
    if (!(encoded[$_get]("Y") != null)) dart.assertFailed("You must provide a value for the vertical location of the floating cursor.", I[1], 1142, 10, "encoded['Y'] != null");
    let offset = state === text_input.FloatingCursorDragState.Update ? new ui.Offset.new(core.double.as(encoded[$_get]("X")), core.double.as(encoded[$_get]("Y"))) : ui.Offset.zero;
    return new text_input.RawFloatingCursorPoint.new({offset: offset, state: state});
  };
  autofill.AutofillHints = class AutofillHints extends core.Object {};
  (autofill.AutofillHints.__ = function() {
    ;
  }).prototype = autofill.AutofillHints.prototype;
  dart.addTypeTests(autofill.AutofillHints);
  dart.addTypeCaches(autofill.AutofillHints);
  dart.setLibraryUri(autofill.AutofillHints, I[2]);
  dart.defineLazy(autofill.AutofillHints, {
    /*autofill.AutofillHints.addressCity*/get addressCity() {
      return "addressCity";
    },
    /*autofill.AutofillHints.addressCityAndState*/get addressCityAndState() {
      return "addressCityAndState";
    },
    /*autofill.AutofillHints.addressState*/get addressState() {
      return "addressState";
    },
    /*autofill.AutofillHints.birthday*/get birthday() {
      return "birthday";
    },
    /*autofill.AutofillHints.birthdayDay*/get birthdayDay() {
      return "birthdayDay";
    },
    /*autofill.AutofillHints.birthdayMonth*/get birthdayMonth() {
      return "birthdayMonth";
    },
    /*autofill.AutofillHints.birthdayYear*/get birthdayYear() {
      return "birthdayYear";
    },
    /*autofill.AutofillHints.countryCode*/get countryCode() {
      return "countryCode";
    },
    /*autofill.AutofillHints.countryName*/get countryName() {
      return "countryName";
    },
    /*autofill.AutofillHints.creditCardExpirationDate*/get creditCardExpirationDate() {
      return "creditCardExpirationDate";
    },
    /*autofill.AutofillHints.creditCardExpirationDay*/get creditCardExpirationDay() {
      return "creditCardExpirationDay";
    },
    /*autofill.AutofillHints.creditCardExpirationMonth*/get creditCardExpirationMonth() {
      return "creditCardExpirationMonth";
    },
    /*autofill.AutofillHints.creditCardExpirationYear*/get creditCardExpirationYear() {
      return "creditCardExpirationYear";
    },
    /*autofill.AutofillHints.creditCardFamilyName*/get creditCardFamilyName() {
      return "creditCardFamilyName";
    },
    /*autofill.AutofillHints.creditCardGivenName*/get creditCardGivenName() {
      return "creditCardGivenName";
    },
    /*autofill.AutofillHints.creditCardMiddleName*/get creditCardMiddleName() {
      return "creditCardMiddleName";
    },
    /*autofill.AutofillHints.creditCardName*/get creditCardName() {
      return "creditCardName";
    },
    /*autofill.AutofillHints.creditCardNumber*/get creditCardNumber() {
      return "creditCardNumber";
    },
    /*autofill.AutofillHints.creditCardSecurityCode*/get creditCardSecurityCode() {
      return "creditCardSecurityCode";
    },
    /*autofill.AutofillHints.creditCardType*/get creditCardType() {
      return "creditCardType";
    },
    /*autofill.AutofillHints.email*/get email() {
      return "email";
    },
    /*autofill.AutofillHints.familyName*/get familyName() {
      return "familyName";
    },
    /*autofill.AutofillHints.fullStreetAddress*/get fullStreetAddress() {
      return "fullStreetAddress";
    },
    /*autofill.AutofillHints.gender*/get gender() {
      return "gender";
    },
    /*autofill.AutofillHints.givenName*/get givenName() {
      return "givenName";
    },
    /*autofill.AutofillHints.impp*/get impp() {
      return "impp";
    },
    /*autofill.AutofillHints.jobTitle*/get jobTitle() {
      return "jobTitle";
    },
    /*autofill.AutofillHints.language*/get language() {
      return "language";
    },
    /*autofill.AutofillHints.location*/get location() {
      return "location";
    },
    /*autofill.AutofillHints.middleInitial*/get middleInitial() {
      return "middleInitial";
    },
    /*autofill.AutofillHints.middleName*/get middleName() {
      return "middleName";
    },
    /*autofill.AutofillHints.name_*/get name_() {
      return "name";
    },
    /*autofill.AutofillHints.namePrefix*/get namePrefix() {
      return "namePrefix";
    },
    /*autofill.AutofillHints.nameSuffix*/get nameSuffix() {
      return "nameSuffix";
    },
    /*autofill.AutofillHints.newPassword*/get newPassword() {
      return "newPassword";
    },
    /*autofill.AutofillHints.newUsername*/get newUsername() {
      return "newUsername";
    },
    /*autofill.AutofillHints.nickname*/get nickname() {
      return "nickname";
    },
    /*autofill.AutofillHints.oneTimeCode*/get oneTimeCode() {
      return "oneTimeCode";
    },
    /*autofill.AutofillHints.organizationName*/get organizationName() {
      return "organizationName";
    },
    /*autofill.AutofillHints.password*/get password() {
      return "password";
    },
    /*autofill.AutofillHints.photo*/get photo() {
      return "photo";
    },
    /*autofill.AutofillHints.postalAddress*/get postalAddress() {
      return "postalAddress";
    },
    /*autofill.AutofillHints.postalAddressExtended*/get postalAddressExtended() {
      return "postalAddressExtended";
    },
    /*autofill.AutofillHints.postalAddressExtendedPostalCode*/get postalAddressExtendedPostalCode() {
      return "postalAddressExtendedPostalCode";
    },
    /*autofill.AutofillHints.postalCode*/get postalCode() {
      return "postalCode";
    },
    /*autofill.AutofillHints.streetAddressLevel1*/get streetAddressLevel1() {
      return "streetAddressLevel1";
    },
    /*autofill.AutofillHints.streetAddressLevel2*/get streetAddressLevel2() {
      return "streetAddressLevel2";
    },
    /*autofill.AutofillHints.streetAddressLevel3*/get streetAddressLevel3() {
      return "streetAddressLevel3";
    },
    /*autofill.AutofillHints.streetAddressLevel4*/get streetAddressLevel4() {
      return "streetAddressLevel4";
    },
    /*autofill.AutofillHints.streetAddressLine1*/get streetAddressLine1() {
      return "streetAddressLine1";
    },
    /*autofill.AutofillHints.streetAddressLine2*/get streetAddressLine2() {
      return "streetAddressLine2";
    },
    /*autofill.AutofillHints.streetAddressLine3*/get streetAddressLine3() {
      return "streetAddressLine3";
    },
    /*autofill.AutofillHints.sublocality*/get sublocality() {
      return "sublocality";
    },
    /*autofill.AutofillHints.telephoneNumber*/get telephoneNumber() {
      return "telephoneNumber";
    },
    /*autofill.AutofillHints.telephoneNumberAreaCode*/get telephoneNumberAreaCode() {
      return "telephoneNumberAreaCode";
    },
    /*autofill.AutofillHints.telephoneNumberCountryCode*/get telephoneNumberCountryCode() {
      return "telephoneNumberCountryCode";
    },
    /*autofill.AutofillHints.telephoneNumberDevice*/get telephoneNumberDevice() {
      return "telephoneNumberDevice";
    },
    /*autofill.AutofillHints.telephoneNumberExtension*/get telephoneNumberExtension() {
      return "telephoneNumberExtension";
    },
    /*autofill.AutofillHints.telephoneNumberLocal*/get telephoneNumberLocal() {
      return "telephoneNumberLocal";
    },
    /*autofill.AutofillHints.telephoneNumberLocalPrefix*/get telephoneNumberLocalPrefix() {
      return "telephoneNumberLocalPrefix";
    },
    /*autofill.AutofillHints.telephoneNumberLocalSuffix*/get telephoneNumberLocalSuffix() {
      return "telephoneNumberLocalSuffix";
    },
    /*autofill.AutofillHints.telephoneNumberNational*/get telephoneNumberNational() {
      return "telephoneNumberNational";
    },
    /*autofill.AutofillHints.transactionAmount*/get transactionAmount() {
      return "transactionAmount";
    },
    /*autofill.AutofillHints.transactionCurrency*/get transactionCurrency() {
      return "transactionCurrency";
    },
    /*autofill.AutofillHints.url*/get url() {
      return "url";
    },
    /*autofill.AutofillHints.username*/get username() {
      return "username";
    }
  }, false);
  var uniqueIdentifier$ = dart.privateName(autofill, "AutofillConfiguration.uniqueIdentifier");
  var autofillHints$ = dart.privateName(autofill, "AutofillConfiguration.autofillHints");
  var currentEditingValue$ = dart.privateName(autofill, "AutofillConfiguration.currentEditingValue");
  autofill.AutofillConfiguration = class AutofillConfiguration extends core.Object {
    get uniqueIdentifier() {
      return this[uniqueIdentifier$];
    }
    set uniqueIdentifier(value) {
      super.uniqueIdentifier = value;
    }
    get autofillHints() {
      return this[autofillHints$];
    }
    set autofillHints(value) {
      super.autofillHints = value;
    }
    get currentEditingValue() {
      return this[currentEditingValue$];
    }
    set currentEditingValue(value) {
      super.currentEditingValue = value;
    }
    toJson() {
      if (!this.autofillHints[$isNotEmpty]) dart.assertFailed(null, I[3], 700, 12, "autofillHints.isNotEmpty");
      return new (T.IdentityMapOfString$dynamic()).from(["uniqueIdentifier", this.uniqueIdentifier, "hints", this.autofillHints, "editingValue", this.currentEditingValue.toJSON()]);
    }
  };
  (autofill.AutofillConfiguration.new = function(opts) {
    let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
    this[uniqueIdentifier$] = uniqueIdentifier;
    this[autofillHints$] = autofillHints;
    this[currentEditingValue$] = currentEditingValue;
    if (!(uniqueIdentifier !== null)) dart.assertFailed(null, I[3], 635, 15, "uniqueIdentifier != null");
    if (!(autofillHints !== null)) dart.assertFailed(null, I[3], 636, 15, "autofillHints != null");
    ;
  }).prototype = autofill.AutofillConfiguration.prototype;
  dart.addTypeTests(autofill.AutofillConfiguration);
  dart.addTypeCaches(autofill.AutofillConfiguration);
  dart.setMethodSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getMethods(autofill.AutofillConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(autofill.AutofillConfiguration, I[2]);
  dart.setFieldSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getFields(autofill.AutofillConfiguration.__proto__),
    uniqueIdentifier: dart.finalFieldType(core.String),
    autofillHints: dart.finalFieldType(core.List$(core.String)),
    currentEditingValue: dart.finalFieldType(text_input.TextEditingValue)
  }));
  autofill.AutofillClient = class AutofillClient extends core.Object {};
  (autofill.AutofillClient.new = function() {
    ;
  }).prototype = autofill.AutofillClient.prototype;
  dart.addTypeTests(autofill.AutofillClient);
  dart.addTypeCaches(autofill.AutofillClient);
  dart.setLibraryUri(autofill.AutofillClient, I[2]);
  autofill.AutofillScope = class AutofillScope extends core.Object {};
  (autofill.AutofillScope.new = function() {
    ;
  }).prototype = autofill.AutofillScope.prototype;
  dart.addTypeTests(autofill.AutofillScope);
  dart.addTypeCaches(autofill.AutofillScope);
  dart.setLibraryUri(autofill.AutofillScope, I[2]);
  autofill._AutofillScopeTextInputConfiguration = class _AutofillScopeTextInputConfiguration extends text_input.TextInputConfiguration {
    toJson() {
      let result = super.toJson();
      result[$_set]("fields", this.allConfigurations[$map](T.MapOfString$dynamic(), dart.fn(configuration => configuration.toJson(), T.TextInputConfigurationToMapOfString$dynamic()))[$toList]({growable: false}));
      return result;
    }
  };
  (autofill._AutofillScopeTextInputConfiguration.new = function(opts) {
    let allConfigurations = opts && 'allConfigurations' in opts ? opts.allConfigurations : null;
    let currentClientConfiguration = opts && 'currentClientConfiguration' in opts ? opts.currentClientConfiguration : null;
    this.allConfigurations = allConfigurations;
    if (!(allConfigurations !== null)) dart.assertFailed(null, I[3], 772, 15, "allConfigurations != null");
    if (!(currentClientConfiguration !== null)) dart.assertFailed(null, I[3], 773, 15, "currentClientConfiguration != null");
    autofill._AutofillScopeTextInputConfiguration.__proto__.new.call(this, {inputType: currentClientConfiguration.inputType, obscureText: currentClientConfiguration.obscureText, autocorrect: currentClientConfiguration.autocorrect, smartDashesType: currentClientConfiguration.smartDashesType, smartQuotesType: currentClientConfiguration.smartQuotesType, enableSuggestions: currentClientConfiguration.enableSuggestions, inputAction: currentClientConfiguration.inputAction, textCapitalization: currentClientConfiguration.textCapitalization, keyboardAppearance: currentClientConfiguration.keyboardAppearance, actionLabel: currentClientConfiguration.actionLabel, autofillConfiguration: currentClientConfiguration.autofillConfiguration});
    ;
  }).prototype = autofill._AutofillScopeTextInputConfiguration.prototype;
  dart.addTypeTests(autofill._AutofillScopeTextInputConfiguration);
  dart.addTypeCaches(autofill._AutofillScopeTextInputConfiguration);
  dart.setLibraryUri(autofill._AutofillScopeTextInputConfiguration, I[2]);
  dart.setFieldSignature(autofill._AutofillScopeTextInputConfiguration, () => ({
    __proto__: dart.getFields(autofill._AutofillScopeTextInputConfiguration.__proto__),
    allConfigurations: dart.finalFieldType(core.Iterable$(text_input.TextInputConfiguration))
  }));
  autofill.AutofillScopeMixin = class AutofillScopeMixin extends core.Object {};
  autofill.AutofillScopeMixin[dart.mixinOn] = Object => class AutofillScopeMixin extends Object {
    attach(trigger, configuration) {
      if (!(trigger !== null)) dart.assertFailed(null, I[3], 805, 12, "trigger != null");
      if (!!this.autofillClients[$any](dart.fn(client => client.textInputConfiguration.autofillConfiguration == null, T.AutofillClientTobool()))) dart.assertFailed("Every client in AutofillScope.autofillClients must enable autofill", I[3], 807, 7, "!autofillClients.any((AutofillClient client) => client.textInputConfiguration.autofillConfiguration == null)");
      let inputConfiguration = new autofill._AutofillScopeTextInputConfiguration.new({allConfigurations: this.autofillClients[$map](text_input.TextInputConfiguration, dart.fn(client => client.textInputConfiguration, T.AutofillClientToTextInputConfiguration())), currentClientConfiguration: configuration});
      return text_input.TextInput.attach(trigger, inputConfiguration);
    }
  };
  (autofill.AutofillScopeMixin[dart.mixinNew] = function() {
  }).prototype = autofill.AutofillScopeMixin.prototype;
  dart.addTypeTests(autofill.AutofillScopeMixin);
  dart.addTypeCaches(autofill.AutofillScopeMixin);
  autofill.AutofillScopeMixin[dart.implements] = () => [autofill.AutofillScope, core.Object];
  dart.setMethodSignature(autofill.AutofillScopeMixin, () => ({
    __proto__: dart.getMethods(autofill.AutofillScopeMixin.__proto__),
    attach: dart.fnType(text_input.TextInputConnection, [text_input.TextInputClient, text_input.TextInputConfiguration])
  }));
  dart.setLibraryUri(autofill.AutofillScopeMixin, I[2]);
  dart.trackLibraries("packages/flutter/src/services/text_input.dart", {
    "package:flutter/src/services/text_input.dart": text_input,
    "package:flutter/src/services/autofill.dart": autofill
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_input.dart","autofill.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/services/text_input.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_input: text_input,
    src__services__autofill: autofill
  };
}));

//# sourceMappingURL=text_input.dart.lib.js.map
=======
  (draggable_scrollable_sheet._DraggableScrollableSheetState.new = function() {
    this[___DraggableScrollableSheetState__scrollController] = null;
    this[___DraggableScrollableSheetState__extent] = null;
    draggable_scrollable_sheet._DraggableScrollableSheetState.__proto__.new.call(this);
    ;
  }).prototype = draggable_scrollable_sheet._DraggableScrollableSheetState.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._DraggableScrollableSheetState);
  dart.addTypeCaches(draggable_scrollable_sheet._DraggableScrollableSheetState);
  dart.setMethodSignature(draggable_scrollable_sheet._DraggableScrollableSheetState, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet._DraggableScrollableSheetState.__proto__),
    [_setExtent]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(draggable_scrollable_sheet._DraggableScrollableSheetState, () => ({
    __proto__: dart.getGetters(draggable_scrollable_sheet._DraggableScrollableSheetState.__proto__),
    [_scrollController]: draggable_scrollable_sheet._DraggableScrollableSheetScrollController,
    [_extent]: draggable_scrollable_sheet._DraggableSheetExtent
  }));
  dart.setSetterSignature(draggable_scrollable_sheet._DraggableScrollableSheetState, () => ({
    __proto__: dart.getSetters(draggable_scrollable_sheet._DraggableScrollableSheetState.__proto__),
    [_scrollController]: draggable_scrollable_sheet._DraggableScrollableSheetScrollController,
    [_extent]: draggable_scrollable_sheet._DraggableSheetExtent
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._DraggableScrollableSheetState, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet._DraggableScrollableSheetState, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet._DraggableScrollableSheetState.__proto__),
    [___DraggableScrollableSheetState__scrollController]: dart.fieldType(dart.nullable(draggable_scrollable_sheet._DraggableScrollableSheetScrollController)),
    [___DraggableScrollableSheetState__extent]: dart.fieldType(dart.nullable(draggable_scrollable_sheet._DraggableSheetExtent))
  }));
  draggable_scrollable_sheet._DraggableScrollableSheetScrollController = class _DraggableScrollableSheetScrollController extends scroll_controller.ScrollController {
    createScrollPosition(physics, context, oldPosition) {
      return new draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.new({physics: physics, context: context, oldPosition: oldPosition, extent: this.extent});
    }
    debugFillDescription(description) {
      super.debugFillDescription(description);
      description[$add]("extent: " + dart.str(this.extent));
    }
  };
  (draggable_scrollable_sheet._DraggableScrollableSheetScrollController.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let extent = opts && 'extent' in opts ? opts.extent : null;
    this.extent = extent;
    if (!(extent !== null)) dart.assertFailed(null, I[0], 372, 15, "extent != null");
    draggable_scrollable_sheet._DraggableScrollableSheetScrollController.__proto__.new.call(this, {debugLabel: debugLabel, initialScrollOffset: initialScrollOffset});
    ;
  }).prototype = draggable_scrollable_sheet._DraggableScrollableSheetScrollController.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._DraggableScrollableSheetScrollController);
  dart.addTypeCaches(draggable_scrollable_sheet._DraggableScrollableSheetScrollController);
  dart.setMethodSignature(draggable_scrollable_sheet._DraggableScrollableSheetScrollController, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet._DraggableScrollableSheetScrollController.__proto__),
    createScrollPosition: dart.fnType(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition, [scroll_physics.ScrollPhysics, scroll_context.ScrollContext, dart.nullable(scroll_position.ScrollPosition)])
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._DraggableScrollableSheetScrollController, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet._DraggableScrollableSheetScrollController, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet._DraggableScrollableSheetScrollController.__proto__),
    extent: dart.finalFieldType(draggable_scrollable_sheet._DraggableSheetExtent)
  }));
  var _dragCancelCallback = dart.privateName(draggable_scrollable_sheet, "_dragCancelCallback");
  draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition = class _DraggableScrollableSheetScrollPosition extends scroll_position_with_single_context.ScrollPositionWithSingleContext {
    get listShouldScroll() {
      return this.pixels > 0.0;
    }
    applyContentDimensions(minScrollExtent, maxScrollExtent) {
      return super.applyContentDimensions(minScrollExtent - this.extent.additionalMinExtent, maxScrollExtent + this.extent.additionalMaxExtent);
    }
    applyUserOffset(delta) {
      if (!this.listShouldScroll && (!(this.extent.isAtMin || this.extent.isAtMax) || this.extent.isAtMin && delta < 0 || this.extent.isAtMax && delta > 0)) {
        this.extent.addPixelDelta(-delta, dart.nullCheck(this.context.notificationContext));
      } else {
        super.applyUserOffset(delta);
      }
    }
    goBallistic(velocity) {
      let t2, t2$;
      if (velocity === 0.0 || velocity < 0.0 && this.listShouldScroll || velocity > 0.0 && this.extent.isAtMax) {
        super.goBallistic(velocity);
        return;
      }
      t2 = this[_dragCancelCallback];
      t2 == null ? null : t2();
      this[_dragCancelCallback] = null;
      let simulation = new scroll_simulation.ClampingScrollSimulation.new({position: this.extent.currentExtent, velocity: velocity, tolerance: this.physics.tolerance});
      let ballisticController = new animation_controller.AnimationController.unbounded({debugLabel: object.objectRuntimeType(this, "_DraggableScrollableSheetPosition"), vsync: this.context.vsync});
      let lastDelta = 0.0;
      const _tick = () => {
        let delta = ballisticController.value - lastDelta;
        lastDelta = ballisticController.value;
        this.extent.addPixelDelta(delta, dart.nullCheck(this.context.notificationContext));
        if (velocity > 0 && this.extent.isAtMax || velocity < 0 && this.extent.isAtMin) {
          velocity = ballisticController.velocity + this.physics.tolerance.velocity * ballisticController.velocity[$sign];
          super.goBallistic(velocity);
          ballisticController.stop();
        } else if (ballisticController.isCompleted) {
          super.goBallistic(0.0);
        }
      };
      dart.fn(_tick, T.VoidTovoid());
      t2$ = ballisticController;
      (() => {
        t2$.addListener(_tick);
        t2$.animateWith(simulation).whenCompleteOrCancel(dart.bind(ballisticController, 'dispose'));
        return t2$;
      })();
    }
    drag(details, dragCancelCallback) {
      this[_dragCancelCallback] = dragCancelCallback;
      return super.drag(details, dragCancelCallback);
    }
  };
  (draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.new = function(opts) {
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let initialPixels = opts && 'initialPixels' in opts ? opts.initialPixels : 0;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let extent = opts && 'extent' in opts ? opts.extent : null;
    this[_dragCancelCallback] = null;
    this.extent = extent;
    if (!(extent !== null)) dart.assertFailed(null, I[0], 423, 16, "extent != null");
    draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.__proto__.new.call(this, {physics: physics, context: context, initialPixels: initialPixels, keepScrollOffset: keepScrollOffset, oldPosition: oldPosition, debugLabel: debugLabel});
    ;
  }).prototype = draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition);
  dart.addTypeCaches(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition);
  dart.setGetterSignature(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition, () => ({
    __proto__: dart.getGetters(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.__proto__),
    listShouldScroll: core.bool
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet._DraggableScrollableSheetScrollPosition.__proto__),
    [_dragCancelCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    extent: dart.finalFieldType(draggable_scrollable_sheet._DraggableSheetExtent)
  }));
  var child$ = dart.privateName(draggable_scrollable_sheet, "DraggableScrollableActuator.child");
  var _notifier = dart.privateName(draggable_scrollable_sheet, "_notifier");
  var _sendReset = dart.privateName(draggable_scrollable_sheet, "_sendReset");
  draggable_scrollable_sheet.DraggableScrollableActuator = class DraggableScrollableActuator extends framework.StatelessWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    static reset(context) {
      let notifier = context.dependOnInheritedWidgetOfExactType(draggable_scrollable_sheet._InheritedResetNotifier);
      if (notifier == null) {
        return false;
      }
      return notifier[_sendReset]();
    }
    build(context) {
      return new draggable_scrollable_sheet._InheritedResetNotifier.new({child: this.child, notifier: this[_notifier], $creationLocationd_0dea112b090073317d4: C[12] || CT.C12});
    }
  };
  (draggable_scrollable_sheet.DraggableScrollableActuator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[_notifier] = new draggable_scrollable_sheet._ResetNotifier.new();
    this[child$] = child;
    draggable_scrollable_sheet.DraggableScrollableActuator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = draggable_scrollable_sheet.DraggableScrollableActuator.prototype;
  dart.addTypeTests(draggable_scrollable_sheet.DraggableScrollableActuator);
  dart.addTypeCaches(draggable_scrollable_sheet.DraggableScrollableActuator);
  dart.setMethodSignature(draggable_scrollable_sheet.DraggableScrollableActuator, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet.DraggableScrollableActuator.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(draggable_scrollable_sheet.DraggableScrollableActuator, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet.DraggableScrollableActuator, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet.DraggableScrollableActuator.__proto__),
    child: dart.finalFieldType(framework.Widget),
    [_notifier]: dart.finalFieldType(draggable_scrollable_sheet._ResetNotifier)
  }));
  var _wasCalled = dart.privateName(draggable_scrollable_sheet, "_wasCalled");
  draggable_scrollable_sheet._ResetNotifier = class _ResetNotifier extends change_notifier.ChangeNotifier {
    sendReset() {
      if (!this.hasListeners) {
        return false;
      }
      this[_wasCalled] = true;
      this.notifyListeners();
      return true;
    }
  };
  (draggable_scrollable_sheet._ResetNotifier.new = function() {
    this[_wasCalled] = false;
    draggable_scrollable_sheet._ResetNotifier.__proto__.new.call(this);
    ;
  }).prototype = draggable_scrollable_sheet._ResetNotifier.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._ResetNotifier);
  dart.addTypeCaches(draggable_scrollable_sheet._ResetNotifier);
  dart.setMethodSignature(draggable_scrollable_sheet._ResetNotifier, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet._ResetNotifier.__proto__),
    sendReset: dart.fnType(core.bool, [])
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._ResetNotifier, I[1]);
  dart.setFieldSignature(draggable_scrollable_sheet._ResetNotifier, () => ({
    __proto__: dart.getFields(draggable_scrollable_sheet._ResetNotifier.__proto__),
    [_wasCalled]: dart.fieldType(core.bool)
  }));
  draggable_scrollable_sheet._InheritedResetNotifier = class _InheritedResetNotifier extends inherited_notifier.InheritedNotifier$(draggable_scrollable_sheet._ResetNotifier) {
    [_sendReset]() {
      return dart.nullCheck(this.notifier).sendReset();
    }
    static shouldReset(context) {
      let widget = context.dependOnInheritedWidgetOfExactType(draggable_scrollable_sheet._InheritedResetNotifier);
      if (widget == null) {
        return false;
      }
      if (!draggable_scrollable_sheet._InheritedResetNotifier.is(widget)) dart.assertFailed(null, I[0], 604, 12, "widget is _InheritedResetNotifier");
      let inheritedNotifier = draggable_scrollable_sheet._InheritedResetNotifier.as(widget);
      let wasCalled = dart.nullCheck(inheritedNotifier.notifier)[_wasCalled];
      dart.nullCheck(inheritedNotifier.notifier)[_wasCalled] = false;
      return wasCalled;
    }
  };
  (draggable_scrollable_sheet._InheritedResetNotifier.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let notifier = opts && 'notifier' in opts ? opts.notifier : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    draggable_scrollable_sheet._InheritedResetNotifier.__proto__.new.call(this, {key: key, child: child, notifier: notifier, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = draggable_scrollable_sheet._InheritedResetNotifier.prototype;
  dart.addTypeTests(draggable_scrollable_sheet._InheritedResetNotifier);
  dart.addTypeCaches(draggable_scrollable_sheet._InheritedResetNotifier);
  dart.setMethodSignature(draggable_scrollable_sheet._InheritedResetNotifier, () => ({
    __proto__: dart.getMethods(draggable_scrollable_sheet._InheritedResetNotifier.__proto__),
    [_sendReset]: dart.fnType(core.bool, [])
  }));
  dart.setLibraryUri(draggable_scrollable_sheet._InheritedResetNotifier, I[1]);
  dart.trackLibraries("packages/flutter/src/widgets/draggable_scrollable_sheet.dart", {
    "package:flutter/src/widgets/draggable_scrollable_sheet.dart": draggable_scrollable_sheet
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["draggable_scrollable_sheet.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/draggable_scrollable_sheet.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__draggable_scrollable_sheet: draggable_scrollable_sheet
  };
}));

//# sourceMappingURL=draggable_scrollable_sheet.dart.lib.js.map
>>>>>>> AUg2
