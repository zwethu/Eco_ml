<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/stack_frame.dart'], (function load__packages__flutter__src__foundation__debug_dart(dart_sdk, packages__flutter__src__foundation__print$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__stack_frame$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const object$ = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const stack_frame = packages__flutter__src__foundation__stack_frame$46dart.src__foundation__stack_frame;
  var debug = Object.create(dart.library);
  var diagnostics$ = Object.create(dart.library);
  var assertions = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $toStringAsPrecision = dartx.toStringAsPrecision;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $times = dartx['*'];
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $clear = dartx.clear;
  var $_get = dartx._get;
  var $substring = dartx.substring;
  var $split = dartx.split;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $add = dartx.add;
  var $trimRight = dartx.trimRight;
  var $endsWith = dartx.endsWith;
  var $toUpperCase = dartx.toUpperCase;
  var $contains = dartx.contains;
  var $where = dartx.where;
  var $take = dartx.take;
  var $toList = dartx.toList;
  var $first = dartx.first;
  var $_set = dartx._set;
  var $runtimeType = dartx.runtimeType;
  var $entries = dartx.entries;
  var $map = dartx.map;
  var $toString = dartx.toString;
  var $isFinite = dartx.isFinite;
  var $replaceAll = dartx.replaceAll;
  var $clamp = dartx.clamp;
  var $join = dartx.join;
  var $values = dartx.values;
  var $any = dartx.any;
  var $hashCode = dartx.hashCode;
  var $toUnsigned = dartx.toUnsigned;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $indexOf = dartx.indexOf;
  var $allMatches = dartx.allMatches;
  var $startsWith = dartx.startsWith;
  var $skip = dartx.skip;
  var $setRange = dartx.setRange;
  var $lastIndexOf = dartx.lastIndexOf;
  var $trimLeft = dartx.trimLeft;
  var $cast = dartx.cast;
  var $firstWhere = dartx.firstWhere;
  var $skipWhile = dartx.skipWhile;
  var $forEach = dartx.forEach;
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $update = dartx.update;
  var $removeAt = dartx.removeAt;
  var $sort = dartx.sort;
  var $single = dartx.single;
  var $whereType = dartx.whereType;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN__Tovoid: () => (T$.StringN__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN()], {wrapWidth: T$.intN()}, {})))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T$.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    intTobool: () => (T$.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    SyncIterableOfString: () => (T$.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    DiagnosticsNodeTovoid: () => (T$.DiagnosticsNodeTovoid = dart.constFn(dart.fnType(dart.void, [diagnostics$.DiagnosticsNode])))(),
    DiagnosticsNodeTobool: () => (T$.DiagnosticsNodeTobool = dart.constFn(dart.fnType(core.bool, [diagnostics$.DiagnosticsNode])))(),
    DiagnosticsPropertyOfvoid: () => (T$.DiagnosticsPropertyOfvoid = dart.constFn(diagnostics$.DiagnosticsProperty$(dart.void)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    DiagnosticsNodeToMapOfString$ObjectN: () => (T$.DiagnosticsNodeToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [diagnostics$.DiagnosticsNode])))(),
    DiagnosticableNodeOfDiagnosticable: () => (T$.DiagnosticableNodeOfDiagnosticable = dart.constFn(diagnostics$.DiagnosticableNode$(diagnostics$.Diagnosticable)))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics$.DiagnosticsNode)))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    DiagnosticsNodeN: () => (T$.DiagnosticsNodeN = dart.constFn(dart.nullable(diagnostics$.DiagnosticsNode)))(),
    DiagnosticsNodeNTobool: () => (T$.DiagnosticsNodeNTobool = dart.constFn(dart.fnType(core.bool, [T$.DiagnosticsNodeN()])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    StackFrameTobool: () => (T$.StackFrameTobool = dart.constFn(dart.fnType(core.bool, [stack_frame.StackFrame])))(),
    IterableOfDiagnosticsNode: () => (T$.IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics$.DiagnosticsNode)))(),
    IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode: () => (T$.IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T$.IterableOfDiagnosticsNode(), [T$.IterableOfDiagnosticsNode()])))(),
    JSArrayOfIterableOfDiagnosticsNodeToIterableOfDiagnosticsNode: () => (T$.JSArrayOfIterableOfDiagnosticsNodeToIterableOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(T$.IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode())))(),
    DiagnosticsPropertyOfFlutterError: () => (T$.DiagnosticsPropertyOfFlutterError = dart.constFn(diagnostics$.DiagnosticsProperty$(assertions.FlutterError)))(),
    DiagnosticsPropertyOfDiagnosticsNode: () => (T$.DiagnosticsPropertyOfDiagnosticsNode = dart.constFn(diagnostics$.DiagnosticsProperty$(diagnostics$.DiagnosticsNode)))(),
    StringToErrorDescription: () => (T$.StringToErrorDescription = dart.constFn(dart.fnType(assertions.ErrorDescription, [core.String])))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ListOfStringN: () => (T$.ListOfStringN = dart.constFn(core.List$(T$.StringN())))(),
    DiagnosticsNodeToString: () => (T$.DiagnosticsNodeToString = dart.constFn(dart.fnType(core.String, [diagnostics$.DiagnosticsNode])))(),
    FlutterErrorDetailsTovoid: () => (T$.FlutterErrorDetailsTovoid = dart.constFn(dart.fnType(dart.void, [assertions.FlutterErrorDetails])))(),
    StackTraceToStackTrace: () => (T$.StackTraceToStackTrace = dart.constFn(dart.fnType(core.StackTrace, [core.StackTrace])))(),
    FlutterErrorDetails__Tovoid: () => (T$.FlutterErrorDetails__Tovoid = dart.constFn(dart.fnType(dart.void, [assertions.FlutterErrorDetails], {forceReport: core.bool}, {})))(),
    JSArrayOfStackFilter: () => (T$.JSArrayOfStackFilter = dart.constFn(_interceptors.JSArray$(assertions.StackFilter)))(),
    IterableOfString: () => (T$.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    IterableOfStringToIterableOfString: () => (T$.IterableOfStringToIterableOfString = dart.constFn(dart.fnType(T$.IterableOfString(), [T$.IterableOfString()])))(),
    StringToDiagnosticsNode: () => (T$.StringToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics$.DiagnosticsNode, [core.String])))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))()
=======
define(['dart_sdk', 'packages/flutter/src/foundation/serialization.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/licenses.dart', 'packages/flutter/src/scheduler/priority.dart', 'packages/flutter/src/foundation/_isolates_web.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/foundation/consolidate_response.dart'], (function load__packages__flutter__src__services__system_channels_dart(dart_sdk, packages__flutter__src__foundation__serialization$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation__licenses$46dart, packages__flutter__src__scheduler__priority$46dart, packages__flutter__src__foundation___isolates_web$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__foundation__consolidate_response$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const serialization = packages__flutter__src__foundation__serialization$46dart.src__foundation__serialization;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const licenses$ = packages__flutter__src__foundation__licenses$46dart.src__foundation__licenses;
  const priority = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  const isolates = packages__flutter__src__foundation___isolates_web$46dart.src__foundation__isolates;
  const binding$ = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const consolidate_response = packages__flutter__src__foundation__consolidate_response$46dart.src__foundation__consolidate_response;
  var system_channels = Object.create(dart.library);
  var message_codecs = Object.create(dart.library);
  var platform_channel = Object.create(dart.library);
  var message_codec = Object.create(dart.library);
  var restoration = Object.create(dart.library);
  var binary_messenger = Object.create(dart.library);
  var binding$0 = Object.create(dart.library);
  var asset_bundle = Object.create(dart.library);
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asUint8List = dartx.asUint8List;
  var $asByteData = dartx.asByteData;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $forEach = dartx.forEach;
  var $_set = dartx._set;
  var $cast = dartx.cast;
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $putIfAbsent = dartx.putIfAbsent;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $entries = dartx.entries;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $removeLast = dartx.removeLast;
  var $values = dartx.values;
  var $expand = dartx.expand;
  var $followedBy = dartx.followedBy;
  var $toList = dartx.toList;
  var $clear = dartx.clear;
  var $times = dartx['*'];
  var $split = dartx.split;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    BasicMessageChannelOfStringN: () => (T$.BasicMessageChannelOfStringN = dart.constFn(platform_channel.BasicMessageChannel$(T$.StringN())))(),
    ByteDataN: () => (T$.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), T$.ObjectN()])))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    FutureOfByteDataN: () => (T$.FutureOfByteDataN = dart.constFn(async.Future$(T$.ByteDataN())))(),
    ByteDataNToFutureOfByteDataN: () => (T$.ByteDataNToFutureOfByteDataN = dart.constFn(dart.fnType(T$.FutureOfByteDataN(), [T$.ByteDataN()])))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    VoidToStreamController: () => (T$.VoidToStreamController = dart.constFn(dart.fnType(async.StreamController, [])))(),
    StreamControllerTodynamic: () => (T$.StreamControllerTodynamic = dart.constFn(dart.fnType(dart.dynamic, [async.StreamController])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    ByteDataNToFutureOfNull: () => (T$.ByteDataNToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T$.ByteDataN()])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ExpandoOfObject: () => (T$.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashSetOfRestorationBucket: () => (T$.LinkedHashSetOfRestorationBucket = dart.constFn(collection.LinkedHashSet$(restoration.RestorationBucket)))(),
    RestorationBucketN: () => (T$.RestorationBucketN = dart.constFn(dart.nullable(restoration.RestorationBucket)))(),
    SynchronousFutureOfRestorationBucketN: () => (T$.SynchronousFutureOfRestorationBucketN = dart.constFn(synchronous_future.SynchronousFuture$(T$.RestorationBucketN())))(),
    CompleterOfRestorationBucketN: () => (T$.CompleterOfRestorationBucketN = dart.constFn(async.Completer$(T$.RestorationBucketN())))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfString$RestorationBucket: () => (T$.IdentityMapOfString$RestorationBucket = dart.constFn(_js_helper.IdentityMap$(core.String, restoration.RestorationBucket)))(),
    ListOfRestorationBucket: () => (T$.ListOfRestorationBucket = dart.constFn(core.List$(restoration.RestorationBucket)))(),
    IdentityMapOfString$ListOfRestorationBucket: () => (T$.IdentityMapOfString$ListOfRestorationBucket = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfRestorationBucket())))(),
    VoidToMapOfObjectN$ObjectN: () => (T$.VoidToMapOfObjectN$ObjectN = dart.constFn(dart.fnType(T$.MapOfObjectN$ObjectN(), [])))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    RestorationBucketToErrorDescription: () => (T$.RestorationBucketToErrorDescription = dart.constFn(dart.fnType(assertions.ErrorDescription, [restoration.RestorationBucket])))(),
    JSArrayOfRestorationBucket: () => (T$.JSArrayOfRestorationBucket = dart.constFn(_interceptors.JSArray$(restoration.RestorationBucket)))(),
    VoidToListOfRestorationBucket: () => (T$.VoidToListOfRestorationBucket = dart.constFn(dart.fnType(T$.ListOfRestorationBucket(), [])))(),
    ListOfRestorationBucketToListOfRestorationBucket: () => (T$.ListOfRestorationBucketToListOfRestorationBucket = dart.constFn(dart.fnType(T$.ListOfRestorationBucket(), [T$.ListOfRestorationBucket()])))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [dart.dynamic])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    CompleterOfString: () => (T$.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    ListOfLicenseEntry: () => (T$.ListOfLicenseEntry = dart.constFn(core.List$(licenses$.LicenseEntry)))(),
    CompleterOfListOfLicenseEntry: () => (T$.CompleterOfListOfLicenseEntry = dart.constFn(async.Completer$(T$.ListOfLicenseEntry())))(),
    StringToListOfLicenseEntry: () => (T$.StringToListOfLicenseEntry = dart.constFn(dart.fnType(T$.ListOfLicenseEntry(), [core.String])))(),
    StreamOfLicenseEntry: () => (T$.StreamOfLicenseEntry = dart.constFn(async.Stream$(licenses$.LicenseEntry)))(),
    _AsyncStarImplOfLicenseEntry: () => (T$._AsyncStarImplOfLicenseEntry = dart.constFn(async._AsyncStarImpl$(licenses$.LicenseEntry)))(),
    JSArrayOfLicenseEntry: () => (T$.JSArrayOfLicenseEntry = dart.constFn(_interceptors.JSArray$(licenses$.LicenseEntry)))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    VoidToFutureOfString: () => (T$.VoidToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [])))(),
    StringToFutureOfvoid: () => (T$.StringToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String])))(),
    CompleterOfByteDataN: () => (T$.CompleterOfByteDataN = dart.constFn(async.Completer$(T$.ByteDataN())))(),
    ByteDataNTovoid: () => (T$.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ByteDataN()])))(),
    ByteDataNAndFnToFutureOfvoid: () => (T$.ByteDataNAndFnToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [T$.ByteDataN(), T$.ByteDataNTovoid()])))(),
    FutureNOfByteDataN: () => (T$.FutureNOfByteDataN = dart.constFn(dart.nullable(T$.FutureOfByteDataN())))(),
    ByteDataNToFutureNOfByteDataN: () => (T$.ByteDataNToFutureNOfByteDataN = dart.constFn(dart.fnType(T$.FutureNOfByteDataN(), [T$.ByteDataN()])))(),
    IdentityMapOfString$ByteDataNToFutureNOfByteDataN: () => (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ByteDataNToFutureNOfByteDataN())))(),
    ByteDataToString: () => (T$.ByteDataToString = dart.constFn(dart.fnType(core.String, [typed_data.ByteData])))(),
    IdentityMapOfString$FutureOfString: () => (T$.IdentityMapOfString$FutureOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.FutureOfString())))(),
    IdentityMapOfString$Future: () => (T$.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(core.String, async.Future)))()
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
<<<<<<< HEAD
    get C0() {
      return C[0] = dart.fn(print.debugPrintThrottled, T$.StringN__Tovoid());
    },
    get C1() {
      return C[1] = dart.constMap(core.String, core.String, ["mode", "basic"]);
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.hidden",
        index: 0
=======
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/navigation"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/platform"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C3() {
      return C[3] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.fine",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.debug",
        index: 2
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/textinput"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C5() {
      return C[5] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.warning",
        index: 4
=======
        __proto__: message_codecs.JSONMessageCodec.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[5] || CT.C5,
        [BasicMessageChannel_name]: "flutter/keyevent"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C7() {
      return C[7] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.hint",
        index: 5
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.summary",
        index: 6
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.error",
        index: 7
=======
        __proto__: message_codecs.StringCodec.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: T$.BasicMessageChannelOfStringN().prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[7] || CT.C7,
        [BasicMessageChannel_name]: "flutter/lifecycle"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[5] || CT.C5,
        [BasicMessageChannel_name]: "flutter/system"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C10() {
      return C[10] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [_name$]: "DiagnosticLevel.off",
        index: 8
      });
    },
    get C11() {
      return C[11] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10], diagnostics$.DiagnosticLevel);
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.none",
        index: 0
=======
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[10] || CT.C10,
        [BasicMessageChannel_name]: "flutter/accessibility"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[10] || CT.C10
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/platform_views"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C13() {
      return C[13] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.sparse",
        index: 1
=======
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/skia"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C14() {
      return C[14] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.offstage",
        index: 2
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/mousecursor"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C15() {
      return C[15] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.dense",
        index: 3
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/restoration"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C16() {
      return C[16] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.transition",
        index: 4
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/deferredcomponent"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C17() {
      return C[17] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.error",
        index: 5
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/localization"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C18() {
      return C[18] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.whitespace",
        index: 6
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Message corrupted"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C19() {
      return C[19] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.flat",
        index: 7
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid method call"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C20() {
      return C[20] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.singleLine",
        index: 8
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Expected envelope, got nothing"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C21() {
      return C[21] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.errorProperty",
        index: 9
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid envelope"
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
      });
    },
    get C22() {
      return C[22] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.shallow",
        index: 10
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [_name$]: "DiagnosticsTreeStyle.truncateChildren",
        index: 11
      });
    },
    get C24() {
      return C[24] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23], diagnostics$.DiagnosticsTreeStyle);
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: diagnostics$._WordWrapParseMode.prototype,
        [_name$]: "_WordWrapParseMode.inSpace",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: diagnostics$._WordWrapParseMode.prototype,
        [_name$]: "_WordWrapParseMode.inWord",
        index: 1
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: diagnostics$._WordWrapParseMode.prototype,
        [_name$]: "_WordWrapParseMode.atBreak",
        index: 2
      });
    },
    get C28() {
      return C[28] = dart.constList([C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27], diagnostics$._WordWrapParseMode);
    },
    get C29() {
      return C[29] = dart.constList([], T$.MapOfString$ObjectN());
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: diagnostics$._NoDefaultValue.prototype
      });
    },
    get C31() {
      return C[31] = dart.constList([], diagnostics$.DiagnosticsNode);
    },
    get C32() {
      return C[32] = dart.constMap(core.String, T$.ObjectN(), []);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [method$]: "asynchronous suspension",
        [className$]: "",
        [$package$]: ""
      });
    },
    get C34() {
      return C[34] = dart.fn(assertions.FlutterError._defaultErrorHandler, T$.FlutterErrorDetailsTovoid());
    },
    get C35() {
      return C[35] = dart.fn(assertions.FlutterError._defaultStackTraceDemangler, T$.StackTraceToStackTrace());
    },
    get C36() {
      return C[36] = dart.fn(assertions.FlutterError.dumpErrorToConsole, T$.FlutterErrorDetails__Tovoid());
    },
    get C37() {
      return C[37] = dart.fn(assertions.FlutterError.defaultStackFilter, T$.IterableOfStringToIterableOfString());
    },
    get C38() {
      return C[38] = dart.fn(assertions.DiagnosticsStackTrace._createStackFrame, T$.StringToDiagnosticsNode());
    }
  }, false);
  var C = Array(39).fill(void 0);
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/foundation/debug.dart",
    "package:flutter/src/foundation/diagnostics.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/foundation/diagnostics.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/foundation/assertions.dart",
    "package:flutter/src/foundation/assertions.dart"
  ];
  debug.debugAssertAllFoundationVarsUnset = function debugAssertAllFoundationVarsUnset(reason, opts) {
    let debugPrintOverride = opts && 'debugPrintOverride' in opts ? opts.debugPrintOverride : C[0] || CT.C0;
    if (!dart.fn(() => {
      if (!print.debugPrint[$_equals](debugPrintOverride) || platform.debugDefaultTargetPlatformOverride != null || debug.debugDoublePrecision != null || debug.debugBrightnessOverride != null) dart.throw(assertions.FlutterError.new(reason));
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 25, 10, "() {\r\n    if (debugPrint != debugPrintOverride ||\r\n        debugDefaultTargetPlatformOverride != null ||\r\n        debugDoublePrecision != null ||\r\n        debugBrightnessOverride != null)\r\n      throw FlutterError(reason);\r\n    return true;\r\n  }()");
    return true;
  };
  debug.debugInstrumentAction = function debugInstrumentAction(T, description, action) {
    return async.async(T, function* debugInstrumentAction() {
      let t0;
      let instrument = false;
      if (!dart.fn(() => {
        instrument = debug.debugInstrumentationEnabled;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 56, 10, "() {\r\n    instrument = debugInstrumentationEnabled;\r\n    return true;\r\n  }()");
      if (instrument) {
        let stopwatch = (t0 = new core.Stopwatch.new(), (() => {
          t0.start();
          return t0;
        })());
        try {
          return yield action();
        } finally {
          stopwatch.stop();
          print.debugPrint("Action \"" + description + "\" took " + dart.str(stopwatch.elapsed));
        }
      } else {
        return action();
      }
    });
  };
  debug.debugFormatDouble = function debugFormatDouble(value) {
    if (value == null) {
      return "null";
    }
    if (debug.debugDoublePrecision != null) {
      return value[$toStringAsPrecision](dart.nullCheck(debug.debugDoublePrecision));
    }
    return value[$toStringAsFixed](1);
  };
  dart.defineLazy(debug, {
    /*debug.debugInstrumentationEnabled*/get debugInstrumentationEnabled() {
      return false;
    },
    set debugInstrumentationEnabled(_) {},
    /*debug.timelineArgumentsIndicatingLandmarkEvent*/get timelineArgumentsIndicatingLandmarkEvent() {
      return C[1] || CT.C1;
    },
    /*debug.debugDoublePrecision*/get debugDoublePrecision() {
      return null;
    },
    set debugDoublePrecision(_) {},
    /*debug.debugBrightnessOverride*/get debugBrightnessOverride() {
      return null;
    },
    set debugBrightnessOverride(_) {},
    /*debug.activeDevToolsServerAddress*/get activeDevToolsServerAddress() {
      return null;
    },
    set activeDevToolsServerAddress(_) {},
    /*debug.connectedVmServiceUri*/get connectedVmServiceUri() {
      return null;
    },
    set connectedVmServiceUri(_) {}
  }, false);
  var _name$ = dart.privateName(diagnostics$, "_name");
  diagnostics$.DiagnosticLevel = class DiagnosticLevel extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (diagnostics$.DiagnosticLevel.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = diagnostics$.DiagnosticLevel.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticLevel);
  dart.addTypeCaches(diagnostics$.DiagnosticLevel);
  dart.setLibraryUri(diagnostics$.DiagnosticLevel, I[1]);
  dart.setFieldSignature(diagnostics$.DiagnosticLevel, () => ({
    __proto__: dart.getFields(diagnostics$.DiagnosticLevel.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(diagnostics$.DiagnosticLevel, ['toString']);
  diagnostics$.DiagnosticLevel.hidden = C[2] || CT.C2;
  diagnostics$.DiagnosticLevel.fine = C[3] || CT.C3;
  diagnostics$.DiagnosticLevel.debug = C[4] || CT.C4;
  diagnostics$.DiagnosticLevel.info = C[5] || CT.C5;
  diagnostics$.DiagnosticLevel.warning = C[6] || CT.C6;
  diagnostics$.DiagnosticLevel.hint = C[7] || CT.C7;
  diagnostics$.DiagnosticLevel.summary = C[8] || CT.C8;
  diagnostics$.DiagnosticLevel.error = C[9] || CT.C9;
  diagnostics$.DiagnosticLevel.off = C[10] || CT.C10;
  diagnostics$.DiagnosticLevel.values = C[11] || CT.C11;
  diagnostics$.DiagnosticsTreeStyle = class DiagnosticsTreeStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (diagnostics$.DiagnosticsTreeStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = diagnostics$.DiagnosticsTreeStyle.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticsTreeStyle);
  dart.addTypeCaches(diagnostics$.DiagnosticsTreeStyle);
  dart.setLibraryUri(diagnostics$.DiagnosticsTreeStyle, I[1]);
  dart.setFieldSignature(diagnostics$.DiagnosticsTreeStyle, () => ({
    __proto__: dart.getFields(diagnostics$.DiagnosticsTreeStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(diagnostics$.DiagnosticsTreeStyle, ['toString']);
  diagnostics$.DiagnosticsTreeStyle.none = C[12] || CT.C12;
  diagnostics$.DiagnosticsTreeStyle.sparse = C[13] || CT.C13;
  diagnostics$.DiagnosticsTreeStyle.offstage = C[14] || CT.C14;
  diagnostics$.DiagnosticsTreeStyle.dense = C[15] || CT.C15;
  diagnostics$.DiagnosticsTreeStyle.transition = C[16] || CT.C16;
  diagnostics$.DiagnosticsTreeStyle.error = C[17] || CT.C17;
  diagnostics$.DiagnosticsTreeStyle.whitespace = C[18] || CT.C18;
  diagnostics$.DiagnosticsTreeStyle.flat = C[19] || CT.C19;
  diagnostics$.DiagnosticsTreeStyle.singleLine = C[20] || CT.C20;
  diagnostics$.DiagnosticsTreeStyle.errorProperty = C[21] || CT.C21;
  diagnostics$.DiagnosticsTreeStyle.shallow = C[22] || CT.C22;
  diagnostics$.DiagnosticsTreeStyle.truncateChildren = C[23] || CT.C23;
  diagnostics$.DiagnosticsTreeStyle.values = C[24] || CT.C24;
  var prefixLineOne$ = dart.privateName(diagnostics$, "TextTreeConfiguration.prefixLineOne");
  var suffixLineOne$ = dart.privateName(diagnostics$, "TextTreeConfiguration.suffixLineOne");
  var prefixOtherLines$ = dart.privateName(diagnostics$, "TextTreeConfiguration.prefixOtherLines");
  var prefixLastChildLineOne$ = dart.privateName(diagnostics$, "TextTreeConfiguration.prefixLastChildLineOne");
  var prefixOtherLinesRootNode$ = dart.privateName(diagnostics$, "TextTreeConfiguration.prefixOtherLinesRootNode");
  var propertyPrefixIfChildren$ = dart.privateName(diagnostics$, "TextTreeConfiguration.propertyPrefixIfChildren");
  var propertyPrefixNoChildren$ = dart.privateName(diagnostics$, "TextTreeConfiguration.propertyPrefixNoChildren");
  var linkCharacter$ = dart.privateName(diagnostics$, "TextTreeConfiguration.linkCharacter");
  var childLinkSpace = dart.privateName(diagnostics$, "TextTreeConfiguration.childLinkSpace");
  var lineBreak$ = dart.privateName(diagnostics$, "TextTreeConfiguration.lineBreak");
  var lineBreakProperties$ = dart.privateName(diagnostics$, "TextTreeConfiguration.lineBreakProperties");
  var beforeName$ = dart.privateName(diagnostics$, "TextTreeConfiguration.beforeName");
  var afterName$ = dart.privateName(diagnostics$, "TextTreeConfiguration.afterName");
  var afterDescriptionIfBody$ = dart.privateName(diagnostics$, "TextTreeConfiguration.afterDescriptionIfBody");
  var afterDescription$ = dart.privateName(diagnostics$, "TextTreeConfiguration.afterDescription");
  var beforeProperties$ = dart.privateName(diagnostics$, "TextTreeConfiguration.beforeProperties");
  var afterProperties$ = dart.privateName(diagnostics$, "TextTreeConfiguration.afterProperties");
  var mandatoryAfterProperties$ = dart.privateName(diagnostics$, "TextTreeConfiguration.mandatoryAfterProperties");
  var propertySeparator$ = dart.privateName(diagnostics$, "TextTreeConfiguration.propertySeparator");
  var bodyIndent$ = dart.privateName(diagnostics$, "TextTreeConfiguration.bodyIndent");
  var showChildren$ = dart.privateName(diagnostics$, "TextTreeConfiguration.showChildren");
  var addBlankLineIfNoChildren$ = dart.privateName(diagnostics$, "TextTreeConfiguration.addBlankLineIfNoChildren");
  var isNameOnOwnLine$ = dart.privateName(diagnostics$, "TextTreeConfiguration.isNameOnOwnLine");
  var footer$ = dart.privateName(diagnostics$, "TextTreeConfiguration.footer");
  var mandatoryFooter$ = dart.privateName(diagnostics$, "TextTreeConfiguration.mandatoryFooter");
  var isBlankLineBetweenPropertiesAndChildren$ = dart.privateName(diagnostics$, "TextTreeConfiguration.isBlankLineBetweenPropertiesAndChildren");
  diagnostics$.TextTreeConfiguration = class TextTreeConfiguration extends core.Object {
    get prefixLineOne() {
      return this[prefixLineOne$];
    }
    set prefixLineOne(value) {
      super.prefixLineOne = value;
    }
    get suffixLineOne() {
      return this[suffixLineOne$];
    }
    set suffixLineOne(value) {
      super.suffixLineOne = value;
    }
    get prefixOtherLines() {
      return this[prefixOtherLines$];
    }
    set prefixOtherLines(value) {
      super.prefixOtherLines = value;
    }
    get prefixLastChildLineOne() {
      return this[prefixLastChildLineOne$];
    }
    set prefixLastChildLineOne(value) {
      super.prefixLastChildLineOne = value;
    }
    get prefixOtherLinesRootNode() {
      return this[prefixOtherLinesRootNode$];
    }
    set prefixOtherLinesRootNode(value) {
      super.prefixOtherLinesRootNode = value;
    }
    get propertyPrefixIfChildren() {
      return this[propertyPrefixIfChildren$];
    }
    set propertyPrefixIfChildren(value) {
      super.propertyPrefixIfChildren = value;
    }
    get propertyPrefixNoChildren() {
      return this[propertyPrefixNoChildren$];
    }
    set propertyPrefixNoChildren(value) {
      super.propertyPrefixNoChildren = value;
    }
    get linkCharacter() {
      return this[linkCharacter$];
    }
    set linkCharacter(value) {
      super.linkCharacter = value;
    }
    get childLinkSpace() {
      return this[childLinkSpace];
    }
    set childLinkSpace(value) {
      super.childLinkSpace = value;
    }
    get lineBreak() {
      return this[lineBreak$];
    }
    set lineBreak(value) {
      super.lineBreak = value;
    }
    get lineBreakProperties() {
      return this[lineBreakProperties$];
    }
    set lineBreakProperties(value) {
      super.lineBreakProperties = value;
    }
    get beforeName() {
      return this[beforeName$];
    }
    set beforeName(value) {
      super.beforeName = value;
    }
    get afterName() {
      return this[afterName$];
    }
    set afterName(value) {
      super.afterName = value;
    }
    get afterDescriptionIfBody() {
      return this[afterDescriptionIfBody$];
    }
    set afterDescriptionIfBody(value) {
      super.afterDescriptionIfBody = value;
    }
    get afterDescription() {
      return this[afterDescription$];
    }
    set afterDescription(value) {
      super.afterDescription = value;
    }
    get beforeProperties() {
      return this[beforeProperties$];
    }
    set beforeProperties(value) {
      super.beforeProperties = value;
    }
    get afterProperties() {
      return this[afterProperties$];
    }
    set afterProperties(value) {
      super.afterProperties = value;
    }
    get mandatoryAfterProperties() {
      return this[mandatoryAfterProperties$];
    }
    set mandatoryAfterProperties(value) {
      super.mandatoryAfterProperties = value;
    }
    get propertySeparator() {
      return this[propertySeparator$];
    }
    set propertySeparator(value) {
      super.propertySeparator = value;
    }
    get bodyIndent() {
      return this[bodyIndent$];
    }
    set bodyIndent(value) {
      super.bodyIndent = value;
    }
    get showChildren() {
      return this[showChildren$];
    }
    set showChildren(value) {
      super.showChildren = value;
    }
    get addBlankLineIfNoChildren() {
      return this[addBlankLineIfNoChildren$];
    }
    set addBlankLineIfNoChildren(value) {
      super.addBlankLineIfNoChildren = value;
    }
    get isNameOnOwnLine() {
      return this[isNameOnOwnLine$];
    }
    set isNameOnOwnLine(value) {
      super.isNameOnOwnLine = value;
    }
    get footer() {
      return this[footer$];
    }
    set footer(value) {
      super.footer = value;
    }
    get mandatoryFooter() {
      return this[mandatoryFooter$];
    }
    set mandatoryFooter(value) {
      super.mandatoryFooter = value;
    }
    get isBlankLineBetweenPropertiesAndChildren() {
      return this[isBlankLineBetweenPropertiesAndChildren$];
    }
    set isBlankLineBetweenPropertiesAndChildren(value) {
      super.isBlankLineBetweenPropertiesAndChildren = value;
    }
  };
  (diagnostics$.TextTreeConfiguration.new = function(opts) {
    let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : null;
    let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
    let prefixLastChildLineOne = opts && 'prefixLastChildLineOne' in opts ? opts.prefixLastChildLineOne : null;
    let prefixOtherLinesRootNode = opts && 'prefixOtherLinesRootNode' in opts ? opts.prefixOtherLinesRootNode : null;
    let linkCharacter = opts && 'linkCharacter' in opts ? opts.linkCharacter : null;
    let propertyPrefixIfChildren = opts && 'propertyPrefixIfChildren' in opts ? opts.propertyPrefixIfChildren : null;
    let propertyPrefixNoChildren = opts && 'propertyPrefixNoChildren' in opts ? opts.propertyPrefixNoChildren : null;
    let lineBreak = opts && 'lineBreak' in opts ? opts.lineBreak : "\n";
    let lineBreakProperties = opts && 'lineBreakProperties' in opts ? opts.lineBreakProperties : true;
    let afterName = opts && 'afterName' in opts ? opts.afterName : ":";
    let afterDescriptionIfBody = opts && 'afterDescriptionIfBody' in opts ? opts.afterDescriptionIfBody : "";
    let afterDescription = opts && 'afterDescription' in opts ? opts.afterDescription : "";
    let beforeProperties = opts && 'beforeProperties' in opts ? opts.beforeProperties : "";
    let afterProperties = opts && 'afterProperties' in opts ? opts.afterProperties : "";
    let mandatoryAfterProperties = opts && 'mandatoryAfterProperties' in opts ? opts.mandatoryAfterProperties : "";
    let propertySeparator = opts && 'propertySeparator' in opts ? opts.propertySeparator : "";
    let bodyIndent = opts && 'bodyIndent' in opts ? opts.bodyIndent : "";
    let footer = opts && 'footer' in opts ? opts.footer : "";
    let showChildren = opts && 'showChildren' in opts ? opts.showChildren : true;
    let addBlankLineIfNoChildren = opts && 'addBlankLineIfNoChildren' in opts ? opts.addBlankLineIfNoChildren : true;
    let isNameOnOwnLine = opts && 'isNameOnOwnLine' in opts ? opts.isNameOnOwnLine : false;
    let isBlankLineBetweenPropertiesAndChildren = opts && 'isBlankLineBetweenPropertiesAndChildren' in opts ? opts.isBlankLineBetweenPropertiesAndChildren : true;
    let beforeName = opts && 'beforeName' in opts ? opts.beforeName : "";
    let suffixLineOne = opts && 'suffixLineOne' in opts ? opts.suffixLineOne : "";
    let mandatoryFooter = opts && 'mandatoryFooter' in opts ? opts.mandatoryFooter : "";
    this[prefixLineOne$] = prefixLineOne;
    this[prefixOtherLines$] = prefixOtherLines;
    this[prefixLastChildLineOne$] = prefixLastChildLineOne;
    this[prefixOtherLinesRootNode$] = prefixOtherLinesRootNode;
    this[linkCharacter$] = linkCharacter;
    this[propertyPrefixIfChildren$] = propertyPrefixIfChildren;
    this[propertyPrefixNoChildren$] = propertyPrefixNoChildren;
    this[lineBreak$] = lineBreak;
    this[lineBreakProperties$] = lineBreakProperties;
    this[afterName$] = afterName;
    this[afterDescriptionIfBody$] = afterDescriptionIfBody;
    this[afterDescription$] = afterDescription;
    this[beforeProperties$] = beforeProperties;
    this[afterProperties$] = afterProperties;
    this[mandatoryAfterProperties$] = mandatoryAfterProperties;
    this[propertySeparator$] = propertySeparator;
    this[bodyIndent$] = bodyIndent;
    this[footer$] = footer;
    this[showChildren$] = showChildren;
    this[addBlankLineIfNoChildren$] = addBlankLineIfNoChildren;
    this[isNameOnOwnLine$] = isNameOnOwnLine;
    this[isBlankLineBetweenPropertiesAndChildren$] = isBlankLineBetweenPropertiesAndChildren;
    this[beforeName$] = beforeName;
    this[suffixLineOne$] = suffixLineOne;
    this[mandatoryFooter$] = mandatoryFooter;
    if (!(prefixLineOne !== null)) dart.assertFailed(null, I[2], 229, 15, "prefixLineOne != null");
    if (!(prefixOtherLines !== null)) dart.assertFailed(null, I[2], 230, 15, "prefixOtherLines != null");
    if (!(prefixLastChildLineOne !== null)) dart.assertFailed(null, I[2], 231, 15, "prefixLastChildLineOne != null");
    if (!(prefixOtherLinesRootNode !== null)) dart.assertFailed(null, I[2], 232, 15, "prefixOtherLinesRootNode != null");
    if (!(linkCharacter !== null)) dart.assertFailed(null, I[2], 233, 15, "linkCharacter != null");
    if (!(propertyPrefixIfChildren !== null)) dart.assertFailed(null, I[2], 234, 15, "propertyPrefixIfChildren != null");
    if (!(propertyPrefixNoChildren !== null)) dart.assertFailed(null, I[2], 235, 15, "propertyPrefixNoChildren != null");
    if (!(lineBreak !== null)) dart.assertFailed(null, I[2], 236, 15, "lineBreak != null");
    if (!(lineBreakProperties !== null)) dart.assertFailed(null, I[2], 237, 15, "lineBreakProperties != null");
    if (!(afterName !== null)) dart.assertFailed(null, I[2], 238, 15, "afterName != null");
    if (!(afterDescriptionIfBody !== null)) dart.assertFailed(null, I[2], 239, 15, "afterDescriptionIfBody != null");
    if (!(afterDescription !== null)) dart.assertFailed(null, I[2], 240, 15, "afterDescription != null");
    if (!(beforeProperties !== null)) dart.assertFailed(null, I[2], 241, 15, "beforeProperties != null");
    if (!(afterProperties !== null)) dart.assertFailed(null, I[2], 242, 15, "afterProperties != null");
    if (!(propertySeparator !== null)) dart.assertFailed(null, I[2], 243, 15, "propertySeparator != null");
    if (!(bodyIndent !== null)) dart.assertFailed(null, I[2], 244, 15, "bodyIndent != null");
    if (!(footer !== null)) dart.assertFailed(null, I[2], 245, 15, "footer != null");
    if (!(showChildren !== null)) dart.assertFailed(null, I[2], 246, 15, "showChildren != null");
    if (!(addBlankLineIfNoChildren !== null)) dart.assertFailed(null, I[2], 247, 15, "addBlankLineIfNoChildren != null");
    if (!(isNameOnOwnLine !== null)) dart.assertFailed(null, I[2], 248, 15, "isNameOnOwnLine != null");
    if (!(isBlankLineBetweenPropertiesAndChildren !== null)) dart.assertFailed(null, I[2], 249, 15, "isBlankLineBetweenPropertiesAndChildren != null");
    this[childLinkSpace] = " "[$times](linkCharacter.length);
    ;
  }).prototype = diagnostics$.TextTreeConfiguration.prototype;
  dart.addTypeTests(diagnostics$.TextTreeConfiguration);
  dart.addTypeCaches(diagnostics$.TextTreeConfiguration);
  dart.setLibraryUri(diagnostics$.TextTreeConfiguration, I[1]);
  dart.setFieldSignature(diagnostics$.TextTreeConfiguration, () => ({
    __proto__: dart.getFields(diagnostics$.TextTreeConfiguration.__proto__),
    prefixLineOne: dart.finalFieldType(core.String),
    suffixLineOne: dart.finalFieldType(core.String),
    prefixOtherLines: dart.finalFieldType(core.String),
    prefixLastChildLineOne: dart.finalFieldType(core.String),
    prefixOtherLinesRootNode: dart.finalFieldType(core.String),
    propertyPrefixIfChildren: dart.finalFieldType(core.String),
    propertyPrefixNoChildren: dart.finalFieldType(core.String),
    linkCharacter: dart.finalFieldType(core.String),
    childLinkSpace: dart.finalFieldType(core.String),
    lineBreak: dart.finalFieldType(core.String),
    lineBreakProperties: dart.finalFieldType(core.bool),
    beforeName: dart.finalFieldType(core.String),
    afterName: dart.finalFieldType(core.String),
    afterDescriptionIfBody: dart.finalFieldType(core.String),
    afterDescription: dart.finalFieldType(core.String),
    beforeProperties: dart.finalFieldType(core.String),
    afterProperties: dart.finalFieldType(core.String),
    mandatoryAfterProperties: dart.finalFieldType(core.String),
    propertySeparator: dart.finalFieldType(core.String),
    bodyIndent: dart.finalFieldType(core.String),
    showChildren: dart.finalFieldType(core.bool),
    addBlankLineIfNoChildren: dart.finalFieldType(core.bool),
    isNameOnOwnLine: dart.finalFieldType(core.bool),
    footer: dart.finalFieldType(core.String),
    mandatoryFooter: dart.finalFieldType(core.String),
    isBlankLineBetweenPropertiesAndChildren: dart.finalFieldType(core.bool)
  }));
  diagnostics$._WordWrapParseMode = class _WordWrapParseMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (diagnostics$._WordWrapParseMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = diagnostics$._WordWrapParseMode.prototype;
  dart.addTypeTests(diagnostics$._WordWrapParseMode);
  dart.addTypeCaches(diagnostics$._WordWrapParseMode);
  dart.setLibraryUri(diagnostics$._WordWrapParseMode, I[1]);
  dart.setFieldSignature(diagnostics$._WordWrapParseMode, () => ({
    __proto__: dart.getFields(diagnostics$._WordWrapParseMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(diagnostics$._WordWrapParseMode, ['toString']);
  diagnostics$._WordWrapParseMode.inSpace = C[25] || CT.C25;
  diagnostics$._WordWrapParseMode.inWord = C[26] || CT.C26;
  diagnostics$._WordWrapParseMode.atBreak = C[27] || CT.C27;
  diagnostics$._WordWrapParseMode.values = C[28] || CT.C28;
  var _nextPrefixOtherLines = dart.privateName(diagnostics$, "_nextPrefixOtherLines");
  var _buffer = dart.privateName(diagnostics$, "_buffer");
  var _currentLine = dart.privateName(diagnostics$, "_currentLine");
  var _wrappableRanges = dart.privateName(diagnostics$, "_wrappableRanges");
  var _numLines = dart.privateName(diagnostics$, "_numLines");
  var _prefixOtherLines = dart.privateName(diagnostics$, "_prefixOtherLines");
  var _getCurrentPrefix = dart.privateName(diagnostics$, "_getCurrentPrefix");
  var _writeLine = dart.privateName(diagnostics$, "_writeLine");
  var _finalizeLine = dart.privateName(diagnostics$, "_finalizeLine");
  var _updatePrefix = dart.privateName(diagnostics$, "_updatePrefix");
  diagnostics$._PrefixedStringBuilder = class _PrefixedStringBuilder extends core.Object {
    get prefixOtherLines() {
      let t0;
      t0 = this[_nextPrefixOtherLines];
      return t0 == null ? this[_prefixOtherLines] : t0;
    }
    set prefixOtherLines(prefix) {
      this[_prefixOtherLines] = prefix;
      this[_nextPrefixOtherLines] = null;
    }
    incrementPrefixOtherLines(suffix, opts) {
      let updateCurrentLine = opts && 'updateCurrentLine' in opts ? opts.updateCurrentLine : null;
      if (this[_currentLine].isEmpty || updateCurrentLine) {
        this[_prefixOtherLines] = dart.nullCheck(this.prefixOtherLines) + suffix;
        this[_nextPrefixOtherLines] = null;
      } else {
        this[_nextPrefixOtherLines] = dart.nullCheck(this.prefixOtherLines) + suffix;
      }
    }
    get requiresMultipleLines() {
      return this[_numLines] > 1 || this[_numLines] === 1 && this[_currentLine].isNotEmpty || this[_currentLine].length + dart.nullCheck(this[_getCurrentPrefix](true)).length > dart.nullCheck(this.wrapWidth);
    }
    get isCurrentLineEmpty() {
      return this[_currentLine].isEmpty;
    }
    [_finalizeLine](addTrailingLineBreak) {
      let firstLine = this[_buffer].isEmpty;
      let text = this[_currentLine].toString();
      this[_currentLine].clear();
      if (this[_wrappableRanges][$isEmpty]) {
        this[_writeLine](text, {includeLineBreak: addTrailingLineBreak, firstLine: firstLine});
        return;
      }
      let lines = diagnostics$._PrefixedStringBuilder._wordWrapLine(text, this[_wrappableRanges], dart.nullCheck(this.wrapWidth), {startOffset: firstLine ? this.prefixLineOne.length : dart.nullCheck(this[_prefixOtherLines]).length, otherLineOffset: firstLine ? dart.nullCheck(this[_prefixOtherLines]).length : dart.nullCheck(this[_prefixOtherLines]).length});
      let i = 0;
      let length = lines[$length];
      for (let line of lines) {
        i = i + 1;
        this[_writeLine](line, {includeLineBreak: addTrailingLineBreak || i < length, firstLine: firstLine});
      }
      this[_wrappableRanges][$clear]();
    }
    static _wordWrapLine(message, wrapRanges, width, opts) {
      let startOffset = opts && 'startOffset' in opts ? opts.startOffset : 0;
      let otherLineOffset = opts && 'otherLineOffset' in opts ? opts.otherLineOffset : 0;
      return new (T$.SyncIterableOfString()).new(function* _wordWrapLine() {
        if (message.length + startOffset < width) {
          yield message;
          return;
        }
        let startForLengthCalculations = -startOffset;
        let addPrefix = false;
        let index = 0;
        let mode = diagnostics$._WordWrapParseMode.inSpace;
        let lastWordStart = null;
        function lastWordStart$35get() {
          let t1;
          t1 = lastWordStart;
          return t1 == null ? dart.throw(new _internal.LateError.localNI("lastWordStart")) : t1;
        }
        dart.fn(lastWordStart$35get, T$.VoidToint());
        function lastWordStart$35set(t2) {
          return lastWordStart = t2;
        }
        dart.fn(lastWordStart$35set, T$.intTodynamic());
        let lastWordEnd = null;
        let start = 0;
        let currentChunk = 0;
        function noWrap(index) {
          while (true) {
            if (currentChunk >= wrapRanges[$length]) return true;
            if (index < wrapRanges[$_get](currentChunk + 1)) break;
            currentChunk = currentChunk + 2;
          }
          return index < wrapRanges[$_get](currentChunk);
        }
        dart.fn(noWrap, T$.intTobool());
        while (true) {
          switch (mode) {
            case C[25] || CT.C25:
            {
              while (index < message.length && message[$_get](index) === " ")
                index = index + 1;
              lastWordStart$35set(index);
              mode = diagnostics$._WordWrapParseMode.inWord;
              break;
            }
            case C[26] || CT.C26:
            {
              while (index < message.length && (message[$_get](index) !== " " || noWrap(index)))
                index = index + 1;
              mode = diagnostics$._WordWrapParseMode.atBreak;
              break;
            }
            case C[27] || CT.C27:
            {
              if (index - startForLengthCalculations > width || index === message.length) {
                if (index - startForLengthCalculations <= width || lastWordEnd == null) {
                  lastWordEnd = index;
                }
                let line = message[$substring](start, lastWordEnd);
                yield line;
                addPrefix = true;
                if (dart.notNull(lastWordEnd) >= message.length) return;
                if (lastWordEnd === index) {
                  while (index < message.length && message[$_get](index) === " ")
                    index = index + 1;
                  start = index;
                  mode = diagnostics$._WordWrapParseMode.inWord;
                } else {
                  if (!(lastWordStart$35get() > dart.notNull(lastWordEnd))) dart.assertFailed(null, I[2], 943, 22, "lastWordStart > lastWordEnd");
                  start = lastWordStart$35get();
                  mode = diagnostics$._WordWrapParseMode.atBreak;
                }
                startForLengthCalculations = start - otherLineOffset;
                if (!addPrefix) dart.assertFailed(null, I[2], 948, 20, "addPrefix");
                lastWordEnd = null;
              } else {
                lastWordEnd = index;
                mode = diagnostics$._WordWrapParseMode.inSpace;
              }
              break;
            }
          }
        }
      });
    }
    write(s, opts) {
      let t4;
      let allowWrap = opts && 'allowWrap' in opts ? opts.allowWrap : false;
      if (s[$isEmpty]) return;
      let lines = s[$split]("\n");
      for (let i = 0; i < lines[$length]; i = i + 1) {
        if (i > 0) {
          this[_finalizeLine](true);
          this[_updatePrefix]();
        }
        let line = lines[$_get](i);
        if (line[$isNotEmpty]) {
          if (allowWrap && this.wrapWidth != null) {
            let wrapStart = this[_currentLine].length;
            let wrapEnd = wrapStart + line.length;
            if (this[_wrappableRanges][$isNotEmpty] && this[_wrappableRanges][$last] === wrapStart) {
              this[_wrappableRanges][$last] = wrapEnd;
            } else {
              t4 = this[_wrappableRanges];
              (() => {
                t4[$add](wrapStart);
                t4[$add](wrapEnd);
                return t4;
              })();
            }
          }
          this[_currentLine].write(line);
        }
      }
    }
    [_updatePrefix]() {
      if (this[_nextPrefixOtherLines] != null) {
        this[_prefixOtherLines] = this[_nextPrefixOtherLines];
        this[_nextPrefixOtherLines] = null;
      }
    }
    [_writeLine](line, opts) {
      let includeLineBreak = opts && 'includeLineBreak' in opts ? opts.includeLineBreak : null;
      let firstLine = opts && 'firstLine' in opts ? opts.firstLine : null;
      line = dart.str(this[_getCurrentPrefix](firstLine)) + line;
      this[_buffer].write(line[$trimRight]());
      if (includeLineBreak) this[_buffer].write("\n");
      this[_numLines] = this[_numLines] + 1;
    }
    [_getCurrentPrefix](firstLine) {
      return this[_buffer].isEmpty ? this.prefixLineOne : firstLine ? this[_prefixOtherLines] : this[_prefixOtherLines];
    }
    writeRawLines(lines) {
      if (lines[$isEmpty]) return;
      if (this[_currentLine].isNotEmpty) {
        this[_finalizeLine](true);
      }
      if (!this[_currentLine].isEmpty) dart.assertFailed(null, I[2], 1024, 13, "_currentLine.isEmpty");
      this[_buffer].write(lines);
      if (!lines[$endsWith]("\n")) this[_buffer].write("\n");
      this[_numLines] = this[_numLines] + 1;
      this[_updatePrefix]();
    }
    writeStretched(text, targetLineLength) {
      this.write(text);
      let currentLineLength = this[_currentLine].length + dart.nullCheck(this[_getCurrentPrefix](this[_buffer].isEmpty)).length;
      if (!(this[_currentLine].length > 0)) dart.assertFailed(null, I[2], 1037, 13, "_currentLine.length > 0");
      let targetLength = targetLineLength - currentLineLength;
      if (targetLength > 0) {
        if (!text[$isNotEmpty]) dart.assertFailed(null, I[2], 1040, 14, "text.isNotEmpty");
        let lastChar = text[$_get](text.length - 1);
        if (!(lastChar !== "\n")) dart.assertFailed(null, I[2], 1042, 14, "lastChar != '\\n'");
        this[_currentLine].write(lastChar[$times](targetLength));
      }
      this[_wrappableRanges][$clear]();
    }
    build() {
      if (this[_currentLine].isNotEmpty) this[_finalizeLine](false);
      return this[_buffer].toString();
    }
  };
  (diagnostics$._PrefixedStringBuilder.new = function(opts) {
    let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : null;
    let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
    let wrapWidth = opts && 'wrapWidth' in opts ? opts.wrapWidth : null;
    this[_nextPrefixOtherLines] = null;
    this[_buffer] = new core.StringBuffer.new();
    this[_currentLine] = new core.StringBuffer.new();
    this[_wrappableRanges] = T$.JSArrayOfint().of([]);
    this[_numLines] = 0;
    this.prefixLineOne = prefixLineOne;
    this.wrapWidth = wrapWidth;
    this[_prefixOtherLines] = prefixOtherLines;
    ;
  }).prototype = diagnostics$._PrefixedStringBuilder.prototype;
  dart.addTypeTests(diagnostics$._PrefixedStringBuilder);
  dart.addTypeCaches(diagnostics$._PrefixedStringBuilder);
  dart.setMethodSignature(diagnostics$._PrefixedStringBuilder, () => ({
    __proto__: dart.getMethods(diagnostics$._PrefixedStringBuilder.__proto__),
    incrementPrefixOtherLines: dart.fnType(dart.void, [core.String], {}, {updateCurrentLine: core.bool}),
    [_finalizeLine]: dart.fnType(dart.void, [core.bool]),
    write: dart.fnType(dart.void, [core.String], {allowWrap: core.bool}, {}),
    [_updatePrefix]: dart.fnType(dart.void, []),
    [_writeLine]: dart.fnType(dart.void, [core.String], {}, {firstLine: core.bool, includeLineBreak: core.bool}),
    [_getCurrentPrefix]: dart.fnType(dart.nullable(core.String), [core.bool]),
    writeRawLines: dart.fnType(dart.void, [core.String]),
    writeStretched: dart.fnType(dart.void, [core.String, core.int]),
    build: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(diagnostics$._PrefixedStringBuilder, () => ({
    __proto__: dart.getGetters(diagnostics$._PrefixedStringBuilder.__proto__),
    prefixOtherLines: dart.nullable(core.String),
    requiresMultipleLines: core.bool,
    isCurrentLineEmpty: core.bool
  }));
  dart.setSetterSignature(diagnostics$._PrefixedStringBuilder, () => ({
    __proto__: dart.getSetters(diagnostics$._PrefixedStringBuilder.__proto__),
    prefixOtherLines: dart.nullable(core.String)
  }));
  dart.setLibraryUri(diagnostics$._PrefixedStringBuilder, I[1]);
  dart.setFieldSignature(diagnostics$._PrefixedStringBuilder, () => ({
    __proto__: dart.getFields(diagnostics$._PrefixedStringBuilder.__proto__),
    prefixLineOne: dart.finalFieldType(core.String),
    [_prefixOtherLines]: dart.fieldType(dart.nullable(core.String)),
    [_nextPrefixOtherLines]: dart.fieldType(dart.nullable(core.String)),
    wrapWidth: dart.finalFieldType(dart.nullable(core.int)),
    [_buffer]: dart.finalFieldType(core.StringBuffer),
    [_currentLine]: dart.finalFieldType(core.StringBuffer),
    [_wrappableRanges]: dart.finalFieldType(core.List$(core.int)),
    [_numLines]: dart.fieldType(core.int)
  }));
  diagnostics$._NoDefaultValue = class _NoDefaultValue extends core.Object {};
  (diagnostics$._NoDefaultValue.new = function() {
    ;
  }).prototype = diagnostics$._NoDefaultValue.prototype;
  dart.addTypeTests(diagnostics$._NoDefaultValue);
  dart.addTypeCaches(diagnostics$._NoDefaultValue);
  dart.setLibraryUri(diagnostics$._NoDefaultValue, I[1]);
  var _minLevel = dart.privateName(diagnostics$, "_minLevel");
  var _wrapWidth = dart.privateName(diagnostics$, "_wrapWidth");
  var _wrapWidthProperties = dart.privateName(diagnostics$, "_wrapWidthProperties");
  var _maxDescendentsTruncatableNode = dart.privateName(diagnostics$, "_maxDescendentsTruncatableNode");
  var _childTextConfiguration = dart.privateName(diagnostics$, "_childTextConfiguration");
  var _debugRender = dart.privateName(diagnostics$, "_debugRender");
  diagnostics$.TextTreeRenderer = class TextTreeRenderer extends core.Object {
    [_childTextConfiguration](child, textStyle) {
      let childStyle = child.style;
      return diagnostics$._isSingleLine(childStyle) || childStyle === diagnostics$.DiagnosticsTreeStyle.errorProperty ? textStyle : child.textTreeConfiguration;
    }
    render(node, opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (false) {
        return "";
      } else {
        return this[_debugRender](node, {prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, parentConfiguration: parentConfiguration});
      }
    }
    [_debugRender](node, opts) {
      let t4, t4$, t4$0;
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      let isSingleLine = diagnostics$._isSingleLine(node.style) && (t4 = parentConfiguration, t4 == null ? null : t4.lineBreakProperties) !== true;
      prefixOtherLines == null ? prefixOtherLines = prefixLineOne : null;
      if (node.linePrefix != null) {
        prefixLineOne = prefixLineOne + dart.nullCheck(node.linePrefix);
        prefixOtherLines = dart.notNull(prefixOtherLines) + dart.nullCheck(node.linePrefix);
      }
      let config = dart.nullCheck(node.textTreeConfiguration);
      if (prefixOtherLines[$isEmpty]) prefixOtherLines = dart.notNull(prefixOtherLines) + config.prefixOtherLinesRootNode;
      if (node.style === diagnostics$.DiagnosticsTreeStyle.truncateChildren) {
        let descendants = T$.JSArrayOfString().of([]);
        let depth = 0;
        let lines = 0;
        function visitor(node) {
          for (let child of node.getChildren()) {
            if (lines < 25) {
              depth = depth + 1;
              descendants[$add](dart.str(prefixOtherLines) + "  "[$times](depth) + dart.str(child));
              if (depth < 5) visitor(child);
              depth = depth - 1;
            } else if (lines === 25) {
              descendants[$add](dart.str(prefixOtherLines) + "  ...(descendants list truncated after " + dart.str(lines) + " lines)");
            }
            lines = lines + 1;
          }
        }
        dart.fn(visitor, T$.DiagnosticsNodeTovoid());
        visitor(node);
        let information = new core.StringBuffer.new(prefixLineOne);
        if (lines > 1) {
          information.writeln("This " + dart.str(node.name) + " had the following descendants (showing up to depth " + dart.str(5) + "):");
        } else if (descendants[$length] === 1) {
          information.writeln("This " + dart.str(node.name) + " had the following child:");
        } else {
          information.writeln("This " + dart.str(node.name) + " has no descendants.");
        }
        information.writeAll(descendants, "\n");
        return information.toString();
      }
      let builder = new diagnostics$._PrefixedStringBuilder.new({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, wrapWidth: math.max(core.int, this[_wrapWidth], prefixOtherLines.length + this[_wrapWidthProperties])});
      let children = node.getChildren();
      let description = node.toDescription({parentConfiguration: parentConfiguration});
      if (config.beforeName[$isNotEmpty]) {
        builder.write(config.beforeName);
      }
      let wrapName = !isSingleLine && node.allowNameWrap;
      let wrapDescription = !isSingleLine && node.allowWrap;
      let uppercaseTitle = node.style === diagnostics$.DiagnosticsTreeStyle.error;
      let name = node.name;
      if (uppercaseTitle) {
        name = (t4$ = name, t4$ == null ? null : t4$[$toUpperCase]());
      }
      if (description == null || description[$isEmpty]) {
        if (node.showName && name != null) builder.write(name, {allowWrap: wrapName});
      } else {
        let includeName = false;
        if (name != null && name[$isNotEmpty] && node.showName) {
          includeName = true;
          builder.write(name, {allowWrap: wrapName});
          if (node.showSeparator) builder.write(config.afterName, {allowWrap: wrapName});
          builder.write(config.isNameOnOwnLine || description[$contains]("\n") ? "\n" : " ", {allowWrap: wrapName});
        }
        if (!isSingleLine && builder.requiresMultipleLines && !builder.isCurrentLineEmpty) {
          builder.write("\n");
        }
        if (includeName) {
          builder.incrementPrefixOtherLines(children[$isEmpty] ? config.propertyPrefixNoChildren : config.propertyPrefixIfChildren, {updateCurrentLine: true});
        }
        if (uppercaseTitle) {
          description = description[$toUpperCase]();
        }
        builder.write(description[$trimRight](), {allowWrap: wrapDescription});
        if (!includeName) {
          builder.incrementPrefixOtherLines(children[$isEmpty] ? config.propertyPrefixNoChildren : config.propertyPrefixIfChildren, {updateCurrentLine: false});
        }
      }
      if (config.suffixLineOne[$isNotEmpty]) {
        builder.writeStretched(config.suffixLineOne, dart.nullCheck(builder.wrapWidth));
      }
      let propertiesIterable = node.getProperties()[$where](dart.fn(n => !n.isFiltered(this[_minLevel]), T$.DiagnosticsNodeTobool()));
      let properties = null;
      if (this[_maxDescendentsTruncatableNode] >= 0 && node.allowTruncate) {
        if (propertiesIterable[$length] < this[_maxDescendentsTruncatableNode]) {
          properties = propertiesIterable[$take](this[_maxDescendentsTruncatableNode])[$toList]();
          properties[$add](diagnostics$.DiagnosticsNode.message("..."));
        } else {
          properties = propertiesIterable[$toList]();
        }
        if (this[_maxDescendentsTruncatableNode] < children[$length]) {
          children = children[$take](this[_maxDescendentsTruncatableNode])[$toList]();
          children[$add](diagnostics$.DiagnosticsNode.message("..."));
        }
      } else {
        properties = propertiesIterable[$toList]();
      }
      if ((properties[$isNotEmpty] || children[$isNotEmpty] || node.emptyBodyDescription != null) && (node.showSeparator || (t4$0 = description, t4$0 == null ? null : t4$0[$isNotEmpty]) === true)) {
        builder.write(config.afterDescriptionIfBody);
      }
      if (config.lineBreakProperties) builder.write(config.lineBreak);
      if (properties[$isNotEmpty]) builder.write(config.beforeProperties);
      builder.incrementPrefixOtherLines(config.bodyIndent, {updateCurrentLine: false});
      if (node.emptyBodyDescription != null && properties[$isEmpty] && children[$isEmpty] && prefixLineOne[$isNotEmpty]) {
        builder.write(dart.nullCheck(node.emptyBodyDescription));
        if (config.lineBreakProperties) builder.write(config.lineBreak);
      }
      for (let i = 0; i < properties[$length]; i = i + 1) {
        let property = properties[$_get](i);
        if (i > 0) builder.write(config.propertySeparator);
        let propertyStyle = dart.nullCheck(property.textTreeConfiguration);
        if (diagnostics$._isSingleLine(property.style)) {
          let propertyRender = this.render(property, {prefixLineOne: propertyStyle.prefixLineOne, prefixOtherLines: propertyStyle.childLinkSpace + propertyStyle.prefixOtherLines, parentConfiguration: config});
          let propertyLines = propertyRender[$split]("\n");
          if (propertyLines[$length] === 1 && !config.lineBreakProperties) {
            builder.write(propertyLines[$first]);
          } else {
            builder.write(propertyRender, {allowWrap: false});
            if (!propertyRender[$endsWith]("\n")) builder.write("\n");
          }
        } else {
          let propertyRender = this.render(property, {prefixLineOne: dart.str(builder.prefixOtherLines) + propertyStyle.prefixLineOne, prefixOtherLines: dart.str(builder.prefixOtherLines) + propertyStyle.childLinkSpace + propertyStyle.prefixOtherLines, parentConfiguration: config});
          builder.writeRawLines(propertyRender);
        }
      }
      if (properties[$isNotEmpty]) builder.write(config.afterProperties);
      builder.write(config.mandatoryAfterProperties);
      if (!config.lineBreakProperties) builder.write(config.lineBreak);
      let prefixChildren = config.bodyIndent;
      let prefixChildrenRaw = dart.str(prefixOtherLines) + prefixChildren;
      if (children[$isEmpty] && config.addBlankLineIfNoChildren && builder.requiresMultipleLines && dart.nullCheck(builder.prefixOtherLines)[$trimRight]()[$isNotEmpty]) {
        builder.write(config.lineBreak);
      }
      if (children[$isNotEmpty] && config.showChildren) {
        if (config.isBlankLineBetweenPropertiesAndChildren && properties[$isNotEmpty] && dart.nullCheck(children[$first].textTreeConfiguration).isBlankLineBetweenPropertiesAndChildren) {
          builder.write(config.lineBreak);
        }
        builder.prefixOtherLines = prefixOtherLines;
        for (let i = 0; i < children[$length]; i = i + 1) {
          let child = children[$_get](i);
          if (!(child !== null)) dart.assertFailed(null, I[2], 1355, 16, "child != null");
          let childConfig = dart.nullCheck(this[_childTextConfiguration](child, config));
          if (i === children[$length] - 1) {
            let lastChildPrefixLineOne = prefixChildrenRaw + childConfig.prefixLastChildLineOne;
            let childPrefixOtherLines = prefixChildrenRaw + childConfig.childLinkSpace + childConfig.prefixOtherLines;
            builder.writeRawLines(this.render(child, {prefixLineOne: lastChildPrefixLineOne, prefixOtherLines: childPrefixOtherLines, parentConfiguration: config}));
            if (childConfig.footer[$isNotEmpty]) {
              builder.prefixOtherLines = prefixChildrenRaw;
              builder.write(childConfig.childLinkSpace + childConfig.footer);
              if (childConfig.mandatoryFooter[$isNotEmpty]) {
                builder.writeStretched(childConfig.mandatoryFooter, math.max(core.int, dart.nullCheck(builder.wrapWidth), this[_wrapWidthProperties] + childPrefixOtherLines.length));
              }
              builder.write(config.lineBreak);
            }
          } else {
            let nextChildStyle = dart.nullCheck(this[_childTextConfiguration](children[$_get](i + 1), config));
            let childPrefixLineOne = prefixChildrenRaw + childConfig.prefixLineOne;
            let childPrefixOtherLines = prefixChildrenRaw + nextChildStyle.linkCharacter + childConfig.prefixOtherLines;
            builder.writeRawLines(this.render(child, {prefixLineOne: childPrefixLineOne, prefixOtherLines: childPrefixOtherLines, parentConfiguration: config}));
            if (childConfig.footer[$isNotEmpty]) {
              builder.prefixOtherLines = prefixChildrenRaw;
              builder.write(childConfig.linkCharacter + childConfig.footer);
              if (childConfig.mandatoryFooter[$isNotEmpty]) {
                builder.writeStretched(childConfig.mandatoryFooter, math.max(core.int, dart.nullCheck(builder.wrapWidth), this[_wrapWidthProperties] + childPrefixOtherLines.length));
              }
              builder.write(config.lineBreak);
            }
          }
        }
      }
      if (parentConfiguration == null && config.mandatoryFooter[$isNotEmpty]) {
        builder.writeStretched(config.mandatoryFooter, dart.nullCheck(builder.wrapWidth));
        builder.write(config.lineBreak);
      }
      return builder.build();
    }
  };
  (diagnostics$.TextTreeRenderer.new = function(opts) {
    let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
    let wrapWidth = opts && 'wrapWidth' in opts ? opts.wrapWidth : 100;
    let wrapWidthProperties = opts && 'wrapWidthProperties' in opts ? opts.wrapWidthProperties : 65;
    let maxDescendentsTruncatableNode = opts && 'maxDescendentsTruncatableNode' in opts ? opts.maxDescendentsTruncatableNode : -1;
    if (!(minLevel !== null)) dart.assertFailed(null, I[2], 1091, 15, "minLevel != null");
    this[_minLevel] = minLevel;
    this[_wrapWidth] = wrapWidth;
    this[_wrapWidthProperties] = wrapWidthProperties;
    this[_maxDescendentsTruncatableNode] = maxDescendentsTruncatableNode;
    ;
  }).prototype = diagnostics$.TextTreeRenderer.prototype;
  dart.addTypeTests(diagnostics$.TextTreeRenderer);
  dart.addTypeCaches(diagnostics$.TextTreeRenderer);
  dart.setMethodSignature(diagnostics$.TextTreeRenderer, () => ({
    __proto__: dart.getMethods(diagnostics$.TextTreeRenderer.__proto__),
    [_childTextConfiguration]: dart.fnType(dart.nullable(diagnostics$.TextTreeConfiguration), [diagnostics$.DiagnosticsNode, diagnostics$.TextTreeConfiguration]),
    render: dart.fnType(core.String, [diagnostics$.DiagnosticsNode], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration), prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {}),
    [_debugRender]: dart.fnType(core.String, [diagnostics$.DiagnosticsNode], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration), prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(diagnostics$.TextTreeRenderer, I[1]);
  dart.setFieldSignature(diagnostics$.TextTreeRenderer, () => ({
    __proto__: dart.getFields(diagnostics$.TextTreeRenderer.__proto__),
    [_wrapWidth]: dart.finalFieldType(core.int),
    [_wrapWidthProperties]: dart.finalFieldType(core.int),
    [_minLevel]: dart.finalFieldType(diagnostics$.DiagnosticLevel),
    [_maxDescendentsTruncatableNode]: dart.finalFieldType(core.int)
  }));
  var name$ = dart.privateName(diagnostics$, "DiagnosticsNode.name");
  var showSeparator$ = dart.privateName(diagnostics$, "DiagnosticsNode.showSeparator");
  var showName$ = dart.privateName(diagnostics$, "DiagnosticsNode.showName");
  var linePrefix$ = dart.privateName(diagnostics$, "DiagnosticsNode.linePrefix");
  var style$ = dart.privateName(diagnostics$, "DiagnosticsNode.style");
  var _separator = dart.privateName(diagnostics$, "_separator");
  diagnostics$.DiagnosticsNode = class DiagnosticsNode extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get showSeparator() {
      return this[showSeparator$];
    }
    set showSeparator(value) {
      super.showSeparator = value;
    }
    get showName() {
      return this[showName$];
    }
    set showName(value) {
      super.showName = value;
    }
    get linePrefix() {
      return this[linePrefix$];
    }
    set linePrefix(value) {
      super.linePrefix = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    static message(message, opts) {
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      let allowWrap = opts && 'allowWrap' in opts ? opts.allowWrap : true;
      if (!(style !== null)) dart.assertFailed(null, I[2], 1457, 12, "style != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 1458, 12, "level != null");
      return new (T$.DiagnosticsPropertyOfvoid()).new("", null, {description: message, style: style, showName: false, allowWrap: allowWrap, level: level});
    }
    isFiltered(minLevel) {
      return false || this.level.index < minLevel.index;
    }
    get level() {
      return false ? diagnostics$.DiagnosticLevel.hidden : diagnostics$.DiagnosticLevel.info;
    }
    get emptyBodyDescription() {
      return null;
    }
    get allowWrap() {
      return false;
    }
    get allowNameWrap() {
      return false;
    }
    get allowTruncate() {
      return false;
    }
    get [_separator]() {
      return this.showSeparator ? ":" : "";
    }
    toJsonMap(delegate) {
      let result = new (T$.IdentityMapOfString$ObjectN()).new();
      if (!dart.fn(() => {
        let t5;
        let hasChildren = this.getChildren()[$isNotEmpty];
        result = (() => {
          let t4 = new (T$.IdentityMapOfString$ObjectN()).new();
          t4[$_set]("description", this.toDescription());
          t4[$_set]("type", this[$runtimeType].toString());
          if (this.name != null) t4[$_set]("name", this.name);
          if (!this.showSeparator) t4[$_set]("showSeparator", this.showSeparator);
          if (this.level !== diagnostics$.DiagnosticLevel.info) t4[$_set]("level", diagnostics$.describeEnum(this.level));
          if (this.showName === false) t4[$_set]("showName", this.showName);
          if (this.emptyBodyDescription != null) t4[$_set]("emptyBodyDescription", this.emptyBodyDescription);
          if (this.style !== diagnostics$.DiagnosticsTreeStyle.sparse) t4[$_set]("style", diagnostics$.describeEnum(dart.nullCheck(this.style)));
          if (this.allowTruncate) t4[$_set]("allowTruncate", this.allowTruncate);
          if (hasChildren) t4[$_set]("hasChildren", hasChildren);
          if ((t5 = this.linePrefix, t5 == null ? null : t5[$isNotEmpty]) === true) t4[$_set]("linePrefix", this.linePrefix);
          if (!this.allowWrap) t4[$_set]("allowWrap", this.allowWrap);
          if (this.allowNameWrap) t4[$_set]("allowNameWrap", this.allowNameWrap);
          for (let t5$ of delegate.additionalNodeProperties(this)[$entries])
            t4[$_set](t5$.key, t5$.value);
          if (delegate.includeProperties) t4[$_set]("properties", diagnostics$.DiagnosticsNode.toJsonList(delegate.filterProperties(this.getProperties(), this), this, delegate));
          if (delegate.subtreeDepth > 0) t4[$_set]("children", diagnostics$.DiagnosticsNode.toJsonList(delegate.filterChildren(this.getChildren(), this), this, delegate));
          return t4;
        })();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 1566, 12, "() {\r\n      final bool hasChildren = getChildren().isNotEmpty;\r\n      result = <String, Object?>{\r\n        'description': toDescription(),\r\n        'type': runtimeType.toString(),\r\n        if (name != null)\r\n          'name': name,\r\n        if (!showSeparator)\r\n          'showSeparator': showSeparator,\r\n        if (level != DiagnosticLevel.info)\r\n          'level': describeEnum(level),\r\n        if (showName == false)\r\n          'showName': showName,\r\n        if (emptyBodyDescription != null)\r\n          'emptyBodyDescription': emptyBodyDescription,\r\n        if (style != DiagnosticsTreeStyle.sparse)\r\n          'style': describeEnum(style!),\r\n        if (allowTruncate)\r\n          'allowTruncate': allowTruncate,\r\n        if (hasChildren)\r\n          'hasChildren': hasChildren,\r\n        if (linePrefix?.isNotEmpty == true)\r\n          'linePrefix': linePrefix,\r\n        if (!allowWrap)\r\n          'allowWrap': allowWrap,\r\n        if (allowNameWrap)\r\n          'allowNameWrap': allowNameWrap,\r\n        ...delegate.additionalNodeProperties(this),\r\n        if (delegate.includeProperties)\r\n          'properties': toJsonList(\r\n            delegate.filterProperties(getProperties(), this),\r\n            this,\r\n            delegate,\r\n          ),\r\n        if (delegate.subtreeDepth > 0)\r\n          'children': toJsonList(\r\n            delegate.filterChildren(getChildren(), this),\r\n            this,\r\n            delegate,\r\n          ),\r\n      };\r\n      return true;\r\n    }()");
      return result;
    }
    static toJsonList(nodes, parent, delegate) {
      let truncated = false;
      if (nodes == null) return C[29] || CT.C29;
      let originalNodeCount = nodes[$length];
      nodes = delegate.truncateNodesList(nodes, parent);
      if (nodes[$length] !== originalNodeCount) {
        nodes[$add](diagnostics$.DiagnosticsNode.message("..."));
        truncated = true;
      }
      let json = nodes[$map](T$.MapOfString$ObjectN(), dart.fn(node => node.toJsonMap(delegate.delegateForNode(node)), T$.DiagnosticsNodeToMapOfString$ObjectN()))[$toList]();
      if (truncated) json[$last][$_set]("truncated", true);
      return json;
    }
    toString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[5] || CT.C5;
      let result = super[$toString]();
      if (!(this.style != null)) dart.assertFailed(null, I[2], 1657, 12, "style != null");
      if (!(minLevel !== null)) dart.assertFailed(null, I[2], 1658, 12, "minLevel != null");
      if (!dart.fn(() => {
        if (diagnostics$._isSingleLine(this.style)) {
          result = this.toStringDeep({parentConfiguration: parentConfiguration, minLevel: minLevel});
        } else {
          let description = dart.nullCheck(this.toDescription({parentConfiguration: parentConfiguration}));
          if (this.name == null || dart.nullCheck(this.name)[$isEmpty] || !this.showName) {
            result = description;
          } else {
            result = description[$contains]("\n") ? dart.str(this.name) + this[_separator] + "\n" + description : dart.str(this.name) + this[_separator] + " " + description;
          }
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 1659, 12, "() {\r\n      if (_isSingleLine(style)) {\r\n        result = toStringDeep(parentConfiguration: parentConfiguration, minLevel: minLevel);\r\n      } else {\r\n        final String description = toDescription(parentConfiguration: parentConfiguration)!;\r\n\r\n        if (name == null || name!.isEmpty || !showName) {\r\n          result = description;\r\n        } else {\r\n          result = description.contains('\\n') ? '$name$_separator\\n$description'\r\n              : '$name$_separator $description';\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    get textTreeConfiguration() {
      if (!(this.style != null)) dart.assertFailed(null, I[2], 1681, 12, "style != null");
      switch (dart.nullCheck(this.style)) {
        case C[12] || CT.C12:
        {
          return null;
        }
        case C[15] || CT.C15:
        {
          return diagnostics$.denseTextConfiguration;
        }
        case C[13] || CT.C13:
        {
          return diagnostics$.sparseTextConfiguration;
        }
        case C[14] || CT.C14:
        {
          return diagnostics$.dashedTextConfiguration;
        }
        case C[18] || CT.C18:
        {
          return diagnostics$.whitespaceTextConfiguration;
        }
        case C[16] || CT.C16:
        {
          return diagnostics$.transitionTextConfiguration;
        }
        case C[20] || CT.C20:
        {
          return diagnostics$.singleLineTextConfiguration;
        }
        case C[21] || CT.C21:
        {
          return diagnostics$.errorPropertyTextConfiguration;
        }
        case C[22] || CT.C22:
        {
          return diagnostics$.shallowTextConfiguration;
        }
        case C[17] || CT.C17:
        {
          return diagnostics$.errorTextConfiguration;
        }
        case C[23] || CT.C23:
        {
          return diagnostics$.whitespaceTextConfiguration;
        }
        case C[19] || CT.C19:
        {
          return diagnostics$.flatTextConfiguration;
        }
      }
    }
    toStringDeep(opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
      let result = "";
      if (!dart.fn(() => {
        result = new diagnostics$.TextTreeRenderer.new({minLevel: minLevel, wrapWidth: 65, wrapWidthProperties: 65}).render(this, {prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, parentConfiguration: parentConfiguration});
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 1739, 12, "() {\r\n      result = TextTreeRenderer(\r\n        minLevel: minLevel,\r\n        wrapWidth: 65,\r\n        wrapWidthProperties: 65,\r\n      ).render(\r\n        this,\r\n        prefixLineOne: prefixLineOne,\r\n        prefixOtherLines: prefixOtherLines,\r\n        parentConfiguration: parentConfiguration,\r\n      );\r\n      return true;\r\n    }()");
      return result;
    }
  };
  (diagnostics$.DiagnosticsNode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
    let linePrefix = opts && 'linePrefix' in opts ? opts.linePrefix : null;
    this[name$] = name;
    this[style$] = style;
    this[showName$] = showName;
    this[showSeparator$] = showSeparator;
    this[linePrefix$] = linePrefix;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 1430, 15, "showName != null");
    if (!(showSeparator !== null)) dart.assertFailed(null, I[2], 1431, 15, "showSeparator != null");
    if (!(name == null || !name[$endsWith](":"))) dart.assertFailed("Names of diagnostic nodes must not end with colons.\n" + "name:\n" + "  \"" + dart.str(name) + "\"", I[2], 1436, 10, "name == null || !name.endsWith(':')");
    ;
  }).prototype = diagnostics$.DiagnosticsNode.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticsNode);
  dart.addTypeCaches(diagnostics$.DiagnosticsNode);
  dart.setMethodSignature(diagnostics$.DiagnosticsNode, () => ({
    __proto__: dart.getMethods(diagnostics$.DiagnosticsNode.__proto__),
    isFiltered: dart.fnType(core.bool, [diagnostics$.DiagnosticLevel]),
    toJsonMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [diagnostics$.DiagnosticsSerializationDelegate]),
    toString: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel, parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {}),
    [$toString]: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel, parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {}),
    toStringDeep: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel, parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration), prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(diagnostics$.DiagnosticsNode, () => ({
    __proto__: dart.getGetters(diagnostics$.DiagnosticsNode.__proto__),
    level: diagnostics$.DiagnosticLevel,
    emptyBodyDescription: dart.nullable(core.String),
    allowWrap: core.bool,
    allowNameWrap: core.bool,
    allowTruncate: core.bool,
    [_separator]: core.String,
    textTreeConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)
  }));
  dart.setLibraryUri(diagnostics$.DiagnosticsNode, I[1]);
  dart.setFieldSignature(diagnostics$.DiagnosticsNode, () => ({
    __proto__: dart.getFields(diagnostics$.DiagnosticsNode.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String)),
    showSeparator: dart.finalFieldType(core.bool),
    showName: dart.finalFieldType(core.bool),
    linePrefix: dart.finalFieldType(dart.nullable(core.String)),
    style: dart.finalFieldType(dart.nullable(diagnostics$.DiagnosticsTreeStyle))
  }));
  dart.defineExtensionMethods(diagnostics$.DiagnosticsNode, ['toString']);
  var expandableValue$ = dart.privateName(diagnostics$, "DiagnosticsProperty.expandableValue");
  var allowWrap$ = dart.privateName(diagnostics$, "DiagnosticsProperty.allowWrap");
  var allowNameWrap$ = dart.privateName(diagnostics$, "DiagnosticsProperty.allowNameWrap");
  var ifNull$ = dart.privateName(diagnostics$, "DiagnosticsProperty.ifNull");
  var ifEmpty$ = dart.privateName(diagnostics$, "DiagnosticsProperty.ifEmpty");
  var tooltip$ = dart.privateName(diagnostics$, "DiagnosticsProperty.tooltip");
  var missingIfNull$ = dart.privateName(diagnostics$, "DiagnosticsProperty.missingIfNull");
  var defaultValue$ = dart.privateName(diagnostics$, "DiagnosticsProperty.defaultValue");
  var _exception = dart.privateName(diagnostics$, "_exception");
  var _description = dart.privateName(diagnostics$, "_description");
  var _valueComputed = dart.privateName(diagnostics$, "_valueComputed");
  var _value = dart.privateName(diagnostics$, "_value");
  var _computeValue = dart.privateName(diagnostics$, "_computeValue");
  var _defaultLevel = dart.privateName(diagnostics$, "_defaultLevel");
  var _addTooltip = dart.privateName(diagnostics$, "_addTooltip");
  var _maybeCacheValue = dart.privateName(diagnostics$, "_maybeCacheValue");
  const _is_DiagnosticsProperty_default = Symbol('_is_DiagnosticsProperty_default');
  diagnostics$.DiagnosticsProperty$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class DiagnosticsProperty extends diagnostics$.DiagnosticsNode {
      get expandableValue() {
        return this[expandableValue$];
      }
      set expandableValue(value) {
        super.expandableValue = value;
      }
      get allowWrap() {
        return this[allowWrap$];
      }
      set allowWrap(value) {
        super.allowWrap = value;
      }
      get allowNameWrap() {
        return this[allowNameWrap$];
      }
      set allowNameWrap(value) {
        super.allowNameWrap = value;
      }
      get ifNull() {
        return this[ifNull$];
      }
      set ifNull(value) {
        super.ifNull = value;
      }
      get ifEmpty() {
        return this[ifEmpty$];
      }
      set ifEmpty(value) {
        super.ifEmpty = value;
      }
      get tooltip() {
        return this[tooltip$];
      }
      set tooltip(value) {
        super.tooltip = value;
      }
      get missingIfNull() {
        return this[missingIfNull$];
      }
      set missingIfNull(value) {
        super.missingIfNull = value;
      }
      get defaultValue() {
        return this[defaultValue$];
      }
      set defaultValue(value) {
        super.defaultValue = value;
      }
      toJsonMap(delegate) {
        let v = this.value;
        let properties = null;
        if (delegate.expandPropertyValues && delegate.includeProperties && diagnostics$.Diagnosticable.is(v) && this.getProperties()[$isEmpty]) {
          delegate = delegate.copyWith({subtreeDepth: 0, includeProperties: false});
          properties = diagnostics$.DiagnosticsNode.toJsonList(delegate.filterProperties(v.toDiagnosticsNode().getProperties(), this), this, delegate);
        }
        let json = super.toJsonMap(delegate);
        if (properties != null) {
          json[$_set]("properties", properties);
        }
        if (!dart.equals(this.defaultValue, diagnostics$.kNoDefaultValue)) json[$_set]("defaultValue", dart.toString(this.defaultValue));
        if (this.ifEmpty != null) json[$_set]("ifEmpty", this.ifEmpty);
        if (this.ifNull != null) json[$_set]("ifNull", this.ifNull);
        if (this.tooltip != null) json[$_set]("tooltip", this.tooltip);
        json[$_set]("missingIfNull", this.missingIfNull);
        if (this.exception != null) json[$_set]("exception", dart.toString(this.exception));
        json[$_set]("propertyType", this.propertyType.toString());
        json[$_set]("defaultLevel", diagnostics$.describeEnum(this[_defaultLevel]));
        if (diagnostics$.Diagnosticable.is(this.value) || diagnostics$.DiagnosticsNode.is(this.value)) json[$_set]("isDiagnosticableValue", true);
        if (typeof v == 'number') json[$_set]("value", v[$isFinite] ? v : dart.toString(v));
        if (typeof this.value == 'string' || typeof this.value == 'boolean' || this.value == null) json[$_set]("value", this.value);
        return json;
      }
      valueToString(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        let v = this.value;
        return diagnostics$.DiagnosticableTree.is(v) ? v.toStringShort() : dart.toString(v);
      }
      toDescription(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (this[_description] != null) return this[_addTooltip](dart.nullCheck(this[_description]));
        if (this.exception != null) return "EXCEPTION (" + dart.str(dart.runtimeType(this.exception)) + ")";
        if (this.ifNull != null && this.value == null) return this[_addTooltip](dart.nullCheck(this.ifNull));
        let result = this.valueToString({parentConfiguration: parentConfiguration});
        if (result[$isEmpty] && this.ifEmpty != null) result = dart.nullCheck(this.ifEmpty);
        return this[_addTooltip](result);
      }
      [_addTooltip](text) {
        if (!(text !== null)) dart.assertFailed(null, I[2], 2766, 12, "text != null");
        return this.tooltip == null ? text : text + " (" + dart.str(this.tooltip) + ")";
      }
      get propertyType() {
        return dart.wrapType(T);
      }
      get value() {
        this[_maybeCacheValue]();
        return this[_value];
      }
      get exception() {
        this[_maybeCacheValue]();
        return this[_exception];
      }
      [_maybeCacheValue]() {
        if (this[_valueComputed]) return;
        this[_valueComputed] = true;
        if (!(this[_computeValue] != null)) dart.assertFailed(null, I[2], 2836, 12, "_computeValue != null");
        try {
          this[_value] = dart.nullCheck(this[_computeValue])();
        } catch (e) {
          let exception = dart.getThrown(e);
          if (core.Object.is(exception)) {
            this[_exception] = exception;
            this[_value] = null;
          } else
            throw e;
        }
      }
      get level() {
        if (this[_defaultLevel] === diagnostics$.DiagnosticLevel.hidden) return this[_defaultLevel];
        if (this.exception != null) return diagnostics$.DiagnosticLevel.error;
        if (this.value == null && this.missingIfNull) return diagnostics$.DiagnosticLevel.warning;
        if (!dart.equals(this.defaultValue, diagnostics$.kNoDefaultValue) && dart.equals(this.value, this.defaultValue)) return diagnostics$.DiagnosticLevel.fine;
        return this[_defaultLevel];
      }
      getProperties() {
        if (this.expandableValue) {
          let object = this.value;
          if (diagnostics$.DiagnosticsNode.is(object)) {
            return object.getProperties();
          }
          if (diagnostics$.Diagnosticable.is(object)) {
            return object.toDiagnosticsNode({style: this.style}).getProperties();
          }
        }
        return C[31] || CT.C31;
      }
      getChildren() {
        if (this.expandableValue) {
          let object = this.value;
          if (diagnostics$.DiagnosticsNode.is(object)) {
            return object.getChildren();
          }
          if (diagnostics$.Diagnosticable.is(object)) {
            return object.toDiagnosticsNode({style: this.style}).getChildren();
          }
        }
        return C[31] || CT.C31;
      }
    }
    (DiagnosticsProperty.new = function(name, value, opts) {
      let t6;
      let description = opts && 'description' in opts ? opts.description : null;
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : null;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let missingIfNull = opts && 'missingIfNull' in opts ? opts.missingIfNull : false;
      let linePrefix = opts && 'linePrefix' in opts ? opts.linePrefix : null;
      let expandableValue = opts && 'expandableValue' in opts ? opts.expandableValue : false;
      let allowWrap = opts && 'allowWrap' in opts ? opts.allowWrap : true;
      let allowNameWrap = opts && 'allowNameWrap' in opts ? opts.allowNameWrap : true;
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      this[_exception] = null;
      this[ifEmpty$] = ifEmpty;
      this[defaultValue$] = defaultValue;
      this[tooltip$] = tooltip;
      this[missingIfNull$] = missingIfNull;
      this[expandableValue$] = expandableValue;
      this[allowWrap$] = allowWrap;
      this[allowNameWrap$] = allowNameWrap;
      if (!(showName !== null)) dart.assertFailed(null, I[2], 2604, 15, "showName != null");
      if (!(showSeparator !== null)) dart.assertFailed(null, I[2], 2605, 15, "showSeparator != null");
      if (!(style !== null)) dart.assertFailed(null, I[2], 2606, 15, "style != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2607, 15, "level != null");
      this[_description] = description;
      this[_valueComputed] = true;
      this[_value] = value;
      this[_computeValue] = null;
      this[ifNull$] = (t6 = ifNull, t6 == null ? missingIfNull ? "MISSING" : null : t6);
      this[_defaultLevel] = level;
      DiagnosticsProperty.__proto__.new.call(this, {name: name, showName: showName, showSeparator: showSeparator, style: style, linePrefix: linePrefix});
      ;
    }).prototype = DiagnosticsProperty.prototype;
    (DiagnosticsProperty.lazy = function(name, computeValue, opts) {
      let t6;
      let description = opts && 'description' in opts ? opts.description : null;
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : null;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let missingIfNull = opts && 'missingIfNull' in opts ? opts.missingIfNull : false;
      let expandableValue = opts && 'expandableValue' in opts ? opts.expandableValue : false;
      let allowWrap = opts && 'allowWrap' in opts ? opts.allowWrap : true;
      let allowNameWrap = opts && 'allowNameWrap' in opts ? opts.allowNameWrap : true;
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      this[_exception] = null;
      this[ifEmpty$] = ifEmpty;
      this[defaultValue$] = defaultValue;
      this[tooltip$] = tooltip;
      this[missingIfNull$] = missingIfNull;
      this[expandableValue$] = expandableValue;
      this[allowWrap$] = allowWrap;
      this[allowNameWrap$] = allowNameWrap;
      if (!(showName !== null)) dart.assertFailed(null, I[2], 2650, 15, "showName != null");
      if (!(showSeparator !== null)) dart.assertFailed(null, I[2], 2651, 15, "showSeparator != null");
      if (!(dart.equals(defaultValue, diagnostics$.kNoDefaultValue) || TN().is(defaultValue))) dart.assertFailed(null, I[2], 2652, 15, "defaultValue == kNoDefaultValue || defaultValue is T?");
      if (!(missingIfNull !== null)) dart.assertFailed(null, I[2], 2653, 15, "missingIfNull != null");
      if (!(style !== null)) dart.assertFailed(null, I[2], 2654, 15, "style != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2655, 15, "level != null");
      this[_description] = description;
      this[_valueComputed] = false;
      this[_value] = null;
      this[_computeValue] = computeValue;
      this[_defaultLevel] = level;
      this[ifNull$] = (t6 = ifNull, t6 == null ? missingIfNull ? "MISSING" : null : t6);
      DiagnosticsProperty.__proto__.new.call(this, {name: name, showName: showName, showSeparator: showSeparator, style: style});
      ;
    }).prototype = DiagnosticsProperty.prototype;
    dart.addTypeTests(DiagnosticsProperty);
    DiagnosticsProperty.prototype[_is_DiagnosticsProperty_default] = true;
    dart.addTypeCaches(DiagnosticsProperty);
    dart.setMethodSignature(DiagnosticsProperty, () => ({
      __proto__: dart.getMethods(DiagnosticsProperty.__proto__),
      valueToString: dart.fnType(core.String, [], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {}),
      toDescription: dart.fnType(core.String, [], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {}),
      [_addTooltip]: dart.fnType(core.String, [core.String]),
      [_maybeCacheValue]: dart.fnType(dart.void, []),
      getProperties: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
      getChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [])
    }));
    dart.setGetterSignature(DiagnosticsProperty, () => ({
      __proto__: dart.getGetters(DiagnosticsProperty.__proto__),
      propertyType: core.Type,
      value: dart.nullable(T),
      exception: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(DiagnosticsProperty, I[1]);
    dart.setFieldSignature(DiagnosticsProperty, () => ({
      __proto__: dart.getFields(DiagnosticsProperty.__proto__),
      [_description]: dart.finalFieldType(dart.nullable(core.String)),
      expandableValue: dart.finalFieldType(core.bool),
      allowWrap: dart.finalFieldType(core.bool),
      allowNameWrap: dart.finalFieldType(core.bool),
      ifNull: dart.finalFieldType(dart.nullable(core.String)),
      ifEmpty: dart.finalFieldType(dart.nullable(core.String)),
      tooltip: dart.finalFieldType(dart.nullable(core.String)),
      missingIfNull: dart.finalFieldType(core.bool),
      [_value]: dart.fieldType(dart.nullable(T)),
      [_valueComputed]: dart.fieldType(core.bool),
      [_exception]: dart.fieldType(dart.nullable(core.Object)),
      defaultValue: dart.finalFieldType(dart.nullable(core.Object)),
      [_defaultLevel]: dart.finalFieldType(diagnostics$.DiagnosticLevel),
      [_computeValue]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(T), [])))
    }));
    return DiagnosticsProperty;
  });
  diagnostics$.DiagnosticsProperty = diagnostics$.DiagnosticsProperty$();
  dart.addTypeTests(diagnostics$.DiagnosticsProperty, _is_DiagnosticsProperty_default);
  diagnostics$.MessageProperty = class MessageProperty extends diagnostics$.DiagnosticsProperty$(dart.void) {};
  (diagnostics$.MessageProperty.new = function(name, message, opts) {
    let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(name !== null)) dart.assertFailed(null, I[2], 1797, 15, "name != null");
    if (!(message !== null)) dart.assertFailed(null, I[2], 1798, 15, "message != null");
    if (!(style !== null)) dart.assertFailed(null, I[2], 1799, 15, "style != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 1800, 15, "level != null");
    diagnostics$.MessageProperty.__proto__.new.call(this, name, null, {description: message, style: style, level: level});
    ;
  }).prototype = diagnostics$.MessageProperty.prototype;
  dart.addTypeTests(diagnostics$.MessageProperty);
  dart.addTypeCaches(diagnostics$.MessageProperty);
  dart.setLibraryUri(diagnostics$.MessageProperty, I[1]);
  var quoted$ = dart.privateName(diagnostics$, "StringProperty.quoted");
  diagnostics$.StringProperty = class StringProperty extends diagnostics$.DiagnosticsProperty$(core.String) {
    get quoted() {
      return this[quoted$];
    }
    set quoted(value) {
      super.quoted = value;
    }
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      json[$_set]("quoted", this.quoted);
      return json;
    }
    valueToString(opts) {
      let t7;
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      let text = (t7 = this[_description], t7 == null ? this.value : t7);
      if (parentConfiguration != null && !parentConfiguration.lineBreakProperties && text != null) {
        text = text[$replaceAll]("\n", "\\n");
      }
      if (this.quoted && text != null) {
        if (this.ifEmpty != null && text[$isEmpty]) return dart.nullCheck(this.ifEmpty);
        return "\"" + dart.str(text) + "\"";
      }
      return dart.toString(text);
    }
  };
  (diagnostics$.StringProperty.new = function(name, value, opts) {
    let description = opts && 'description' in opts ? opts.description : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
    let quoted = opts && 'quoted' in opts ? opts.quoted : true;
    let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : null;
    let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    this[quoted$] = quoted;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 1825, 15, "showName != null");
    if (!(quoted !== null)) dart.assertFailed(null, I[2], 1826, 15, "quoted != null");
    if (!(style !== null)) dart.assertFailed(null, I[2], 1827, 15, "style != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 1828, 15, "level != null");
    diagnostics$.StringProperty.__proto__.new.call(this, name, value, {description: description, defaultValue: defaultValue, tooltip: tooltip, showName: showName, ifEmpty: ifEmpty, style: style, level: level});
    ;
  }).prototype = diagnostics$.StringProperty.prototype;
  dart.addTypeTests(diagnostics$.StringProperty);
  dart.addTypeCaches(diagnostics$.StringProperty);
  dart.setLibraryUri(diagnostics$.StringProperty, I[1]);
  dart.setFieldSignature(diagnostics$.StringProperty, () => ({
    __proto__: dart.getFields(diagnostics$.StringProperty.__proto__),
    quoted: dart.finalFieldType(core.bool)
  }));
  var unit$ = dart.privateName(diagnostics$, "_NumProperty.unit");
  const _is__NumProperty_default = Symbol('_is__NumProperty_default');
  diagnostics$._NumProperty$ = dart.generic(T => {
    class _NumProperty extends diagnostics$.DiagnosticsProperty$(T) {
      get unit() {
        return this[unit$];
      }
      set unit(value) {
        super.unit = value;
      }
      toJsonMap(delegate) {
        let json = super.toJsonMap(delegate);
        if (this.unit != null) json[$_set]("unit", this.unit);
        json[$_set]("numberToString", this.numberToString());
        return json;
      }
      valueToString(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (this.value == null) return dart.toString(this.value);
        return this.unit != null ? this.numberToString() + dart.str(this.unit) : this.numberToString();
      }
    }
    (_NumProperty.new = function(name, value, opts) {
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let unit = opts && 'unit' in opts ? opts.unit : null;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      this[unit$] = unit;
      _NumProperty.__proto__.new.call(this, name, value, {ifNull: ifNull, showName: showName, defaultValue: defaultValue, tooltip: tooltip, level: level, style: style});
      ;
    }).prototype = _NumProperty.prototype;
    (_NumProperty.lazy = function(name, computeValue, opts) {
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let unit = opts && 'unit' in opts ? opts.unit : null;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      this[unit$] = unit;
      _NumProperty.__proto__.lazy.call(this, name, computeValue, {ifNull: ifNull, showName: showName, defaultValue: defaultValue, tooltip: tooltip, style: style, level: level});
      ;
    }).prototype = _NumProperty.prototype;
    dart.addTypeTests(_NumProperty);
    _NumProperty.prototype[_is__NumProperty_default] = true;
    dart.addTypeCaches(_NumProperty);
    dart.setLibraryUri(_NumProperty, I[1]);
    dart.setFieldSignature(_NumProperty, () => ({
      __proto__: dart.getFields(_NumProperty.__proto__),
      unit: dart.finalFieldType(dart.nullable(core.String))
    }));
    return _NumProperty;
  });
  diagnostics$._NumProperty = diagnostics$._NumProperty$();
  dart.addTypeTests(diagnostics$._NumProperty, _is__NumProperty_default);
  diagnostics$.DoubleProperty = class DoubleProperty extends diagnostics$._NumProperty$(core.double) {
    numberToString() {
      return debug.debugFormatDouble(this.value);
    }
  };
  (diagnostics$.DoubleProperty.new = function(name, value, opts) {
    let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
    let unit = opts && 'unit' in opts ? opts.unit : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 1962, 15, "showName != null");
    if (!(style !== null)) dart.assertFailed(null, I[2], 1963, 15, "style != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 1964, 15, "level != null");
    diagnostics$.DoubleProperty.__proto__.new.call(this, name, value, {ifNull: ifNull, unit: unit, tooltip: tooltip, defaultValue: defaultValue, showName: showName, style: style, level: level});
    ;
  }).prototype = diagnostics$.DoubleProperty.prototype;
  (diagnostics$.DoubleProperty.lazy = function(name, computeValue, opts) {
    let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let unit = opts && 'unit' in opts ? opts.unit : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 1992, 15, "showName != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 1993, 15, "level != null");
    diagnostics$.DoubleProperty.__proto__.lazy.call(this, name, computeValue, {showName: showName, ifNull: ifNull, unit: unit, tooltip: tooltip, defaultValue: defaultValue, level: level});
    ;
  }).prototype = diagnostics$.DoubleProperty.prototype;
  dart.addTypeTests(diagnostics$.DoubleProperty);
  dart.addTypeCaches(diagnostics$.DoubleProperty);
  dart.setMethodSignature(diagnostics$.DoubleProperty, () => ({
    __proto__: dart.getMethods(diagnostics$.DoubleProperty.__proto__),
    numberToString: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(diagnostics$.DoubleProperty, I[1]);
  diagnostics$.IntProperty = class IntProperty extends diagnostics$._NumProperty$(core.int) {
    numberToString() {
      return dart.toString(this.value);
    }
  };
  (diagnostics$.IntProperty.new = function(name, value, opts) {
    let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let unit = opts && 'unit' in opts ? opts.unit : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
    let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 2025, 15, "showName != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 2026, 15, "level != null");
    if (!(style !== null)) dart.assertFailed(null, I[2], 2027, 15, "style != null");
    diagnostics$.IntProperty.__proto__.new.call(this, name, value, {ifNull: ifNull, showName: showName, unit: unit, defaultValue: defaultValue, level: level});
    ;
  }).prototype = diagnostics$.IntProperty.prototype;
  dart.addTypeTests(diagnostics$.IntProperty);
  dart.addTypeCaches(diagnostics$.IntProperty);
  dart.setMethodSignature(diagnostics$.IntProperty, () => ({
    __proto__: dart.getMethods(diagnostics$.IntProperty.__proto__),
    numberToString: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(diagnostics$.IntProperty, I[1]);
  diagnostics$.PercentProperty = class PercentProperty extends diagnostics$.DoubleProperty {
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (this.value == null) return dart.toString(this.value);
      return this.unit != null ? this.numberToString() + " " + dart.str(this.unit) : this.numberToString();
    }
    numberToString() {
      let v = this.value;
      if (v == null) return dart.toString(this.value);
      return (v[$clamp](0.0, 1.0) * 100.0)[$toStringAsFixed](1) + "%";
    }
  };
  (diagnostics$.PercentProperty.new = function(name, fraction, opts) {
    let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let unit = opts && 'unit' in opts ? opts.unit : null;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 2061, 15, "showName != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 2062, 15, "level != null");
    diagnostics$.PercentProperty.__proto__.new.call(this, name, fraction, {ifNull: ifNull, showName: showName, tooltip: tooltip, unit: unit, level: level});
    ;
  }).prototype = diagnostics$.PercentProperty.prototype;
  dart.addTypeTests(diagnostics$.PercentProperty);
  dart.addTypeCaches(diagnostics$.PercentProperty);
  dart.setLibraryUri(diagnostics$.PercentProperty, I[1]);
  var ifTrue$ = dart.privateName(diagnostics$, "FlagProperty.ifTrue");
  var ifFalse$ = dart.privateName(diagnostics$, "FlagProperty.ifFalse");
  diagnostics$.FlagProperty = class FlagProperty extends diagnostics$.DiagnosticsProperty$(core.bool) {
    get ifTrue() {
      return this[ifTrue$];
    }
    set ifTrue(value) {
      super.ifTrue = value;
    }
    get ifFalse() {
      return this[ifFalse$];
    }
    set ifFalse(value) {
      super.ifFalse = value;
    }
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      if (this.ifTrue != null) json[$_set]("ifTrue", this.ifTrue);
      if (this.ifFalse != null) json[$_set]("ifFalse", this.ifFalse);
      return json;
    }
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (this.value === true) {
        if (this.ifTrue != null) return dart.nullCheck(this.ifTrue);
      } else if (this.value === false) {
        if (this.ifFalse != null) return dart.nullCheck(this.ifFalse);
      }
      return super.valueToString({parentConfiguration: parentConfiguration});
    }
    get showName() {
      if (this.value == null || this.value === true && this.ifTrue == null || this.value === false && this.ifFalse == null) {
        return true;
      }
      return super.showName;
    }
    get level() {
      if (this.value === true) {
        if (this.ifTrue == null) return diagnostics$.DiagnosticLevel.hidden;
      }
      if (this.value === false) {
        if (this.ifFalse == null) return diagnostics$.DiagnosticLevel.hidden;
      }
      return super.level;
    }
  };
  (diagnostics$.FlagProperty.new = function(name, opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let ifTrue = opts && 'ifTrue' in opts ? opts.ifTrue : null;
    let ifFalse = opts && 'ifFalse' in opts ? opts.ifFalse : null;
    let showName = opts && 'showName' in opts ? opts.showName : false;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    this[ifTrue$] = ifTrue;
    this[ifFalse$] = ifFalse;
    if (!(showName !== null)) dart.assertFailed(null, I[2], 2143, 15, "showName != null");
    if (!(level !== null)) dart.assertFailed(null, I[2], 2144, 15, "level != null");
    if (!(ifTrue != null || ifFalse != null)) dart.assertFailed(null, I[2], 2145, 15, "ifTrue != null || ifFalse != null");
    diagnostics$.FlagProperty.__proto__.new.call(this, name, value, {showName: showName, defaultValue: defaultValue, level: level});
    ;
  }).prototype = diagnostics$.FlagProperty.prototype;
  dart.addTypeTests(diagnostics$.FlagProperty);
  dart.addTypeCaches(diagnostics$.FlagProperty);
  dart.setGetterSignature(diagnostics$.FlagProperty, () => ({
    __proto__: dart.getGetters(diagnostics$.FlagProperty.__proto__),
    showName: core.bool
  }));
  dart.setLibraryUri(diagnostics$.FlagProperty, I[1]);
  dart.setFieldSignature(diagnostics$.FlagProperty, () => ({
    __proto__: dart.getFields(diagnostics$.FlagProperty.__proto__),
    ifTrue: dart.finalFieldType(dart.nullable(core.String)),
    ifFalse: dart.finalFieldType(dart.nullable(core.String))
  }));
  const _is_IterableProperty_default = Symbol('_is_IterableProperty_default');
  diagnostics$.IterableProperty$ = dart.generic(T => {
    var TToString = () => (TToString = dart.constFn(dart.fnType(core.String, [T])))();
    class IterableProperty extends diagnostics$.DiagnosticsProperty$(core.Iterable$(T)) {
      valueToString(opts) {
        let t7;
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (this.value == null) return dart.toString(this.value);
        if (dart.nullCheck(this.value)[$isEmpty]) {
          t7 = this.ifEmpty;
          return t7 == null ? "[]" : t7;
        }
        let formattedValues = dart.nullCheck(this.value)[$map](core.String, dart.fn(v => {
          if (dart.wrapType(T)._equals(dart.wrapType(core.double)) && typeof v == 'number') {
            return debug.debugFormatDouble(v);
          } else {
            return dart.toString(v);
          }
        }, TToString()));
        if (parentConfiguration != null && !parentConfiguration.lineBreakProperties) {
          return "[" + formattedValues[$join](", ") + "]";
        }
        return formattedValues[$join](diagnostics$._isSingleLine(this.style) ? ", " : "\n");
      }
      get level() {
        if (this.ifEmpty == null && this.value != null && dart.nullCheck(this.value)[$isEmpty] && super.level !== diagnostics$.DiagnosticLevel.hidden) return diagnostics$.DiagnosticLevel.fine;
        return super.level;
      }
      toJsonMap(delegate) {
        let json = super.toJsonMap(delegate);
        if (this.value != null) {
          json[$_set]("values", dart.nullCheck(this.value)[$map](core.String, dart.fn(value => dart.toString(value), TToString()))[$toList]());
        }
        return json;
      }
    }
    (IterableProperty.new = function(name, value, opts) {
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : "[]";
      let style = opts && 'style' in opts ? opts.style : C[20] || CT.C20;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      if (!(style !== null)) dart.assertFailed(null, I[2], 2241, 15, "style != null");
      if (!(showName !== null)) dart.assertFailed(null, I[2], 2242, 15, "showName != null");
      if (!(showSeparator !== null)) dart.assertFailed(null, I[2], 2243, 15, "showSeparator != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2244, 15, "level != null");
      IterableProperty.__proto__.new.call(this, name, value, {defaultValue: defaultValue, ifNull: ifNull, ifEmpty: ifEmpty, style: style, showName: showName, showSeparator: showSeparator, level: level});
      ;
    }).prototype = IterableProperty.prototype;
    dart.addTypeTests(IterableProperty);
    IterableProperty.prototype[_is_IterableProperty_default] = true;
    dart.addTypeCaches(IterableProperty);
    dart.setLibraryUri(IterableProperty, I[1]);
    return IterableProperty;
  });
  diagnostics$.IterableProperty = diagnostics$.IterableProperty$();
  dart.addTypeTests(diagnostics$.IterableProperty, _is_IterableProperty_default);
  const _is_EnumProperty_default = Symbol('_is_EnumProperty_default');
  diagnostics$.EnumProperty$ = dart.generic(T => {
    class EnumProperty extends diagnostics$.DiagnosticsProperty$(T) {
      valueToString(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (this.value == null) return dart.toString(this.value);
        return diagnostics$.describeEnum(dart.nullCheck(this.value));
      }
    }
    (EnumProperty.new = function(name, value, opts) {
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[30] || CT.C30;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      if (!(level !== null)) dart.assertFailed(null, I[2], 2324, 15, "level != null");
      EnumProperty.__proto__.new.call(this, name, value, {defaultValue: defaultValue, level: level});
      ;
    }).prototype = EnumProperty.prototype;
    dart.addTypeTests(EnumProperty);
    EnumProperty.prototype[_is_EnumProperty_default] = true;
    dart.addTypeCaches(EnumProperty);
    dart.setLibraryUri(EnumProperty, I[1]);
    return EnumProperty;
  });
  diagnostics$.EnumProperty = diagnostics$.EnumProperty$();
  dart.addTypeTests(diagnostics$.EnumProperty, _is_EnumProperty_default);
  var ifPresent$ = dart.privateName(diagnostics$, "ObjectFlagProperty.ifPresent");
  const _is_ObjectFlagProperty_default = Symbol('_is_ObjectFlagProperty_default');
  diagnostics$.ObjectFlagProperty$ = dart.generic(T => {
    class ObjectFlagProperty extends diagnostics$.DiagnosticsProperty$(T) {
      get ifPresent() {
        return this[ifPresent$];
      }
      set ifPresent(value) {
        super.ifPresent = value;
      }
      valueToString(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (this.value != null) {
          if (this.ifPresent != null) return dart.nullCheck(this.ifPresent);
        } else {
          if (this.ifNull != null) return dart.nullCheck(this.ifNull);
        }
        return super.valueToString({parentConfiguration: parentConfiguration});
      }
      get showName() {
        if (this.value != null && this.ifPresent == null || this.value == null && this.ifNull == null) {
          return true;
        }
        return super.showName;
      }
      get level() {
        if (this.value != null) {
          if (this.ifPresent == null) return diagnostics$.DiagnosticLevel.hidden;
        } else {
          if (this.ifNull == null) return diagnostics$.DiagnosticLevel.hidden;
        }
        return super.level;
      }
      toJsonMap(delegate) {
        let json = super.toJsonMap(delegate);
        if (this.ifPresent != null) json[$_set]("ifPresent", this.ifPresent);
        return json;
      }
    }
    (ObjectFlagProperty.new = function(name, value, opts) {
      let ifPresent = opts && 'ifPresent' in opts ? opts.ifPresent : null;
      let ifNull = opts && 'ifNull' in opts ? opts.ifNull : null;
      let showName = opts && 'showName' in opts ? opts.showName : false;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      this[ifPresent$] = ifPresent;
      if (!(ifPresent != null || ifNull != null)) dart.assertFailed(null, I[2], 2376, 15, "ifPresent != null || ifNull != null");
      if (!(showName !== null)) dart.assertFailed(null, I[2], 2377, 15, "showName != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2378, 15, "level != null");
      ObjectFlagProperty.__proto__.new.call(this, name, value, {showName: showName, ifNull: ifNull, level: level});
      ;
    }).prototype = ObjectFlagProperty.prototype;
    (ObjectFlagProperty.has = function(name, value, opts) {
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      if (!(name !== null)) dart.assertFailed(null, I[2], 2397, 15, "name != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2398, 15, "level != null");
      this[ifPresent$] = "has " + name;
      ObjectFlagProperty.__proto__.new.call(this, name, value, {showName: false, level: level});
      ;
    }).prototype = ObjectFlagProperty.prototype;
    dart.addTypeTests(ObjectFlagProperty);
    ObjectFlagProperty.prototype[_is_ObjectFlagProperty_default] = true;
    dart.addTypeCaches(ObjectFlagProperty);
    dart.setGetterSignature(ObjectFlagProperty, () => ({
      __proto__: dart.getGetters(ObjectFlagProperty.__proto__),
      showName: core.bool
    }));
    dart.setLibraryUri(ObjectFlagProperty, I[1]);
    dart.setFieldSignature(ObjectFlagProperty, () => ({
      __proto__: dart.getFields(ObjectFlagProperty.__proto__),
      ifPresent: dart.finalFieldType(dart.nullable(core.String))
    }));
    return ObjectFlagProperty;
  });
  diagnostics$.ObjectFlagProperty = diagnostics$.ObjectFlagProperty$();
  dart.addTypeTests(diagnostics$.ObjectFlagProperty, _is_ObjectFlagProperty_default);
  var _hasNonNullEntry = dart.privateName(diagnostics$, "_hasNonNullEntry");
  var _formattedValues = dart.privateName(diagnostics$, "_formattedValues");
  const _is_FlagsSummary_default = Symbol('_is_FlagsSummary_default');
  diagnostics$.FlagsSummary$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var TNTobool = () => (TNTobool = dart.constFn(dart.fnType(core.bool, [TN()])))();
    class FlagsSummary extends diagnostics$.DiagnosticsProperty$(core.Map$(core.String, dart.nullable(T))) {
      get value() {
        return dart.nullCheck(super.value);
      }
      valueToString(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        if (!(this.value !== null)) dart.assertFailed(null, I[2], 2512, 12, "value != null");
        if (!this[_hasNonNullEntry]() && this.ifEmpty != null) return dart.nullCheck(this.ifEmpty);
        let formattedValues = this[_formattedValues]();
        if (parentConfiguration != null && !parentConfiguration.lineBreakProperties) {
          return "[" + formattedValues[$join](", ") + "]";
        }
        return formattedValues[$join](diagnostics$._isSingleLine(this.style) ? ", " : "\n");
      }
      get level() {
        if (!this[_hasNonNullEntry]() && this.ifEmpty == null) return diagnostics$.DiagnosticLevel.hidden;
        return super.level;
      }
      toJsonMap(delegate) {
        let json = super.toJsonMap(delegate);
        if (this.value[$isNotEmpty]) json[$_set]("values", this[_formattedValues]()[$toList]());
        return json;
      }
      [_hasNonNullEntry]() {
        return this.value[$values][$any](dart.fn(o => o != null, TNTobool()));
      }
      [_formattedValues]() {
        return new (T$.SyncIterableOfString()).new((function* _formattedValues() {
          for (let entry of this.value[$entries]) {
            if (entry.value != null) {
              yield entry.key;
            }
          }
        }).bind(this));
      }
    }
    (FlagsSummary.new = function(name, value, opts) {
      let ifEmpty = opts && 'ifEmpty' in opts ? opts.ifEmpty : null;
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
      let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
      if (!(value !== null)) dart.assertFailed(null, I[2], 2494, 15, "value != null");
      if (!(showName !== null)) dart.assertFailed(null, I[2], 2495, 15, "showName != null");
      if (!(showSeparator !== null)) dart.assertFailed(null, I[2], 2496, 15, "showSeparator != null");
      if (!(level !== null)) dart.assertFailed(null, I[2], 2497, 15, "level != null");
      FlagsSummary.__proto__.new.call(this, name, value, {ifEmpty: ifEmpty, showName: showName, showSeparator: showSeparator, level: level});
      ;
    }).prototype = FlagsSummary.prototype;
    dart.addTypeTests(FlagsSummary);
    FlagsSummary.prototype[_is_FlagsSummary_default] = true;
    dart.addTypeCaches(FlagsSummary);
    dart.setMethodSignature(FlagsSummary, () => ({
      __proto__: dart.getMethods(FlagsSummary.__proto__),
      [_hasNonNullEntry]: dart.fnType(core.bool, []),
      [_formattedValues]: dart.fnType(core.Iterable$(core.String), [])
    }));
    dart.setGetterSignature(FlagsSummary, () => ({
      __proto__: dart.getGetters(FlagsSummary.__proto__),
      value: core.Map$(core.String, dart.nullable(T))
    }));
    dart.setLibraryUri(FlagsSummary, I[1]);
    return FlagsSummary;
  });
  diagnostics$.FlagsSummary = diagnostics$.FlagsSummary$();
  dart.addTypeTests(diagnostics$.FlagsSummary, _is_FlagsSummary_default);
  var value$ = dart.privateName(diagnostics$, "DiagnosticableNode.value");
  var _cachedBuilder = dart.privateName(diagnostics$, "_cachedBuilder");
  const _is_DiagnosticableNode_default = Symbol('_is_DiagnosticableNode_default');
  diagnostics$.DiagnosticableNode$ = dart.generic(T => {
    class DiagnosticableNode extends diagnostics$.DiagnosticsNode {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get builder() {
        if (false) {
          return null;
        } else {
          if (!dart.fn(() => {
            if (this[_cachedBuilder] == null) {
              this[_cachedBuilder] = new diagnostics$.DiagnosticPropertiesBuilder.new();
              this.value.debugFillProperties(dart.nullCheck(this[_cachedBuilder]));
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 2942, 14, "() {\r\n        if (_cachedBuilder == null) {\r\n          _cachedBuilder = DiagnosticPropertiesBuilder();\r\n          value.debugFillProperties(_cachedBuilder!);\r\n        }\r\n        return true;\r\n      }()");
          return this[_cachedBuilder];
        }
      }
      get style() {
        let t7;
        return false ? diagnostics$.DiagnosticsTreeStyle.none : (t7 = super.style, t7 == null ? dart.nullCheck(this.builder).defaultDiagnosticsTreeStyle : t7);
      }
      get emptyBodyDescription() {
        return false || false ? "" : dart.nullCheck(this.builder).emptyBodyDescription;
      }
      getProperties() {
        return false || false ? C[31] || CT.C31 : dart.nullCheck(this.builder).properties;
      }
      getChildren() {
        return C[31] || CT.C31;
      }
      toDescription(opts) {
        let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
        let result = "";
        if (!dart.fn(() => {
          result = this.value.toStringShort();
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 2972, 12, "() {\r\n      result = value.toStringShort();\r\n      return true;\r\n    }()");
        return result;
      }
    }
    (DiagnosticableNode.new = function(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let style = opts && 'style' in opts ? opts.style : null;
      this[_cachedBuilder] = null;
      this[value$] = value;
      if (!(value !== null)) dart.assertFailed(null, I[2], 2924, 15, "value != null");
      DiagnosticableNode.__proto__.new.call(this, {name: name, style: style});
      ;
    }).prototype = DiagnosticableNode.prototype;
    dart.addTypeTests(DiagnosticableNode);
    DiagnosticableNode.prototype[_is_DiagnosticableNode_default] = true;
    dart.addTypeCaches(DiagnosticableNode);
    dart.setMethodSignature(DiagnosticableNode, () => ({
      __proto__: dart.getMethods(DiagnosticableNode.__proto__),
      getProperties: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
      getChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
      toDescription: dart.fnType(core.String, [], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {})
    }));
    dart.setGetterSignature(DiagnosticableNode, () => ({
      __proto__: dart.getGetters(DiagnosticableNode.__proto__),
      builder: dart.nullable(diagnostics$.DiagnosticPropertiesBuilder),
      style: diagnostics$.DiagnosticsTreeStyle
    }));
    dart.setLibraryUri(DiagnosticableNode, I[1]);
    dart.setFieldSignature(DiagnosticableNode, () => ({
      __proto__: dart.getFields(DiagnosticableNode.__proto__),
      value: dart.finalFieldType(T),
      [_cachedBuilder]: dart.fieldType(dart.nullable(diagnostics$.DiagnosticPropertiesBuilder))
    }));
    return DiagnosticableNode;
  });
  diagnostics$.DiagnosticableNode = diagnostics$.DiagnosticableNode$();
  dart.addTypeTests(diagnostics$.DiagnosticableNode, _is_DiagnosticableNode_default);
  diagnostics$.Diagnosticable = class Diagnosticable extends core.Object {};
  diagnostics$.Diagnosticable[dart.mixinOn] = Object => {
    class Diagnosticable extends Object {
      toStringShort() {
        return diagnostics$.describeIdentity(this);
      }
      toString(opts) {
        let t7;
        let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[5] || CT.C5;
        let fullString = null;
        if (!dart.fn(() => {
          fullString = this.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.singleLine}).toString({minLevel: minLevel});
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 3109, 12, "() {\r\n      fullString = toDiagnosticsNode(style: DiagnosticsTreeStyle.singleLine).toString(minLevel: minLevel);\r\n      return true;\r\n    }()");
        t7 = fullString;
        return t7 == null ? this.toStringShort() : t7;
      }
      toDiagnosticsNode(opts) {
        let name = opts && 'name' in opts ? opts.name : null;
        let style = opts && 'style' in opts ? opts.style : null;
        return new (T$.DiagnosticableNodeOfDiagnosticable()).new({name: name, value: this, style: style});
      }
      debugFillProperties(properties) {
      }
    }
    dart.defineExtensionMethods(Diagnosticable, ['toString']);
    return Diagnosticable;
  };
  (diagnostics$.Diagnosticable[dart.mixinNew] = function() {
  }).prototype = diagnostics$.Diagnosticable.prototype;
  dart.addTypeTests(diagnostics$.Diagnosticable);
  dart.addTypeCaches(diagnostics$.Diagnosticable);
  diagnostics$.Diagnosticable[dart.implements] = () => [core.Object];
  dart.setMethodSignature(diagnostics$.Diagnosticable, () => ({
    __proto__: dart.getMethods(diagnostics$.Diagnosticable.__proto__),
    toStringShort: dart.fnType(core.String, []),
    toString: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel}, {}),
    [$toString]: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel}, {}),
    toDiagnosticsNode: dart.fnType(diagnostics$.DiagnosticsNode, [], {name: dart.nullable(core.String), style: dart.nullable(diagnostics$.DiagnosticsTreeStyle)}, {}),
    debugFillProperties: dart.fnType(dart.void, [diagnostics$.DiagnosticPropertiesBuilder])
  }));
  dart.setLibraryUri(diagnostics$.Diagnosticable, I[1]);
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics$.Diagnosticable);
  diagnostics$.DiagnosticableTree = class DiagnosticableTree extends Object_Diagnosticable$36 {
    toStringShallow(opts) {
      let t7;
      let joiner = opts && 'joiner' in opts ? opts.joiner : ", ";
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
      let shallowString = null;
      if (!dart.fn(() => {
        let result = new core.StringBuffer.new();
        result.write(this.toString());
        result.write(joiner);
        let builder = new diagnostics$.DiagnosticPropertiesBuilder.new();
        this.debugFillProperties(builder);
        result.write(builder.properties[$where](dart.fn(n => !n.isFiltered(minLevel), T$.DiagnosticsNodeTobool()))[$join](joiner));
        shallowString = result.toString();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 3385, 12, "() {\r\n      final StringBuffer result = StringBuffer();\r\n      result.write(toString());\r\n      result.write(joiner);\r\n      final DiagnosticPropertiesBuilder builder = DiagnosticPropertiesBuilder();\r\n      debugFillProperties(builder);\r\n      result.write(\r\n        builder.properties.where((DiagnosticsNode n) => !n.isFiltered(minLevel))\r\n            .join(joiner),\r\n      );\r\n      shallowString = result.toString();\r\n      return true;\r\n    }()");
      t7 = shallowString;
      return t7 == null ? this.toString() : t7;
    }
    toStringDeep(opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
      return this.toDiagnosticsNode().toStringDeep({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel});
    }
    toStringShort() {
      return diagnostics$.describeIdentity(this);
    }
    toDiagnosticsNode(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new diagnostics$.DiagnosticableTreeNode.new({name: name, value: this, style: style});
    }
    debugDescribeChildren() {
      return C[31] || CT.C31;
    }
  };
  (diagnostics$.DiagnosticableTree.new = function() {
    ;
  }).prototype = diagnostics$.DiagnosticableTree.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticableTree);
  dart.addTypeCaches(diagnostics$.DiagnosticableTree);
  dart.setMethodSignature(diagnostics$.DiagnosticableTree, () => ({
    __proto__: dart.getMethods(diagnostics$.DiagnosticableTree.__proto__),
    toStringShallow: dart.fnType(core.String, [], {joiner: core.String, minLevel: diagnostics$.DiagnosticLevel}, {}),
    toStringDeep: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel, prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {}),
    debugDescribeChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [])
  }));
  dart.setLibraryUri(diagnostics$.DiagnosticableTree, I[1]);
  diagnostics$.DiagnosticableTreeNode = class DiagnosticableTreeNode extends diagnostics$.DiagnosticableNode$(diagnostics$.DiagnosticableTree) {
    getChildren() {
      return this.value.debugDescribeChildren();
    }
  };
  (diagnostics$.DiagnosticableTreeNode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let style = opts && 'style' in opts ? opts.style : null;
    diagnostics$.DiagnosticableTreeNode.__proto__.new.call(this, {name: name, value: value, style: style});
    ;
  }).prototype = diagnostics$.DiagnosticableTreeNode.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticableTreeNode);
  dart.addTypeCaches(diagnostics$.DiagnosticableTreeNode);
  dart.setLibraryUri(diagnostics$.DiagnosticableTreeNode, I[1]);
  var properties$ = dart.privateName(diagnostics$, "DiagnosticPropertiesBuilder.properties");
  var defaultDiagnosticsTreeStyle = dart.privateName(diagnostics$, "DiagnosticPropertiesBuilder.defaultDiagnosticsTreeStyle");
  var emptyBodyDescription = dart.privateName(diagnostics$, "DiagnosticPropertiesBuilder.emptyBodyDescription");
  diagnostics$.DiagnosticPropertiesBuilder = class DiagnosticPropertiesBuilder extends core.Object {
    get properties() {
      return this[properties$];
    }
    set properties(value) {
      super.properties = value;
    }
    get defaultDiagnosticsTreeStyle() {
      return this[defaultDiagnosticsTreeStyle];
    }
    set defaultDiagnosticsTreeStyle(value) {
      this[defaultDiagnosticsTreeStyle] = value;
    }
    get emptyBodyDescription() {
      return this[emptyBodyDescription];
    }
    set emptyBodyDescription(value) {
      this[emptyBodyDescription] = value;
    }
    add(property) {
      if (!dart.fn(() => {
        this.properties[$add](property);
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 3054, 12, "() {\r\n      properties.add(property);\r\n      return true;\r\n    }()");
    }
  };
  (diagnostics$.DiagnosticPropertiesBuilder.new = function() {
    this[defaultDiagnosticsTreeStyle] = diagnostics$.DiagnosticsTreeStyle.sparse;
    this[emptyBodyDescription] = null;
    this[properties$] = T$.JSArrayOfDiagnosticsNode().of([]);
    ;
  }).prototype = diagnostics$.DiagnosticPropertiesBuilder.prototype;
  (diagnostics$.DiagnosticPropertiesBuilder.fromProperties = function(properties) {
    this[defaultDiagnosticsTreeStyle] = diagnostics$.DiagnosticsTreeStyle.sparse;
    this[emptyBodyDescription] = null;
    this[properties$] = properties;
    ;
  }).prototype = diagnostics$.DiagnosticPropertiesBuilder.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticPropertiesBuilder);
  dart.addTypeCaches(diagnostics$.DiagnosticPropertiesBuilder);
  dart.setMethodSignature(diagnostics$.DiagnosticPropertiesBuilder, () => ({
    __proto__: dart.getMethods(diagnostics$.DiagnosticPropertiesBuilder.__proto__),
    add: dart.fnType(dart.void, [diagnostics$.DiagnosticsNode])
  }));
  dart.setLibraryUri(diagnostics$.DiagnosticPropertiesBuilder, I[1]);
  dart.setFieldSignature(diagnostics$.DiagnosticPropertiesBuilder, () => ({
    __proto__: dart.getFields(diagnostics$.DiagnosticPropertiesBuilder.__proto__),
    properties: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode)),
    defaultDiagnosticsTreeStyle: dart.fieldType(diagnostics$.DiagnosticsTreeStyle),
    emptyBodyDescription: dart.fieldType(dart.nullable(core.String))
  }));
  diagnostics$.DiagnosticableTreeMixin = class DiagnosticableTreeMixin extends core.Object {};
  diagnostics$.DiagnosticableTreeMixin[dart.mixinOn] = Object => {
    class DiagnosticableTreeMixin extends Object {
      toString(opts) {
        let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[5] || CT.C5;
        return this.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.singleLine}).toString({minLevel: minLevel});
      }
      toStringShallow(opts) {
        let t7;
        let joiner = opts && 'joiner' in opts ? opts.joiner : ", ";
        let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
        let shallowString = null;
        if (!dart.fn(() => {
          let result = new core.StringBuffer.new();
          result.write(this.toStringShort());
          result.write(joiner);
          let builder = new diagnostics$.DiagnosticPropertiesBuilder.new();
          this.debugFillProperties(builder);
          result.write(builder.properties[$where](dart.fn(n => !n.isFiltered(minLevel), T$.DiagnosticsNodeTobool()))[$join](joiner));
          shallowString = result.toString();
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 3475, 12, "() {\r\n      final StringBuffer result = StringBuffer();\r\n      result.write(toStringShort());\r\n      result.write(joiner);\r\n      final DiagnosticPropertiesBuilder builder = DiagnosticPropertiesBuilder();\r\n      debugFillProperties(builder);\r\n      result.write(\r\n        builder.properties.where((DiagnosticsNode n) => !n.isFiltered(minLevel))\r\n            .join(joiner),\r\n      );\r\n      shallowString = result.toString();\r\n      return true;\r\n    }()");
        t7 = shallowString;
        return t7 == null ? this.toString() : t7;
      }
      toStringDeep(opts) {
        let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
        let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
        let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[4] || CT.C4;
        return this.toDiagnosticsNode().toStringDeep({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel});
      }
      toStringShort() {
        return diagnostics$.describeIdentity(this);
      }
      toDiagnosticsNode(opts) {
        let name = opts && 'name' in opts ? opts.name : null;
        let style = opts && 'style' in opts ? opts.style : null;
        return new diagnostics$.DiagnosticableTreeNode.new({name: name, value: this, style: style});
      }
      debugDescribeChildren() {
        return C[31] || CT.C31;
      }
      debugFillProperties(properties) {
      }
    }
    dart.defineExtensionMethods(DiagnosticableTreeMixin, ['toString']);
    return DiagnosticableTreeMixin;
  };
  (diagnostics$.DiagnosticableTreeMixin[dart.mixinNew] = function() {
  }).prototype = diagnostics$.DiagnosticableTreeMixin.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticableTreeMixin);
  dart.addTypeCaches(diagnostics$.DiagnosticableTreeMixin);
  diagnostics$.DiagnosticableTreeMixin[dart.implements] = () => [diagnostics$.DiagnosticableTree, core.Object];
  dart.setMethodSignature(diagnostics$.DiagnosticableTreeMixin, () => ({
    __proto__: dart.getMethods(diagnostics$.DiagnosticableTreeMixin.__proto__),
    toString: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel}, {}),
    [$toString]: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel}, {}),
    toStringShallow: dart.fnType(core.String, [], {joiner: core.String, minLevel: diagnostics$.DiagnosticLevel}, {}),
    toStringDeep: dart.fnType(core.String, [], {minLevel: diagnostics$.DiagnosticLevel, prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {}),
    toStringShort: dart.fnType(core.String, []),
    toDiagnosticsNode: dart.fnType(diagnostics$.DiagnosticsNode, [], {name: dart.nullable(core.String), style: dart.nullable(diagnostics$.DiagnosticsTreeStyle)}, {}),
    debugDescribeChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
    debugFillProperties: dart.fnType(dart.void, [diagnostics$.DiagnosticPropertiesBuilder])
  }));
  dart.setLibraryUri(diagnostics$.DiagnosticableTreeMixin, I[1]);
  var level$ = dart.privateName(diagnostics$, "DiagnosticsBlock.level");
  var value$0 = dart.privateName(diagnostics$, "DiagnosticsBlock.value");
  var allowTruncate$ = dart.privateName(diagnostics$, "DiagnosticsBlock.allowTruncate");
  var _children = dart.privateName(diagnostics$, "_children");
  var _properties = dart.privateName(diagnostics$, "_properties");
  diagnostics$.DiagnosticsBlock = class DiagnosticsBlock extends diagnostics$.DiagnosticsNode {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get allowTruncate() {
      return this[allowTruncate$];
    }
    set allowTruncate(value) {
      super.allowTruncate = value;
    }
    getChildren() {
      return this[_children];
    }
    getProperties() {
      return this[_properties];
    }
    toDescription(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      return this[_description];
    }
  };
  (diagnostics$.DiagnosticsBlock.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let style = opts && 'style' in opts ? opts.style : C[18] || CT.C18;
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
    let linePrefix = opts && 'linePrefix' in opts ? opts.linePrefix : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let description = opts && 'description' in opts ? opts.description : null;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    let allowTruncate = opts && 'allowTruncate' in opts ? opts.allowTruncate : false;
    let children = opts && 'children' in opts ? opts.children : C[31] || CT.C31;
    let properties = opts && 'properties' in opts ? opts.properties : C[31] || CT.C31;
    this[value$0] = value;
    this[level$] = level;
    this[allowTruncate$] = allowTruncate;
    this[_description] = description;
    this[_children] = children;
    this[_properties] = properties;
    diagnostics$.DiagnosticsBlock.__proto__.new.call(this, {name: name, style: style, showName: showName && name != null, showSeparator: showSeparator, linePrefix: linePrefix});
    ;
  }).prototype = diagnostics$.DiagnosticsBlock.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticsBlock);
  dart.addTypeCaches(diagnostics$.DiagnosticsBlock);
  dart.setMethodSignature(diagnostics$.DiagnosticsBlock, () => ({
    __proto__: dart.getMethods(diagnostics$.DiagnosticsBlock.__proto__),
    getChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
    getProperties: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), []),
    toDescription: dart.fnType(dart.nullable(core.String), [], {parentConfiguration: dart.nullable(diagnostics$.TextTreeConfiguration)}, {})
  }));
  dart.setLibraryUri(diagnostics$.DiagnosticsBlock, I[1]);
  dart.setFieldSignature(diagnostics$.DiagnosticsBlock, () => ({
    __proto__: dart.getFields(diagnostics$.DiagnosticsBlock.__proto__),
    [_children]: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode)),
    [_properties]: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode)),
    level: dart.finalFieldType(diagnostics$.DiagnosticLevel),
    [_description]: dart.finalFieldType(dart.nullable(core.String)),
    value: dart.finalFieldType(dart.nullable(core.Object)),
    allowTruncate: dart.finalFieldType(core.bool)
  }));
  diagnostics$.DiagnosticsSerializationDelegate = class DiagnosticsSerializationDelegate extends core.Object {};
  (diagnostics$.DiagnosticsSerializationDelegate[dart.mixinNew] = function() {
  }).prototype = diagnostics$.DiagnosticsSerializationDelegate.prototype;
  dart.addTypeTests(diagnostics$.DiagnosticsSerializationDelegate);
  dart.addTypeCaches(diagnostics$.DiagnosticsSerializationDelegate);
  dart.setLibraryUri(diagnostics$.DiagnosticsSerializationDelegate, I[1]);
  var includeProperties$ = dart.privateName(diagnostics$, "_DefaultDiagnosticsSerializationDelegate.includeProperties");
  var subtreeDepth$ = dart.privateName(diagnostics$, "_DefaultDiagnosticsSerializationDelegate.subtreeDepth");
  diagnostics$._DefaultDiagnosticsSerializationDelegate = class _DefaultDiagnosticsSerializationDelegate extends core.Object {
    get includeProperties() {
      return this[includeProperties$];
    }
    set includeProperties(value) {
      super.includeProperties = value;
    }
    get subtreeDepth() {
      return this[subtreeDepth$];
    }
    set subtreeDepth(value) {
      super.subtreeDepth = value;
    }
    additionalNodeProperties(node) {
      return C[32] || CT.C32;
    }
    delegateForNode(node) {
      return this.subtreeDepth > 0 ? this.copyWith({subtreeDepth: this.subtreeDepth - 1}) : this;
    }
    get expandPropertyValues() {
      return false;
    }
    filterChildren(nodes, owner) {
      return nodes;
    }
    filterProperties(nodes, owner) {
      return nodes;
    }
    truncateNodesList(nodes, owner) {
      return nodes;
    }
    copyWith(opts) {
      let t7, t7$;
      let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : null;
      let includeProperties = opts && 'includeProperties' in opts ? opts.includeProperties : null;
      return new diagnostics$._DefaultDiagnosticsSerializationDelegate.new({subtreeDepth: (t7 = subtreeDepth, t7 == null ? this.subtreeDepth : t7), includeProperties: (t7$ = includeProperties, t7$ == null ? this.includeProperties : t7$)});
    }
  };
  (diagnostics$._DefaultDiagnosticsSerializationDelegate.new = function(opts) {
    let includeProperties = opts && 'includeProperties' in opts ? opts.includeProperties : false;
    let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : 0;
    this[includeProperties$] = includeProperties;
    this[subtreeDepth$] = subtreeDepth;
    ;
  }).prototype = diagnostics$._DefaultDiagnosticsSerializationDelegate.prototype;
  dart.addTypeTests(diagnostics$._DefaultDiagnosticsSerializationDelegate);
  dart.addTypeCaches(diagnostics$._DefaultDiagnosticsSerializationDelegate);
  diagnostics$._DefaultDiagnosticsSerializationDelegate[dart.implements] = () => [diagnostics$.DiagnosticsSerializationDelegate];
  dart.setMethodSignature(diagnostics$._DefaultDiagnosticsSerializationDelegate, () => ({
    __proto__: dart.getMethods(diagnostics$._DefaultDiagnosticsSerializationDelegate.__proto__),
    additionalNodeProperties: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [diagnostics$.DiagnosticsNode]),
    delegateForNode: dart.fnType(diagnostics$.DiagnosticsSerializationDelegate, [diagnostics$.DiagnosticsNode]),
    filterChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), diagnostics$.DiagnosticsNode]),
    filterProperties: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), diagnostics$.DiagnosticsNode]),
    truncateNodesList: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), dart.nullable(diagnostics$.DiagnosticsNode)]),
    copyWith: dart.fnType(diagnostics$.DiagnosticsSerializationDelegate, [], {includeProperties: dart.nullable(core.bool), subtreeDepth: dart.nullable(core.int)}, {})
  }));
  dart.setGetterSignature(diagnostics$._DefaultDiagnosticsSerializationDelegate, () => ({
    __proto__: dart.getGetters(diagnostics$._DefaultDiagnosticsSerializationDelegate.__proto__),
    expandPropertyValues: core.bool
  }));
  dart.setLibraryUri(diagnostics$._DefaultDiagnosticsSerializationDelegate, I[1]);
  dart.setFieldSignature(diagnostics$._DefaultDiagnosticsSerializationDelegate, () => ({
    __proto__: dart.getFields(diagnostics$._DefaultDiagnosticsSerializationDelegate.__proto__),
    includeProperties: dart.finalFieldType(core.bool),
    subtreeDepth: dart.finalFieldType(core.int)
  }));
  diagnostics$._isSingleLine = function _isSingleLine(style) {
    return style === diagnostics$.DiagnosticsTreeStyle.singleLine;
  };
  diagnostics$.shortHash = function shortHash(object) {
    return dart.hashCode(object)[$toUnsigned](20)[$toRadixString](16)[$padLeft](5, "0");
  };
  diagnostics$.describeIdentity = function describeIdentity(object) {
    return object$.objectRuntimeType(object, "<optimized out>") + "#" + diagnostics$.shortHash(object);
  };
  diagnostics$.describeEnum = function describeEnum(enumEntry) {
    let description = enumEntry[$toString]();
    let indexOfDot = description[$indexOf](".");
    if (!(indexOfDot !== -1 && indexOfDot < description.length - 1)) dart.assertFailed("The provided object \"" + dart.str(enumEntry) + "\" is not an enum.", I[2], 3036, 5, "indexOfDot != -1 && indexOfDot < description.length - 1");
    return description[$substring](indexOfDot + 1);
  };
  dart.defineLazy(diagnostics$, {
    /*diagnostics$.sparseTextConfiguration*/get sparseTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "├─", prefixOtherLines: " ", prefixLastChildLineOne: "└─", linkCharacter: "│", propertyPrefixIfChildren: "│ ", propertyPrefixNoChildren: "  ", prefixOtherLinesRootNode: " "});
    },
    /*diagnostics$.dashedTextConfiguration*/get dashedTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "╎╌", prefixLastChildLineOne: "└╌", prefixOtherLines: " ", linkCharacter: "╎", propertyPrefixIfChildren: "│ ", propertyPrefixNoChildren: "  ", prefixOtherLinesRootNode: " "});
    },
    /*diagnostics$.denseTextConfiguration*/get denseTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({propertySeparator: ", ", beforeProperties: "(", afterProperties: ")", lineBreakProperties: false, prefixLineOne: "├", prefixOtherLines: "", prefixLastChildLineOne: "└", linkCharacter: "│", propertyPrefixIfChildren: "│", propertyPrefixNoChildren: " ", prefixOtherLinesRootNode: "", addBlankLineIfNoChildren: false, isBlankLineBetweenPropertiesAndChildren: false});
    },
    /*diagnostics$.transitionTextConfiguration*/get transitionTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "╞═╦══ ", prefixLastChildLineOne: "╘═╦══ ", prefixOtherLines: " ║ ", footer: " ╚═══════════", linkCharacter: "│", propertyPrefixIfChildren: "", propertyPrefixNoChildren: "", prefixOtherLinesRootNode: "", afterName: " ═══", afterDescriptionIfBody: ":", bodyIndent: "  ", isNameOnOwnLine: true, addBlankLineIfNoChildren: false, isBlankLineBetweenPropertiesAndChildren: false});
    },
    /*diagnostics$.errorTextConfiguration*/get errorTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "╞═╦", prefixLastChildLineOne: "╘═╦", prefixOtherLines: " ║ ", footer: " ╚═══════════", linkCharacter: "│", propertyPrefixIfChildren: "", propertyPrefixNoChildren: "", prefixOtherLinesRootNode: "", beforeName: "══╡ ", suffixLineOne: " ╞══", mandatoryFooter: "═════", addBlankLineIfNoChildren: false, isBlankLineBetweenPropertiesAndChildren: false});
    },
    /*diagnostics$.whitespaceTextConfiguration*/get whitespaceTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "", prefixLastChildLineOne: "", prefixOtherLines: " ", prefixOtherLinesRootNode: "  ", bodyIndent: "", propertyPrefixIfChildren: "", propertyPrefixNoChildren: "", linkCharacter: " ", addBlankLineIfNoChildren: false, afterDescriptionIfBody: ":", isBlankLineBetweenPropertiesAndChildren: false});
    },
    /*diagnostics$.flatTextConfiguration*/get flatTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "", prefixLastChildLineOne: "", prefixOtherLines: "", prefixOtherLinesRootNode: "", bodyIndent: "", propertyPrefixIfChildren: "", propertyPrefixNoChildren: "", linkCharacter: "", addBlankLineIfNoChildren: false, afterDescriptionIfBody: ":", isBlankLineBetweenPropertiesAndChildren: false});
    },
    /*diagnostics$.singleLineTextConfiguration*/get singleLineTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({propertySeparator: ", ", beforeProperties: "(", afterProperties: ")", prefixLineOne: "", prefixOtherLines: "", prefixLastChildLineOne: "", lineBreak: "", lineBreakProperties: false, addBlankLineIfNoChildren: false, showChildren: false, propertyPrefixIfChildren: "  ", propertyPrefixNoChildren: "  ", linkCharacter: "", prefixOtherLinesRootNode: ""});
    },
    /*diagnostics$.errorPropertyTextConfiguration*/get errorPropertyTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({propertySeparator: ", ", beforeProperties: "(", afterProperties: ")", prefixLineOne: "", prefixOtherLines: "", prefixLastChildLineOne: "", lineBreak: "\n", lineBreakProperties: false, addBlankLineIfNoChildren: false, showChildren: false, propertyPrefixIfChildren: "  ", propertyPrefixNoChildren: "  ", linkCharacter: "", prefixOtherLinesRootNode: "", afterName: ":", isNameOnOwnLine: true});
    },
    /*diagnostics$.shallowTextConfiguration*/get shallowTextConfiguration() {
      return new diagnostics$.TextTreeConfiguration.new({prefixLineOne: "", prefixLastChildLineOne: "", prefixOtherLines: " ", prefixOtherLinesRootNode: "  ", bodyIndent: "", propertyPrefixIfChildren: "", propertyPrefixNoChildren: "", linkCharacter: " ", addBlankLineIfNoChildren: false, afterDescriptionIfBody: ":", isBlankLineBetweenPropertiesAndChildren: false, showChildren: false});
    },
    /*diagnostics$.kNoDefaultValue*/get kNoDefaultValue() {
      return C[30] || CT.C30;
    }
  }, false);
  var $package$ = dart.privateName(assertions, "PartialStackFrame.package");
  var className$ = dart.privateName(assertions, "PartialStackFrame.className");
  var method$ = dart.privateName(assertions, "PartialStackFrame.method");
  assertions.PartialStackFrame = class PartialStackFrame extends core.Object {
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    get className() {
      return this[className$];
    }
    set className(value) {
      super.className = value;
    }
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    matches(stackFrame) {
      let stackFramePackage = stackFrame.packageScheme + ":" + stackFrame.package + "/" + stackFrame.packagePath;
      if (true) {
        return this.package[$allMatches](stackFramePackage)[$isNotEmpty] && stackFrame.method === (this.method[$startsWith]("_") ? "[" + this.method + "]" : this.method);
      }
      return this.package[$allMatches](stackFramePackage)[$isNotEmpty] && stackFrame.method === this.method && stackFrame.className === this.className;
    }
  };
  (assertions.PartialStackFrame.new = function(opts) {
    let $package = opts && 'package' in opts ? opts.package : null;
    let className = opts && 'className' in opts ? opts.className : null;
    let method = opts && 'method' in opts ? opts.method : null;
    this[$package$] = $package;
    this[className$] = className;
    this[method$] = method;
    if (!(className !== null)) dart.assertFailed(null, I[3], 50, 15, "className != null");
    if (!(method !== null)) dart.assertFailed(null, I[3], 51, 15, "method != null");
    if (!($package !== null)) dart.assertFailed(null, I[3], 52, 15, "package != null");
    ;
  }).prototype = assertions.PartialStackFrame.prototype;
  dart.addTypeTests(assertions.PartialStackFrame);
  dart.addTypeCaches(assertions.PartialStackFrame);
  dart.setMethodSignature(assertions.PartialStackFrame, () => ({
    __proto__: dart.getMethods(assertions.PartialStackFrame.__proto__),
    matches: dart.fnType(core.bool, [stack_frame.StackFrame])
  }));
  dart.setLibraryUri(assertions.PartialStackFrame, I[4]);
  dart.setFieldSignature(assertions.PartialStackFrame, () => ({
    __proto__: dart.getFields(assertions.PartialStackFrame.__proto__),
    package: dart.finalFieldType(core.Pattern),
    className: dart.finalFieldType(core.String),
    method: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(assertions.PartialStackFrame, {
    /*assertions.PartialStackFrame.asynchronousSuspension*/get asynchronousSuspension() {
      return C[33] || CT.C33;
    }
  }, false);
  assertions.StackFilter = class StackFilter extends core.Object {};
  (assertions.StackFilter.new = function() {
    ;
  }).prototype = assertions.StackFilter.prototype;
  dart.addTypeTests(assertions.StackFilter);
  dart.addTypeCaches(assertions.StackFilter);
  dart.setLibraryUri(assertions.StackFilter, I[4]);
  var frames$ = dart.privateName(assertions, "RepetitiveStackFrameFilter.frames");
  var replacement$ = dart.privateName(assertions, "RepetitiveStackFrameFilter.replacement");
  var _replacements = dart.privateName(assertions, "_replacements");
  var _matchesFrames = dart.privateName(assertions, "_matchesFrames");
  assertions.RepetitiveStackFrameFilter = class RepetitiveStackFrameFilter extends assertions.StackFilter {
    get frames() {
      return this[frames$];
    }
    set frames(value) {
      super.frames = value;
    }
    get replacement() {
      return this[replacement$];
    }
    set replacement(value) {
      super.replacement = value;
    }
    get numFrames() {
      return this.frames[$length];
    }
    get [_replacements]() {
      return T$.ListOfString().filled(this.numFrames, this.replacement);
    }
    filter(stackFrames, reasons) {
      for (let index = 0; index < stackFrames[$length] - this.numFrames; index = index + 1) {
        if (this[_matchesFrames](stackFrames[$skip](index)[$take](this.numFrames)[$toList]())) {
          reasons[$setRange](index, index + this.numFrames, this[_replacements]);
          index = index + (this.numFrames - 1);
        }
      }
    }
    [_matchesFrames](stackFrames) {
      if (stackFrames[$length] < this.numFrames) {
        return false;
      }
      for (let index = 0; index < stackFrames[$length]; index = index + 1) {
        if (!this.frames[$_get](index).matches(stackFrames[$_get](index))) {
          return false;
        }
      }
      return true;
    }
  };
  (assertions.RepetitiveStackFrameFilter.new = function(opts) {
    let frames = opts && 'frames' in opts ? opts.frames : null;
    let replacement = opts && 'replacement' in opts ? opts.replacement : null;
    this[frames$] = frames;
    this[replacement$] = replacement;
    if (!(frames !== null)) dart.assertFailed(null, I[3], 124, 15, "frames != null");
    if (!(replacement !== null)) dart.assertFailed(null, I[3], 125, 15, "replacement != null");
    assertions.RepetitiveStackFrameFilter.__proto__.new.call(this);
    ;
  }).prototype = assertions.RepetitiveStackFrameFilter.prototype;
  dart.addTypeTests(assertions.RepetitiveStackFrameFilter);
  dart.addTypeCaches(assertions.RepetitiveStackFrameFilter);
  dart.setMethodSignature(assertions.RepetitiveStackFrameFilter, () => ({
    __proto__: dart.getMethods(assertions.RepetitiveStackFrameFilter.__proto__),
    filter: dart.fnType(dart.void, [core.List$(stack_frame.StackFrame), core.List$(dart.nullable(core.String))]),
    [_matchesFrames]: dart.fnType(core.bool, [core.List$(stack_frame.StackFrame)])
  }));
  dart.setGetterSignature(assertions.RepetitiveStackFrameFilter, () => ({
    __proto__: dart.getGetters(assertions.RepetitiveStackFrameFilter.__proto__),
    numFrames: core.int,
    [_replacements]: core.List$(core.String)
  }));
  dart.setLibraryUri(assertions.RepetitiveStackFrameFilter, I[4]);
  dart.setFieldSignature(assertions.RepetitiveStackFrameFilter, () => ({
    __proto__: dart.getFields(assertions.RepetitiveStackFrameFilter.__proto__),
    frames: dart.finalFieldType(core.List$(assertions.PartialStackFrame)),
    replacement: dart.finalFieldType(core.String)
  }));
  assertions._ErrorDiagnostic = class _ErrorDiagnostic extends diagnostics$.DiagnosticsProperty$(core.List$(core.Object)) {
    get value() {
      return dart.nullCheck(super.value);
    }
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      return this.value[$join]("");
    }
  };
  (assertions._ErrorDiagnostic.new = function(message, opts) {
    let style = opts && 'style' in opts ? opts.style : C[19] || CT.C19;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(message !== null)) dart.assertFailed(null, I[3], 173, 15, "message != null");
    assertions._ErrorDiagnostic.__proto__.new.call(this, null, T$.JSArrayOfObject().of([message]), {showName: false, showSeparator: false, defaultValue: null, style: style, level: level});
    ;
  }).prototype = assertions._ErrorDiagnostic.prototype;
  (assertions._ErrorDiagnostic._fromParts = function(messageParts, opts) {
    let style = opts && 'style' in opts ? opts.style : C[19] || CT.C19;
    let level = opts && 'level' in opts ? opts.level : C[5] || CT.C5;
    if (!(messageParts !== null)) dart.assertFailed(null, I[3], 213, 15, "messageParts != null");
    assertions._ErrorDiagnostic.__proto__.new.call(this, null, messageParts, {showName: false, showSeparator: false, defaultValue: null, style: style, level: level});
    ;
  }).prototype = assertions._ErrorDiagnostic.prototype;
  dart.addTypeTests(assertions._ErrorDiagnostic);
  dart.addTypeCaches(assertions._ErrorDiagnostic);
  dart.setGetterSignature(assertions._ErrorDiagnostic, () => ({
    __proto__: dart.getGetters(assertions._ErrorDiagnostic.__proto__),
    value: core.List$(core.Object)
  }));
  dart.setLibraryUri(assertions._ErrorDiagnostic, I[4]);
  assertions.ErrorDescription = class ErrorDescription extends assertions._ErrorDiagnostic {};
  (assertions.ErrorDescription.new = function(message) {
    assertions.ErrorDescription.__proto__.new.call(this, message, {level: diagnostics$.DiagnosticLevel.info});
    ;
  }).prototype = assertions.ErrorDescription.prototype;
  (assertions.ErrorDescription._fromParts = function(messageParts) {
    assertions.ErrorDescription.__proto__._fromParts.call(this, messageParts, {level: diagnostics$.DiagnosticLevel.info});
    ;
  }).prototype = assertions.ErrorDescription.prototype;
  dart.addTypeTests(assertions.ErrorDescription);
  dart.addTypeCaches(assertions.ErrorDescription);
  dart.setLibraryUri(assertions.ErrorDescription, I[4]);
  assertions.ErrorSummary = class ErrorSummary extends assertions._ErrorDiagnostic {};
  (assertions.ErrorSummary.new = function(message) {
    assertions.ErrorSummary.__proto__.new.call(this, message, {level: diagnostics$.DiagnosticLevel.summary});
    ;
  }).prototype = assertions.ErrorSummary.prototype;
  (assertions.ErrorSummary._fromParts = function(messageParts) {
    assertions.ErrorSummary.__proto__._fromParts.call(this, messageParts, {level: diagnostics$.DiagnosticLevel.summary});
    ;
  }).prototype = assertions.ErrorSummary.prototype;
  dart.addTypeTests(assertions.ErrorSummary);
  dart.addTypeCaches(assertions.ErrorSummary);
  dart.setLibraryUri(assertions.ErrorSummary, I[4]);
  assertions.ErrorHint = class ErrorHint extends assertions._ErrorDiagnostic {};
  (assertions.ErrorHint.new = function(message) {
    assertions.ErrorHint.__proto__.new.call(this, message, {level: diagnostics$.DiagnosticLevel.hint});
    ;
  }).prototype = assertions.ErrorHint.prototype;
  (assertions.ErrorHint._fromParts = function(messageParts) {
    assertions.ErrorHint.__proto__._fromParts.call(this, messageParts, {level: diagnostics$.DiagnosticLevel.hint});
    ;
  }).prototype = assertions.ErrorHint.prototype;
  dart.addTypeTests(assertions.ErrorHint);
  dart.addTypeCaches(assertions.ErrorHint);
  dart.setLibraryUri(assertions.ErrorHint, I[4]);
  assertions.ErrorSpacer = class ErrorSpacer extends diagnostics$.DiagnosticsProperty$(dart.void) {};
  (assertions.ErrorSpacer.new = function() {
    assertions.ErrorSpacer.__proto__.new.call(this, "", null, {description: "", showName: false});
    ;
  }).prototype = assertions.ErrorSpacer.prototype;
  dart.addTypeTests(assertions.ErrorSpacer);
  dart.addTypeCaches(assertions.ErrorSpacer);
  dart.setLibraryUri(assertions.ErrorSpacer, I[4]);
  var exception$ = dart.privateName(assertions, "FlutterErrorDetails.exception");
  var stack$ = dart.privateName(assertions, "FlutterErrorDetails.stack");
  var library$ = dart.privateName(assertions, "FlutterErrorDetails.library");
  var context$ = dart.privateName(assertions, "FlutterErrorDetails.context");
  var stackFilter$ = dart.privateName(assertions, "FlutterErrorDetails.stackFilter");
  var informationCollector$ = dart.privateName(assertions, "FlutterErrorDetails.informationCollector");
  var silent$ = dart.privateName(assertions, "FlutterErrorDetails.silent");
  var _exceptionToDiagnosticable = dart.privateName(assertions, "_exceptionToDiagnosticable");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics$.Diagnosticable);
  assertions.FlutterErrorDetails = class FlutterErrorDetails extends Object_Diagnosticable$36$ {
    get exception() {
      return this[exception$];
    }
    set exception(value) {
      super.exception = value;
    }
    get stack() {
      return this[stack$];
    }
    set stack(value) {
      super.stack = value;
    }
    get library() {
      return this[library$];
    }
    set library(value) {
      super.library = value;
    }
    get context() {
      return this[context$];
    }
    set context(value) {
      super.context = value;
    }
    get stackFilter() {
      return this[stackFilter$];
    }
    set stackFilter(value) {
      super.stackFilter = value;
    }
    get informationCollector() {
      return this[informationCollector$];
    }
    set informationCollector(value) {
      super.informationCollector = value;
    }
    get silent() {
      return this[silent$];
    }
    set silent(value) {
      super.silent = value;
    }
    copyWith(opts) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4;
      let context = opts && 'context' in opts ? opts.context : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      let library = opts && 'library' in opts ? opts.library : null;
      let silent = opts && 'silent' in opts ? opts.silent : null;
      let stack = opts && 'stack' in opts ? opts.stack : null;
      let stackFilter = opts && 'stackFilter' in opts ? opts.stackFilter : null;
      return new assertions.FlutterErrorDetails.new({context: (t7 = context, t7 == null ? this.context : t7), exception: (t7$ = exception, t7$ == null ? this.exception : t7$), informationCollector: (t7$0 = informationCollector, t7$0 == null ? this.informationCollector : t7$0), library: (t7$1 = library, t7$1 == null ? this.library : t7$1), silent: (t7$2 = silent, t7$2 == null ? this.silent : t7$2), stack: (t7$3 = stack, t7$3 == null ? this.stack : t7$3), stackFilter: (t7$4 = stackFilter, t7$4 == null ? this.stackFilter : t7$4)});
    }
    exceptionAsString() {
      let longMessage = null;
      if (core.AssertionError.is(this.exception)) {
        let message = core.AssertionError.as(this.exception).message;
        let fullMessage = this.exception[$toString]();
        if (typeof message == 'string' && message !== fullMessage) {
          if (fullMessage.length > message.length) {
            let position = fullMessage[$lastIndexOf](message);
            if (position === fullMessage.length - message.length && position > 2 && fullMessage[$substring](position - 2, position) === ": ") {
              let body = fullMessage[$substring](0, position - 2);
              let splitPoint = body[$indexOf](" Failed assertion:");
              if (splitPoint >= 0) {
                body = body[$substring](0, splitPoint) + "\n" + body[$substring](splitPoint + 1);
              }
              longMessage = message[$trimRight]() + "\n" + body;
            }
          }
        }
        longMessage == null ? longMessage = fullMessage : null;
      } else if (typeof this.exception == 'string') {
        longMessage = core.String.as(this.exception);
      } else if (core.Error.is(this.exception) || core.Exception.is(this.exception)) {
        longMessage = this.exception[$toString]();
      } else {
        longMessage = "  " + this.exception[$toString]();
      }
      longMessage = longMessage[$trimRight]();
      if (longMessage[$isEmpty]) longMessage = "  <no message available>";
      return longMessage;
    }
    [_exceptionToDiagnosticable]() {
      let exception = this.exception;
      if (assertions.FlutterError.is(exception)) {
        return exception;
      }
      if (core.AssertionError.is(exception) && assertions.FlutterError.is(exception.message)) {
        return assertions.FlutterError.as(dart.nullCheck(exception.message));
      }
      return null;
    }
    get summary() {
      let t7;
      const formatException = () => {
        return this.exceptionAsString()[$split]("\n")[$_get](0)[$trimLeft]();
      };
      dart.fn(formatException, T$.VoidToString());
      if (false) {
        return diagnostics$.DiagnosticsNode.message(formatException());
      }
      let diagnosticable = this[_exceptionToDiagnosticable]();
      let summary = null;
      if (diagnosticable != null) {
        let builder = new diagnostics$.DiagnosticPropertiesBuilder.new();
        this.debugFillProperties(builder);
        summary = builder.properties[$cast](T$.DiagnosticsNodeN())[$firstWhere](dart.fn(node => dart.nullCheck(node).level === diagnostics$.DiagnosticLevel.summary, T$.DiagnosticsNodeNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
      }
      t7 = summary;
      return t7 == null ? new assertions.ErrorSummary.new(formatException()) : t7;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let verb = new assertions.ErrorDescription.new("thrown" + dart.str(this.context != null ? new assertions.ErrorDescription.new(" " + dart.str(this.context)) : ""));
      let diagnosticable = this[_exceptionToDiagnosticable]();
      if (core.NullThrownError.is(this.exception)) {
        properties.add(new assertions.ErrorDescription.new("The null value was " + dart.str(verb) + "."));
      } else if (typeof this.exception == 'number') {
        properties.add(new assertions.ErrorDescription.new("The number " + dart.str(this.exception) + " was " + dart.str(verb) + "."));
      } else {
        let errorName = null;
        if (core.AssertionError.is(this.exception)) {
          errorName = new assertions.ErrorDescription.new("assertion");
        } else if (typeof this.exception == 'string') {
          errorName = new assertions.ErrorDescription.new("message");
        } else if (core.Error.is(this.exception) || core.Exception.is(this.exception)) {
          errorName = new assertions.ErrorDescription.new(dart.str(this.exception[$runtimeType]));
        } else {
          errorName = new assertions.ErrorDescription.new(dart.str(this.exception[$runtimeType]) + " object");
        }
        properties.add(new assertions.ErrorDescription.new("The following " + dart.str(errorName) + " was " + dart.str(verb) + ":"));
        if (diagnosticable != null) {
          diagnosticable.debugFillProperties(properties);
        } else {
          let prefix = dart.str(this.exception[$runtimeType]) + ": ";
          let message = this.exceptionAsString();
          if (message[$startsWith](prefix)) message = message[$substring](prefix.length);
          properties.add(new assertions.ErrorSummary.new(message));
        }
      }
      if (this.stack != null) {
        if (core.AssertionError.is(this.exception) && diagnosticable == null) {
          let stackFrames = stack_frame.StackFrame.fromStackTrace(assertions.FlutterError.demangleStackTrace(dart.nullCheck(this.stack)))[$skipWhile](dart.fn(frame => frame.packageScheme === "dart", T$.StackFrameTobool()))[$toList]();
          let ourFault = stackFrames[$length] >= 2 && stackFrames[$_get](0).package === "flutter" && stackFrames[$_get](1).package === "flutter";
          if (ourFault) {
            properties.add(new assertions.ErrorSpacer.new());
            properties.add(new assertions.ErrorHint.new("Either the assertion indicates an error in the framework itself, or we should " + "provide substantially more information in this error message to help you determine " + "and fix the underlying cause.\n" + "In either case, please report this assertion by filing a bug on GitHub:\n" + "  https://github.com/flutter/flutter/issues/new?template=2_bug.md"));
          }
        }
        properties.add(new assertions.ErrorSpacer.new());
        properties.add(new assertions.DiagnosticsStackTrace.new("When the exception was thrown, this was the stack", this.stack, {stackFilter: this.stackFilter}));
      }
      if (this.informationCollector != null) {
        properties.add(new assertions.ErrorSpacer.new());
        dart.nullCheck(this.informationCollector)()[$forEach](dart.bind(properties, 'add'));
      }
    }
    toStringShort() {
      return this.library != null ? "Exception caught by " + dart.str(this.library) : "Exception caught";
    }
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[5] || CT.C5;
      return this.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.error}).toStringDeep({minLevel: minLevel});
    }
    toDiagnosticsNode(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new assertions._FlutterErrorDetailsNode.new({name: name, value: this, style: style});
    }
  };
  (assertions.FlutterErrorDetails.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : "Flutter framework";
    let context = opts && 'context' in opts ? opts.context : null;
    let stackFilter = opts && 'stackFilter' in opts ? opts.stackFilter : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[exception$] = exception;
    this[stack$] = stack;
    this[library$] = library;
    this[context$] = context;
    this[stackFilter$] = stackFilter;
    this[informationCollector$] = informationCollector;
    this[silent$] = silent;
    if (!(exception !== null)) dart.assertFailed(null, I[3], 401, 15, "exception != null");
    ;
  }).prototype = assertions.FlutterErrorDetails.prototype;
  dart.addTypeTests(assertions.FlutterErrorDetails);
  dart.addTypeCaches(assertions.FlutterErrorDetails);
  dart.setMethodSignature(assertions.FlutterErrorDetails, () => ({
    __proto__: dart.getMethods(assertions.FlutterErrorDetails.__proto__),
    copyWith: dart.fnType(assertions.FlutterErrorDetails, [], {context: dart.nullable(diagnostics$.DiagnosticsNode), exception: dart.nullable(core.Object), informationCollector: dart.nullable(dart.fnType(core.Iterable$(diagnostics$.DiagnosticsNode), [])), library: dart.nullable(core.String), silent: dart.nullable(core.bool), stack: dart.nullable(core.StackTrace), stackFilter: dart.nullable(dart.fnType(core.Iterable$(core.String), [core.Iterable$(core.String)]))}, {}),
    exceptionAsString: dart.fnType(core.String, []),
    [_exceptionToDiagnosticable]: dart.fnType(dart.nullable(diagnostics$.Diagnosticable), [])
  }));
  dart.setGetterSignature(assertions.FlutterErrorDetails, () => ({
    __proto__: dart.getGetters(assertions.FlutterErrorDetails.__proto__),
    summary: diagnostics$.DiagnosticsNode
  }));
  dart.setLibraryUri(assertions.FlutterErrorDetails, I[4]);
  dart.setFieldSignature(assertions.FlutterErrorDetails, () => ({
    __proto__: dart.getFields(assertions.FlutterErrorDetails.__proto__),
    exception: dart.finalFieldType(core.Object),
    stack: dart.finalFieldType(dart.nullable(core.StackTrace)),
    library: dart.finalFieldType(dart.nullable(core.String)),
    context: dart.finalFieldType(dart.nullable(diagnostics$.DiagnosticsNode)),
    stackFilter: dart.finalFieldType(dart.nullable(dart.fnType(core.Iterable$(core.String), [core.Iterable$(core.String)]))),
    informationCollector: dart.finalFieldType(dart.nullable(dart.fnType(core.Iterable$(diagnostics$.DiagnosticsNode), []))),
    silent: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(assertions.FlutterErrorDetails, ['toString']);
  dart.defineLazy(assertions.FlutterErrorDetails, {
    /*assertions.FlutterErrorDetails.propertiesTransformers*/get propertiesTransformers() {
      return T$.JSArrayOfIterableOfDiagnosticsNodeToIterableOfDiagnosticsNode().of([]);
    }
  }, false);
  var diagnostics$0 = dart.privateName(assertions, "FlutterError.diagnostics");
  const Error_DiagnosticableTreeMixin$36 = class Error_DiagnosticableTreeMixin extends core.Error {};
  (Error_DiagnosticableTreeMixin$36.new = function() {
    Error_DiagnosticableTreeMixin$36.__proto__.new.call(this);
  }).prototype = Error_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(Error_DiagnosticableTreeMixin$36, diagnostics$.DiagnosticableTreeMixin);
  assertions.FlutterError = class FlutterError extends Error_DiagnosticableTreeMixin$36 {
    get diagnostics() {
      return this[diagnostics$0];
    }
    set diagnostics(value) {
      super.diagnostics = value;
    }
    static new(message) {
      let lines = message[$split]("\n");
      return new assertions.FlutterError.fromParts((() => {
        let t7 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(lines[$first])]);
        t7[$addAll](lines[$skip](1)[$map](diagnostics$.DiagnosticsNode, dart.fn(line => new assertions.ErrorDescription.new(line), T$.StringToErrorDescription())));
        return t7;
      })());
    }
    get message() {
      return this.toString();
    }
    static _defaultErrorHandler(details) {
      return assertions.FlutterError.presentError(details);
    }
    static _defaultStackTraceDemangler(stackTrace) {
      return stackTrace;
    }
    static resetErrorCount() {
      assertions.FlutterError._errorCount = 0;
    }
    static dumpErrorToConsole(details, opts) {
      let forceReport = opts && 'forceReport' in opts ? opts.forceReport : false;
      if (!(details !== null)) dart.assertFailed(null, I[3], 950, 12, "details != null");
      if (!(details.exception !== null)) dart.assertFailed(null, I[3], 951, 12, "details.exception != null");
      let isInDebugMode = false;
      if (!dart.fn(() => {
        isInDebugMode = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[3], 953, 12, "() {\r\n      // In checked mode, we ignore the \"silent\" flag.\r\n      isInDebugMode = true;\r\n      return true;\r\n    }()");
      let reportError = isInDebugMode || details.silent !== true;
      if (!reportError && !forceReport) return;
      if (assertions.FlutterError._errorCount === 0 || forceReport) {
        if (isInDebugMode) {
          print.debugPrint(new diagnostics$.TextTreeRenderer.new({wrapWidth: 100, wrapWidthProperties: 100, maxDescendentsTruncatableNode: 5}).render(details.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.error}))[$trimRight]());
        } else {
          assertions.debugPrintStack({stackTrace: details.stack, label: details.exception[$toString](), maxFrames: 100});
        }
      } else {
        print.debugPrint("Another exception was thrown: " + dart.str(details.summary));
      }
      assertions.FlutterError._errorCount = assertions.FlutterError._errorCount + 1;
    }
    static addDefaultStackFilter(filter) {
      assertions.FlutterError._stackFilters[$add](filter);
    }
    static defaultStackFilter(frames) {
      let t8, t9;
      let removedPackagesAndClasses = new (T$.IdentityMapOfString$int()).from(["dart:async-patch", 0, "dart:async", 0, "package:stack_trace", 0, "class _AssertionError", 0, "class _FakeAsync", 0, "class _FrameCallbackEntry", 0, "class _Timer", 0, "class _RawReceivePortImpl", 0]);
      let skipped = 0;
      let parsedFrames = stack_frame.StackFrame.fromStackString(frames[$join]("\n"));
      for (let index = 0; index < parsedFrames[$length]; index = index + 1) {
        let frame = parsedFrames[$_get](index);
        let className = "class " + frame.className;
        let $package = frame.packageScheme + ":" + frame.package;
        if (removedPackagesAndClasses[$containsKey](className)) {
          skipped = skipped + 1;
          removedPackagesAndClasses[$update](className, dart.fn(value => value + 1, T$.intToint()));
          parsedFrames[$removeAt](index);
          index = index - 1;
        } else if (removedPackagesAndClasses[$containsKey]($package)) {
          skipped = skipped + 1;
          removedPackagesAndClasses[$update]($package, dart.fn(value => value + 1, T$.intToint()));
          parsedFrames[$removeAt](index);
          index = index - 1;
        }
      }
      let reasons = T$.ListOfStringN().filled(parsedFrames[$length], null, {growable: false});
      for (let filter of assertions.FlutterError._stackFilters) {
        filter.filter(parsedFrames, reasons);
      }
      let result = T$.JSArrayOfString().of([]);
      for (let index = 0; index < parsedFrames[$length]; index = index + 1) {
        let start = index;
        while (index < reasons[$length] - 1 && reasons[$_get](index) != null && reasons[$_get](index + 1) == reasons[$_get](index)) {
          index = index + 1;
        }
        let suffix = "";
        if (reasons[$_get](index) != null) {
          if (index !== start) {
            suffix = " (" + dart.str(index - start + 2) + " frames)";
          } else {
            suffix = " (1 frame)";
          }
        }
        let resultLine = dart.str((t8 = reasons[$_get](index), t8 == null ? parsedFrames[$_get](index).source : t8)) + suffix;
        result[$add](resultLine);
      }
      let where = (t9 = (() => {
        let t8 = T$.JSArrayOfString().of([]);
        for (let entry of removedPackagesAndClasses[$entries])
          if (entry.value > 0) t8[$add](entry.key);
        return t8;
      })(), (() => {
        t9[$sort]();
        return t9;
      })());
      if (skipped === 1) {
        result[$add]("(elided one frame from " + where[$single] + ")");
      } else if (skipped > 1) {
        if (where[$length] > 1) where[$_set](where[$length] - 1, "and " + where[$last]);
        if (where[$length] > 2) {
          result[$add]("(elided " + dart.str(skipped) + " frames from " + where[$join](", ") + ")");
        } else {
          result[$add]("(elided " + dart.str(skipped) + " frames from " + where[$join](" ") + ")");
        }
      }
      return result;
    }
    debugFillProperties(properties) {
      this.diagnostics[$forEach](dart.bind(properties, 'add'));
    }
    toStringShort() {
      return "FlutterError";
    }
    toString(opts) {
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[5] || CT.C5;
      if (false) {
        let errors = this.diagnostics[$whereType](assertions._ErrorDiagnostic);
        return errors[$isNotEmpty] ? errors[$first].valueToString() : this.toStringShort();
      }
      let renderer = new diagnostics$.TextTreeRenderer.new({wrapWidth: 4000000000});
      return this.diagnostics[$map](core.String, dart.fn(node => renderer.render(node)[$trimRight](), T$.DiagnosticsNodeToString()))[$join]("\n");
    }
    static reportError(details) {
      let t9;
      if (!(details !== null)) dart.assertFailed(null, I[3], 1105, 12, "details != null");
      if (!(details.exception !== null)) dart.assertFailed(null, I[3], 1106, 12, "details.exception != null");
      t9 = assertions.FlutterError.onError;
      t9 == null ? null : t9(details);
    }
  };
  (assertions.FlutterError.fromParts = function(diagnostics) {
    this[diagnostics$0] = diagnostics;
    if (!diagnostics[$isNotEmpty]) dart.assertFailed(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Empty FlutterError")])), I[3], 798, 53, "diagnostics.isNotEmpty");
    assertions.FlutterError.__proto__.new.call(this);
    if (!(this.diagnostics[$first].level === diagnostics$.DiagnosticLevel.summary)) dart.assertFailed(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("FlutterError is missing a summary."), new assertions.ErrorDescription.new("All FlutterError objects should start with a short (one line) " + "summary description of the problem that was detected."), new (T$.DiagnosticsPropertyOfFlutterError()).new("Malformed", this, {expandableValue: true, showSeparator: false, style: diagnostics$.DiagnosticsTreeStyle.whitespace}), new assertions.ErrorDescription.new("\nThis error should still help you solve your problem, " + "however please also report this malformed error in the " + "framework by filing a bug on GitHub:\n" + "  https://github.com/flutter/flutter/issues/new?template=2_bug.md")])), I[3], 800, 7, "diagnostics.first.level == DiagnosticLevel.summary");
    if (!dart.fn(() => {
      let summaries = this.diagnostics[$where](dart.fn(node => node.level === diagnostics$.DiagnosticLevel.summary, T$.DiagnosticsNodeTobool()));
      if (summaries[$length] > 1) {
        let message = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("FlutterError contained multiple error summaries."), new assertions.ErrorDescription.new("All FlutterError objects should have only a single short " + "(one line) summary description of the problem that was " + "detected."), new (T$.DiagnosticsPropertyOfFlutterError()).new("Malformed", this, {expandableValue: true, showSeparator: false, style: diagnostics$.DiagnosticsTreeStyle.whitespace}), new assertions.ErrorDescription.new("\nThe malformed error has " + dart.str(summaries[$length]) + " summaries.")]);
        let i = 1;
        for (let summary of summaries) {
          message[$add](new (T$.DiagnosticsPropertyOfDiagnosticsNode()).new("Summary " + dart.str(i), summary, {expandableValue: true}));
          i = i + 1;
        }
        message[$add](new assertions.ErrorDescription.new("\nThis error should still help you solve your problem, " + "however please also report this malformed error in the " + "framework by filing a bug on GitHub:\n" + "  https://github.com/flutter/flutter/issues/new?template=2_bug.md"));
        dart.throw(new assertions.FlutterError.fromParts(message));
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[3], 816, 12, "() {\r\n      final Iterable<DiagnosticsNode> summaries = diagnostics.where((DiagnosticsNode node) => node.level == DiagnosticLevel.summary);\r\n      if (summaries.length > 1) {\r\n        final List<DiagnosticsNode> message = <DiagnosticsNode>[\r\n          ErrorSummary('FlutterError contained multiple error summaries.'),\r\n          ErrorDescription(\r\n            'All FlutterError objects should have only a single short '\r\n            '(one line) summary description of the problem that was '\r\n            'detected.',\r\n          ),\r\n          DiagnosticsProperty<FlutterError>('Malformed', this, expandableValue: true, showSeparator: false, style: DiagnosticsTreeStyle.whitespace),\r\n          ErrorDescription('\\nThe malformed error has ${summaries.length} summaries.'),\r\n        ];\r\n        int i = 1;\r\n        for (final DiagnosticsNode summary in summaries) {\r\n          message.add(DiagnosticsProperty<DiagnosticsNode>('Summary $i', summary, expandableValue : true));\r\n          i += 1;\r\n        }\r\n        message.add(ErrorDescription(\r\n          '\\nThis error should still help you solve your problem, '\r\n          'however please also report this malformed error in the '\r\n          'framework by filing a bug on GitHub:\\n'\r\n          '  https://github.com/flutter/flutter/issues/new?template=2_bug.md',\r\n        ));\r\n        throw FlutterError.fromParts(message);\r\n      }\r\n      return true;\r\n    }()");
  }).prototype = assertions.FlutterError.prototype;
  dart.addTypeTests(assertions.FlutterError);
  dart.addTypeCaches(assertions.FlutterError);
  assertions.FlutterError[dart.implements] = () => [core.AssertionError];
  dart.setGetterSignature(assertions.FlutterError, () => ({
    __proto__: dart.getGetters(assertions.FlutterError.__proto__),
    message: core.String
  }));
  dart.setLibraryUri(assertions.FlutterError, I[4]);
  dart.setFieldSignature(assertions.FlutterError, () => ({
    __proto__: dart.getFields(assertions.FlutterError.__proto__),
    diagnostics: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode))
  }));
  dart.defineExtensionMethods(assertions.FlutterError, ['toString']);
  dart.defineLazy(assertions.FlutterError, {
    /*assertions.FlutterError.onError*/get onError() {
      return C[34] || CT.C34;
    },
    set onError(_) {},
    /*assertions.FlutterError.demangleStackTrace*/get demangleStackTrace() {
      return C[35] || CT.C35;
    },
    set demangleStackTrace(_) {},
    /*assertions.FlutterError.presentError*/get presentError() {
      return C[36] || CT.C36;
    },
    set presentError(_) {},
    /*assertions.FlutterError._errorCount*/get _errorCount() {
      return 0;
    },
    set _errorCount(_) {},
    /*assertions.FlutterError.wrapWidth*/get wrapWidth() {
      return 100;
    },
    /*assertions.FlutterError._stackFilters*/get _stackFilters() {
      return T$.JSArrayOfStackFilter().of([]);
    }
  }, false);
  assertions.DiagnosticsStackTrace = class DiagnosticsStackTrace extends diagnostics$.DiagnosticsBlock {
    static _applyStackFilter(stack, stackFilter) {
      let t9;
      if (stack == null) return T$.JSArrayOfDiagnosticsNode().of([]);
      let filter = (t9 = stackFilter, t9 == null ? C[37] || CT.C37 : t9);
      let frames = filter(dart.str(assertions.FlutterError.demangleStackTrace(stack))[$trimRight]()[$split]("\n"));
      return frames[$map](diagnostics$.DiagnosticsNode, C[38] || CT.C38)[$toList]();
    }
    static _createStackFrame(frame) {
      return diagnostics$.DiagnosticsNode.message(frame, {allowWrap: false});
    }
  };
  (assertions.DiagnosticsStackTrace.new = function(name, stack, opts) {
    let stackFilter = opts && 'stackFilter' in opts ? opts.stackFilter : null;
    let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
    assertions.DiagnosticsStackTrace.__proto__.new.call(this, {name: name, value: stack, properties: assertions.DiagnosticsStackTrace._applyStackFilter(stack, stackFilter), style: diagnostics$.DiagnosticsTreeStyle.flat, showSeparator: showSeparator, allowTruncate: true});
    ;
  }).prototype = assertions.DiagnosticsStackTrace.prototype;
  (assertions.DiagnosticsStackTrace.singleFrame = function(name, opts) {
    let frame = opts && 'frame' in opts ? opts.frame : null;
    let showSeparator = opts && 'showSeparator' in opts ? opts.showSeparator : true;
    assertions.DiagnosticsStackTrace.__proto__.new.call(this, {name: name, properties: T$.JSArrayOfDiagnosticsNode().of([assertions.DiagnosticsStackTrace._createStackFrame(frame)]), style: diagnostics$.DiagnosticsTreeStyle.whitespace, showSeparator: showSeparator});
    ;
  }).prototype = assertions.DiagnosticsStackTrace.prototype;
  dart.addTypeTests(assertions.DiagnosticsStackTrace);
  dart.addTypeCaches(assertions.DiagnosticsStackTrace);
  dart.setLibraryUri(assertions.DiagnosticsStackTrace, I[4]);
  assertions._FlutterErrorDetailsNode = class _FlutterErrorDetailsNode extends diagnostics$.DiagnosticableNode$(assertions.FlutterErrorDetails) {
    get builder() {
      let builder = super.builder;
      if (builder == null) {
        return null;
      }
      let properties = builder.properties;
      for (let transformer of assertions.FlutterErrorDetails.propertiesTransformers) {
        properties = transformer(properties);
      }
      return new diagnostics$.DiagnosticPropertiesBuilder.fromProperties(properties[$toList]());
    }
  };
  (assertions._FlutterErrorDetailsNode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let style = opts && 'style' in opts ? opts.style : null;
    assertions._FlutterErrorDetailsNode.__proto__.new.call(this, {name: name, value: value, style: style});
    ;
  }).prototype = assertions._FlutterErrorDetailsNode.prototype;
  dart.addTypeTests(assertions._FlutterErrorDetailsNode);
  dart.addTypeCaches(assertions._FlutterErrorDetailsNode);
  dart.setLibraryUri(assertions._FlutterErrorDetailsNode, I[4]);
  assertions.debugPrintStack = function debugPrintStack(opts) {
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let maxFrames = opts && 'maxFrames' in opts ? opts.maxFrames : null;
    if (label != null) print.debugPrint(label);
    if (stackTrace == null) {
      stackTrace = core.StackTrace.current;
    } else {
      stackTrace = assertions.FlutterError.demangleStackTrace(stackTrace);
    }
    let lines = dart.toString(stackTrace)[$trimRight]()[$split]("\n");
    if (true && lines[$isNotEmpty]) {
      lines = lines[$skipWhile](dart.fn(line => line[$contains]("StackTrace.current") || line[$contains]("dart-sdk/lib/_internal") || line[$contains]("dart:sdk_internal"), T$.StringTobool()));
    }
    if (maxFrames != null) lines = lines[$take](maxFrames);
    print.debugPrint(assertions.FlutterError.defaultStackFilter(lines)[$join]("\n"));
  };
  dart.trackLibraries("packages/flutter/src/foundation/debug.dart", {
    "package:flutter/src/foundation/debug.dart": debug,
    "package:flutter/src/foundation/diagnostics.dart": diagnostics$,
    "package:flutter/src/foundation/assertions.dart": assertions
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["debug.dart","diagnostics.dart","assertions.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/foundation/debug.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__debug: debug,
    src__foundation__diagnostics: diagnostics$,
    src__foundation__assertions: assertions
  };
}));

//# sourceMappingURL=debug.dart.lib.js.map
=======
        __proto__: binding$0._DefaultBinaryMessenger.prototype
      });
    },
    get C23() {
      return C[23] = dart.fn(binding$0.ServicesBinding._parseLicenses, T$.StringToListOfLicenseEntry());
    },
    get C24() {
      return C[24] = dart.constList([], core.String);
    },
    get C25() {
      return C[25] = dart.fn(asset_bundle.AssetBundle._utf8decode, T$.ByteDataToString());
    }
  }, false);
  var C = Array(26).fill(void 0);
  var I = [
    "package:flutter/src/services/system_channels.dart",
    "package:flutter/src/services/message_codecs.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/message_codecs.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/platform_channel.dart",
    "package:flutter/src/services/platform_channel.dart",
    "package:flutter/src/services/message_codec.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/message_codec.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/restoration.dart",
    "package:flutter/src/services/restoration.dart",
    "package:flutter/src/services/binary_messenger.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/binding.dart",
    "package:flutter/src/services/binding.dart",
    "package:flutter/src/services/asset_bundle.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/services/asset_bundle.dart"
  ];
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var BasicMessageChannel__binaryMessenger = dart.privateName(platform_channel, "BasicMessageChannel._binaryMessenger");
  var BasicMessageChannel_codec = dart.privateName(platform_channel, "BasicMessageChannel.codec");
  var BasicMessageChannel_name = dart.privateName(platform_channel, "BasicMessageChannel.name");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  system_channels.SystemChannels = class SystemChannels extends core.Object {};
  (system_channels.SystemChannels.__ = function() {
    ;
  }).prototype = system_channels.SystemChannels.prototype;
  dart.addTypeTests(system_channels.SystemChannels);
  dart.addTypeCaches(system_channels.SystemChannels);
  dart.setLibraryUri(system_channels.SystemChannels, I[0]);
  dart.defineLazy(system_channels.SystemChannels, {
    /*system_channels.SystemChannels.navigation*/get navigation() {
      return C[0] || CT.C0;
    },
    /*system_channels.SystemChannels.platform*/get platform() {
      return C[2] || CT.C2;
    },
    /*system_channels.SystemChannels.textInput*/get textInput() {
      return C[3] || CT.C3;
    },
    /*system_channels.SystemChannels.keyEvent*/get keyEvent() {
      return C[4] || CT.C4;
    },
    /*system_channels.SystemChannels.lifecycle*/get lifecycle() {
      return C[6] || CT.C6;
    },
    /*system_channels.SystemChannels.system*/get system() {
      return C[8] || CT.C8;
    },
    /*system_channels.SystemChannels.accessibility*/get accessibility() {
      return C[9] || CT.C9;
    },
    /*system_channels.SystemChannels.platform_views*/get platform_views() {
      return C[11] || CT.C11;
    },
    /*system_channels.SystemChannels.skia*/get skia() {
      return C[13] || CT.C13;
    },
    /*system_channels.SystemChannels.mouseCursor*/get mouseCursor() {
      return C[14] || CT.C14;
    },
    /*system_channels.SystemChannels.restoration*/get restoration() {
      return C[15] || CT.C15;
    },
    /*system_channels.SystemChannels.deferredComponent*/get deferredComponent() {
      return C[16] || CT.C16;
    },
    /*system_channels.SystemChannels.localization*/get localization() {
      return C[17] || CT.C17;
    }
  }, false);
  message_codecs.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      T$.ByteDataN().as(message);
      return message;
    }
  };
  (message_codecs.BinaryCodec.new = function() {
    ;
  }).prototype = message_codecs.BinaryCodec.prototype;
  dart.addTypeTests(message_codecs.BinaryCodec);
  dart.addTypeCaches(message_codecs.BinaryCodec);
  message_codecs.BinaryCodec[dart.implements] = () => [message_codec.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(message_codecs.BinaryCodec, () => ({
    __proto__: dart.getMethods(message_codecs.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(typed_data.ByteData)]),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(message_codecs.BinaryCodec, I[1]);
  message_codecs.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) return null;
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List](message[$offsetInBytes], message[$lengthInBytes]));
    }
    encodeMessage(message) {
      T$.StringN().as(message);
      if (message == null) return null;
      let encoded = convert.utf8.encoder.convert(message);
      return encoded[$buffer][$asByteData]();
    }
  };
  (message_codecs.StringCodec.new = function() {
    ;
  }).prototype = message_codecs.StringCodec.prototype;
  dart.addTypeTests(message_codecs.StringCodec);
  dart.addTypeCaches(message_codecs.StringCodec);
  message_codecs.StringCodec[dart.implements] = () => [message_codec.MessageCodec$(core.String)];
  dart.setMethodSignature(message_codecs.StringCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StringCodec.__proto__),
    decodeMessage: dart.fnType(dart.nullable(core.String), [dart.nullable(typed_data.ByteData)]),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(message_codecs.StringCodec, I[1]);
  message_codecs.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      return (C[7] || CT.C7).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) return message;
      return convert.json.decode(dart.nullCheck((C[7] || CT.C7).decodeMessage(message)));
    }
  };
  (message_codecs.JSONMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMessageCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMessageCodec);
  dart.addTypeCaches(message_codecs.JSONMessageCodec);
  message_codecs.JSONMessageCodec[dart.implements] = () => [message_codec.MessageCodec$(dart.nullable(core.Object))];
  dart.setMethodSignature(message_codecs.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)]),
    decodeMessage: dart.fnType(dart.dynamic, [dart.nullable(typed_data.ByteData)])
  }));
  dart.setLibraryUri(message_codecs.JSONMessageCodec, I[1]);
  message_codecs.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(new (T$.IdentityMapOfString$ObjectN()).from(["method", call.method, "args", call.arguments])));
    }
    decodeMethodCall(methodCall) {
      let decoded = (C[5] || CT.C5).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      let method = decoded[$_get]("method");
      let $arguments = decoded[$_get]("args");
      if (typeof method == 'string') return new message_codec.MethodCall.new(method, $arguments);
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (C[5] || CT.C5).decodeMessage(envelope);
      if (!core.List.is(decoded)) dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      if (decoded[$length] === 1) return decoded[$_get](0);
      if (decoded[$length] === 3 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string')) dart.throw(new message_codec.PlatformException.new({code: core.String.as(decoded[$_get](0)), message: core.String.as(decoded[$_get](1)), details: decoded[$_get](2)}));
      if (decoded[$length] === 4 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string') && (decoded[$_get](3) == null || typeof decoded[$_get](3) == 'string')) dart.throw(new message_codec.PlatformException.new({code: core.String.as(decoded[$_get](0)), message: core.String.as(decoded[$_get](1)), details: decoded[$_get](2), stacktrace: core.String.as(decoded[$_get](3))}));
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(T$.JSArrayOfObjectN().of([result])));
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code !== null)) dart.assertFailed(null, I[2], 180, 12, "code != null");
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(T$.JSArrayOfObjectN().of([code, message, details])));
    }
  };
  (message_codecs.JSONMethodCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMethodCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMethodCodec);
  dart.addTypeCaches(message_codecs.JSONMethodCodec);
  message_codecs.JSONMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [dart.nullable(typed_data.ByteData)]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.nullable(core.Object)]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {details: dart.nullable(core.Object), message: dart.nullable(core.String)}, {code: core.String})
  }));
  dart.setLibraryUri(message_codecs.JSONMethodCodec, I[1]);
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  message_codecs.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.WriteBuffer.new();
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (buffer.hasRemaining) dart.throw(C[18] || CT.C18);
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(0);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? 1 : 2);
      } else if (typeof value == 'number') {
        buffer.putUint8(6);
        buffer.putFloat64(value);
      } else if (core.int.is(value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(3);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(4);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(7);
        let bytes = convert.utf8.encoder.convert(value);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(bytes);
      } else if (typed_data.Uint8List.is(value)) {
        buffer.putUint8(8);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (typed_data.Int32List.is(value)) {
        buffer.putUint8(9);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (typed_data.Int64List.is(value)) {
        buffer.putUint8(10);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (typed_data.Float64List.is(value)) {
        buffer.putUint8(11);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (core.List.is(value)) {
        buffer.putUint8(12);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (core.Map.is(value)) {
        buffer.putUint8(13);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, T$.ObjectNAndObjectNTovoid()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!buffer.hasRemaining) dart.throw(C[18] || CT.C18);
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 0:
        {
          return null;
        }
        case 1:
        {
          return true;
        }
        case 2:
        {
          return false;
        }
        case 3:
        {
          return buffer.getInt32();
        }
        case 4:
        {
          return buffer.getInt64();
        }
        case 6:
        {
          return buffer.getFloat64();
        }
        case 5:
        case 7:
        {
          let length = this.readSize(buffer);
          return convert.utf8.decoder.convert(buffer.getUint8List(length));
        }
        case 8:
        {
          let length = this.readSize(buffer);
          return buffer.getUint8List(length);
        }
        case 9:
        {
          let length = this.readSize(buffer);
          return buffer.getInt32List(length);
        }
        case 10:
        {
          let length = this.readSize(buffer);
          return buffer.getInt64List(length);
        }
        case 11:
        {
          let length = this.readSize(buffer);
          return buffer.getFloat64List(length);
        }
        case 12:
        {
          let length = this.readSize(buffer);
          let result = T$.ListOfObjectN().filled(length, null, {growable: false});
          for (let i = 0; i < length; i = i + 1)
            result[$_set](i, this.readValue(buffer));
          return result;
        }
        case 13:
        {
          let length = this.readSize(buffer);
          let result = new (T$.LinkedMapOfObjectN$ObjectN()).new();
          for (let i = 0; i < length; i = i + 1)
            result[$_set](this.readValue(buffer), this.readValue(buffer));
          return result;
        }
        default:
        {
          dart.throw(C[18] || CT.C18);
        }
      }
    }
    writeSize(buffer, value) {
      if (!(0 <= value && value <= 4294967295)) dart.assertFailed(null, I[2], 491, 12, "0 <= value && value <= 0xffffffff");
      if (value < 254) {
        buffer.putUint8(value);
      } else if (value <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
        {
          return buffer.getUint16();
        }
        case 255:
        {
          return buffer.getUint32();
        }
        default:
        {
          return value;
        }
      }
    }
  };
  (message_codecs.StandardMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.StandardMessageCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMessageCodec);
  dart.addTypeCaches(message_codecs.StandardMessageCodec);
  message_codecs.StandardMessageCodec[dart.implements] = () => [message_codec.MessageCodec$(dart.nullable(core.Object))];
  dart.setMethodSignature(message_codecs.StandardMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMessageCodec.__proto__),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)]),
    decodeMessage: dart.fnType(dart.dynamic, [dart.nullable(typed_data.ByteData)]),
    writeValue: dart.fnType(dart.void, [serialization.WriteBuffer, dart.nullable(core.Object)]),
    readValue: dart.fnType(dart.nullable(core.Object), [serialization.ReadBuffer]),
    readValueOfType: dart.fnType(dart.nullable(core.Object), [core.int, serialization.ReadBuffer]),
    writeSize: dart.fnType(dart.void, [serialization.WriteBuffer, core.int]),
    readSize: dart.fnType(core.int, [serialization.ReadBuffer])
  }));
  dart.setLibraryUri(message_codecs.StandardMessageCodec, I[1]);
  dart.defineLazy(message_codecs.StandardMessageCodec, {
    /*message_codecs.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*message_codecs.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*message_codecs.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*message_codecs.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*message_codecs.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*message_codecs.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*message_codecs.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*message_codecs.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*message_codecs.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*message_codecs.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*message_codecs.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*message_codecs.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    }
  }, false);
  const messageCodec$ = StandardMethodCodec_messageCodec;
  message_codecs.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    encodeMethodCall(call) {
      let buffer = new serialization.WriteBuffer.new();
      this.messageCodec.writeValue(buffer, call.method);
      this.messageCodec.writeValue(buffer, call.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new serialization.ReadBuffer.new(dart.nullCheck(methodCall));
      let method = this.messageCodec.readValue(buffer);
      let $arguments = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !buffer.hasRemaining)
        return new message_codec.MethodCall.new(method, $arguments);
      else
        dart.throw(C[19] || CT.C19);
    }
    encodeSuccessEnvelope(result) {
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) dart.throw(C[20] || CT.C20);
      let buffer = new serialization.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) return this.messageCodec.readValue(buffer);
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      let errorStacktrace = buffer.hasRemaining ? T$.StringN().as(this.messageCodec.readValue(buffer)) : null;
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !buffer.hasRemaining)
        dart.throw(new message_codec.PlatformException.new({code: errorCode, message: T$.StringN().as(errorMessage), details: errorDetails, stacktrace: errorStacktrace}));
      else
        dart.throw(C[21] || CT.C21);
    }
  };
  (message_codecs.StandardMethodCodec.new = function(messageCodec = C[10] || CT.C10) {
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = message_codecs.StandardMethodCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMethodCodec);
  dart.addTypeCaches(message_codecs.StandardMethodCodec);
  message_codecs.StandardMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [dart.nullable(typed_data.ByteData)]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.nullable(core.Object)]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {details: dart.nullable(core.Object), message: dart.nullable(core.String)}, {code: core.String}),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(message_codecs.StandardMethodCodec, I[1]);
  dart.setFieldSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getFields(message_codecs.StandardMethodCodec.__proto__),
    messageCodec: dart.finalFieldType(message_codecs.StandardMessageCodec)
  }));
  var _binaryMessenger = dart.privateName(platform_channel, "_binaryMessenger");
  const _is_BasicMessageChannel_default = Symbol('_is_BasicMessageChannel_default');
  platform_channel.BasicMessageChannel$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var TNToFutureOfT = () => (TNToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [TN()])))();
    var TNToNFutureOfT = () => (TNToNFutureOfT = dart.constFn(dart.nullable(TNToFutureOfT())))();
    const name$ = BasicMessageChannel_name;
    const codec$ = BasicMessageChannel_codec;
    const _binaryMessenger$ = BasicMessageChannel__binaryMessenger;
    class BasicMessageChannel extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get codec() {
        return this[codec$];
      }
      set codec(value) {
        super.codec = value;
      }
      get [_binaryMessenger]() {
        return this[_binaryMessenger$];
      }
      set [_binaryMessenger](value) {
        super[_binaryMessenger] = value;
      }
      get binaryMessenger() {
        let t0;
        t0 = this[_binaryMessenger];
        return t0 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t0;
      }
      send(message) {
        T.as(message);
        return async.async(TN(), (function* send() {
          return this.codec.decodeMessage(yield this.binaryMessenger.send(this.name, this.codec.encodeMessage(message)));
        }).bind(this));
      }
      setMessageHandler(handler) {
        TNToNFutureOfT().as(handler);
        if (handler == null) {
          this.binaryMessenger.setMessageHandler(this.name, null);
        } else {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(message => async.async(T$.ByteDataN(), (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), T$.ByteDataNToFutureOfByteDataN()));
        }
      }
      setMockMessageHandler(handler) {
        TNToNFutureOfT().as(handler);
        if (handler == null) {
          this.binaryMessenger.setMockMessageHandler(this.name, null);
        } else {
          this.binaryMessenger.setMockMessageHandler(this.name, dart.fn(message => async.async(T$.ByteDataN(), (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), T$.ByteDataNToFutureOfByteDataN()));
        }
      }
    }
    (BasicMessageChannel.new = function(name, codec, opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      this[name$] = name;
      this[codec$] = codec;
      if (!(name !== null)) dart.assertFailed(null, I[3], 37, 16, "name != null");
      if (!(codec !== null)) dart.assertFailed(null, I[3], 38, 16, "codec != null");
      this[_binaryMessenger$] = binaryMessenger;
      ;
    }).prototype = BasicMessageChannel.prototype;
    dart.addTypeTests(BasicMessageChannel);
    BasicMessageChannel.prototype[_is_BasicMessageChannel_default] = true;
    dart.addTypeCaches(BasicMessageChannel);
    dart.setMethodSignature(BasicMessageChannel, () => ({
      __proto__: dart.getMethods(BasicMessageChannel.__proto__),
      send: dart.fnType(async.Future$(dart.nullable(T)), [dart.nullable(core.Object)]),
      setMessageHandler: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setMockMessageHandler: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BasicMessageChannel, () => ({
      __proto__: dart.getGetters(BasicMessageChannel.__proto__),
      binaryMessenger: binary_messenger.BinaryMessenger
    }));
    dart.setLibraryUri(BasicMessageChannel, I[4]);
    dart.setFieldSignature(BasicMessageChannel, () => ({
      __proto__: dart.getFields(BasicMessageChannel.__proto__),
      name: dart.finalFieldType(core.String),
      codec: dart.finalFieldType(message_codec.MessageCodec$(T)),
      [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
    }));
    return BasicMessageChannel;
  });
  platform_channel.BasicMessageChannel = platform_channel.BasicMessageChannel$();
  dart.addTypeTests(platform_channel.BasicMessageChannel, _is_BasicMessageChannel_default);
  var _invokeMethod = dart.privateName(platform_channel, "_invokeMethod");
  var _handleAsMethodCall = dart.privateName(platform_channel, "_handleAsMethodCall");
  const name$ = MethodChannel_name;
  const codec$ = MethodChannel_codec;
  const _binaryMessenger$ = MethodChannel__binaryMessenger;
  platform_channel.MethodChannel = class MethodChannel extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger]() {
      return this[_binaryMessenger$];
    }
    set [_binaryMessenger](value) {
      super[_binaryMessenger] = value;
    }
    get binaryMessenger() {
      let t0;
      t0 = this[_binaryMessenger];
      return t0 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t0;
    }
    [_invokeMethod](T, method, opts) {
      let missingOk = opts && 'missingOk' in opts ? opts.missingOk : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return async.async(dart.nullable(T), (function* _invokeMethod() {
        if (!(method !== null)) dart.assertFailed(null, I[3], 147, 12, "method != null");
        let result = (yield this.binaryMessenger.send(this.name, this.codec.encodeMethodCall(new message_codec.MethodCall.new(method, $arguments))));
        if (result == null) {
          if (missingOk) {
            return null;
          }
          dart.throw(new message_codec.MissingPluginException.new("No implementation found for method " + method + " on channel " + this.name));
        }
        return dart.nullable(T).as(this.codec.decodeEnvelope(result));
      }).bind(this));
    }
    invokeMethod(T, method, $arguments = null) {
      return this[_invokeMethod](T, method, {missingOk: false, arguments: $arguments});
    }
    invokeListMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(core.List$(T)), (function* invokeListMethod() {
        let t0;
        let result = (yield this.invokeMethod(T$.ListN(), method, $arguments));
        t0 = result;
        return t0 == null ? null : t0[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, $arguments = null) {
      return async.async(dart.nullable(core.Map$(K, V)), (function* invokeMapMethod() {
        let t0;
        let result = (yield this.invokeMethod(T$.MapN(), method, $arguments));
        t0 = result;
        return t0 == null ? null : t0[$cast](K, V);
      }).bind(this));
    }
    setMethodCallHandler(handler) {
      platform_channel._methodChannelHandlers._set(this, handler);
      this.binaryMessenger.setMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), T$.ByteDataNToFutureOfByteDataN()));
    }
    checkMethodCallHandler(handler) {
      return dart.equals(platform_channel._methodChannelHandlers._get(this), handler);
    }
    setMockMethodCallHandler(handler) {
      platform_channel._methodChannelMockHandlers._set(this, handler);
      this.binaryMessenger.setMockMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), T$.ByteDataNToFutureOfByteDataN()));
    }
    checkMockMethodCallHandler(handler) {
      return dart.equals(platform_channel._methodChannelMockHandlers._get(this), handler);
    }
    [_handleAsMethodCall](message, handler) {
      return async.async(T$.ByteDataN(), (function* _handleAsMethodCall() {
        let call = this.codec.decodeMethodCall(message);
        try {
          return this.codec.encodeSuccessEnvelope(yield handler(call));
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (message_codec.PlatformException.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: e.code, message: e.message, details: e.details});
          } else if (message_codec.MissingPluginException.is(ex)) {
            return null;
          } else if (core.Object.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: "error", message: e[$toString](), details: null});
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (platform_channel.MethodChannel.new = function(name, codec = C[12] || CT.C12, binaryMessenger = null) {
    this[name$] = name;
    this[codec$] = codec;
    if (!(name !== null)) dart.assertFailed(null, I[3], 129, 16, "name != null");
    if (!(codec !== null)) dart.assertFailed(null, I[3], 130, 16, "codec != null");
    this[_binaryMessenger$] = binaryMessenger;
    ;
  }).prototype = platform_channel.MethodChannel.prototype;
  dart.addTypeTests(platform_channel.MethodChannel);
  dart.addTypeCaches(platform_channel.MethodChannel);
  dart.setMethodSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getMethods(platform_channel.MethodChannel.__proto__),
    [_invokeMethod]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {arguments: dart.dynamic}, {missingOk: core.bool}], T => [dart.nullable(core.Object)]),
    invokeMethod: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeListMethod: dart.gFnType(T => [async.Future$(dart.nullable(core.List$(T))), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(dart.nullable(core.Map$(K, V))), [core.String], [dart.dynamic]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    setMethodCallHandler: dart.fnType(dart.void, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    checkMethodCallHandler: dart.fnType(core.bool, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    setMockMethodCallHandler: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.nullable(async.Future), [message_codec.MethodCall]))]),
    checkMockMethodCallHandler: dart.fnType(core.bool, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    [_handleAsMethodCall]: dart.fnType(async.Future$(dart.nullable(typed_data.ByteData)), [dart.nullable(typed_data.ByteData), dart.fnType(dart.nullable(async.Future), [message_codec.MethodCall])])
  }));
  dart.setGetterSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getGetters(platform_channel.MethodChannel.__proto__),
    binaryMessenger: binary_messenger.BinaryMessenger
  }));
  dart.setLibraryUri(platform_channel.MethodChannel, I[4]);
  dart.setFieldSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getFields(platform_channel.MethodChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec),
    [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  const _invokeMethod$ = Symbol("_invokeMethod");
  platform_channel.OptionalMethodChannel = class OptionalMethodChannel extends platform_channel.MethodChannel {
    invokeMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(T), (function* invokeMethod() {
        return this[_invokeMethod$](T, method, {missingOk: true, arguments: $arguments});
      }).bind(this));
    }
    invokeListMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(core.List$(T)), (function* invokeListMethod() {
        let t2;
        let result = (yield this.invokeMethod(core.List, method, $arguments));
        t2 = result;
        return t2 == null ? null : t2[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, $arguments = null) {
      return async.async(dart.nullable(core.Map$(K, V)), (function* invokeMapMethod() {
        let t2;
        let result = (yield this.invokeMethod(core.Map, method, $arguments));
        t2 = result;
        return t2 == null ? null : t2[$cast](K, V);
      }).bind(this));
    }
    [_invokeMethod$](T, method, opts) {
      return super[_invokeMethod](T, method, opts);
    }
  };
  (platform_channel.OptionalMethodChannel.new = function(name, codec = C[12] || CT.C12) {
    platform_channel.OptionalMethodChannel.__proto__.new.call(this, name, codec);
    ;
  }).prototype = platform_channel.OptionalMethodChannel.prototype;
  dart.addTypeTests(platform_channel.OptionalMethodChannel);
  dart.addTypeCaches(platform_channel.OptionalMethodChannel);
  dart.setMethodSignature(platform_channel.OptionalMethodChannel, () => ({
    __proto__: dart.getMethods(platform_channel.OptionalMethodChannel.__proto__),
    invokeMethod: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeListMethod: dart.gFnType(T => [async.Future$(dart.nullable(core.List$(T))), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(dart.nullable(core.Map$(K, V))), [core.String], [dart.dynamic]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(platform_channel.OptionalMethodChannel, I[4]);
  var name$0 = dart.privateName(platform_channel, "EventChannel.name");
  var codec$0 = dart.privateName(platform_channel, "EventChannel.codec");
  var _binaryMessenger$0 = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  platform_channel.EventChannel = class EventChannel extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger]() {
      return this[_binaryMessenger$0];
    }
    set [_binaryMessenger](value) {
      super[_binaryMessenger] = value;
    }
    get binaryMessenger() {
      let t2;
      t2 = this[_binaryMessenger];
      return t2 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t2;
    }
    receiveBroadcastStream($arguments = null) {
      let methodChannel = new platform_channel.MethodChannel.new(this.name, this.codec);
      let controller = null;
      function controller$35get() {
        let t3;
        t3 = controller;
        return t3 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t3;
      }
      dart.fn(controller$35get, T$.VoidToStreamController());
      function controller$35set(t4) {
        return controller = t4;
      }
      dart.fn(controller$35set, T$.StreamControllerTodynamic());
      controller$35set(async.StreamController.broadcast({onListen: dart.fn(() => async.async(dart.void, (function*() {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(reply => async.async(core.Null, (function*() {
            if (reply == null) {
              controller$35get().close();
            } else {
              try {
                controller$35get().add(this.codec.decodeEnvelope(reply));
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (message_codec.PlatformException.is(e)) {
                  controller$35get().addError(e);
                } else
                  throw e$;
              }
            }
            return null;
          }).bind(this)), T$.ByteDataNToFutureOfNull()));
          try {
            yield methodChannel.invokeMethod(dart.void, "listen", $arguments);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while activating platform stream on channel " + this.name)}));
            } else
              throw e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => async.async(dart.void, (function*() {
          this.binaryMessenger.setMessageHandler(this.name, null);
          try {
            yield methodChannel.invokeMethod(dart.void, "cancel", $arguments);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while de-activating platform stream on channel " + this.name)}));
            } else
              throw e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid())}));
      return controller$35get().stream;
    }
  };
  (platform_channel.EventChannel.new = function(name, codec = C[12] || CT.C12, binaryMessenger = null) {
    this[name$0] = name;
    this[codec$0] = codec;
    if (!(name !== null)) dart.assertFailed(null, I[3], 501, 16, "name != null");
    if (!(codec !== null)) dart.assertFailed(null, I[3], 502, 16, "codec != null");
    this[_binaryMessenger$0] = binaryMessenger;
    ;
  }).prototype = platform_channel.EventChannel.prototype;
  dart.addTypeTests(platform_channel.EventChannel);
  dart.addTypeCaches(platform_channel.EventChannel);
  dart.setMethodSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getMethods(platform_channel.EventChannel.__proto__),
    receiveBroadcastStream: dart.fnType(async.Stream, [], [dart.dynamic])
  }));
  dart.setGetterSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getGetters(platform_channel.EventChannel.__proto__),
    binaryMessenger: binary_messenger.BinaryMessenger
  }));
  dart.setLibraryUri(platform_channel.EventChannel, I[4]);
  dart.setFieldSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getFields(platform_channel.EventChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec),
    [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  dart.defineLazy(platform_channel, {
    /*platform_channel._methodChannelHandlers*/get _methodChannelHandlers() {
      return new (T$.ExpandoOfObject()).new();
    },
    set _methodChannelHandlers(_) {},
    /*platform_channel._methodChannelMockHandlers*/get _methodChannelMockHandlers() {
      return new (T$.ExpandoOfObject()).new();
    },
    set _methodChannelMockHandlers(_) {}
  }, false);
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  message_codec.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.addTypeCaches(MessageCodec);
    dart.setLibraryUri(MessageCodec, I[5]);
    return MessageCodec;
  });
  message_codec.MessageCodec = message_codec.MessageCodec$();
  dart.addTypeTests(message_codec.MessageCodec, _is_MessageCodec_default);
  var method$ = dart.privateName(message_codec, "MethodCall.method");
  var $arguments$ = dart.privateName(message_codec, "MethodCall.arguments");
  message_codec.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return object.objectRuntimeType(this, "MethodCall") + "(" + this.method + ", " + dart.str(this.arguments) + ")";
    }
  };
  (message_codec.MethodCall.new = function(method, $arguments = null) {
    this[method$] = method;
    this[$arguments$] = $arguments;
    if (!(method !== null)) dart.assertFailed(null, I[6], 41, 14, "method != null");
    ;
  }).prototype = message_codec.MethodCall.prototype;
  dart.addTypeTests(message_codec.MethodCall);
  dart.addTypeCaches(message_codec.MethodCall);
  dart.setLibraryUri(message_codec.MethodCall, I[5]);
  dart.setFieldSignature(message_codec.MethodCall, () => ({
    __proto__: dart.getFields(message_codec.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(message_codec.MethodCall, ['toString']);
  message_codec.MethodCodec = class MethodCodec extends core.Object {};
  (message_codec.MethodCodec.new = function() {
    ;
  }).prototype = message_codec.MethodCodec.prototype;
  dart.addTypeTests(message_codec.MethodCodec);
  dart.addTypeCaches(message_codec.MethodCodec);
  dart.setLibraryUri(message_codec.MethodCodec, I[5]);
  var code$ = dart.privateName(message_codec, "PlatformException.code");
  var message$ = dart.privateName(message_codec, "PlatformException.message");
  var details$ = dart.privateName(message_codec, "PlatformException.details");
  var stacktrace$ = dart.privateName(message_codec, "PlatformException.stacktrace");
  message_codec.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    get stacktrace() {
      return this[stacktrace$];
    }
    set stacktrace(value) {
      super.stacktrace = value;
    }
    toString() {
      return "PlatformException(" + this.code + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ", " + dart.str(this.stacktrace) + ")";
    }
  };
  (message_codec.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    let stacktrace = opts && 'stacktrace' in opts ? opts.stacktrace : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    this[stacktrace$] = stacktrace;
    if (!(code !== null)) dart.assertFailed(null, I[6], 121, 15, "code != null");
    ;
  }).prototype = message_codec.PlatformException.prototype;
  dart.addTypeTests(message_codec.PlatformException);
  dart.addTypeCaches(message_codec.PlatformException);
  message_codec.PlatformException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.PlatformException, I[5]);
  dart.setFieldSignature(message_codec.PlatformException, () => ({
    __proto__: dart.getFields(message_codec.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(dart.nullable(core.String)),
    details: dart.finalFieldType(dart.dynamic),
    stacktrace: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(message_codec.PlatformException, ['toString']);
  var message$0 = dart.privateName(message_codec, "MissingPluginException.message");
  message_codec.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (message_codec.MissingPluginException.new = function(message = null) {
    this[message$0] = message;
    ;
  }).prototype = message_codec.MissingPluginException.prototype;
  dart.addTypeTests(message_codec.MissingPluginException);
  dart.addTypeCaches(message_codec.MissingPluginException);
  message_codec.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.MissingPluginException, I[5]);
  dart.setFieldSignature(message_codec.MissingPluginException, () => ({
    __proto__: dart.getFields(message_codec.MissingPluginException.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(message_codec.MissingPluginException, ['toString']);
  var _rootBucket = dart.privateName(restoration, "_rootBucket");
  var _pendingRootBucket = dart.privateName(restoration, "_pendingRootBucket");
  var _rootBucketIsValid = dart.privateName(restoration, "_rootBucketIsValid");
  var _isReplacing = dart.privateName(restoration, "_isReplacing");
  var _debugDoingUpdate = dart.privateName(restoration, "_debugDoingUpdate");
  var _serializationScheduled = dart.privateName(restoration, "_serializationScheduled");
  var _bucketsNeedingSerialization = dart.privateName(restoration, "_bucketsNeedingSerialization");
  var _methodHandler = dart.privateName(restoration, "_methodHandler");
  var _getRootBucketFromEngine = dart.privateName(restoration, "_getRootBucketFromEngine");
  var _parseAndHandleRestorationUpdateFromEngine = dart.privateName(restoration, "_parseAndHandleRestorationUpdateFromEngine");
  var _decodeRestorationData = dart.privateName(restoration, "_decodeRestorationData");
  var _encodeRestorationData = dart.privateName(restoration, "_encodeRestorationData");
  var _manager = dart.privateName(restoration, "_manager");
  var _doSerialization = dart.privateName(restoration, "_doSerialization");
  var _rawData = dart.privateName(restoration, "_rawData");
  restoration.RestorationManager = class RestorationManager extends change_notifier.ChangeNotifier {
    initChannels() {
      if (!!system_channels.SystemChannels.restoration.checkMethodCallHandler(dart.bind(this, _methodHandler))) dart.assertFailed(null, I[7], 169, 12, "!SystemChannels.restoration.checkMethodCallHandler(_methodHandler)");
      system_channels.SystemChannels.restoration.setMethodCallHandler(dart.bind(this, _methodHandler));
    }
    get rootBucket() {
      if (this[_rootBucketIsValid]) {
        return new (T$.SynchronousFutureOfRestorationBucketN()).new(this[_rootBucket]);
      }
      if (this[_pendingRootBucket] == null) {
        this[_pendingRootBucket] = T$.CompleterOfRestorationBucketN().new();
        this[_getRootBucketFromEngine]();
      }
      return dart.nullCheck(this[_pendingRootBucket]).future;
    }
    get isReplacing() {
      return this[_isReplacing];
    }
    [_getRootBucketFromEngine]() {
      return async.async(dart.void, (function* _getRootBucketFromEngine() {
        let config = (yield system_channels.SystemChannels.restoration.invokeMethod(T$.MapOfObjectN$ObjectN(), "get"));
        if (this[_pendingRootBucket] == null) {
          return;
        }
        if (!(this[_rootBucket] == null)) dart.assertFailed(null, I[7], 236, 12, "_rootBucket == null");
        this[_parseAndHandleRestorationUpdateFromEngine](config);
      }).bind(this));
    }
    [_parseAndHandleRestorationUpdateFromEngine](update) {
      this.handleRestorationUpdateFromEngine({enabled: update != null && core.bool.as(dart.nullCheck(update[$_get]("enabled"))), data: update == null ? null : T$.Uint8ListN().as(update[$_get]("data"))});
    }
    handleRestorationUpdateFromEngine(opts) {
      let t9, t9$;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let data = opts && 'data' in opts ? opts.data : null;
      if (!(enabled !== null)) dart.assertFailed(null, I[7], 263, 12, "enabled != null");
      if (!(enabled || data == null)) dart.assertFailed(null, I[7], 264, 12, "enabled || data == null");
      this[_isReplacing] = this[_rootBucketIsValid] && enabled;
      if (this[_isReplacing]) {
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => {
          this[_isReplacing] = false;
        }, T$.DurationTovoid()));
      }
      let oldRoot = this[_rootBucket];
      this[_rootBucket] = enabled ? new restoration.RestorationBucket.root({manager: this, rawData: this[_decodeRestorationData](data)}) : null;
      this[_rootBucketIsValid] = true;
      if (!(this[_pendingRootBucket] == null || !dart.nullCheck(this[_pendingRootBucket]).isCompleted)) dart.assertFailed(null, I[7], 278, 12, "_pendingRootBucket == null || !_pendingRootBucket!.isCompleted");
      t9 = this[_pendingRootBucket];
      t9 == null ? null : t9.complete(this[_rootBucket]);
      this[_pendingRootBucket] = null;
      if (!dart.equals(this[_rootBucket], oldRoot)) {
        this.notifyListeners();
        t9$ = oldRoot;
        t9$ == null ? null : t9$.dispose();
      }
    }
    sendToEngine(encodedData) {
      if (!(encodedData !== null)) dart.assertFailed(null, I[7], 301, 12, "encodedData != null");
      return system_channels.SystemChannels.restoration.invokeMethod(dart.void, "put", encodedData);
    }
    [_methodHandler](call) {
      return async.async(T$.ObjectN(), (function* _methodHandler() {
        switch (call.method) {
          case "push":
          {
            this[_parseAndHandleRestorationUpdateFromEngine](T$.MapOfObjectN$ObjectN().as(call.arguments));
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new(call.method + " was invoked but isn't implemented by " + dart.str(this[$runtimeType])));
          }
        }
      }).bind(this));
    }
    [_decodeRestorationData](data) {
      if (data == null) {
        return null;
      }
      let encoded = data[$buffer][$asByteData](data[$offsetInBytes], data[$lengthInBytes]);
      return T$.MapNOfObjectN$ObjectN().as((C[10] || CT.C10).decodeMessage(encoded));
    }
    [_encodeRestorationData](data) {
      let encoded = dart.nullCheck((C[10] || CT.C10).encodeMessage(data));
      return encoded[$buffer][$asUint8List](encoded[$offsetInBytes], encoded[$lengthInBytes]);
    }
    scheduleSerializationFor(bucket) {
      if (!(bucket !== null)) dart.assertFailed(null, I[7], 348, 12, "bucket != null");
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[7], 349, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 350, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].add(bucket);
      if (!this[_serializationScheduled]) {
        this[_serializationScheduled] = true;
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => this[_doSerialization](), T$.DurationTovoid()));
      }
    }
    unscheduleSerializationFor(bucket) {
      if (!(bucket !== null)) dart.assertFailed(null, I[7], 370, 12, "bucket != null");
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[7], 371, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 372, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].remove(bucket);
    }
    [_doSerialization]() {
      if (!this[_serializationScheduled]) {
        return;
      }
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 380, 12, "() {\r\n      _debugDoingUpdate = true;\r\n      return true;\r\n    }()");
      this[_serializationScheduled] = false;
      for (let bucket of this[_bucketsNeedingSerialization]) {
        bucket.finalize();
      }
      this[_bucketsNeedingSerialization].clear();
      this.sendToEngine(this[_encodeRestorationData](dart.nullCheck(this[_rootBucket])[_rawData]));
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = false;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 392, 12, "() {\r\n      _debugDoingUpdate = false;\r\n      return true;\r\n    }()");
    }
    flushData() {
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 416, 12, "!_debugDoingUpdate");
      if (dart.nullCheck(binding.SchedulerBinding.instance).hasScheduledFrame) {
        return;
      }
      this[_doSerialization]();
      if (!!this[_serializationScheduled]) dart.assertFailed(null, I[7], 421, 12, "!_serializationScheduled");
    }
  };
  (restoration.RestorationManager.new = function() {
    this[_rootBucket] = null;
    this[_pendingRootBucket] = null;
    this[_rootBucketIsValid] = false;
    this[_isReplacing] = false;
    this[_debugDoingUpdate] = false;
    this[_serializationScheduled] = false;
    this[_bucketsNeedingSerialization] = T$.LinkedHashSetOfRestorationBucket().new();
    restoration.RestorationManager.__proto__.new.call(this);
    this.initChannels();
  }).prototype = restoration.RestorationManager.prototype;
  dart.addTypeTests(restoration.RestorationManager);
  dart.addTypeCaches(restoration.RestorationManager);
  dart.setMethodSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getMethods(restoration.RestorationManager.__proto__),
    initChannels: dart.fnType(dart.void, []),
    [_getRootBucketFromEngine]: dart.fnType(async.Future$(dart.void), []),
    [_parseAndHandleRestorationUpdateFromEngine]: dart.fnType(dart.void, [dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))]),
    handleRestorationUpdateFromEngine: dart.fnType(dart.void, [], {}, {data: dart.nullable(typed_data.Uint8List), enabled: core.bool}),
    sendToEngine: dart.fnType(async.Future$(dart.void), [typed_data.Uint8List]),
    [_methodHandler]: dart.fnType(async.Future$(dart.nullable(core.Object)), [message_codec.MethodCall]),
    [_decodeRestorationData]: dart.fnType(dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))), [dart.nullable(typed_data.Uint8List)]),
    [_encodeRestorationData]: dart.fnType(typed_data.Uint8List, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))]),
    scheduleSerializationFor: dart.fnType(dart.void, [restoration.RestorationBucket]),
    unscheduleSerializationFor: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_doSerialization]: dart.fnType(dart.void, []),
    flushData: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getGetters(restoration.RestorationManager.__proto__),
    rootBucket: async.Future$(dart.nullable(restoration.RestorationBucket)),
    isReplacing: core.bool
  }));
  dart.setLibraryUri(restoration.RestorationManager, I[8]);
  dart.setFieldSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getFields(restoration.RestorationManager.__proto__),
    [_rootBucket]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [_pendingRootBucket]: dart.fieldType(dart.nullable(async.Completer$(dart.nullable(restoration.RestorationBucket)))),
    [_rootBucketIsValid]: dart.fieldType(core.bool),
    [_isReplacing]: dart.fieldType(core.bool),
    [_debugDoingUpdate]: dart.fieldType(core.bool),
    [_serializationScheduled]: dart.fieldType(core.bool),
    [_bucketsNeedingSerialization]: dart.finalFieldType(core.Set$(restoration.RestorationBucket))
  }));
  var _debugOwner = dart.privateName(restoration, "_debugOwner");
  var _claimedChildren = dart.privateName(restoration, "_claimedChildren");
  var _childrenToAdd = dart.privateName(restoration, "_childrenToAdd");
  var _needsSerialization = dart.privateName(restoration, "_needsSerialization");
  var _debugDisposed = dart.privateName(restoration, "_debugDisposed");
  var _parent = dart.privateName(restoration, "_parent");
  var _restorationId = dart.privateName(restoration, "_restorationId");
  var _rawChildren = dart.privateName(restoration, "_rawChildren");
  var _debugAssertNotDisposed = dart.privateName(restoration, "_debugAssertNotDisposed");
  var _rawValues = dart.privateName(restoration, "_rawValues");
  var _markNeedsSerialization = dart.privateName(restoration, "_markNeedsSerialization");
  var _removeChildData = dart.privateName(restoration, "_removeChildData");
  var _addChildData = dart.privateName(restoration, "_addChildData");
  var _recursivelyUpdateManager = dart.privateName(restoration, "_recursivelyUpdateManager");
  var _updateManager = dart.privateName(restoration, "_updateManager");
  var _visitChildren = dart.privateName(restoration, "_visitChildren");
  var _dropChild = dart.privateName(restoration, "_dropChild");
  var _debugAssertIntegrity = dart.privateName(restoration, "_debugAssertIntegrity");
  var _finalizeAddChildData = dart.privateName(restoration, "_finalizeAddChildData");
  restoration.RestorationBucket = class RestorationBucket extends core.Object {
    get debugOwner() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 589, 12, "_debugAssertNotDisposed()");
      return this[_debugOwner];
    }
    get isReplacing() {
      let t9, t9$;
      t9$ = (t9 = this[_manager], t9 == null ? null : t9.isReplacing);
      return t9$ == null ? false : t9$;
    }
    get restorationId() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 613, 12, "_debugAssertNotDisposed()");
      return this[_restorationId];
    }
    get [_rawChildren]() {
      return T$.MapOfObjectN$ObjectN().as(dart.nullCheck(this[_rawData][$putIfAbsent]("c", dart.fn(() => new (T$.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    get [_rawValues]() {
      return T$.MapOfObjectN$ObjectN().as(dart.nullCheck(this[_rawData][$putIfAbsent]("v", dart.fn(() => new (T$.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    read(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 638, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 639, 12, "restorationId != null");
      return dart.nullable(P).as(this[_rawValues][$_get](restorationId));
    }
    write(P, restorationId, value) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 660, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 661, 12, "restorationId != null");
      if (!restoration.debugIsSerializableForRestoration(value)) dart.assertFailed(null, I[7], 662, 12, "debugIsSerializableForRestoration(value)");
      if (!dart.equals(this[_rawValues][$_get](restorationId), value) || !this[_rawValues][$containsKey](restorationId)) {
        this[_rawValues][$_set](restorationId, value);
        this[_markNeedsSerialization]();
      }
    }
    remove(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 682, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 683, 12, "restorationId != null");
      let needsUpdate = this[_rawValues][$containsKey](restorationId);
      let result = dart.nullable(P).as(this[_rawValues][$remove](restorationId));
      if (this[_rawValues][$isEmpty]) {
        this[_rawData][$remove]("v");
      }
      if (needsUpdate) {
        this[_markNeedsSerialization]();
      }
      return result;
    }
    contains(restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 704, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 705, 12, "restorationId != null");
      return this[_rawValues][$containsKey](restorationId);
    }
    claimChild(restorationId, opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 740, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 741, 12, "restorationId != null");
      if (this[_claimedChildren][$containsKey](restorationId) || !this[_rawChildren][$containsKey](restorationId)) {
        let child = new restoration.RestorationBucket.empty({debugOwner: debugOwner, restorationId: restorationId});
        this.adoptChild(child);
        return child;
      }
      if (!(this[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[7], 767, 12, "_rawChildren[restorationId] != null");
      let child = new restoration.RestorationBucket.child({restorationId: restorationId, parent: this, debugOwner: debugOwner});
      this[_claimedChildren][$_set](restorationId, child);
      return child;
    }
    adoptChild(child) {
      let t9;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 790, 12, "_debugAssertNotDisposed()");
      if (!(child !== null)) dart.assertFailed(null, I[7], 791, 12, "child != null");
      if (!dart.equals(child[_parent], this)) {
        t9 = child[_parent];
        t9 == null ? null : t9[_removeChildData](child);
        child[_parent] = this;
        this[_addChildData](child);
        if (!dart.equals(child[_manager], this[_manager])) {
          this[_recursivelyUpdateManager](child);
        }
      }
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 800, 12, "child._parent == this");
      if (!dart.equals(child[_manager], this[_manager])) dart.assertFailed(null, I[7], 801, 12, "child._manager == _manager");
    }
    [_dropChild](child) {
      if (!(child !== null)) dart.assertFailed(null, I[7], 805, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 806, 12, "child._parent == this");
      this[_removeChildData](child);
      child[_parent] = null;
      if (child[_manager] != null) {
        child[_updateManager](null);
        child[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
      }
    }
    [_markNeedsSerialization]() {
      let t9;
      if (!this[_needsSerialization]) {
        this[_needsSerialization] = true;
        t9 = this[_manager];
        t9 == null ? null : t9.scheduleSerializationFor(this);
      }
    }
    finalize() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 829, 12, "_debugAssertNotDisposed()");
      if (!this[_needsSerialization]) dart.assertFailed(null, I[7], 830, 12, "_needsSerialization");
      this[_needsSerialization] = false;
      if (!this[_debugAssertIntegrity]()) dart.assertFailed(null, I[7], 832, 12, "_debugAssertIntegrity()");
    }
    [_recursivelyUpdateManager](bucket) {
      bucket[_updateManager](this[_manager]);
      bucket[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
    }
    [_updateManager](newManager) {
      let t9;
      if (dart.equals(this[_manager], newManager)) {
        return;
      }
      if (this[_needsSerialization]) {
        t9 = this[_manager];
        t9 == null ? null : t9.unscheduleSerializationFor(this);
      }
      this[_manager] = newManager;
      if (this[_needsSerialization] && this[_manager] != null) {
        this[_needsSerialization] = false;
        this[_markNeedsSerialization]();
      }
    }
    [_debugAssertIntegrity]() {
      if (!dart.fn(() => {
        if (this[_childrenToAdd][$isEmpty]) {
          return true;
        }
        let error = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Multiple owners claimed child RestorationBuckets with the same IDs."), new assertions.ErrorDescription.new("The following IDs were claimed multiple times from the parent " + dart.str(this) + ":")]);
        for (let child of this[_childrenToAdd][$entries]) {
          let id = child.key;
          let buckets = child.value;
          if (!buckets[$isNotEmpty]) dart.assertFailed(null, I[7], 866, 16, "buckets.isNotEmpty");
          if (!this[_claimedChildren][$containsKey](id)) dart.assertFailed(null, I[7], 867, 16, "_claimedChildren.containsKey(id)");
          error[$addAll]((() => {
            let t9 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new(" * \"" + id + "\" was claimed by:")]);
            t9[$addAll](buckets[$map](diagnostics.DiagnosticsNode, dart.fn(bucket => new assertions.ErrorDescription.new("   * " + dart.str(bucket.debugOwner)), T$.RestorationBucketToErrorDescription())));
            t9[$add](new assertions.ErrorDescription.new("   * " + dart.str(dart.nullCheck(this[_claimedChildren][$_get](id)).debugOwner) + " (current owner)"));
            return t9;
          })());
        }
        dart.throw(new assertions.FlutterError.fromParts(error));
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 855, 12, "() {\r\n      if (_childrenToAdd.isEmpty) {\r\n        return true;\r\n      }\r\n      final List<DiagnosticsNode> error = <DiagnosticsNode>[\r\n        ErrorSummary('Multiple owners claimed child RestorationBuckets with the same IDs.'),\r\n        ErrorDescription('The following IDs were claimed multiple times from the parent $this:'),\r\n      ];\r\n      for (final MapEntry<String, List<RestorationBucket>> child in _childrenToAdd.entries) {\r\n        final String id = child.key;\r\n        final List<RestorationBucket> buckets = child.value;\r\n        assert(buckets.isNotEmpty);\r\n        assert(_claimedChildren.containsKey(id));\r\n        error.addAll(<DiagnosticsNode>[\r\n          ErrorDescription(' * \"$id\" was claimed by:'),\r\n          ...buckets.map((RestorationBucket bucket) => ErrorDescription('   * ${bucket.debugOwner}')),\r\n          ErrorDescription('   * ${_claimedChildren[id]!.debugOwner} (current owner)'),\r\n        ]);\r\n      }\r\n      throw FlutterError.fromParts(error);\r\n    }()");
      return true;
    }
    [_removeChildData](child) {
      let t10, t10$;
      if (!(child !== null)) dart.assertFailed(null, I[7], 880, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 881, 12, "child._parent == this");
      if (dart.equals(this[_claimedChildren][$remove](child.restorationId), child)) {
        this[_rawChildren][$remove](child.restorationId);
        let pendingChildren = this[_childrenToAdd][$_get](child.restorationId);
        if (pendingChildren != null) {
          let toAdd = pendingChildren[$removeLast]();
          this[_finalizeAddChildData](toAdd);
          if (pendingChildren[$isEmpty]) {
            this[_childrenToAdd][$remove](child.restorationId);
          }
        }
        if (this[_rawChildren][$isEmpty]) {
          this[_rawData][$remove]("c");
        }
        this[_markNeedsSerialization]();
        return;
      }
      t10 = this[_childrenToAdd][$_get](child.restorationId);
      t10 == null ? null : t10[$remove](child);
      if ((t10$ = this[_childrenToAdd][$_get](child.restorationId), t10$ == null ? null : t10$[$isEmpty]) === true) {
        this[_childrenToAdd][$remove](child.restorationId);
      }
    }
    [_addChildData](child) {
      if (!(child !== null)) dart.assertFailed(null, I[7], 905, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 906, 12, "child._parent == this");
      if (this[_claimedChildren][$containsKey](child.restorationId)) {
        this[_childrenToAdd][$putIfAbsent](child.restorationId, dart.fn(() => T$.JSArrayOfRestorationBucket().of([]), T$.VoidToListOfRestorationBucket()))[$add](child);
        this[_markNeedsSerialization]();
        return;
      }
      this[_finalizeAddChildData](child);
      this[_markNeedsSerialization]();
    }
    [_finalizeAddChildData](child) {
      if (!(this[_claimedChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[7], 920, 12, "_claimedChildren[child.restorationId] == null");
      if (!(this[_rawChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[7], 921, 12, "_rawChildren[child.restorationId] == null");
      this[_claimedChildren][$_set](child.restorationId, child);
      this[_rawChildren][$_set](child.restorationId, child[_rawData]);
    }
    [_visitChildren](visitor, opts) {
      let concurrentModification = opts && 'concurrentModification' in opts ? opts.concurrentModification : false;
      let children = this[_claimedChildren][$values][$followedBy](this[_childrenToAdd][$values][$expand](restoration.RestorationBucket, dart.fn(buckets => buckets, T$.ListOfRestorationBucketToListOfRestorationBucket())));
      if (concurrentModification) {
        children = children[$toList]({growable: false});
      }
      children[$forEach](visitor);
    }
    rename(newRestorationId) {
      let t10, t10$;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 947, 12, "_debugAssertNotDisposed()");
      if (!(newRestorationId !== null)) dart.assertFailed(null, I[7], 948, 12, "newRestorationId != null");
      if (newRestorationId === this.restorationId) {
        return;
      }
      t10 = this[_parent];
      t10 == null ? null : t10[_removeChildData](this);
      this[_restorationId] = newRestorationId;
      t10$ = this[_parent];
      t10$ == null ? null : t10$[_addChildData](this);
    }
    dispose() {
      let t10;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 970, 12, "_debugAssertNotDisposed()");
      this[_visitChildren](dart.bind(this, _dropChild), {concurrentModification: true});
      this[_claimedChildren][$clear]();
      this[_childrenToAdd][$clear]();
      t10 = this[_parent];
      t10 == null ? null : t10[_removeChildData](this);
      this[_parent] = null;
      this[_updateManager](null);
      this[_debugDisposed] = true;
    }
    toString() {
      return object.objectRuntimeType(this, "RestorationBucket") + "(restorationId: " + this.restorationId + ", owner: " + dart.str(this.debugOwner) + ")";
    }
    [_debugAssertNotDisposed]() {
      if (!dart.fn(() => {
        if (this[_debugDisposed]) {
          dart.throw(assertions.FlutterError.new("A " + dart.str(this[$runtimeType]) + " was used after being disposed.\n" + "Once you have called dispose() on a " + dart.str(this[$runtimeType]) + ", it can no longer be used."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 985, 12, "() {\r\n      if (_debugDisposed) {\r\n        throw FlutterError(\r\n            'A $runtimeType was used after being disposed.\\n'\r\n            'Once you have called dispose() on a $runtimeType, it can no longer be used.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
  };
  (restoration.RestorationBucket.empty = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    this[_manager] = null;
    if (!(restorationId !== null)) dart.assertFailed(null, I[7], 506, 15, "restorationId != null");
    this[_restorationId] = restorationId;
    this[_rawData] = new (T$.IdentityMapOfString$ObjectN()).new();
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 509, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.root = function(opts) {
    let t9;
    let manager = opts && 'manager' in opts ? opts.manager : null;
    let rawData = opts && 'rawData' in opts ? opts.rawData : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    if (!(manager !== null)) dart.assertFailed(null, I[7], 541, 15, "manager != null");
    this[_manager] = manager;
    this[_rawData] = (t9 = rawData, t9 == null ? new (T$.LinkedMapOfObjectN$ObjectN()).new() : t9);
    this[_restorationId] = "root";
    if (!dart.fn(() => {
      this[_debugOwner] = manager;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 545, 12, "() {\r\n      _debugOwner = manager;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.child = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    if (!(restorationId !== null)) dart.assertFailed(null, I[7], 565, 15, "restorationId != null");
    if (!(parent !== null)) dart.assertFailed(null, I[7], 566, 15, "parent != null");
    if (!(parent[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[7], 567, 15, "parent._rawChildren[restorationId] != null");
    this[_manager] = parent[_manager];
    this[_parent] = parent;
    this[_rawData] = T$.MapOfObjectN$ObjectN().as(dart.nullCheck(parent[_rawChildren][$_get](restorationId)));
    this[_restorationId] = restorationId;
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 572, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  dart.addTypeTests(restoration.RestorationBucket);
  dart.addTypeCaches(restoration.RestorationBucket);
  dart.setMethodSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getMethods(restoration.RestorationBucket.__proto__),
    read: dart.gFnType(P => [dart.nullable(P), [core.String]], P => [dart.nullable(core.Object)]),
    write: dart.gFnType(P => [dart.void, [core.String, P]], P => [dart.nullable(core.Object)]),
    remove: dart.gFnType(P => [dart.nullable(P), [core.String]], P => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [core.String]),
    claimChild: dart.fnType(restoration.RestorationBucket, [core.String], {}, {debugOwner: dart.nullable(core.Object)}),
    adoptChild: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_dropChild]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_markNeedsSerialization]: dart.fnType(dart.void, []),
    finalize: dart.fnType(dart.void, []),
    [_recursivelyUpdateManager]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_updateManager]: dart.fnType(dart.void, [dart.nullable(restoration.RestorationManager)]),
    [_debugAssertIntegrity]: dart.fnType(core.bool, []),
    [_removeChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_addChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_finalizeAddChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_visitChildren]: dart.fnType(dart.void, [dart.fnType(dart.void, [restoration.RestorationBucket])], {concurrentModification: core.bool}, {}),
    rename: dart.fnType(dart.void, [core.String]),
    dispose: dart.fnType(dart.void, []),
    [_debugAssertNotDisposed]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getGetters(restoration.RestorationBucket.__proto__),
    debugOwner: dart.nullable(core.Object),
    isReplacing: core.bool,
    restorationId: core.String,
    [_rawChildren]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)),
    [_rawValues]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))
  }));
  dart.setLibraryUri(restoration.RestorationBucket, I[8]);
  dart.setFieldSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getFields(restoration.RestorationBucket.__proto__),
    [_rawData]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))),
    [_debugOwner]: dart.fieldType(dart.nullable(core.Object)),
    [_manager]: dart.fieldType(dart.nullable(restoration.RestorationManager)),
    [_parent]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [_restorationId]: dart.fieldType(core.String),
    [_claimedChildren]: dart.finalFieldType(core.Map$(core.String, restoration.RestorationBucket)),
    [_childrenToAdd]: dart.finalFieldType(core.Map$(core.String, core.List$(restoration.RestorationBucket))),
    [_needsSerialization]: dart.fieldType(core.bool),
    [_debugDisposed]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(restoration.RestorationBucket, ['toString']);
  dart.defineLazy(restoration.RestorationBucket, {
    /*restoration.RestorationBucket._childrenMapKey*/get _childrenMapKey() {
      return "c";
    },
    /*restoration.RestorationBucket._valuesMapKey*/get _valuesMapKey() {
      return "v";
    }
  }, false);
  restoration.debugIsSerializableForRestoration = function debugIsSerializableForRestoration(object) {
    let result = false;
    if (!dart.fn(() => {
      try {
        (C[10] || CT.C10).encodeMessage(object);
        result = true;
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          result = false;
        } else
          throw e;
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 1006, 10, "() {\r\n    try {\r\n      const StandardMessageCodec().encodeMessage(object);\r\n      result = true;\r\n    } catch (_) {\r\n      result = false;\r\n    }\r\n    return true;\r\n  }()");
    return result;
  };
  binary_messenger.BinaryMessenger = class BinaryMessenger extends core.Object {};
  (binary_messenger.BinaryMessenger.new = function() {
    ;
  }).prototype = binary_messenger.BinaryMessenger.prototype;
  dart.addTypeTests(binary_messenger.BinaryMessenger);
  dart.addTypeCaches(binary_messenger.BinaryMessenger);
  dart.setLibraryUri(binary_messenger.BinaryMessenger, I[9]);
  var __ServicesBinding__defaultBinaryMessenger = dart.privateName(binding$0, "_#ServicesBinding#_defaultBinaryMessenger");
  var __ServicesBinding__restorationManager = dart.privateName(binding$0, "_#ServicesBinding#_restorationManager");
  var _defaultBinaryMessenger = dart.privateName(binding$0, "_defaultBinaryMessenger");
  var _restorationManager = dart.privateName(binding$0, "_restorationManager");
  var _handleLifecycleMessage = dart.privateName(binding$0, "_handleLifecycleMessage");
  var _addLicenses = dart.privateName(binding$0, "_addLicenses");
  binding$0.ServicesBinding = class ServicesBinding extends core.Object {
    static get instance() {
      return binding$0.ServicesBinding._instance;
    }
    static _parseLicenses(rawLicenses) {
      let _licenseSeparator = "\n" + "-"[$times](80) + "\n";
      let result = T$.JSArrayOfLicenseEntry().of([]);
      let licenses = rawLicenses[$split](_licenseSeparator);
      for (let license of licenses) {
        let split = license[$indexOf]("\n\n");
        if (split >= 0) {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(license[$substring](0, split)[$split]("\n"), license[$substring](split + 2)));
        } else {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(C[24] || CT.C24, license));
        }
      }
      return result;
    }
    static _parseAppLifecycleMessage(message) {
      switch (message) {
        case "AppLifecycleState.paused":
        {
          return ui.AppLifecycleState.paused;
        }
        case "AppLifecycleState.resumed":
        {
          return ui.AppLifecycleState.resumed;
        }
        case "AppLifecycleState.inactive":
        {
          return ui.AppLifecycleState.inactive;
        }
        case "AppLifecycleState.detached":
        {
          return ui.AppLifecycleState.detached;
        }
      }
      return null;
    }
  };
  binding$0.ServicesBinding[dart.mixinOn] = _ServicesBinding$36BindingBase$36SchedulerBinding => class ServicesBinding extends _ServicesBinding$36BindingBase$36SchedulerBinding {
    initInstances() {
      super.initInstances();
      binding$0.ServicesBinding._instance = this;
      this[_defaultBinaryMessenger] = this.createBinaryMessenger();
      this[_restorationManager] = this.createRestorationManager();
      this.window.onPlatformMessage = dart.bind(this.defaultBinaryMessenger, 'handlePlatformMessage');
      this.initLicenses();
      system_channels.SystemChannels.system.setMessageHandler(dart.fn(message => this.handleSystemMessage(core.Object.as(message)), T$.dynamicToFutureOfvoid()));
      system_channels.SystemChannels.lifecycle.setMessageHandler(dart.bind(this, _handleLifecycleMessage));
      this.readInitialLifecycleStateFromNativeWindow();
    }
    get defaultBinaryMessenger() {
      return this[_defaultBinaryMessenger];
    }
    get [_defaultBinaryMessenger]() {
      let t11;
      t11 = this[__ServicesBinding__defaultBinaryMessenger];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_defaultBinaryMessenger")) : t11;
    }
    set [_defaultBinaryMessenger](t11) {
      this[__ServicesBinding__defaultBinaryMessenger] = t11;
    }
    createBinaryMessenger() {
      return C[22] || CT.C22;
    }
    handleMemoryPressure() {
    }
    handleSystemMessage(systemMessage) {
      return async.async(dart.void, (function* handleSystemMessage() {
        let message = T$.MapOfString$dynamic().as(systemMessage);
        let type = core.String.as(message[$_get]("type"));
        switch (type) {
          case "memoryPressure":
          {
            this.handleMemoryPressure();
            break;
          }
        }
        return;
      }).bind(this));
    }
    initLicenses() {
      licenses$.LicenseRegistry.addLicense(dart.bind(this, _addLicenses));
    }
    [_addLicenses]() {
      return new (T$._AsyncStarImplOfLicenseEntry()).new((function* _addLicenses(stream) {
        let rawLicenses = T$.CompleterOfString().new();
        this.scheduleTask(T$.FutureOfNull(), dart.fn(() => async.async(core.Null, function*() {
          rawLicenses.complete(yield asset_bundle.rootBundle.loadString("NOTICES", {cache: false}));
        }), T$.VoidToFutureOfNull()), priority.Priority.animation);
        yield rawLicenses.future;
        let parsedLicenses = T$.CompleterOfListOfLicenseEntry().new();
        this.scheduleTask(T$.FutureOfNull(), dart.fn(() => async.async(core.Null, function*() {
          parsedLicenses.complete(isolates.compute(core.String, T$.ListOfLicenseEntry(), C[23] || CT.C23, yield rawLicenses.future, {debugLabel: "parseLicenses"}));
        }), T$.VoidToFutureOfNull()), priority.Priority.animation);
        yield parsedLicenses.future;
        if (stream.addStream(T$.StreamOfLicenseEntry().fromIterable(yield parsedLicenses.future))) return;
        yield;
      }).bind(this)).stream;
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      if (!dart.fn(() => {
        this.registerStringServiceExtension({name: "evict", getter: dart.fn(() => async.async(core.String, function*() {
            return "";
          }), T$.VoidToFutureOfString()), setter: dart.fn(value => async.async(dart.void, (function*() {
            this.evict(value);
          }).bind(this)), T$.StringToFutureOfvoid())});
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[10], 141, 12, "() {\r\n      registerStringServiceExtension(\r\n        // ext.flutter.evict value=foo.png will cause foo.png to be evicted from\r\n        // the rootBundle cache and cause the entire image cache to be cleared.\r\n        // This is used by hot reload mode to clear out the cache of resources\r\n        // that have changed.\r\n        name: 'evict',\r\n        getter: () async => '',\r\n        setter: (String value) async {\r\n          evict(value);\r\n        },\r\n      );\r\n      return true;\r\n    }()");
    }
    evict(asset) {
      asset_bundle.rootBundle.evict(asset);
    }
    readInitialLifecycleStateFromNativeWindow() {
      if (this.lifecycleState != null) {
        return;
      }
      let state = binding$0.ServicesBinding._parseAppLifecycleMessage(this.window.initialLifecycleState);
      if (state != null) {
        this.handleAppLifecycleStateChanged(state);
      }
    }
    [_handleLifecycleMessage](message) {
      return async.async(T$.StringN(), (function* _handleLifecycleMessage() {
        this.handleAppLifecycleStateChanged(dart.nullCheck(binding$0.ServicesBinding._parseAppLifecycleMessage(dart.nullCheck(message))));
        return null;
      }).bind(this));
    }
    get restorationManager() {
      return this[_restorationManager];
    }
    get [_restorationManager]() {
      let t12;
      t12 = this[__ServicesBinding__restorationManager];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_restorationManager")) : t12;
    }
    set [_restorationManager](t12) {
      this[__ServicesBinding__restorationManager] = t12;
    }
    createRestorationManager() {
      return new restoration.RestorationManager.new();
    }
  };
  (binding$0.ServicesBinding[dart.mixinNew] = function() {
    this[__ServicesBinding__defaultBinaryMessenger] = null;
    this[__ServicesBinding__restorationManager] = null;
  }).prototype = binding$0.ServicesBinding.prototype;
  dart.addTypeTests(binding$0.ServicesBinding);
  dart.addTypeCaches(binding$0.ServicesBinding);
  binding$0.ServicesBinding[dart.implements] = () => [binding.SchedulerBinding, binding$.BindingBase];
  dart.setMethodSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getMethods(binding$0.ServicesBinding.__proto__),
    initInstances: dart.fnType(dart.void, []),
    createBinaryMessenger: dart.fnType(binary_messenger.BinaryMessenger, []),
    handleMemoryPressure: dart.fnType(dart.void, []),
    handleSystemMessage: dart.fnType(async.Future$(dart.void), [core.Object]),
    initLicenses: dart.fnType(dart.void, []),
    [_addLicenses]: dart.fnType(async.Stream$(licenses$.LicenseEntry), []),
    initServiceExtensions: dart.fnType(dart.void, []),
    evict: dart.fnType(dart.void, [core.String]),
    readInitialLifecycleStateFromNativeWindow: dart.fnType(dart.void, []),
    [_handleLifecycleMessage]: dart.fnType(async.Future$(dart.nullable(core.String)), [dart.nullable(core.String)]),
    createRestorationManager: dart.fnType(restoration.RestorationManager, [])
  }));
  dart.setGetterSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getGetters(binding$0.ServicesBinding.__proto__),
    defaultBinaryMessenger: binary_messenger.BinaryMessenger,
    [_defaultBinaryMessenger]: binary_messenger.BinaryMessenger,
    restorationManager: restoration.RestorationManager,
    [_restorationManager]: restoration.RestorationManager
  }));
  dart.setSetterSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getSetters(binding$0.ServicesBinding.__proto__),
    [_defaultBinaryMessenger]: binary_messenger.BinaryMessenger,
    [_restorationManager]: restoration.RestorationManager
  }));
  dart.setLibraryUri(binding$0.ServicesBinding, I[11]);
  dart.setFieldSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getFields(binding$0.ServicesBinding.__proto__),
    [__ServicesBinding__defaultBinaryMessenger]: dart.fieldType(dart.nullable(binary_messenger.BinaryMessenger)),
    [__ServicesBinding__restorationManager]: dart.fieldType(dart.nullable(restoration.RestorationManager))
  }));
  dart.defineLazy(binding$0.ServicesBinding, {
    /*binding$0.ServicesBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  var _sendPlatformMessage = dart.privateName(binding$0, "_sendPlatformMessage");
  binding$0._DefaultBinaryMessenger = class _DefaultBinaryMessenger extends binary_messenger.BinaryMessenger {
    [_sendPlatformMessage](channel, message) {
      let completer = T$.CompleterOfByteDataN().new();
      ui.PlatformDispatcher.instance.sendPlatformMessage(channel, message, dart.fn(reply => {
        try {
          completer.complete(reply);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message response callback")}));
          } else
            throw e;
        }
      }, T$.ByteDataNTovoid()));
      return completer.future;
    }
    handlePlatformMessage(channel, data, callback) {
      return async.async(dart.void, function* handlePlatformMessage() {
        let response = null;
        try {
          let handler = binding$0._DefaultBinaryMessenger._handlers[$_get](channel);
          if (handler != null) {
            response = (yield handler(data));
          } else {
            ui.channelBuffers.push(channel, data, dart.nullCheck(callback));
            callback = null;
          }
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message callback")}));
          } else
            throw e;
        } finally {
          if (callback != null) {
            callback(response);
          }
        }
      });
    }
    send(channel, message) {
      let handler = binding$0._DefaultBinaryMessenger._mockHandlers[$_get](channel);
      if (handler != null) return handler(message);
      return this[_sendPlatformMessage](channel, message);
    }
    setMessageHandler(channel, handler) {
      if (handler == null) {
        binding$0._DefaultBinaryMessenger._handlers[$remove](channel);
      } else {
        binding$0._DefaultBinaryMessenger._handlers[$_set](channel, handler);
        ui.channelBuffers.drain(channel, dart.fn((data, callback) => async.async(dart.void, (function*() {
          yield this.handlePlatformMessage(channel, data, callback);
        }).bind(this)), T$.ByteDataNAndFnToFutureOfvoid()));
      }
    }
    checkMessageHandler(channel, handler) {
      return dart.equals(binding$0._DefaultBinaryMessenger._handlers[$_get](channel), handler);
    }
    setMockMessageHandler(channel, handler) {
      if (handler == null)
        binding$0._DefaultBinaryMessenger._mockHandlers[$remove](channel);
      else
        binding$0._DefaultBinaryMessenger._mockHandlers[$_set](channel, handler);
    }
    checkMockMessageHandler(channel, handler) {
      return dart.equals(binding$0._DefaultBinaryMessenger._mockHandlers[$_get](channel), handler);
    }
  };
  (binding$0._DefaultBinaryMessenger.__ = function() {
    binding$0._DefaultBinaryMessenger.__proto__.new.call(this);
    ;
  }).prototype = binding$0._DefaultBinaryMessenger.prototype;
  dart.addTypeTests(binding$0._DefaultBinaryMessenger);
  dart.addTypeCaches(binding$0._DefaultBinaryMessenger);
  dart.setMethodSignature(binding$0._DefaultBinaryMessenger, () => ({
    __proto__: dart.getMethods(binding$0._DefaultBinaryMessenger.__proto__),
    [_sendPlatformMessage]: dart.fnType(async.Future$(dart.nullable(typed_data.ByteData)), [core.String, dart.nullable(typed_data.ByteData)]),
    handlePlatformMessage: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(typed_data.ByteData), dart.nullable(dart.fnType(dart.void, [dart.nullable(typed_data.ByteData)]))]),
    send: dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [core.String, dart.nullable(typed_data.ByteData)]),
    setMessageHandler: dart.fnType(dart.void, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    checkMessageHandler: dart.fnType(core.bool, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    setMockMessageHandler: dart.fnType(dart.void, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    checkMockMessageHandler: dart.fnType(core.bool, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))])
  }));
  dart.setLibraryUri(binding$0._DefaultBinaryMessenger, I[11]);
  dart.defineLazy(binding$0._DefaultBinaryMessenger, {
    /*binding$0._DefaultBinaryMessenger._handlers*/get _handlers() {
      return new (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN()).new();
    },
    /*binding$0._DefaultBinaryMessenger._mockHandlers*/get _mockHandlers() {
      return new (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN()).new();
    }
  }, false);
  asset_bundle.AssetBundle = class AssetBundle extends core.Object {
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      return async.async(core.String, (function* loadString() {
        let data = (yield this.load(key));
        if (data === null) dart.throw(assertions.FlutterError.new("Unable to load asset: " + key));
        if (data[$lengthInBytes] < 50 * 1024) {
          return convert.utf8.decode(data[$buffer][$asUint8List]());
        }
        return isolates.compute(typed_data.ByteData, core.String, C[25] || CT.C25, data, {debugLabel: "UTF8 decode for \"" + key + "\""});
      }).bind(this));
    }
    static _utf8decode(data) {
      return convert.utf8.decode(data[$buffer][$asUint8List]());
    }
    evict(key) {
    }
    toString() {
      return diagnostics.describeIdentity(this) + "()";
    }
  };
  (asset_bundle.AssetBundle.new = function() {
    ;
  }).prototype = asset_bundle.AssetBundle.prototype;
  dart.addTypeTests(asset_bundle.AssetBundle);
  dart.addTypeCaches(asset_bundle.AssetBundle);
  dart.setMethodSignature(asset_bundle.AssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.AssetBundle.__proto__),
    loadString: dart.fnType(async.Future$(core.String), [core.String], {cache: core.bool}, {}),
    evict: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(asset_bundle.AssetBundle, I[12]);
  dart.defineExtensionMethods(asset_bundle.AssetBundle, ['toString']);
  var _baseUrl = dart.privateName(asset_bundle, "_baseUrl");
  var _httpClient = dart.privateName(asset_bundle, "_httpClient");
  var _urlFromKey = dart.privateName(asset_bundle, "_urlFromKey");
  asset_bundle.NetworkAssetBundle = class NetworkAssetBundle extends asset_bundle.AssetBundle {
    [_urlFromKey](key) {
      return this[_baseUrl].resolve(key);
    }
    load(key) {
      return async.async(typed_data.ByteData, (function* load() {
        let request = (yield this[_httpClient].getUrl(this[_urlFromKey](key)));
        let response = (yield request.close());
        if (response.statusCode !== 200) dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unable to load asset: " + key), new diagnostics.IntProperty.new("HTTP status code", response.statusCode)])));
        let bytes = (yield consolidate_response.consolidateHttpClientResponseBytes(response));
        return bytes[$buffer][$asByteData]();
      }).bind(this));
    }
    loadStructuredData(T, key, parser) {
      return async.async(T, (function* loadStructuredData() {
        if (!(key !== null)) dart.assertFailed(null, I[13], 137, 12, "key != null");
        if (!(parser !== null)) dart.assertFailed(null, I[13], 138, 12, "parser != null");
        return parser(yield this.loadString(key));
      }).bind(this));
    }
    toString() {
      return diagnostics.describeIdentity(this) + "(" + dart.str(this[_baseUrl]) + ")";
    }
  };
  (asset_bundle.NetworkAssetBundle.new = function(baseUrl) {
    this[_baseUrl] = baseUrl;
    this[_httpClient] = _http.HttpClient.new();
    ;
  }).prototype = asset_bundle.NetworkAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.NetworkAssetBundle);
  dart.addTypeCaches(asset_bundle.NetworkAssetBundle);
  dart.setMethodSignature(asset_bundle.NetworkAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.NetworkAssetBundle.__proto__),
    [_urlFromKey]: dart.fnType(core.Uri, [core.String]),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String]),
    loadStructuredData: dart.gFnType(T => [async.Future$(T), [core.String, dart.fnType(async.Future$(T), [core.String])]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(asset_bundle.NetworkAssetBundle, I[12]);
  dart.setFieldSignature(asset_bundle.NetworkAssetBundle, () => ({
    __proto__: dart.getFields(asset_bundle.NetworkAssetBundle.__proto__),
    [_baseUrl]: dart.finalFieldType(core.Uri),
    [_httpClient]: dart.finalFieldType(_http.HttpClient)
  }));
  dart.defineExtensionMethods(asset_bundle.NetworkAssetBundle, ['toString']);
  var _stringCache = dart.privateName(asset_bundle, "_stringCache");
  var _structuredDataCache = dart.privateName(asset_bundle, "_structuredDataCache");
  asset_bundle.CachingAssetBundle = class CachingAssetBundle extends asset_bundle.AssetBundle {
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      if (cache) return this[_stringCache][$putIfAbsent](key, dart.fn(() => super.loadString(key), T$.VoidToFutureOfString()));
      return super.loadString(key);
    }
    loadStructuredData(T, key, parser) {
      if (!(key !== null)) dart.assertFailed(null, I[13], 181, 12, "key != null");
      if (!(parser !== null)) dart.assertFailed(null, I[13], 182, 12, "parser != null");
      if (this[_structuredDataCache][$containsKey](key)) return async.Future$(T).as(dart.nullCheck(this[_structuredDataCache][$_get](key)));
      let completer = null;
      let result = null;
      this.loadString(key, {cache: false}).then(T, parser).then(dart.void, dart.fn(value => {
        result = new (synchronous_future.SynchronousFuture$(T)).new(value);
        this[_structuredDataCache][$_set](key, dart.nullCheck(result));
        if (completer != null) {
          completer.complete(value);
        }
      }, dart.fnType(core.Null, [T])));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = async.Completer$(T).new();
      this[_structuredDataCache][$_set](key, completer.future);
      return completer.future;
    }
    evict(key) {
      this[_stringCache][$remove](key);
      this[_structuredDataCache][$remove](key);
    }
  };
  (asset_bundle.CachingAssetBundle.new = function() {
    this[_stringCache] = new (T$.IdentityMapOfString$FutureOfString()).new();
    this[_structuredDataCache] = new (T$.IdentityMapOfString$Future()).new();
    ;
  }).prototype = asset_bundle.CachingAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.CachingAssetBundle);
  dart.addTypeCaches(asset_bundle.CachingAssetBundle);
  dart.setMethodSignature(asset_bundle.CachingAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.CachingAssetBundle.__proto__),
    loadStructuredData: dart.gFnType(T => [async.Future$(T), [core.String, dart.fnType(async.Future$(T), [core.String])]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(asset_bundle.CachingAssetBundle, I[12]);
  dart.setFieldSignature(asset_bundle.CachingAssetBundle, () => ({
    __proto__: dart.getFields(asset_bundle.CachingAssetBundle.__proto__),
    [_stringCache]: dart.finalFieldType(core.Map$(core.String, async.Future$(core.String))),
    [_structuredDataCache]: dart.finalFieldType(core.Map$(core.String, async.Future))
  }));
  asset_bundle.PlatformAssetBundle = class PlatformAssetBundle extends asset_bundle.CachingAssetBundle {
    load(key) {
      return async.async(typed_data.ByteData, function* load() {
        let encoded = convert.utf8.encoder.convert(core._Uri.new({path: core.Uri.encodeFull(key)}).path);
        let asset = (yield dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger.send("flutter/assets", encoded[$buffer][$asByteData]()));
        if (asset == null) dart.throw(assertions.FlutterError.new("Unable to load asset: " + key));
        return asset;
      });
    }
  };
  (asset_bundle.PlatformAssetBundle.new = function() {
    asset_bundle.PlatformAssetBundle.__proto__.new.call(this);
    ;
  }).prototype = asset_bundle.PlatformAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.PlatformAssetBundle);
  dart.addTypeCaches(asset_bundle.PlatformAssetBundle);
  dart.setMethodSignature(asset_bundle.PlatformAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.PlatformAssetBundle.__proto__),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String])
  }));
  dart.setLibraryUri(asset_bundle.PlatformAssetBundle, I[12]);
  asset_bundle._initRootBundle = function _initRootBundle() {
    return new asset_bundle.PlatformAssetBundle.new();
  };
  dart.defineLazy(asset_bundle, {
    /*asset_bundle.rootBundle*/get rootBundle() {
      return asset_bundle._initRootBundle();
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/services/system_channels.dart", {
    "package:flutter/src/services/system_channels.dart": system_channels,
    "package:flutter/src/services/message_codecs.dart": message_codecs,
    "package:flutter/src/services/platform_channel.dart": platform_channel,
    "package:flutter/src/services/message_codec.dart": message_codec,
    "package:flutter/src/services/restoration.dart": restoration,
    "package:flutter/src/services/binary_messenger.dart": binary_messenger,
    "package:flutter/src/services/binding.dart": binding$0,
    "package:flutter/src/services/asset_bundle.dart": asset_bundle
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["system_channels.dart","message_codecs.dart","platform_channel.dart","message_codec.dart","restoration.dart","binary_messenger.dart","binding.dart","asset_bundle.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/services/system_channels.dart.lib.js"}');
  // Exports:
  return {
    src__services__system_channels: system_channels,
    src__services__message_codecs: message_codecs,
    src__services__platform_channel: platform_channel,
    src__services__message_codec: message_codec,
    src__services__restoration: restoration,
    src__services__binary_messenger: binary_messenger,
    src__services__binding: binding$0,
    src__services__asset_bundle: asset_bundle
  };
}));

//# sourceMappingURL=system_channels.dart.lib.js.map
>>>>>>> 75a5b68328961ba989f4b72e23f0c2c5b16d7dc4
