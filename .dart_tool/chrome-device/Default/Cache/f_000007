define(['dart_sdk', 'packages/hive/src/box/lazy_box_impl.dart'], (function load__packages__eco_ml__data__database_dart(dart_sdk, packages__hive__src__box__lazy_box_impl$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hive_object = packages__hive__src__box__lazy_box_impl$46dart.src__object__hive_object;
  const hive = packages__hive__src__box__lazy_box_impl$46dart.hive;
  var database = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$dynamic: () => (T.IdentityMapOfint$dynamic = dart.constFn(_js_helper.IdentityMap$(core.int, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:eco_ml/data/database.dart"];
  var username$ = dart.privateName(database, "UserName.username");
  database.UserName = class UserName extends hive_object.HiveObject {
    get username() {
      return this[username$];
    }
    set username(value) {
      super.username = value;
    }
  };
  (database.UserName.new = function(username) {
    this[username$] = username;
    database.UserName.__proto__.new.call(this);
    ;
  }).prototype = database.UserName.prototype;
  dart.addTypeTests(database.UserName);
  dart.addTypeCaches(database.UserName);
  dart.setLibraryUri(database.UserName, I[0]);
  dart.setFieldSignature(database.UserName, () => ({
    __proto__: dart.getFields(database.UserName.__proto__),
    username: dart.finalFieldType(core.String)
  }));
  var amount$ = dart.privateName(database, "TotalAmount.amount");
  var showOnboard$ = dart.privateName(database, "TotalAmount.showOnboard");
  database.TotalAmount = class TotalAmount extends hive_object.HiveObject {
    get amount() {
      return this[amount$];
    }
    set amount(value) {
      super.amount = value;
    }
    get showOnboard() {
      return this[showOnboard$];
    }
    set showOnboard(value) {
      super.showOnboard = value;
    }
  };
  (database.TotalAmount.new = function(amount, showOnboard) {
    this[amount$] = amount;
    this[showOnboard$] = showOnboard;
    database.TotalAmount.__proto__.new.call(this);
    ;
  }).prototype = database.TotalAmount.prototype;
  dart.addTypeTests(database.TotalAmount);
  dart.addTypeCaches(database.TotalAmount);
  dart.setLibraryUri(database.TotalAmount, I[0]);
  dart.setFieldSignature(database.TotalAmount, () => ({
    __proto__: dart.getFields(database.TotalAmount.__proto__),
    amount: dart.finalFieldType(core.double),
    showOnboard: dart.finalFieldType(core.bool)
  }));
  var id$ = dart.privateName(database, "IconData.id");
  var isIncome$ = dart.privateName(database, "IconData.isIncome");
  database.IconData = class IconData extends hive_object.HiveObject {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get isIncome() {
      return this[isIncome$];
    }
    set isIncome(value) {
      super.isIncome = value;
    }
  };
  (database.IconData.new = function(id, isIncome) {
    this[id$] = id;
    this[isIncome$] = isIncome;
    database.IconData.__proto__.new.call(this);
    ;
  }).prototype = database.IconData.prototype;
  dart.addTypeTests(database.IconData);
  dart.addTypeCaches(database.IconData);
  dart.setLibraryUri(database.IconData, I[0]);
  dart.setFieldSignature(database.IconData, () => ({
    __proto__: dart.getFields(database.IconData.__proto__),
    id: dart.finalFieldType(core.int),
    isIncome: dart.finalFieldType(core.bool)
  }));
  var __Transaction_iconId = dart.privateName(database, "_#Transaction#iconId");
  var __Transaction_isExpense = dart.privateName(database, "_#Transaction#isExpense");
  var __Transaction_amount = dart.privateName(database, "_#Transaction#amount");
  var __Transaction_description = dart.privateName(database, "_#Transaction#description");
  database.Transaction = class Transaction extends hive_object.HiveObject {
    get iconId() {
      let t0;
      t0 = this[__Transaction_iconId];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("iconId")) : t0;
    }
    set iconId(t0) {
      this[__Transaction_iconId] = t0;
    }
    get isExpense() {
      let t1;
      t1 = this[__Transaction_isExpense];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("isExpense")) : t1;
    }
    set isExpense(t1) {
      this[__Transaction_isExpense] = t1;
    }
    get amount() {
      let t2;
      t2 = this[__Transaction_amount];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("amount")) : t2;
    }
    set amount(t2) {
      this[__Transaction_amount] = t2;
    }
    get description() {
      let t3;
      t3 = this[__Transaction_description];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("description")) : t3;
    }
    set description(t3) {
      this[__Transaction_description] = t3;
    }
  };
  (database.Transaction.new = function(iconId, isExpense, amount, description) {
    this[__Transaction_iconId] = null;
    this[__Transaction_isExpense] = null;
    this[__Transaction_amount] = null;
    this[__Transaction_description] = null;
    this[__Transaction_iconId] = iconId;
    this[__Transaction_isExpense] = isExpense;
    this[__Transaction_amount] = amount;
    this[__Transaction_description] = description;
    database.Transaction.__proto__.new.call(this);
    ;
  }).prototype = database.Transaction.prototype;
  dart.addTypeTests(database.Transaction);
  dart.addTypeCaches(database.Transaction);
  dart.setGetterSignature(database.Transaction, () => ({
    __proto__: dart.getGetters(database.Transaction.__proto__),
    iconId: core.int,
    isExpense: core.bool,
    amount: core.double,
    description: core.String
  }));
  dart.setSetterSignature(database.Transaction, () => ({
    __proto__: dart.getSetters(database.Transaction.__proto__),
    iconId: core.int,
    isExpense: core.bool,
    amount: core.double,
    description: core.String
  }));
  dart.setLibraryUri(database.Transaction, I[0]);
  dart.setFieldSignature(database.Transaction, () => ({
    __proto__: dart.getFields(database.Transaction.__proto__),
    [__Transaction_iconId]: dart.fieldType(dart.nullable(core.int)),
    [__Transaction_isExpense]: dart.fieldType(dart.nullable(core.bool)),
    [__Transaction_amount]: dart.fieldType(dart.nullable(core.double)),
    [__Transaction_description]: dart.fieldType(dart.nullable(core.String))
  }));
  var typeId = dart.privateName(database, "UserNameAdapter.typeId");
  database.UserNameAdapter = class UserNameAdapter extends hive.TypeAdapter$(database.UserName) {
    get typeId() {
      return this[typeId];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t4 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t4[$_set](reader.readByte(), reader.read());
        return t4;
      })();
      return new database.UserName.new(core.String.as(fields[$_get](0)));
    }
    write(writer, obj) {
      let t5;
      database.UserName.as(obj);
      t5 = writer;
      (() => {
        t5.writeByte(1);
        t5.writeByte(0);
        t5.write(core.String, obj.username);
        return t5;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.UserNameAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.UserNameAdapter.new = function() {
    this[typeId] = 0;
    ;
  }).prototype = database.UserNameAdapter.prototype;
  dart.addTypeTests(database.UserNameAdapter);
  dart.addTypeCaches(database.UserNameAdapter);
  dart.setMethodSignature(database.UserNameAdapter, () => ({
    __proto__: dart.getMethods(database.UserNameAdapter.__proto__),
    read: dart.fnType(database.UserName, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.UserNameAdapter, I[0]);
  dart.setFieldSignature(database.UserNameAdapter, () => ({
    __proto__: dart.getFields(database.UserNameAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.UserNameAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.UserNameAdapter, ['hashCode']);
  var typeId$ = dart.privateName(database, "TotalAmountAdapter.typeId");
  database.TotalAmountAdapter = class TotalAmountAdapter extends hive.TypeAdapter$(database.TotalAmount) {
    get typeId() {
      return this[typeId$];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t5 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t5[$_set](reader.readByte(), reader.read());
        return t5;
      })();
      return new database.TotalAmount.new(core.double.as(fields[$_get](0)), core.bool.as(fields[$_get](1)));
    }
    write(writer, obj) {
      let t6;
      database.TotalAmount.as(obj);
      t6 = writer;
      (() => {
        t6.writeByte(2);
        t6.writeByte(0);
        t6.write(core.double, obj.amount);
        t6.writeByte(1);
        t6.write(core.bool, obj.showOnboard);
        return t6;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.TotalAmountAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.TotalAmountAdapter.new = function() {
    this[typeId$] = 1;
    ;
  }).prototype = database.TotalAmountAdapter.prototype;
  dart.addTypeTests(database.TotalAmountAdapter);
  dart.addTypeCaches(database.TotalAmountAdapter);
  dart.setMethodSignature(database.TotalAmountAdapter, () => ({
    __proto__: dart.getMethods(database.TotalAmountAdapter.__proto__),
    read: dart.fnType(database.TotalAmount, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.TotalAmountAdapter, I[0]);
  dart.setFieldSignature(database.TotalAmountAdapter, () => ({
    __proto__: dart.getFields(database.TotalAmountAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.TotalAmountAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.TotalAmountAdapter, ['hashCode']);
  var typeId$0 = dart.privateName(database, "IconDataAdapter.typeId");
  database.IconDataAdapter = class IconDataAdapter extends hive.TypeAdapter$(database.IconData) {
    get typeId() {
      return this[typeId$0];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t6 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t6[$_set](reader.readByte(), reader.read());
        return t6;
      })();
      return new database.IconData.new(core.int.as(fields[$_get](0)), core.bool.as(fields[$_get](1)));
    }
    write(writer, obj) {
      let t7;
      database.IconData.as(obj);
      t7 = writer;
      (() => {
        t7.writeByte(2);
        t7.writeByte(0);
        t7.write(core.int, obj.id);
        t7.writeByte(1);
        t7.write(core.bool, obj.isIncome);
        return t7;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.IconDataAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.IconDataAdapter.new = function() {
    this[typeId$0] = 2;
    ;
  }).prototype = database.IconDataAdapter.prototype;
  dart.addTypeTests(database.IconDataAdapter);
  dart.addTypeCaches(database.IconDataAdapter);
  dart.setMethodSignature(database.IconDataAdapter, () => ({
    __proto__: dart.getMethods(database.IconDataAdapter.__proto__),
    read: dart.fnType(database.IconData, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.IconDataAdapter, I[0]);
  dart.setFieldSignature(database.IconDataAdapter, () => ({
    __proto__: dart.getFields(database.IconDataAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.IconDataAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.IconDataAdapter, ['hashCode']);
  var typeId$1 = dart.privateName(database, "TransactionAdapter.typeId");
  database.TransactionAdapter = class TransactionAdapter extends hive.TypeAdapter$(database.Transaction) {
    get typeId() {
      return this[typeId$1];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t7 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t7[$_set](reader.readByte(), reader.read());
        return t7;
      })();
      return new database.Transaction.new(core.int.as(fields[$_get](0)), core.bool.as(fields[$_get](1)), core.double.as(fields[$_get](2)), core.String.as(fields[$_get](4)));
    }
    write(writer, obj) {
      let t8;
      database.Transaction.as(obj);
      t8 = writer;
      (() => {
        t8.writeByte(4);
        t8.writeByte(0);
        t8.write(core.int, obj.iconId);
        t8.writeByte(1);
        t8.write(core.bool, obj.isExpense);
        t8.writeByte(2);
        t8.write(core.double, obj.amount);
        t8.writeByte(4);
        t8.write(core.String, obj.description);
        return t8;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.TransactionAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.TransactionAdapter.new = function() {
    this[typeId$1] = 3;
    ;
  }).prototype = database.TransactionAdapter.prototype;
  dart.addTypeTests(database.TransactionAdapter);
  dart.addTypeCaches(database.TransactionAdapter);
  dart.setMethodSignature(database.TransactionAdapter, () => ({
    __proto__: dart.getMethods(database.TransactionAdapter.__proto__),
    read: dart.fnType(database.Transaction, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.TransactionAdapter, I[0]);
  dart.setFieldSignature(database.TransactionAdapter, () => ({
    __proto__: dart.getFields(database.TransactionAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.TransactionAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.TransactionAdapter, ['hashCode']);
  dart.trackLibraries("packages/eco_ml/data/database.dart", {
    "package:eco_ml/data/database.dart": database
  }, {
    "package:eco_ml/data/database.dart": ["database.g.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["database.dart","database.g.dart"],"names":[],"mappings":"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","file":"../../../../../packages/eco_ml/data/database.dart.lib.js"}');
  // Exports:
  return {
    data__database: database
  };
}));

//# sourceMappingURL=database.dart.lib.js.map
