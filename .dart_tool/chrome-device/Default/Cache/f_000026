<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__alignment_dart(dart_sdk, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var alignment = Object.create(dart.library);
  var $truncate = dartx.truncate;
  var $toDouble = dartx.toDouble;
  var $modulo = dartx['%'];
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
=======
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/collections.dart'], (function load__packages__flutter__src__painting__borders_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__collections$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  var borders$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $length = dartx.length;
  var $any = dartx.any;
  var $fold = dartx.fold;
  var $last = dartx.last;
  var $first = dartx.first;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $_get = dartx._get;
  var $reversed = dartx.reversed;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfShapeBorder: () => (T.JSArrayOfShapeBorder = dart.constFn(_interceptors.JSArray$(borders$.ShapeBorder)))(),
    ShapeBorderTobool: () => (T.ShapeBorderTobool = dart.constFn(dart.fnType(core.bool, [borders$.ShapeBorder])))(),
    EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry: () => (T.EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry = dart.constFn(dart.fnType(edge_insets.EdgeInsetsGeometry, [edge_insets.EdgeInsetsGeometry, borders$.ShapeBorder])))(),
    ListOfShapeBorder: () => (T.ListOfShapeBorder = dart.constFn(core.List$(borders$.ShapeBorder)))(),
    ShapeBorderToShapeBorder: () => (T.ShapeBorderToShapeBorder = dart.constFn(dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder])))(),
    ShapeBorderN: () => (T.ShapeBorderN = dart.constFn(dart.nullable(borders$.ShapeBorder)))(),
    JSArrayOfShapeBorderN: () => (T.JSArrayOfShapeBorderN = dart.constFn(_interceptors.JSArray$(T.ShapeBorderN())))(),
    ShapeBorderToString: () => (T.ShapeBorderToString = dart.constFn(dart.fnType(core.String, [borders$.ShapeBorder])))()
  };
>>>>>>> AUg2
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: alignment.Alignment.prototype,
        [y$]: -1,
        [x$]: -1
=======
        __proto__: borders$.BorderStyle.prototype,
        [_name$]: "BorderStyle.none",
        index: 0
>>>>>>> AUg2
      });
    },
    get C1() {
      return C[1] = dart.const({
<<<<<<< HEAD
        __proto__: alignment.Alignment.prototype,
        [y$]: -1,
        [x$]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [y$]: -1,
        [x$]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [y$]: 0,
        [x$]: -1
=======
        __proto__: borders$.BorderStyle.prototype,
        [_name$]: "BorderStyle.solid",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], borders$.BorderStyle);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
>>>>>>> AUg2
      });
    },
    get C4() {
      return C[4] = dart.const({
<<<<<<< HEAD
        __proto__: alignment.Alignment.prototype,
        [y$]: 0,
        [x$]: 0
=======
        __proto__: ui.Color.prototype,
        [Color_value]: 0
>>>>>>> AUg2
      });
    },
    get C5() {
      return C[5] = dart.const({
<<<<<<< HEAD
        __proto__: alignment.Alignment.prototype,
        [y$]: 0,
        [x$]: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [y$]: 1,
        [x$]: -1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [y$]: 1,
        [x$]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [y$]: 1,
        [x$]: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: -1,
        [start$]: -1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: -1,
        [start$]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: -1,
        [start$]: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 0,
        [start$]: -1
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 0,
        [start$]: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 0,
        [start$]: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 1,
        [start$]: -1
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 1,
        [start$]: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [y$0]: 1,
        [start$]: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        [y$1]: -1
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        [y$1]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        [y$1]: 1
      });
    }
  }, false);
  var C = Array(23).fill(void 0);
  var I = [
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/painting/alignment.dart",
    "package:flutter/src/painting/alignment.dart"
  ];
  var _x = dart.privateName(alignment, "_x");
  var _start = dart.privateName(alignment, "_start");
  var _y = dart.privateName(alignment, "_y");
  alignment.AlignmentGeometry = class AlignmentGeometry extends core.Object {
    add(other) {
      return new alignment._MixedAlignment.new(this[_x] + other[_x], this[_start] + other[_start], this[_y] + other[_y]);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[0], 91, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b)['*'](t);
      if (b == null) return a['*'](1.0 - t);
      if (alignment.Alignment.is(a) && alignment.Alignment.is(b)) return alignment.Alignment.lerp(a, b, t);
      if (alignment.AlignmentDirectional.is(a) && alignment.AlignmentDirectional.is(b)) return alignment.AlignmentDirectional.lerp(a, b, t);
      return new alignment._MixedAlignment.new(dart.nullCheck(ui.lerpDouble(a[_x], b[_x], t)), dart.nullCheck(ui.lerpDouble(a[_start], b[_start], t)), dart.nullCheck(ui.lerpDouble(a[_y], b[_y], t)));
    }
    toString() {
      if (this[_start] === 0.0) return alignment.Alignment._stringify(this[_x], this[_y]);
      if (this[_x] === 0.0) return alignment.AlignmentDirectional._stringify(this[_start], this[_y]);
      return alignment.Alignment._stringify(this[_x], this[_y]) + " + " + alignment.AlignmentDirectional._stringify(this[_start], 0.0);
    }
    _equals(other) {
      if (other == null) return false;
      return alignment.AlignmentGeometry.is(other) && other[_x] === this[_x] && other[_start] === this[_start] && other[_y] === this[_y];
    }
    get hashCode() {
      return ui.hashValues(this[_x], this[_start], this[_y]);
    }
  };
  (alignment.AlignmentGeometry.new = function() {
    ;
  }).prototype = alignment.AlignmentGeometry.prototype;
  dart.addTypeTests(alignment.AlignmentGeometry);
  dart.addTypeCaches(alignment.AlignmentGeometry);
  dart.setMethodSignature(alignment.AlignmentGeometry, () => ({
    __proto__: dart.getMethods(alignment.AlignmentGeometry.__proto__),
    add: dart.fnType(alignment.AlignmentGeometry, [alignment.AlignmentGeometry])
  }));
  dart.setLibraryUri(alignment.AlignmentGeometry, I[1]);
  dart.defineExtensionMethods(alignment.AlignmentGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(alignment.AlignmentGeometry, ['hashCode']);
  var x$ = dart.privateName(alignment, "Alignment.x");
  var y$ = dart.privateName(alignment, "Alignment.y");
  alignment.Alignment = class Alignment extends alignment.AlignmentGeometry {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return this.x;
    }
    get [_start]() {
      return 0.0;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (alignment.Alignment.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.Alignment.new(this.x - other.x, this.y - other.y);
    }
    ['+'](other) {
      return new alignment.Alignment.new(this.x + other.x, this.y + other.y);
    }
    _negate() {
      return new alignment.Alignment.new(-this.x, -this.y);
    }
    ['*'](other) {
      return new alignment.Alignment.new(this.x * other, this.y * other);
    }
    ['/'](other) {
      return new alignment.Alignment.new(this.x / other, this.y / other);
    }
    ['~/'](other) {
      return new alignment.Alignment.new((this.x / other)[$truncate]()[$toDouble](), (this.y / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.Alignment.new(this.x[$modulo](other), this.y[$modulo](other));
    }
    alongOffset(other) {
      let centerX = other.dx / 2.0;
      let centerY = other.dy / 2.0;
      return new ui.Offset.new(centerX + this.x * centerX, centerY + this.y * centerY);
    }
    alongSize(other) {
      let centerX = other.width / 2.0;
      let centerY = other.height / 2.0;
      return new ui.Offset.new(centerX + this.x * centerX, centerY + this.y * centerY);
    }
    withinRect(rect) {
      let halfWidth = rect.width / 2.0;
      let halfHeight = rect.height / 2.0;
      return new ui.Offset.new(rect.left + halfWidth + this.x * halfWidth, rect.top + halfHeight + this.y * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (rect.width - size.width) / 2.0;
      let halfHeightDelta = (rect.height - size.height) / 2.0;
      return new ui.Rect.fromLTWH(rect.left + halfWidthDelta + this.x * halfWidthDelta, rect.top + halfHeightDelta + this.y * halfHeightDelta, size.width, size.height);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[0], 336, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(0.0, dart.nullCheck(b).x, t)), dart.nullCheck(ui.lerpDouble(0.0, b.y, t)));
      if (b == null) return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(a.x, 0.0, t)), dart.nullCheck(ui.lerpDouble(a.y, 0.0, t)));
      return new alignment.Alignment.new(dart.nullCheck(ui.lerpDouble(a.x, b.x, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)));
    }
    resolve(direction) {
      return this;
    }
    static _stringify(x, y) {
      if (x === -1.0 && y === -1.0) return "Alignment.topLeft";
      if (x === 0.0 && y === -1.0) return "Alignment.topCenter";
      if (x === 1.0 && y === -1.0) return "Alignment.topRight";
      if (x === -1.0 && y === 0.0) return "Alignment.centerLeft";
      if (x === 0.0 && y === 0.0) return "Alignment.center";
      if (x === 1.0 && y === 0.0) return "Alignment.centerRight";
      if (x === -1.0 && y === 1.0) return "Alignment.bottomLeft";
      if (x === 0.0 && y === 1.0) return "Alignment.bottomCenter";
      if (x === 1.0 && y === 1.0) return "Alignment.bottomRight";
      return "Alignment(" + x[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.Alignment._stringify(this.x, this.y);
    }
  };
  (alignment.Alignment.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    if (!(x !== null)) dart.assertFailed(null, I[0], 186, 14, "x != null");
    if (!(y !== null)) dart.assertFailed(null, I[0], 187, 14, "y != null");
    alignment.Alignment.__proto__.new.call(this);
    ;
  }).prototype = alignment.Alignment.prototype;
  dart.addTypeTests(alignment.Alignment);
  dart.addTypeCaches(alignment.Alignment);
  dart.setMethodSignature(alignment.Alignment, () => ({
    __proto__: dart.getMethods(alignment.Alignment.__proto__),
    '-': dart.fnType(alignment.Alignment, [alignment.Alignment]),
    '+': dart.fnType(alignment.Alignment, [alignment.Alignment]),
    _negate: dart.fnType(alignment.Alignment, []),
    '*': dart.fnType(alignment.Alignment, [core.double]),
    '/': dart.fnType(alignment.Alignment, [core.double]),
    '~/': dart.fnType(alignment.Alignment, [core.double]),
    '%': dart.fnType(alignment.Alignment, [core.double]),
    alongOffset: dart.fnType(ui.Offset, [ui.Offset]),
    alongSize: dart.fnType(ui.Offset, [ui.Size]),
    withinRect: dart.fnType(ui.Offset, [ui.Rect]),
    inscribe: dart.fnType(ui.Rect, [ui.Size, ui.Rect]),
    resolve: dart.fnType(alignment.Alignment, [dart.nullable(ui.TextDirection)])
  }));
  dart.setGetterSignature(alignment.Alignment, () => ({
    __proto__: dart.getGetters(alignment.Alignment.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(alignment.Alignment, I[1]);
  dart.setFieldSignature(alignment.Alignment, () => ({
    __proto__: dart.getFields(alignment.Alignment.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.Alignment, ['toString']);
  dart.defineLazy(alignment.Alignment, {
    /*alignment.Alignment.topLeft*/get topLeft() {
      return C[0] || CT.C0;
    },
    /*alignment.Alignment.topCenter*/get topCenter() {
      return C[1] || CT.C1;
    },
    /*alignment.Alignment.topRight*/get topRight() {
      return C[2] || CT.C2;
    },
    /*alignment.Alignment.centerLeft*/get centerLeft() {
      return C[3] || CT.C3;
    },
    /*alignment.Alignment.center*/get center() {
      return C[4] || CT.C4;
    },
    /*alignment.Alignment.centerRight*/get centerRight() {
      return C[5] || CT.C5;
    },
    /*alignment.Alignment.bottomLeft*/get bottomLeft() {
      return C[6] || CT.C6;
    },
    /*alignment.Alignment.bottomCenter*/get bottomCenter() {
      return C[7] || CT.C7;
    },
    /*alignment.Alignment.bottomRight*/get bottomRight() {
      return C[8] || CT.C8;
    }
  }, false);
  var start$ = dart.privateName(alignment, "AlignmentDirectional.start");
  var y$0 = dart.privateName(alignment, "AlignmentDirectional.y");
  var _name = dart.privateName(ui, "_name");
  alignment.AlignmentDirectional = class AlignmentDirectional extends alignment.AlignmentGeometry {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return 0.0;
    }
    get [_start]() {
      return this.start;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (alignment.AlignmentDirectional.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.AlignmentDirectional.new(this.start - other.start, this.y - other.y);
    }
    ['+'](other) {
      return new alignment.AlignmentDirectional.new(this.start + other.start, this.y + other.y);
    }
    _negate() {
      return new alignment.AlignmentDirectional.new(-this.start, -this.y);
    }
    ['*'](other) {
      return new alignment.AlignmentDirectional.new(this.start * other, this.y * other);
    }
    ['/'](other) {
      return new alignment.AlignmentDirectional.new(this.start / other, this.y / other);
    }
    ['~/'](other) {
      return new alignment.AlignmentDirectional.new((this.start / other)[$truncate]()[$toDouble](), (this.y / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.AlignmentDirectional.new(this.start[$modulo](other), this.y[$modulo](other));
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[0], 517, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(0.0, dart.nullCheck(b).start, t)), dart.nullCheck(ui.lerpDouble(0.0, b.y, t)));
      if (b == null) return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(a.start, 0.0, t)), dart.nullCheck(ui.lerpDouble(a.y, 0.0, t)));
      return new alignment.AlignmentDirectional.new(dart.nullCheck(ui.lerpDouble(a.start, b.start, t)), dart.nullCheck(ui.lerpDouble(a.y, b.y, t)));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed("Cannot resolve " + dart.str(this[$runtimeType]) + " without a TextDirection.", I[0], 529, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[9] || CT.C9:
        {
          return new alignment.Alignment.new(-this.start, this.y);
        }
        case C[10] || CT.C10:
        {
          return new alignment.Alignment.new(this.start, this.y);
        }
      }
    }
    static _stringify(start, y) {
      if (start === -1.0 && y === -1.0) return "AlignmentDirectional.topStart";
      if (start === 0.0 && y === -1.0) return "AlignmentDirectional.topCenter";
      if (start === 1.0 && y === -1.0) return "AlignmentDirectional.topEnd";
      if (start === -1.0 && y === 0.0) return "AlignmentDirectional.centerStart";
      if (start === 0.0 && y === 0.0) return "AlignmentDirectional.center";
      if (start === 1.0 && y === 0.0) return "AlignmentDirectional.centerEnd";
      if (start === -1.0 && y === 1.0) return "AlignmentDirectional.bottomStart";
      if (start === 0.0 && y === 1.0) return "AlignmentDirectional.bottomCenter";
      if (start === 1.0 && y === 1.0) return "AlignmentDirectional.bottomEnd";
      return "AlignmentDirectional(" + start[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.AlignmentDirectional._stringify(this.start, this.y);
    }
  };
  (alignment.AlignmentDirectional.new = function(start, y) {
    this[start$] = start;
    this[y$0] = y;
    if (!(start !== null)) dart.assertFailed(null, I[0], 392, 14, "start != null");
    if (!(y !== null)) dart.assertFailed(null, I[0], 393, 14, "y != null");
    alignment.AlignmentDirectional.__proto__.new.call(this);
    ;
  }).prototype = alignment.AlignmentDirectional.prototype;
  dart.addTypeTests(alignment.AlignmentDirectional);
  dart.addTypeCaches(alignment.AlignmentDirectional);
  dart.setMethodSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getMethods(alignment.AlignmentDirectional.__proto__),
    '-': dart.fnType(alignment.AlignmentDirectional, [alignment.AlignmentDirectional]),
    '+': dart.fnType(alignment.AlignmentDirectional, [alignment.AlignmentDirectional]),
    _negate: dart.fnType(alignment.AlignmentDirectional, []),
    '*': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '/': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '~/': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '%': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    resolve: dart.fnType(alignment.Alignment, [dart.nullable(ui.TextDirection)])
  }));
  dart.setGetterSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getGetters(alignment.AlignmentDirectional.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(alignment.AlignmentDirectional, I[1]);
  dart.setFieldSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getFields(alignment.AlignmentDirectional.__proto__),
    start: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.AlignmentDirectional, ['toString']);
  dart.defineLazy(alignment.AlignmentDirectional, {
    /*alignment.AlignmentDirectional.topStart*/get topStart() {
      return C[11] || CT.C11;
    },
    /*alignment.AlignmentDirectional.topCenter*/get topCenter() {
      return C[12] || CT.C12;
    },
    /*alignment.AlignmentDirectional.topEnd*/get topEnd() {
      return C[13] || CT.C13;
    },
    /*alignment.AlignmentDirectional.centerStart*/get centerStart() {
      return C[14] || CT.C14;
    },
    /*alignment.AlignmentDirectional.center*/get center() {
      return C[15] || CT.C15;
    },
    /*alignment.AlignmentDirectional.centerEnd*/get centerEnd() {
      return C[16] || CT.C16;
    },
    /*alignment.AlignmentDirectional.bottomStart*/get bottomStart() {
      return C[17] || CT.C17;
    },
    /*alignment.AlignmentDirectional.bottomCenter*/get bottomCenter() {
      return C[18] || CT.C18;
    },
    /*alignment.AlignmentDirectional.bottomEnd*/get bottomEnd() {
      return C[19] || CT.C19;
    }
  }, false);
  var _x$ = dart.privateName(alignment, "_MixedAlignment._x");
  var _start$ = dart.privateName(alignment, "_MixedAlignment._start");
  var _y$ = dart.privateName(alignment, "_MixedAlignment._y");
  alignment._MixedAlignment = class _MixedAlignment extends alignment.AlignmentGeometry {
    get [_x]() {
      return this[_x$];
    }
    set [_x](value) {
      super[_x] = value;
    }
    get [_start]() {
      return this[_start$];
    }
    set [_start](value) {
      super[_start] = value;
    }
    get [_y]() {
      return this[_y$];
    }
    set [_y](value) {
      super[_y] = value;
    }
    _negate() {
      return new alignment._MixedAlignment.new(-this[_x], -this[_start], -this[_y]);
    }
    ['*'](other) {
      return new alignment._MixedAlignment.new(this[_x] * other, this[_start] * other, this[_y] * other);
    }
    ['/'](other) {
      return new alignment._MixedAlignment.new(this[_x] / other, this[_start] / other, this[_y] / other);
    }
    ['~/'](other) {
      return new alignment._MixedAlignment.new((this[_x] / other)[$truncate]()[$toDouble](), (this[_start] / other)[$truncate]()[$toDouble](), (this[_y] / other)[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment._MixedAlignment.new(this[_x][$modulo](other), this[_start][$modulo](other), this[_y][$modulo](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed("Cannot resolve " + dart.str(this[$runtimeType]) + " without a TextDirection.", I[0], 624, 12, "direction != null");
      switch (dart.nullCheck(direction)) {
        case C[9] || CT.C9:
        {
          return new alignment.Alignment.new(this[_x] - this[_start], this[_y]);
        }
        case C[10] || CT.C10:
        {
          return new alignment.Alignment.new(this[_x] + this[_start], this[_y]);
        }
      }
    }
  };
  (alignment._MixedAlignment.new = function(_x, _start, _y) {
    this[_x$] = _x;
    this[_start$] = _start;
    this[_y$] = _y;
    alignment._MixedAlignment.__proto__.new.call(this);
    ;
  }).prototype = alignment._MixedAlignment.prototype;
  dart.addTypeTests(alignment._MixedAlignment);
  dart.addTypeCaches(alignment._MixedAlignment);
  dart.setMethodSignature(alignment._MixedAlignment, () => ({
    __proto__: dart.getMethods(alignment._MixedAlignment.__proto__),
    _negate: dart.fnType(alignment._MixedAlignment, []),
    '*': dart.fnType(alignment._MixedAlignment, [core.double]),
    '/': dart.fnType(alignment._MixedAlignment, [core.double]),
    '~/': dart.fnType(alignment._MixedAlignment, [core.double]),
    '%': dart.fnType(alignment._MixedAlignment, [core.double]),
    resolve: dart.fnType(alignment.Alignment, [dart.nullable(ui.TextDirection)])
  }));
  dart.setLibraryUri(alignment._MixedAlignment, I[1]);
  dart.setFieldSignature(alignment._MixedAlignment, () => ({
    __proto__: dart.getFields(alignment._MixedAlignment.__proto__),
    [_x]: dart.finalFieldType(core.double),
    [_start]: dart.finalFieldType(core.double),
    [_y]: dart.finalFieldType(core.double)
  }));
  var y$1 = dart.privateName(alignment, "TextAlignVertical.y");
  alignment.TextAlignVertical = class TextAlignVertical extends core.Object {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return object.objectRuntimeType(this, "TextAlignVertical") + "(y: " + dart.str(this.y) + ")";
    }
  };
  (alignment.TextAlignVertical.new = function(opts) {
    let y = opts && 'y' in opts ? opts.y : null;
    this[y$1] = y;
    if (!(y !== null)) dart.assertFailed(null, I[0], 653, 15, "y != null");
    if (!(y >= -1.0 && y <= 1.0)) dart.assertFailed(null, I[0], 654, 15, "y >= -1.0 && y <= 1.0");
    ;
  }).prototype = alignment.TextAlignVertical.prototype;
  dart.addTypeTests(alignment.TextAlignVertical);
  dart.addTypeCaches(alignment.TextAlignVertical);
  dart.setLibraryUri(alignment.TextAlignVertical, I[1]);
  dart.setFieldSignature(alignment.TextAlignVertical, () => ({
    __proto__: dart.getFields(alignment.TextAlignVertical.__proto__),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.TextAlignVertical, ['toString']);
  dart.defineLazy(alignment.TextAlignVertical, {
    /*alignment.TextAlignVertical.top*/get top() {
      return C[20] || CT.C20;
    },
    /*alignment.TextAlignVertical.center*/get center() {
      return C[21] || CT.C21;
    },
    /*alignment.TextAlignVertical.bottom*/get bottom() {
      return C[22] || CT.C22;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/painting/alignment.dart", {
    "package:flutter/src/painting/alignment.dart": alignment
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["alignment.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/alignment.dart.lib.js"}');
  // Exports:
  return {
    src__painting__alignment: alignment
  };
}));

//# sourceMappingURL=alignment.dart.lib.js.map
=======
        __proto__: borders$.BorderSide.prototype,
        [style$]: C[0] || CT.C0,
        [width$]: 0,
        [color$]: C[3] || CT.C3
      });
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/painting/borders.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/painting/borders.dart"
  ];
  var _name$ = dart.privateName(borders$, "_name");
  borders$.BorderStyle = class BorderStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (borders$.BorderStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = borders$.BorderStyle.prototype;
  dart.addTypeTests(borders$.BorderStyle);
  dart.addTypeCaches(borders$.BorderStyle);
  dart.setLibraryUri(borders$.BorderStyle, I[0]);
  dart.setFieldSignature(borders$.BorderStyle, () => ({
    __proto__: dart.getFields(borders$.BorderStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(borders$.BorderStyle, ['toString']);
  borders$.BorderStyle.none = C[0] || CT.C0;
  borders$.BorderStyle.solid = C[1] || CT.C1;
  borders$.BorderStyle.values = C[2] || CT.C2;
  var color$ = dart.privateName(borders$, "BorderSide.color");
  var width$ = dart.privateName(borders$, "BorderSide.width");
  var style$ = dart.privateName(borders$, "BorderSide.style");
  var Color_value = dart.privateName(ui, "Color.value");
  borders$.BorderSide = class BorderSide extends core.Object {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    static merge(a, b) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 86, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 87, 12, "b != null");
      if (!borders$.BorderSide.canMerge(a, b)) dart.assertFailed(null, I[1], 88, 12, "canMerge(a, b)");
      let aIsNone = a.style === borders$.BorderStyle.none && a.width === 0.0;
      let bIsNone = b.style === borders$.BorderStyle.none && b.width === 0.0;
      if (aIsNone && bIsNone) return borders$.BorderSide.none;
      if (aIsNone) return b;
      if (bIsNone) return a;
      if (!a.color._equals(b.color)) dart.assertFailed(null, I[1], 97, 12, "a.color == b.color");
      if (!(a.style === b.style)) dart.assertFailed(null, I[1], 98, 12, "a.style == b.style");
      return new borders$.BorderSide.new({color: a.color, width: a.width + b.width, style: a.style});
    }
    copyWith(opts) {
      let t0, t0$, t0$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let style = opts && 'style' in opts ? opts.style : null;
      if (!(width == null || dart.notNull(width) >= 0.0)) dart.assertFailed(null, I[1], 135, 12, "width == null || width >= 0.0");
      return new borders$.BorderSide.new({color: (t0 = color, t0 == null ? this.color : t0), width: (t0$ = width, t0$ == null ? this.width : t0$), style: (t0$0 = style, t0$0 == null ? this.style : t0$0)});
    }
    scale(t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 160, 12, "t != null");
      return new borders$.BorderSide.new({color: this.color, width: math.max(core.double, 0.0, this.width * t), style: t <= 0.0 ? borders$.BorderStyle.none : this.style});
    }
    toPaint() {
      let t0, t0$;
      switch (this.style) {
        case C[1] || CT.C1:
        {
          t0 = ui.Paint.new();
          return (() => {
            t0.color = this.color;
            t0.strokeWidth = this.width;
            t0.style = ui.PaintingStyle.stroke;
            return t0;
          })();
        }
        case C[0] || CT.C0:
        {
          t0$ = ui.Paint.new();
          return (() => {
            t0$.color = C[4] || CT.C4;
            t0$.strokeWidth = 0.0;
            t0$.style = ui.PaintingStyle.stroke;
            return t0$;
          })();
        }
      }
    }
    static canMerge(a, b) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 197, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 198, 12, "b != null");
      if (a.style === borders$.BorderStyle.none && a.width === 0.0 || b.style === borders$.BorderStyle.none && b.width === 0.0) return true;
      return a.style === b.style && a.color._equals(b.color);
    }
    static lerp(a, b, t) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 212, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 213, 12, "b != null");
      if (!(t !== null)) dart.assertFailed(null, I[1], 214, 12, "t != null");
      if (t === 0.0) return a;
      if (t === 1.0) return b;
      let width = dart.nullCheck(ui.lerpDouble(a.width, b.width, t));
      if (width < 0.0) return borders$.BorderSide.none;
      if (a.style === b.style) {
        return new borders$.BorderSide.new({color: dart.nullCheck(ui.Color.lerp(a.color, b.color, t)), width: width, style: a.style});
      }
      let colorA = null;
      let colorB = null;
      switch (a.style) {
        case C[1] || CT.C1:
        {
          colorA = a.color;
          break;
        }
        case C[0] || CT.C0:
        {
          colorA = a.color.withAlpha(0);
          break;
        }
      }
      switch (b.style) {
        case C[1] || CT.C1:
        {
          colorB = b.color;
          break;
        }
        case C[0] || CT.C0:
        {
          colorB = b.color.withAlpha(0);
          break;
        }
      }
      return new borders$.BorderSide.new({color: dart.nullCheck(ui.Color.lerp(colorA, colorB, t)), width: width, style: borders$.BorderStyle.solid});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return borders$.BorderSide.is(other) && other.color._equals(this.color) && other.width === this.width && other.style === this.style;
    }
    get hashCode() {
      return ui.hashValues(this.color, this.width, this.style);
    }
    toString() {
      return object.objectRuntimeType(this, "BorderSide") + "(" + dart.str(this.color) + ", " + this.width[$toStringAsFixed](1) + ", " + dart.str(this.style) + ")";
    }
  };
  (borders$.BorderSide.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[3] || CT.C3;
    let width = opts && 'width' in opts ? opts.width : 1;
    let style = opts && 'style' in opts ? opts.style : C[1] || CT.C1;
    this[color$] = color;
    this[width$] = width;
    this[style$] = style;
    if (!(color !== null)) dart.assertFailed(null, I[1], 69, 15, "color != null");
    if (!(width !== null)) dart.assertFailed(null, I[1], 70, 15, "width != null");
    if (!(width >= 0.0)) dart.assertFailed(null, I[1], 71, 15, "width >= 0.0");
    if (!(style !== null)) dart.assertFailed(null, I[1], 72, 15, "style != null");
    ;
  }).prototype = borders$.BorderSide.prototype;
  dart.addTypeTests(borders$.BorderSide);
  dart.addTypeCaches(borders$.BorderSide);
  dart.setMethodSignature(borders$.BorderSide, () => ({
    __proto__: dart.getMethods(borders$.BorderSide.__proto__),
    copyWith: dart.fnType(borders$.BorderSide, [], {color: dart.nullable(ui.Color), style: dart.nullable(borders$.BorderStyle), width: dart.nullable(core.double)}, {}),
    scale: dart.fnType(borders$.BorderSide, [core.double]),
    toPaint: dart.fnType(ui.Paint, [])
  }));
  dart.setLibraryUri(borders$.BorderSide, I[0]);
  dart.setFieldSignature(borders$.BorderSide, () => ({
    __proto__: dart.getFields(borders$.BorderSide.__proto__),
    color: dart.finalFieldType(ui.Color),
    width: dart.finalFieldType(core.double),
    style: dart.finalFieldType(borders$.BorderStyle)
  }));
  dart.defineExtensionMethods(borders$.BorderSide, ['_equals', 'toString']);
  dart.defineExtensionAccessors(borders$.BorderSide, ['hashCode']);
  dart.defineLazy(borders$.BorderSide, {
    /*borders$.BorderSide.none*/get none() {
      return C[5] || CT.C5;
    }
  }, false);
  borders$.ShapeBorder = class ShapeBorder extends core.Object {
    add(other, opts) {
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      return null;
    }
    ['+'](other) {
      let t0, t0$;
      t0$ = (t0 = this.add(other), t0 == null ? other.add(this, {reversed: true}) : t0);
      return t0$ == null ? new borders$._CompoundBorder.new(T.JSArrayOfShapeBorder().of([other, this])) : t0$;
    }
    lerpFrom(a, t) {
      if (a == null) return this.scale(t);
      return null;
    }
    lerpTo(b, t) {
      if (b == null) return this.scale(1.0 - t);
      return null;
    }
    static lerp(a, b, t) {
      let t0;
      if (!(t !== null)) dart.assertFailed(null, I[1], 429, 12, "t != null");
      let result = null;
      if (b != null) result = b.lerpFrom(a, t);
      if (result == null && a != null) result = a.lerpTo(b, t);
      t0 = result;
      return t0 == null ? t < 0.5 ? a : b : t0;
    }
    toString() {
      return object.objectRuntimeType(this, "ShapeBorder") + "()";
    }
  };
  (borders$.ShapeBorder.new = function() {
    ;
  }).prototype = borders$.ShapeBorder.prototype;
  dart.addTypeTests(borders$.ShapeBorder);
  dart.addTypeCaches(borders$.ShapeBorder);
  dart.setMethodSignature(borders$.ShapeBorder, () => ({
    __proto__: dart.getMethods(borders$.ShapeBorder.__proto__),
    add: dart.fnType(dart.nullable(borders$.ShapeBorder), [borders$.ShapeBorder], {reversed: core.bool}, {}),
    '+': dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder]),
    lerpFrom: dart.fnType(dart.nullable(borders$.ShapeBorder), [dart.nullable(borders$.ShapeBorder), core.double]),
    lerpTo: dart.fnType(dart.nullable(borders$.ShapeBorder), [dart.nullable(borders$.ShapeBorder), core.double])
  }));
  dart.setLibraryUri(borders$.ShapeBorder, I[0]);
  dart.defineExtensionMethods(borders$.ShapeBorder, ['toString']);
  var side$ = dart.privateName(borders$, "OutlinedBorder.side");
  borders$.OutlinedBorder = class OutlinedBorder extends borders$.ShapeBorder {
    get side() {
      return this[side$];
    }
    set side(value) {
      super.side = value;
    }
  };
  (borders$.OutlinedBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[5] || CT.C5;
    this[side$] = side;
    if (!(side !== null)) dart.assertFailed(null, I[1], 502, 66, "side != null");
    borders$.OutlinedBorder.__proto__.new.call(this);
    ;
  }).prototype = borders$.OutlinedBorder.prototype;
  dart.addTypeTests(borders$.OutlinedBorder);
  dart.addTypeCaches(borders$.OutlinedBorder);
  dart.setLibraryUri(borders$.OutlinedBorder, I[0]);
  dart.setFieldSignature(borders$.OutlinedBorder, () => ({
    __proto__: dart.getFields(borders$.OutlinedBorder.__proto__),
    side: dart.finalFieldType(borders$.BorderSide)
  }));
  borders$._CompoundBorder = class _CompoundBorder extends borders$.ShapeBorder {
    get dimensions() {
      return this.borders[$fold](edge_insets.EdgeInsetsGeometry, edge_insets.EdgeInsets.zero, dart.fn((previousValue, border) => previousValue.add(border.dimensions), T.EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry()));
    }
    add(other, opts) {
      let t0;
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      if (!borders$._CompoundBorder.is(other)) {
        let ours = reversed ? this.borders[$last] : this.borders[$first];
        let merged = (t0 = ours.add(other, {reversed: reversed}), t0 == null ? other.add(ours, {reversed: !reversed}) : t0);
        if (merged != null) {
          let result = (() => {
            let t0 = T.ListOfShapeBorder().of(this.borders);
            return t0;
          })();
          result[$_set](reversed ? result[$length] - 1 : 0, merged);
          return new borders$._CompoundBorder.new(result);
        }
      }
      let mergedBorders = (() => {
        let t1 = T.JSArrayOfShapeBorder().of([]);
        if (reversed) t1[$addAll](this.borders);
        if (borders$._CompoundBorder.is(other))
          t1[$addAll](other.borders);
        else
          t1[$add](other);
        if (!reversed) t1[$addAll](this.borders);
        return t1;
      })();
      return new borders$._CompoundBorder.new(mergedBorders);
    }
    scale(t) {
      return new borders$._CompoundBorder.new(this.borders[$map](borders$.ShapeBorder, dart.fn(border => border.scale(t), T.ShapeBorderToShapeBorder()))[$toList]());
    }
    lerpFrom(a, t) {
      return borders$._CompoundBorder.lerp(a, this, t);
    }
    lerpTo(b, t) {
      return borders$._CompoundBorder.lerp(this, b, t);
    }
    static lerp(a, b, t) {
      let t2;
      if (!(t !== null)) dart.assertFailed(null, I[1], 584, 12, "t != null");
      if (!(borders$._CompoundBorder.is(a) || borders$._CompoundBorder.is(b))) dart.assertFailed(null, I[1], 585, 12, "a is _CompoundBorder || b is _CompoundBorder");
      let aList = borders$._CompoundBorder.is(a) ? a.borders : T.JSArrayOfShapeBorderN().of([a]);
      let bList = borders$._CompoundBorder.is(b) ? b.borders : T.JSArrayOfShapeBorderN().of([b]);
      let results = T.JSArrayOfShapeBorder().of([]);
      let length = math.max(core.int, aList[$length], bList[$length]);
      for (let index = 0; index < length; index = index + 1) {
        let localA = index < aList[$length] ? aList[$_get](index) : null;
        let localB = index < bList[$length] ? bList[$_get](index) : null;
        if (localA != null && localB != null) {
          let localResult = (t2 = localA.lerpTo(localB, t), t2 == null ? localB.lerpFrom(localA, t) : t2);
          if (localResult != null) {
            results[$add](localResult);
            continue;
          }
        }
        if (localB != null) results[$add](localB.scale(t));
        if (localA != null) results[$add](localA.scale(1.0 - t));
      }
      return new borders$._CompoundBorder.new(results);
    }
    getInnerPath(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      for (let index = 0; index < this.borders[$length] - 1; index = index + 1)
        rect = this.borders[$_get](index).dimensions.resolve(textDirection).deflateRect(rect);
      return this.borders[$last].getInnerPath(rect, {textDirection: textDirection});
    }
    getOuterPath(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return this.borders[$first].getOuterPath(rect, {textDirection: textDirection});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      for (let border of this.borders) {
        border.paint(canvas, rect, {textDirection: textDirection});
        rect = border.dimensions.resolve(textDirection).deflateRect(rect);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return borders$._CompoundBorder.is(other) && collections.listEquals(borders$.ShapeBorder, other.borders, this.borders);
    }
    get hashCode() {
      return ui.hashList(this.borders);
    }
    toString() {
      return this.borders[$reversed][$map](core.String, dart.fn(border => border.toString(), T.ShapeBorderToString()))[$join](" + ");
    }
  };
  (borders$._CompoundBorder.new = function(borders) {
    this.borders = borders;
    if (!(borders !== null)) dart.assertFailed(null, I[1], 520, 14, "borders != null");
    if (!(borders[$length] >= 2)) dart.assertFailed(null, I[1], 521, 14, "borders.length >= 2");
    if (!!borders[$any](dart.fn(border => borders$._CompoundBorder.is(border), T.ShapeBorderTobool()))) dart.assertFailed(null, I[1], 522, 14, "!borders.any((ShapeBorder border) => border is _CompoundBorder)");
    borders$._CompoundBorder.__proto__.new.call(this);
    ;
  }).prototype = borders$._CompoundBorder.prototype;
  dart.addTypeTests(borders$._CompoundBorder);
  dart.addTypeCaches(borders$._CompoundBorder);
  dart.setMethodSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getMethods(borders$._CompoundBorder.__proto__),
    add: dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder], {reversed: core.bool}, {}),
    scale: dart.fnType(borders$.ShapeBorder, [core.double]),
    getInnerPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {})
  }));
  dart.setGetterSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getGetters(borders$._CompoundBorder.__proto__),
    dimensions: edge_insets.EdgeInsetsGeometry
  }));
  dart.setLibraryUri(borders$._CompoundBorder, I[0]);
  dart.setFieldSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getFields(borders$._CompoundBorder.__proto__),
    borders: dart.finalFieldType(core.List$(borders$.ShapeBorder))
  }));
  dart.defineExtensionMethods(borders$._CompoundBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(borders$._CompoundBorder, ['hashCode']);
  borders$.paintBorder = function paintBorder(canvas, rect, opts) {
    let t2;
    let top = opts && 'top' in opts ? opts.top : C[5] || CT.C5;
    let right = opts && 'right' in opts ? opts.right : C[5] || CT.C5;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[5] || CT.C5;
    let left = opts && 'left' in opts ? opts.left : C[5] || CT.C5;
    if (!(canvas !== null)) dart.assertFailed(null, I[1], 680, 10, "canvas != null");
    if (!(rect !== null)) dart.assertFailed(null, I[1], 681, 10, "rect != null");
    if (!(top !== null)) dart.assertFailed(null, I[1], 682, 10, "top != null");
    if (!(right !== null)) dart.assertFailed(null, I[1], 683, 10, "right != null");
    if (!(bottom !== null)) dart.assertFailed(null, I[1], 684, 10, "bottom != null");
    if (!(left !== null)) dart.assertFailed(null, I[1], 685, 10, "left != null");
    let paint = (t2 = ui.Paint.new(), (() => {
      t2.strokeWidth = 0.0;
      return t2;
    })());
    let path = ui.Path.new();
    switch (top.style) {
      case C[1] || CT.C1:
      {
        paint.color = top.color;
        path.reset();
        path.moveTo(rect.left, rect.top);
        path.lineTo(rect.right, rect.top);
        if (top.width === 0.0) {
          paint.style = ui.PaintingStyle.stroke;
        } else {
          paint.style = ui.PaintingStyle.fill;
          path.lineTo(rect.right - right.width, rect.top + top.width);
          path.lineTo(rect.left + left.width, rect.top + top.width);
        }
        canvas.drawPath(path, paint);
        break;
      }
      case C[0] || CT.C0:
      {
        break;
      }
    }
    switch (right.style) {
      case C[1] || CT.C1:
      {
        paint.color = right.color;
        path.reset();
        path.moveTo(rect.right, rect.top);
        path.lineTo(rect.right, rect.bottom);
        if (right.width === 0.0) {
          paint.style = ui.PaintingStyle.stroke;
        } else {
          paint.style = ui.PaintingStyle.fill;
          path.lineTo(rect.right - right.width, rect.bottom - bottom.width);
          path.lineTo(rect.right - right.width, rect.top + top.width);
        }
        canvas.drawPath(path, paint);
        break;
      }
      case C[0] || CT.C0:
      {
        break;
      }
    }
    switch (bottom.style) {
      case C[1] || CT.C1:
      {
        paint.color = bottom.color;
        path.reset();
        path.moveTo(rect.right, rect.bottom);
        path.lineTo(rect.left, rect.bottom);
        if (bottom.width === 0.0) {
          paint.style = ui.PaintingStyle.stroke;
        } else {
          paint.style = ui.PaintingStyle.fill;
          path.lineTo(rect.left + left.width, rect.bottom - bottom.width);
          path.lineTo(rect.right - right.width, rect.bottom - bottom.width);
        }
        canvas.drawPath(path, paint);
        break;
      }
      case C[0] || CT.C0:
      {
        break;
      }
    }
    switch (left.style) {
      case C[1] || CT.C1:
      {
        paint.color = left.color;
        path.reset();
        path.moveTo(rect.left, rect.bottom);
        path.lineTo(rect.left, rect.top);
        if (left.width === 0.0) {
          paint.style = ui.PaintingStyle.stroke;
        } else {
          paint.style = ui.PaintingStyle.fill;
          path.lineTo(rect.left + left.width, rect.top + top.width);
          path.lineTo(rect.left + left.width, rect.bottom - bottom.width);
        }
        canvas.drawPath(path, paint);
        break;
      }
      case C[0] || CT.C0:
      {
        break;
      }
    }
  };
  dart.trackLibraries("packages/flutter/src/painting/borders.dart", {
    "package:flutter/src/painting/borders.dart": borders$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["borders.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/borders.dart.lib.js"}');
  // Exports:
  return {
    src__painting__borders: borders$
  };
}));

//# sourceMappingURL=borders.dart.lib.js.map
>>>>>>> AUg2
