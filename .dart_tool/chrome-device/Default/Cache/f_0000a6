define(['dart_sdk', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/borders.dart'], (function load__packages__fl_chart__src__utils__utils_dart(dart_sdk, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__borders$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  var utils = Object.create(dart.library);
  var $abs = dartx.abs;
  var $toDouble = dartx.toDouble;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $last = dartx.last;
  var $truncate = dartx.truncate;
  var $round = dartx.round;
  var $toInt = dartx.toInt;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $endsWith = dartx.endsWith;
  var $substring = dartx.substring;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    intTodouble: () => (T.intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 6
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[1] || CT.C1,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.solid",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[3] || CT.C3,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[4] || CT.C4
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  utils.radians = function radians(degrees) {
    return degrees * 0.017453292519943295;
  };
  utils.degrees = function degrees(radians) {
    return radians * 57.29577951308232;
  };
  utils.getDefaultSize = function getDefaultSize(screenSize) {
    let resultSize = null;
    if (screenSize.width < screenSize.height) {
      resultSize = new ui.Size.new(screenSize.width, screenSize.width);
    } else if (screenSize.height < screenSize.width) {
      resultSize = new ui.Size.new(screenSize.height, screenSize.height);
    } else {
      resultSize = new ui.Size.new(screenSize.width, screenSize.height);
    }
    return resultSize['*'](0.7);
  };
  utils.translateRotatedPosition = function translateRotatedPosition(size, degree) {
    return size / 4 * math.sin(utils.radians(degree[$abs]()));
  };
  utils.calculateRotationOffset = function calculateRotationOffset(size, degree) {
    let rotatedHeight = (size.width * math.sin(utils.radians(degree)))[$abs]() + (size.height * math.cos(utils.radians(degree)))[$abs]();
    let rotatedWidth = (size.width * math.cos(utils.radians(degree)))[$abs]() + (size.height * math.sin(utils.radians(degree)))[$abs]();
    return new ui.Offset.new((size.width - rotatedWidth) / 2, (size.height - rotatedHeight) / 2);
  };
  utils.normalizeBorderRadius = function normalizeBorderRadius(borderRadius, width) {
    if (borderRadius == null) {
      return null;
    }
    let topLeft = null;
    if (borderRadius.topLeft.x > width / 2 || borderRadius.topLeft.y > width / 2) {
      topLeft = new ui.Radius.circular(width / 2);
    } else {
      topLeft = borderRadius.topLeft;
    }
    let topRight = null;
    if (borderRadius.topRight.x > width / 2 || borderRadius.topRight.y > width / 2) {
      topRight = new ui.Radius.circular(width / 2);
    } else {
      topRight = borderRadius.topRight;
    }
    let bottomLeft = null;
    if (borderRadius.bottomLeft.x > width / 2 || borderRadius.bottomLeft.y > width / 2) {
      bottomLeft = new ui.Radius.circular(width / 2);
    } else {
      bottomLeft = borderRadius.bottomLeft;
    }
    let bottomRight = null;
    if (borderRadius.bottomRight.x > width / 2 || borderRadius.bottomRight.y > width / 2) {
      bottomRight = new ui.Radius.circular(width / 2);
    } else {
      bottomRight = borderRadius.bottomRight;
    }
    return new border_radius.BorderRadius.only({topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight});
  };
  utils.normalizeBorderSide = function normalizeBorderSide(borderSide, width) {
    if (borderSide == null) {
      return utils.DefaultBorderSide;
    }
    let borderWidth = null;
    if (borderSide.width > width / 2) {
      borderWidth = width / (2)[$toDouble]();
    } else {
      borderWidth = borderSide.width;
    }
    return borderSide.copyWith({width: borderWidth});
  };
  utils.lerpGradient = function lerpGradient(colors, stops, t) {
    let length = colors[$length];
    if (stops[$length] !== length) {
      stops = T.ListOfdouble().generate(length, dart.fn(i => (i + 1) / length, T.intTodouble()));
    }
    for (let s = 0; s < stops[$length] - 1; s = s + 1) {
      let leftStop = stops[$_get](s);
      let rightStop = stops[$_get](s + 1);
      let leftColor = colors[$_get](s);
      let rightColor = colors[$_get](s + 1);
      if (t <= leftStop) {
        return leftColor;
      } else if (t < rightStop) {
        let sectionT = (t - leftStop) / (rightStop - leftStop);
        return dart.nullCheck(ui.Color.lerp(leftColor, rightColor, sectionT));
      }
    }
    return colors[$last];
  };
  utils.getEfficientInterval = function getEfficientInterval(axisViewSize, diffInYAxis, opts) {
    let pixelPerInterval = opts && 'pixelPerInterval' in opts ? opts.pixelPerInterval : 40;
    let allowedCount = (axisViewSize / pixelPerInterval)[$truncate]();
    let accurateInterval = diffInYAxis / allowedCount;
    return utils._roundInterval(accurateInterval)[$toDouble]();
  };
  utils._roundInterval = function _roundInterval(input) {
    let count = 0;
    if (input >= 10) {
      count = count + 1;
    }
    while ((input / 100)[$truncate]() !== 0) {
      input = input / 10;
      count = count + 1;
    }
    let scaled = input >= 10 ? input[$round]() / 10 : input;
    if (scaled >= 2.6) {
      return 5 * math.pow(10, count)[$toInt]();
    } else if (scaled >= 1.6) {
      return 2 * math.pow(10, count)[$toInt]();
    } else {
      return math.pow(10, count)[$toInt]();
    }
  };
  utils.formatNumber = function formatNumber(number) {
    let isNegative = number < 0;
    if (isNegative) {
      number = number[$abs]();
    }
    let resultNumber = null;
    let symbol = null;
    if (number >= 1000000000) {
      resultNumber = (number / 1000000000)[$toStringAsFixed](1);
      symbol = "B";
    } else if (number >= 1000000) {
      resultNumber = (number / 1000000)[$toStringAsFixed](1);
      symbol = "M";
    } else if (number >= 1000) {
      resultNumber = (number / 1000)[$toStringAsFixed](1);
      symbol = "K";
    } else {
      resultNumber = number[$toStringAsFixed](1);
      symbol = "";
    }
    if (resultNumber[$endsWith](".0")) {
      resultNumber = resultNumber[$substring](0, resultNumber.length - 2);
    }
    if (isNegative) {
      resultNumber = "-" + resultNumber;
    }
    return resultNumber + symbol;
  };
  utils.getThemeAwareTextStyle = function getThemeAwareTextStyle(context, providedStyle) {
    let t0;
    let defaultTextStyle = text.DefaultTextStyle.of(context);
    let effectiveTextStyle = providedStyle;
    if (providedStyle == null || providedStyle.inherit) {
      effectiveTextStyle = defaultTextStyle.style.merge(providedStyle);
    }
    if (media_query.MediaQuery.boldTextOverride(context)) {
      effectiveTextStyle = dart.nullCheck(effectiveTextStyle).merge(C[0] || CT.C0);
    }
    t0 = effectiveTextStyle;
    return t0 == null ? effectiveTextStyle = defaultTextStyle.style : t0;
  };
  var _name = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  dart.defineLazy(utils, {
    /*utils._degrees2Radians*/get _degrees2Radians() {
      return 0.017453292519943295;
    },
    /*utils._radians2Degrees*/get _radians2Degrees() {
      return 57.29577951308232;
    },
    /*utils.DefaultBorderSide*/get DefaultBorderSide() {
      return C[2] || CT.C2;
    },
    /*utils.billion*/get billion() {
      return 1000000000;
    },
    /*utils.million*/get million() {
      return 1000000;
    },
    /*utils.kilo*/get kilo() {
      return 1000;
    }
  }, false);
  dart.trackLibraries("packages/fl_chart/src/utils/utils.dart", {
    "package:fl_chart/src/utils/utils.dart": utils
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["utils.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/fl_chart/src/utils/utils.dart.lib.js"}');
  // Exports:
  return {
    src__utils__utils: utils
  };
}));

//# sourceMappingURL=utils.dart.lib.js.map
