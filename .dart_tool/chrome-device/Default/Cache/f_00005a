<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/node.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/semantics/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart'], (function load__packages__flutter__src__semantics__semantics_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__services__text_editing$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__node$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__semantics__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/widgets/icon_theme_data.dart', 'packages/flutter/src/widgets/icon_theme.dart', 'packages/flutter/src/cupertino/interface_level.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/colors.dart'], (function load__packages__flutter__src__cupertino__text_theme_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__widgets__icon_theme_data$46dart, packages__flutter__src__widgets__icon_theme$46dart, packages__flutter__src__cupertino__interface_level$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__colors$46dart) {
>>>>>>> AUg2
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
<<<<<<< HEAD
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  const node = packages__flutter__src__foundation__node$46dart.src__foundation__node;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const binding = packages__flutter__src__semantics__binding$46dart.src__semantics__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  var semantics = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $values = dartx.values;
  var $add = dartx.add;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $modulo = dartx['%'];
  var $_equals = dartx._equals;
  var $any = dartx.any;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $keys = dartx.keys;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $toString = dartx.toString;
  var $split = dartx.split;
  var $take = dartx.take;
  var $substring = dartx.substring;
  var $join = dartx.join;
  var $where = dartx.where;
  var $isFinite = dartx.isFinite;
  var $sign = dartx.sign;
  var $toInt = dartx.toInt;
  var $compareTo = dartx.compareTo;
  var $reversed = dartx.reversed;
  var $expand = dartx.expand;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$CustomSemanticsAction: () => (T.IdentityMapOfint$CustomSemanticsAction = dart.constFn(_js_helper.IdentityMap$(core.int, semantics.CustomSemanticsAction)))(),
    LinkedMapOfCustomSemanticsAction$int: () => (T.LinkedMapOfCustomSemanticsAction$int = dart.constFn(_js_helper.LinkedMap$(semantics.CustomSemanticsAction, core.int)))(),
    DiagnosticsPropertyOfRect: () => (T.DiagnosticsPropertyOfRect = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Rect)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    intToStringN: () => (T.intToStringN = dart.constFn(dart.fnType(T.StringN(), [core.int])))(),
    IterablePropertyOfString: () => (T.IterablePropertyOfString = dart.constFn(diagnostics.IterableProperty$(core.String)))(),
    IterablePropertyOfStringN: () => (T.IterablePropertyOfStringN = dart.constFn(diagnostics.IterableProperty$(T.StringN())))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    SemanticsNodeTobool: () => (T.SemanticsNodeTobool = dart.constFn(dart.fnType(core.bool, [semantics.SemanticsNode])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    ListOfSemanticsNode: () => (T.ListOfSemanticsNode = dart.constFn(core.List$(semantics.SemanticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    LinkedHashSetOfSemanticsNode: () => (T.LinkedHashSetOfSemanticsNode = dart.constFn(collection.LinkedHashSet$(semantics.SemanticsNode)))(),
    SemanticsOwnerN: () => (T.SemanticsOwnerN = dart.constFn(dart.nullable(semantics.SemanticsOwner)))(),
    SemanticsNodeN: () => (T.SemanticsNodeN = dart.constFn(dart.nullable(semantics.SemanticsNode)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNTovoid: () => (T.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T.ObjectN()])))(),
    LinkedHashMapOfSemanticsAction$ObjectNTovoid: () => (T.LinkedHashMapOfSemanticsAction$ObjectNTovoid = dart.constFn(collection.LinkedHashMap$(ui.SemanticsAction, T.ObjectNTovoid())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LinkedHashMapOfCustomSemanticsAction$VoidTovoid: () => (T.LinkedHashMapOfCustomSemanticsAction$VoidTovoid = dart.constFn(collection.LinkedHashMap$(semantics.CustomSemanticsAction, T.VoidTovoid())))(),
    LinkedHashSetOfSemanticsTag: () => (T.LinkedHashSetOfSemanticsTag = dart.constFn(collection.LinkedHashSet$(semantics.SemanticsTag)))(),
    LinkedHashSetOfint: () => (T.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    JSArrayOf_TraversalSortNode: () => (T.JSArrayOf_TraversalSortNode = dart.constFn(_interceptors.JSArray$(semantics._TraversalSortNode)))(),
    _TraversalSortNodeToSemanticsNode: () => (T._TraversalSortNodeToSemanticsNode = dart.constFn(dart.fnType(semantics.SemanticsNode, [semantics._TraversalSortNode])))(),
    DiagnosticsPropertyOfSemanticsOwner: () => (T.DiagnosticsPropertyOfSemanticsOwner = dart.constFn(diagnostics.DiagnosticsProperty$(semantics.SemanticsOwner)))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    SemanticsTagToString: () => (T.SemanticsTagToString = dart.constFn(dart.fnType(core.String, [semantics.SemanticsTag])))(),
    SemanticsActionToString: () => (T.SemanticsActionToString = dart.constFn(dart.fnType(core.String, [ui.SemanticsAction])))(),
    CustomSemanticsActionToStringN: () => (T.CustomSemanticsActionToStringN = dart.constFn(dart.fnType(T.StringN(), [semantics.CustomSemanticsAction])))(),
    SemanticsFlagTobool: () => (T.SemanticsFlagTobool = dart.constFn(dart.fnType(core.bool, [ui.SemanticsFlag])))(),
    SemanticsFlagToString: () => (T.SemanticsFlagToString = dart.constFn(dart.fnType(core.String, [ui.SemanticsFlag])))(),
    DiagnosticsPropertyOfSemanticsSortKey: () => (T.DiagnosticsPropertyOfSemanticsSortKey = dart.constFn(diagnostics.DiagnosticsProperty$(semantics.SemanticsSortKey)))(),
    SemanticsNodeToDiagnosticsNode: () => (T.SemanticsNodeToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics.DiagnosticsNode, [semantics.SemanticsNode])))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    DiagnosticsPropertyOfSemanticsHintOverrides: () => (T.DiagnosticsPropertyOfSemanticsHintOverrides = dart.constFn(diagnostics.DiagnosticsProperty$(semantics.SemanticsHintOverrides)))(),
    JSArrayOfSemanticsNode: () => (T.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics.SemanticsNode)))(),
    JSArrayOf_BoxEdge: () => (T.JSArrayOf_BoxEdge = dart.constFn(_interceptors.JSArray$(semantics._BoxEdge)))(),
    JSArrayOf_SemanticsSortGroup: () => (T.JSArrayOf_SemanticsSortGroup = dart.constFn(_interceptors.JSArray$(semantics._SemanticsSortGroup)))(),
    _SemanticsSortGroupToListOfSemanticsNode: () => (T._SemanticsSortGroupToListOfSemanticsNode = dart.constFn(dart.fnType(T.ListOfSemanticsNode(), [semantics._SemanticsSortGroup])))(),
    IdentityMapOfint$SemanticsNode: () => (T.IdentityMapOfint$SemanticsNode = dart.constFn(_js_helper.IdentityMap$(core.int, semantics.SemanticsNode)))(),
    IdentityMapOfint$int: () => (T.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    SemanticsNodeAndSemanticsNodeToint: () => (T.SemanticsNodeAndSemanticsNodeToint = dart.constFn(dart.fnType(core.int, [semantics.SemanticsNode, semantics.SemanticsNode])))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    SemanticsNodeToint: () => (T.SemanticsNodeToint = dart.constFn(dart.fnType(core.int, [semantics.SemanticsNode])))(),
    intToSemanticsNode: () => (T.intToSemanticsNode = dart.constFn(dart.fnType(semantics.SemanticsNode, [core.int])))(),
    LinkedMapOfSemanticsAction$ObjectNTovoid: () => (T.LinkedMapOfSemanticsAction$ObjectNTovoid = dart.constFn(_js_helper.LinkedMap$(ui.SemanticsAction, T.ObjectNTovoid())))(),
    LinkedMapOfCustomSemanticsAction$VoidTovoid: () => (T.LinkedMapOfCustomSemanticsAction$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(semantics.CustomSemanticsAction, T.VoidTovoid())))()
=======
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const icon_theme_data = packages__flutter__src__widgets__icon_theme_data$46dart.src__widgets__icon_theme_data;
  const icon_theme = packages__flutter__src__widgets__icon_theme$46dart.src__widgets__icon_theme;
  const interface_level = packages__flutter__src__cupertino__interface_level$46dart.src__cupertino__interface_level;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  var text_theme = Object.create(dart.library);
  var icon_theme_data$ = Object.create(dart.library);
  var theme$ = Object.create(dart.library);
  var colors$ = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    DiagnosticsPropertyOfTextStyle: () => (T.DiagnosticsPropertyOfTextStyle = dart.constFn(diagnostics.DiagnosticsProperty$(text_style.TextStyle)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    ColorNToColorN: () => (T.ColorNToColorN = dart.constFn(dart.fnType(T.ColorN(), [T.ColorN()])))(),
    EnumPropertyOfBrightness: () => (T.EnumPropertyOfBrightness = dart.constFn(diagnostics.EnumProperty$(ui.Brightness)))(),
    ColorToColor: () => (T.ColorToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    StringAndColorToString: () => (T.StringAndColorToString = dart.constFn(dart.fnType(core.String, [core.String, ui.Color])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    DiagnosticsPropertyOfElement: () => (T.DiagnosticsPropertyOfElement = dart.constFn(diagnostics.DiagnosticsProperty$(framework.Element)))(),
    DiagnosticsPropertyOfCupertinoDynamicColor: () => (T.DiagnosticsPropertyOfCupertinoDynamicColor = dart.constFn(diagnostics.DiagnosticsProperty$(colors$.CupertinoDynamicColor)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
<<<<<<< HEAD
    get C0() {
      return C[0] = dart.constList([], semantics.SemanticsNode);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name]: "DiagnosticLevel.debug",
        index: 2
=======
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282424575.0
>>>>>>> AUg2
      });
    },
    get C2() {
      return C[2] = dart.const({
<<<<<<< HEAD
        __proto__: semantics.DebugSemanticsDumpOrder.prototype,
        [_name$]: "DebugSemanticsDumpOrder.traversalOrder",
        index: 1
=======
        __proto__: ui.Color.prototype,
        [Color_value]: 4278206685.0
>>>>>>> AUg2
      });
    },
    get C3() {
      return C[3] = dart.const({
<<<<<<< HEAD
        __proto__: diagnostics.DiagnosticsTreeStyle.prototype,
        [_name]: "DiagnosticsTreeStyle.sparse",
        index: 1
=======
        __proto__: ui.Color.prototype,
        [Color_value]: 4278879487.0
>>>>>>> AUg2
      });
    },
    get C4() {
      return C[4] = dart.const({
<<<<<<< HEAD
        __proto__: semantics.DebugSemanticsDumpOrder.prototype,
        [_name$]: "DebugSemanticsDumpOrder.inverseHitTest",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.constList([C[4] || CT.C4, C[2] || CT.C2], semantics.DebugSemanticsDumpOrder);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$0]: "TextDirection.rtl",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$0]: "TextDirection.ltr",
        index: 1
      });
    }
  }, false);
  var C = Array(8).fill(void 0);
  var I = [
    "package:flutter/src/semantics/semantics.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/semantics/semantics.dart"
  ];
  var name$ = dart.privateName(semantics, "SemanticsTag.name");
  semantics.SemanticsTag = class SemanticsTag extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return object.objectRuntimeType(this, "SemanticsTag") + "(" + this.name + ")";
    }
  };
  (semantics.SemanticsTag.new = function(name) {
    this[name$] = name;
    ;
  }).prototype = semantics.SemanticsTag.prototype;
  dart.addTypeTests(semantics.SemanticsTag);
  dart.addTypeCaches(semantics.SemanticsTag);
  dart.setLibraryUri(semantics.SemanticsTag, I[0]);
  dart.setFieldSignature(semantics.SemanticsTag, () => ({
    __proto__: dart.getFields(semantics.SemanticsTag.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(semantics.SemanticsTag, ['toString']);
  var label$ = dart.privateName(semantics, "CustomSemanticsAction.label");
  var hint$ = dart.privateName(semantics, "CustomSemanticsAction.hint");
  var action$ = dart.privateName(semantics, "CustomSemanticsAction.action");
  semantics.CustomSemanticsAction = class CustomSemanticsAction extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get hint() {
      return this[hint$];
    }
    set hint(value) {
      super.hint = value;
    }
    get action() {
      return this[action$];
    }
    set action(value) {
      super.action = value;
    }
    get hashCode() {
      return ui.hashValues(this.label, this.hint, this.action);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return semantics.CustomSemanticsAction.is(other) && other.label == this.label && other.hint == this.hint && dart.equals(other.action, this.action);
    }
    toString() {
      return "CustomSemanticsAction(" + dart.str(semantics.CustomSemanticsAction._ids[$_get](this)) + ", label:" + dart.str(this.label) + ", hint:" + dart.str(this.hint) + ", action:" + dart.str(this.action) + ")";
    }
    static getIdentifier(action) {
      let t0;
      let result = semantics.CustomSemanticsAction._ids[$_get](action);
      if (result == null) {
        result = (t0 = semantics.CustomSemanticsAction._nextId, semantics.CustomSemanticsAction._nextId = t0 + 1, t0);
        semantics.CustomSemanticsAction._ids[$_set](action, result);
        semantics.CustomSemanticsAction._actions[$_set](result, action);
      }
      return result;
    }
    static getAction(id) {
      return semantics.CustomSemanticsAction._actions[$_get](id);
    }
  };
  (semantics.CustomSemanticsAction.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    this[label$] = label;
    if (!(label !== null)) dart.assertFailed(null, I[1], 105, 14, "label != null");
    if (!(label !== "")) dart.assertFailed(null, I[1], 106, 14, "label != ''");
    this[hint$] = null;
    this[action$] = null;
    ;
  }).prototype = semantics.CustomSemanticsAction.prototype;
  (semantics.CustomSemanticsAction.overridingAction = function(opts) {
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let action = opts && 'action' in opts ? opts.action : null;
    this[hint$] = hint;
    this[action$] = action;
    if (!(hint !== null)) dart.assertFailed(null, I[1], 115, 14, "hint != null");
    if (!(hint !== "")) dart.assertFailed(null, I[1], 116, 14, "hint != ''");
    if (!(action !== null)) dart.assertFailed(null, I[1], 117, 14, "action != null");
    this[label$] = null;
    ;
  }).prototype = semantics.CustomSemanticsAction.prototype;
  dart.addTypeTests(semantics.CustomSemanticsAction);
  dart.addTypeCaches(semantics.CustomSemanticsAction);
  dart.setLibraryUri(semantics.CustomSemanticsAction, I[0]);
  dart.setFieldSignature(semantics.CustomSemanticsAction, () => ({
    __proto__: dart.getFields(semantics.CustomSemanticsAction.__proto__),
    label: dart.finalFieldType(dart.nullable(core.String)),
    hint: dart.finalFieldType(dart.nullable(core.String)),
    action: dart.finalFieldType(dart.nullable(ui.SemanticsAction))
  }));
  dart.defineExtensionMethods(semantics.CustomSemanticsAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(semantics.CustomSemanticsAction, ['hashCode']);
  dart.defineLazy(semantics.CustomSemanticsAction, {
    /*semantics.CustomSemanticsAction._nextId*/get _nextId() {
      return 0;
    },
    set _nextId(_) {},
    /*semantics.CustomSemanticsAction._actions*/get _actions() {
      return new (T.IdentityMapOfint$CustomSemanticsAction()).new();
    },
    /*semantics.CustomSemanticsAction._ids*/get _ids() {
      return new (T.LinkedMapOfCustomSemanticsAction$int()).new();
    }
  }, false);
  var flags$ = dart.privateName(semantics, "SemanticsData.flags");
  var actions$ = dart.privateName(semantics, "SemanticsData.actions");
  var label$0 = dart.privateName(semantics, "SemanticsData.label");
  var value$ = dart.privateName(semantics, "SemanticsData.value");
  var increasedValue$ = dart.privateName(semantics, "SemanticsData.increasedValue");
  var decreasedValue$ = dart.privateName(semantics, "SemanticsData.decreasedValue");
  var hint$0 = dart.privateName(semantics, "SemanticsData.hint");
  var textDirection$ = dart.privateName(semantics, "SemanticsData.textDirection");
  var textSelection$ = dart.privateName(semantics, "SemanticsData.textSelection");
  var scrollChildCount$ = dart.privateName(semantics, "SemanticsData.scrollChildCount");
  var scrollIndex$ = dart.privateName(semantics, "SemanticsData.scrollIndex");
  var scrollPosition$ = dart.privateName(semantics, "SemanticsData.scrollPosition");
  var scrollExtentMax$ = dart.privateName(semantics, "SemanticsData.scrollExtentMax");
  var scrollExtentMin$ = dart.privateName(semantics, "SemanticsData.scrollExtentMin");
  var platformViewId$ = dart.privateName(semantics, "SemanticsData.platformViewId");
  var maxValueLength$ = dart.privateName(semantics, "SemanticsData.maxValueLength");
  var currentValueLength$ = dart.privateName(semantics, "SemanticsData.currentValueLength");
  var rect$ = dart.privateName(semantics, "SemanticsData.rect");
  var tags$ = dart.privateName(semantics, "SemanticsData.tags");
  var transform$ = dart.privateName(semantics, "SemanticsData.transform");
  var elevation$ = dart.privateName(semantics, "SemanticsData.elevation");
  var thickness$ = dart.privateName(semantics, "SemanticsData.thickness");
  var customSemanticsActionIds$ = dart.privateName(semantics, "SemanticsData.customSemanticsActionIds");
=======
        __proto__: ui.Color.prototype,
        [Color_value]: 4278221567.0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[1] || CT.C1,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[2] || CT.C2,
        [CupertinoDynamicColor_darkElevatedColor]: C[3] || CT.C3,
        [CupertinoDynamicColor_elevatedColor]: C[4] || CT.C4,
        [CupertinoDynamicColor_darkHighContrastColor]: C[1] || CT.C1,
        [CupertinoDynamicColor_highContrastColor]: C[2] || CT.C2,
        [CupertinoDynamicColor_darkColor]: C[3] || CT.C3,
        [CupertinoDynamicColor_color]: C[4] || CT.C4,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemBlue",
        [CupertinoDynamicColor__effectiveColor]: C[4] || CT.C4
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285887861.0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288256409.0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[7] || CT.C7,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[8] || CT.C8,
        [CupertinoDynamicColor_darkElevatedColor]: C[7] || CT.C7,
        [CupertinoDynamicColor_elevatedColor]: C[8] || CT.C8,
        [CupertinoDynamicColor_darkHighContrastColor]: C[7] || CT.C7,
        [CupertinoDynamicColor_highContrastColor]: C[8] || CT.C8,
        [CupertinoDynamicColor_darkColor]: C[7] || CT.C7,
        [CupertinoDynamicColor_color]: C[8] || CT.C8,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "inactiveGray",
        [CupertinoDynamicColor__effectiveColor]: C[8] || CT.C8
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_darkElevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_elevatedColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_darkHighContrastColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_highContrastColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_darkColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_color]: C[11] || CT.C11,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "label",
        [CupertinoDynamicColor__effectiveColor]: C[11] || CT.C11
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text_theme._TextThemeDefaultsBuilder.prototype,
        [_TextThemeDefaultsBuilder_inactiveGrayColor]: C[6] || CT.C6,
        [_TextThemeDefaultsBuilder_labelColor]: C[9] || CT.C9
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: text_theme.CupertinoTextThemeData.prototype,
        [_dateTimePickerTextStyle$]: null,
        [_pickerTextStyle$]: null,
        [_navActionTextStyle$]: null,
        [_navLargeTitleTextStyle$]: null,
        [_navTitleTextStyle$]: null,
        [_tabLabelTextStyle$]: null,
        [_actionTextStyle$]: null,
        [_textStyle$]: null,
        [_primaryColor$]: C[0] || CT.C0,
        [_defaults$]: C[5] || CT.C5
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: C[14] || CT.C14,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: -0.41,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 17,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Text",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[9] || CT.C9,
        [TextStyle_inherit]: false
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: C[14] || CT.C14,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: -0.41,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 17,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Text",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[0] || CT.C0,
        [TextStyle_inherit]: false
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: -0.24,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 10,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Text",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[6] || CT.C6,
        [TextStyle_inherit]: false
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 5
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: -0.41,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[18] || CT.C18,
        [TextStyle_fontSize]: 17,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Text",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[9] || CT.C9,
        [TextStyle_inherit]: false
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 6
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: 0.41,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[20] || CT.C20,
        [TextStyle_fontSize]: 34,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Display",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[9] || CT.C9,
        [TextStyle_inherit]: false
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 3
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: -0.6,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[22] || CT.C22,
        [TextStyle_fontSize]: 21,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Display",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[9] || CT.C9,
        [TextStyle_inherit]: false
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[22] || CT.C22,
        [TextStyle_fontSize]: 21,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: ".SF Pro Display",
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[9] || CT.C9,
        [TextStyle_inherit]: false
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: theme$._CupertinoTextThemeDefaults.prototype,
        [_CupertinoTextThemeDefaults_inactiveGray]: C[6] || CT.C6,
        [_CupertinoTextThemeDefaults_labelColor]: C[9] || CT.C9
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280558630.0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280032286.0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkElevatedColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_elevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkHighContrastColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_highContrastColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_color]: C[10] || CT.C10,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemBackground",
        [CupertinoDynamicColor__effectiveColor]: C[10] || CT.C10
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4028439837.0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4042914297.0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[31] || CT.C31,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[32] || CT.C32,
        [CupertinoDynamicColor_darkElevatedColor]: C[31] || CT.C31,
        [CupertinoDynamicColor_elevatedColor]: C[32] || CT.C32,
        [CupertinoDynamicColor_darkHighContrastColor]: C[31] || CT.C31,
        [CupertinoDynamicColor_highContrastColor]: C[32] || CT.C32,
        [CupertinoDynamicColor_darkColor]: C[31] || CT.C31,
        [CupertinoDynamicColor_color]: C[32] || CT.C32,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: null,
        [CupertinoDynamicColor__effectiveColor]: C[32] || CT.C32
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: theme$._CupertinoThemeDefaults.prototype,
        [_CupertinoThemeDefaults_textThemeDefaults]: C[26] || CT.C26,
        [_CupertinoThemeDefaults_scaffoldBackgroundColor]: C[27] || CT.C27,
        [_CupertinoThemeDefaults_barBackgroundColor]: C[30] || CT.C30,
        [_CupertinoThemeDefaults_primaryContrastingColor]: C[27] || CT.C27,
        [_CupertinoThemeDefaults_primaryColor]: C[0] || CT.C0,
        [_CupertinoThemeDefaults_brightness]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: theme$.CupertinoThemeData.prototype,
        [NoDefaultCupertinoThemeData_scaffoldBackgroundColor]: null,
        [NoDefaultCupertinoThemeData_barBackgroundColor]: null,
        [NoDefaultCupertinoThemeData_textTheme]: null,
        [NoDefaultCupertinoThemeData_primaryContrastingColor]: null,
        [NoDefaultCupertinoThemeData_primaryColor]: null,
        [NoDefaultCupertinoThemeData_brightness]: null,
        [CupertinoThemeData__defaults]: C[25] || CT.C25
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 9,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 125,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 123,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/cupertino/theme.dart"
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "theme",
        [_Location_column]: 7,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.constList([C[39] || CT.C39, C[40] || CT.C40], widget_inspector._Location);
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[38] || CT.C38,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 121,
        [_Location_file]: "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/cupertino/theme.dart"
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281391963.0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280584765.0
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281389400.0
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281648985.0
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[42] || CT.C42,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[43] || CT.C43,
        [CupertinoDynamicColor_darkElevatedColor]: C[44] || CT.C44,
        [CupertinoDynamicColor_elevatedColor]: C[45] || CT.C45,
        [CupertinoDynamicColor_darkHighContrastColor]: C[42] || CT.C42,
        [CupertinoDynamicColor_highContrastColor]: C[43] || CT.C43,
        [CupertinoDynamicColor_darkColor]: C[44] || CT.C44,
        [CupertinoDynamicColor_color]: C[45] || CT.C45,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGreen",
        [CupertinoDynamicColor__effectiveColor]: C[45] || CT.C45
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294947648.0
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291376128.0
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294942474.0
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294939904.0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[47] || CT.C47,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[48] || CT.C48,
        [CupertinoDynamicColor_darkElevatedColor]: C[49] || CT.C49,
        [CupertinoDynamicColor_elevatedColor]: C[50] || CT.C50,
        [CupertinoDynamicColor_darkHighContrastColor]: C[47] || CT.C47,
        [CupertinoDynamicColor_highContrastColor]: C[48] || CT.C48,
        [CupertinoDynamicColor_darkColor]: C[49] || CT.C49,
        [CupertinoDynamicColor_color]: C[50] || CT.C50,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemOrange",
        [CupertinoDynamicColor__effectiveColor]: C[50] || CT.C50
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293256682.0
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293914612.0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279703319.0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294928737.0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292280341.0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294919482.0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294916912.0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[55] || CT.C55,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[56] || CT.C56,
        [CupertinoDynamicColor_darkElevatedColor]: C[57] || CT.C57,
        [CupertinoDynamicColor_elevatedColor]: C[58] || CT.C58,
        [CupertinoDynamicColor_darkHighContrastColor]: C[55] || CT.C55,
        [CupertinoDynamicColor_highContrastColor]: C[56] || CT.C56,
        [CupertinoDynamicColor_darkColor]: C[57] || CT.C57,
        [CupertinoDynamicColor_color]: C[58] || CT.C58,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemRed",
        [CupertinoDynamicColor__effectiveColor]: C[58] || CT.C58
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286413567.0
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281742499.0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284374246.0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283979478.0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[60] || CT.C60,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[61] || CT.C61,
        [CupertinoDynamicColor_darkElevatedColor]: C[62] || CT.C62,
        [CupertinoDynamicColor_elevatedColor]: C[63] || CT.C63,
        [CupertinoDynamicColor_darkHighContrastColor]: C[60] || CT.C60,
        [CupertinoDynamicColor_highContrastColor]: C[61] || CT.C61,
        [CupertinoDynamicColor_darkColor]: C[62] || CT.C62,
        [CupertinoDynamicColor_color]: C[63] || CT.C63,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemIndigo",
        [CupertinoDynamicColor__effectiveColor]: C[63] || CT.C63
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294927490.0
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292022085.0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294915935.0
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294913365.0
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[65] || CT.C65,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[66] || CT.C66,
        [CupertinoDynamicColor_darkElevatedColor]: C[67] || CT.C67,
        [CupertinoDynamicColor_elevatedColor]: C[68] || CT.C68,
        [CupertinoDynamicColor_darkHighContrastColor]: C[65] || CT.C65,
        [CupertinoDynamicColor_highContrastColor]: C[66] || CT.C66,
        [CupertinoDynamicColor_darkColor]: C[67] || CT.C67,
        [CupertinoDynamicColor_color]: C[68] || CT.C68,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemPink",
        [CupertinoDynamicColor__effectiveColor]: C[68] || CT.C68
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292513791.0
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287186091.0
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290730738.0
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289680094.0
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[70] || CT.C70,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[71] || CT.C71,
        [CupertinoDynamicColor_darkElevatedColor]: C[72] || CT.C72,
        [CupertinoDynamicColor_elevatedColor]: C[73] || CT.C73,
        [CupertinoDynamicColor_darkHighContrastColor]: C[70] || CT.C70,
        [CupertinoDynamicColor_highContrastColor]: C[71] || CT.C71,
        [CupertinoDynamicColor_darkColor]: C[72] || CT.C72,
        [CupertinoDynamicColor_color]: C[73] || CT.C73,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemPurple",
        [CupertinoDynamicColor__effectiveColor]: C[73] || CT.C73
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285585407.0
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278219172.0
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284797695.0
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284139770.0
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[75] || CT.C75,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[76] || CT.C76,
        [CupertinoDynamicColor_darkElevatedColor]: C[77] || CT.C77,
        [CupertinoDynamicColor_elevatedColor]: C[78] || CT.C78,
        [CupertinoDynamicColor_darkHighContrastColor]: C[75] || CT.C75,
        [CupertinoDynamicColor_highContrastColor]: C[76] || CT.C76,
        [CupertinoDynamicColor_darkColor]: C[77] || CT.C77,
        [CupertinoDynamicColor_color]: C[78] || CT.C78,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemTeal",
        [CupertinoDynamicColor__effectiveColor]: C[78] || CT.C78
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294956070.0
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288698880.0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294956554.0
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294953984.0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[80] || CT.C80,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[81] || CT.C81,
        [CupertinoDynamicColor_darkElevatedColor]: C[82] || CT.C82,
        [CupertinoDynamicColor_elevatedColor]: C[83] || CT.C83,
        [CupertinoDynamicColor_darkHighContrastColor]: C[80] || CT.C80,
        [CupertinoDynamicColor_highContrastColor]: C[81] || CT.C81,
        [CupertinoDynamicColor_darkColor]: C[82] || CT.C82,
        [CupertinoDynamicColor_color]: C[83] || CT.C83,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemYellow",
        [CupertinoDynamicColor__effectiveColor]: C[83] || CT.C83
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289638066.0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285295728.0
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287532691.0
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[85] || CT.C85,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[86] || CT.C86,
        [CupertinoDynamicColor_darkElevatedColor]: C[87] || CT.C87,
        [CupertinoDynamicColor_elevatedColor]: C[87] || CT.C87,
        [CupertinoDynamicColor_darkHighContrastColor]: C[85] || CT.C85,
        [CupertinoDynamicColor_highContrastColor]: C[86] || CT.C86,
        [CupertinoDynamicColor_darkColor]: C[87] || CT.C87,
        [CupertinoDynamicColor_color]: C[87] || CT.C87,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey",
        [CupertinoDynamicColor__effectiveColor]: C[87] || CT.C87
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286348416.0
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284703590.0
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[89] || CT.C89,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[87] || CT.C87,
        [CupertinoDynamicColor_darkElevatedColor]: C[90] || CT.C90,
        [CupertinoDynamicColor_elevatedColor]: C[85] || CT.C85,
        [CupertinoDynamicColor_darkHighContrastColor]: C[89] || CT.C89,
        [CupertinoDynamicColor_highContrastColor]: C[87] || CT.C87,
        [CupertinoDynamicColor_darkColor]: C[90] || CT.C90,
        [CupertinoDynamicColor_color]: C[85] || CT.C85,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey2",
        [CupertinoDynamicColor__effectiveColor]: C[85] || CT.C85
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283716694.0
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282927178.0
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291282892.0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[92] || CT.C92,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[85] || CT.C85,
        [CupertinoDynamicColor_darkElevatedColor]: C[93] || CT.C93,
        [CupertinoDynamicColor_elevatedColor]: C[94] || CT.C94,
        [CupertinoDynamicColor_darkHighContrastColor]: C[92] || CT.C92,
        [CupertinoDynamicColor_highContrastColor]: C[85] || CT.C85,
        [CupertinoDynamicColor_darkColor]: C[93] || CT.C93,
        [CupertinoDynamicColor_color]: C[94] || CT.C94,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey3",
        [CupertinoDynamicColor__effectiveColor]: C[94] || CT.C94
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282664006.0
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290559168.0
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282006076.0
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291940822.0
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[96] || CT.C96,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[97] || CT.C97,
        [CupertinoDynamicColor_darkElevatedColor]: C[98] || CT.C98,
        [CupertinoDynamicColor_elevatedColor]: C[99] || CT.C99,
        [CupertinoDynamicColor_darkHighContrastColor]: C[96] || CT.C96,
        [CupertinoDynamicColor_highContrastColor]: C[97] || CT.C97,
        [CupertinoDynamicColor_darkColor]: C[98] || CT.C98,
        [CupertinoDynamicColor_color]: C[99] || CT.C99,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey4",
        [CupertinoDynamicColor__effectiveColor]: C[99] || CT.C99
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281742904.0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292401372.0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281084974.0
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[102] || CT.C102,
        [CupertinoDynamicColor_darkElevatedColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_elevatedColor]: C[51] || CT.C51,
        [CupertinoDynamicColor_darkHighContrastColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastColor]: C[102] || CT.C102,
        [CupertinoDynamicColor_darkColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_color]: C[51] || CT.C51,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey5",
        [CupertinoDynamicColor__effectiveColor]: C[51] || CT.C51
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293651440.0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294111991.0
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkElevatedColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_elevatedColor]: C[106] || CT.C106,
        [CupertinoDynamicColor_darkHighContrastColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_color]: C[106] || CT.C106,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGrey6",
        [CupertinoDynamicColor__effectiveColor]: C[106] || CT.C106
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2917919733.0
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2906405955.0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2582375413.0
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2570861635.0
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[108] || CT.C108,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[109] || CT.C109,
        [CupertinoDynamicColor_darkElevatedColor]: C[110] || CT.C110,
        [CupertinoDynamicColor_elevatedColor]: C[111] || CT.C111,
        [CupertinoDynamicColor_darkHighContrastColor]: C[108] || CT.C108,
        [CupertinoDynamicColor_highContrastColor]: C[109] || CT.C109,
        [CupertinoDynamicColor_darkColor]: C[110] || CT.C110,
        [CupertinoDynamicColor_color]: C[111] || CT.C111,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "secondaryLabel",
        [CupertinoDynamicColor__effectiveColor]: C[111] || CT.C111
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1626074101
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1614560323
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1290529781
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1279016003
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[113] || CT.C113,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[114] || CT.C114,
        [CupertinoDynamicColor_darkElevatedColor]: C[115] || CT.C115,
        [CupertinoDynamicColor_elevatedColor]: C[116] || CT.C116,
        [CupertinoDynamicColor_darkHighContrastColor]: C[113] || CT.C113,
        [CupertinoDynamicColor_highContrastColor]: C[114] || CT.C114,
        [CupertinoDynamicColor_darkColor]: C[115] || CT.C115,
        [CupertinoDynamicColor_color]: C[116] || CT.C116,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "tertiaryLabel",
        [CupertinoDynamicColor__effectiveColor]: C[116] || CT.C116
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1038871541
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1111243843
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 686550005
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 758922307
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[118] || CT.C118,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[119] || CT.C119,
        [CupertinoDynamicColor_darkElevatedColor]: C[120] || CT.C120,
        [CupertinoDynamicColor_elevatedColor]: C[121] || CT.C121,
        [CupertinoDynamicColor_darkHighContrastColor]: C[118] || CT.C118,
        [CupertinoDynamicColor_highContrastColor]: C[119] || CT.C119,
        [CupertinoDynamicColor_darkColor]: C[120] || CT.C120,
        [CupertinoDynamicColor_color]: C[121] || CT.C121,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "quaternaryLabel",
        [CupertinoDynamicColor__effectiveColor]: C[121] || CT.C121
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1886943360
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1199077504
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1534621824
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 863533184
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[123] || CT.C123,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[124] || CT.C124,
        [CupertinoDynamicColor_darkElevatedColor]: C[125] || CT.C125,
        [CupertinoDynamicColor_elevatedColor]: C[126] || CT.C126,
        [CupertinoDynamicColor_darkHighContrastColor]: C[123] || CT.C123,
        [CupertinoDynamicColor_highContrastColor]: C[124] || CT.C124,
        [CupertinoDynamicColor_darkColor]: C[125] || CT.C125,
        [CupertinoDynamicColor_color]: C[126] || CT.C126,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemFill",
        [CupertinoDynamicColor__effectiveColor]: C[126] || CT.C126
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1719171200
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1031305344
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1366849664
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 678983808
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[128] || CT.C128,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[129] || CT.C129,
        [CupertinoDynamicColor_darkElevatedColor]: C[130] || CT.C130,
        [CupertinoDynamicColor_elevatedColor]: C[131] || CT.C131,
        [CupertinoDynamicColor_darkHighContrastColor]: C[128] || CT.C128,
        [CupertinoDynamicColor_highContrastColor]: C[129] || CT.C129,
        [CupertinoDynamicColor_darkColor]: C[130] || CT.C130,
        [CupertinoDynamicColor_color]: C[131] || CT.C131,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "secondarySystemFill",
        [CupertinoDynamicColor__effectiveColor]: C[131] || CT.C131
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1366718080
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 863401600
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1031173760
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 511080064
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[133] || CT.C133,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[134] || CT.C134,
        [CupertinoDynamicColor_darkElevatedColor]: C[135] || CT.C135,
        [CupertinoDynamicColor_elevatedColor]: C[136] || CT.C136,
        [CupertinoDynamicColor_darkHighContrastColor]: C[133] || CT.C133,
        [CupertinoDynamicColor_highContrastColor]: C[134] || CT.C134,
        [CupertinoDynamicColor_darkColor]: C[135] || CT.C135,
        [CupertinoDynamicColor_color]: C[136] || CT.C136,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "tertiarySystemFill",
        [CupertinoDynamicColor__effectiveColor]: C[136] || CT.C136
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1115059840
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 678720640
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 762738304
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 343176320
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[138] || CT.C138,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[139] || CT.C139,
        [CupertinoDynamicColor_darkElevatedColor]: C[140] || CT.C140,
        [CupertinoDynamicColor_elevatedColor]: C[141] || CT.C141,
        [CupertinoDynamicColor_darkHighContrastColor]: C[138] || CT.C138,
        [CupertinoDynamicColor_highContrastColor]: C[139] || CT.C139,
        [CupertinoDynamicColor_darkColor]: C[140] || CT.C140,
        [CupertinoDynamicColor_color]: C[141] || CT.C141,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "quaternarySystemFill",
        [CupertinoDynamicColor__effectiveColor]: C[141] || CT.C141
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[113] || CT.C113,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[114] || CT.C114,
        [CupertinoDynamicColor_darkElevatedColor]: C[115] || CT.C115,
        [CupertinoDynamicColor_elevatedColor]: C[116] || CT.C116,
        [CupertinoDynamicColor_darkHighContrastColor]: C[113] || CT.C113,
        [CupertinoDynamicColor_highContrastColor]: C[114] || CT.C114,
        [CupertinoDynamicColor_darkColor]: C[115] || CT.C115,
        [CupertinoDynamicColor_color]: C[116] || CT.C116,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "placeholderText",
        [CupertinoDynamicColor__effectiveColor]: C[116] || CT.C116
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkElevatedColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_elevatedColor]: C[106] || CT.C106,
        [CupertinoDynamicColor_darkHighContrastColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_color]: C[106] || CT.C106,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "secondarySystemBackground",
        [CupertinoDynamicColor__effectiveColor]: C[106] || CT.C106
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[96] || CT.C96,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkElevatedColor]: C[98] || CT.C98,
        [CupertinoDynamicColor_elevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkHighContrastColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_color]: C[10] || CT.C10,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "tertiarySystemBackground",
        [CupertinoDynamicColor__effectiveColor]: C[10] || CT.C10
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkElevatedColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_elevatedColor]: C[106] || CT.C106,
        [CupertinoDynamicColor_darkHighContrastColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_highContrastColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkColor]: C[11] || CT.C11,
        [CupertinoDynamicColor_color]: C[106] || CT.C106,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "systemGroupedBackground",
        [CupertinoDynamicColor__effectiveColor]: C[106] || CT.C106
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkElevatedColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_elevatedColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkHighContrastColor]: C[28] || CT.C28,
        [CupertinoDynamicColor_highContrastColor]: C[10] || CT.C10,
        [CupertinoDynamicColor_darkColor]: C[29] || CT.C29,
        [CupertinoDynamicColor_color]: C[10] || CT.C10,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "secondarySystemGroupedBackground",
        [CupertinoDynamicColor__effectiveColor]: C[10] || CT.C10
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[96] || CT.C96,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkElevatedColor]: C[98] || CT.C98,
        [CupertinoDynamicColor_elevatedColor]: C[106] || CT.C106,
        [CupertinoDynamicColor_darkHighContrastColor]: C[101] || CT.C101,
        [CupertinoDynamicColor_highContrastColor]: C[105] || CT.C105,
        [CupertinoDynamicColor_darkColor]: C[103] || CT.C103,
        [CupertinoDynamicColor_color]: C[106] || CT.C106,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "tertiarySystemGroupedBackground",
        [CupertinoDynamicColor__effectiveColor]: C[106] || CT.C106
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2907984984.0
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1581005891
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2572440664.0
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1228684355
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[149] || CT.C149,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[150] || CT.C150,
        [CupertinoDynamicColor_darkElevatedColor]: C[151] || CT.C151,
        [CupertinoDynamicColor_elevatedColor]: C[152] || CT.C152,
        [CupertinoDynamicColor_darkHighContrastColor]: C[149] || CT.C149,
        [CupertinoDynamicColor_highContrastColor]: C[150] || CT.C150,
        [CupertinoDynamicColor_darkColor]: C[151] || CT.C151,
        [CupertinoDynamicColor_color]: C[152] || CT.C152,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "separator",
        [CupertinoDynamicColor__effectiveColor]: C[152] || CT.C152
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281874490.0
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291217096.0
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[154] || CT.C154,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[155] || CT.C155,
        [CupertinoDynamicColor_darkElevatedColor]: C[154] || CT.C154,
        [CupertinoDynamicColor_elevatedColor]: C[155] || CT.C155,
        [CupertinoDynamicColor_darkHighContrastColor]: C[154] || CT.C154,
        [CupertinoDynamicColor_highContrastColor]: C[155] || CT.C155,
        [CupertinoDynamicColor_darkColor]: C[154] || CT.C154,
        [CupertinoDynamicColor_color]: C[155] || CT.C155,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "opaqueSeparator",
        [CupertinoDynamicColor__effectiveColor]: C[155] || CT.C155
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278813951.0
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: colors$.CupertinoDynamicColor.prototype,
        [Color_value]: 0,
        [CupertinoDynamicColor_darkHighContrastElevatedColor]: C[157] || CT.C157,
        [CupertinoDynamicColor_highContrastElevatedColor]: C[4] || CT.C4,
        [CupertinoDynamicColor_darkElevatedColor]: C[157] || CT.C157,
        [CupertinoDynamicColor_elevatedColor]: C[4] || CT.C4,
        [CupertinoDynamicColor_darkHighContrastColor]: C[157] || CT.C157,
        [CupertinoDynamicColor_highContrastColor]: C[4] || CT.C4,
        [CupertinoDynamicColor_darkColor]: C[157] || CT.C157,
        [CupertinoDynamicColor_color]: C[4] || CT.C4,
        [CupertinoDynamicColor__debugResolveContext]: null,
        [CupertinoDynamicColor__debugLabel]: "link",
        [CupertinoDynamicColor__effectiveColor]: C[4] || CT.C4
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: interface_level.CupertinoUserInterfaceLevelData.prototype,
        [_name]: "CupertinoUserInterfaceLevelData.base",
        index: 0
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: interface_level.CupertinoUserInterfaceLevelData.prototype,
        [_name]: "CupertinoUserInterfaceLevelData.elevated",
        index: 1
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$]: "Brightness.light",
        index: 1
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$]: "Brightness.dark",
        index: 0
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name$0]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: diagnostics._NoDefaultValue.prototype
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: diagnostics.DiagnosticsTreeStyle.prototype,
        [_name$0]: "DiagnosticsTreeStyle.singleLine",
        index: 8
      });
    }
  }, false);
  var C = Array(165).fill(void 0);
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/cupertino/text_theme.dart",
    "package:flutter/src/cupertino/text_theme.dart",
    "package:flutter/src/cupertino/icon_theme_data.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/cupertino/theme.dart",
    "package:flutter/src/cupertino/theme.dart",
    "package:flutter/src/cupertino/colors.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/cupertino/colors.dart"
  ];
  var _defaults$ = dart.privateName(text_theme, "CupertinoTextThemeData._defaults");
  var _primaryColor$ = dart.privateName(text_theme, "CupertinoTextThemeData._primaryColor");
  var _textStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._textStyle");
  var _actionTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._actionTextStyle");
  var _tabLabelTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._tabLabelTextStyle");
  var _navTitleTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._navTitleTextStyle");
  var _navLargeTitleTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._navLargeTitleTextStyle");
  var _navActionTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._navActionTextStyle");
  var _pickerTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._pickerTextStyle");
  var _dateTimePickerTextStyle$ = dart.privateName(text_theme, "CupertinoTextThemeData._dateTimePickerTextStyle");
  var Color_value = dart.privateName(ui, "Color.value");
  var CupertinoDynamicColor_darkHighContrastElevatedColor = dart.privateName(colors$, "CupertinoDynamicColor.darkHighContrastElevatedColor");
  var CupertinoDynamicColor_highContrastElevatedColor = dart.privateName(colors$, "CupertinoDynamicColor.highContrastElevatedColor");
  var CupertinoDynamicColor_darkElevatedColor = dart.privateName(colors$, "CupertinoDynamicColor.darkElevatedColor");
  var CupertinoDynamicColor_elevatedColor = dart.privateName(colors$, "CupertinoDynamicColor.elevatedColor");
  var CupertinoDynamicColor_darkHighContrastColor = dart.privateName(colors$, "CupertinoDynamicColor.darkHighContrastColor");
  var CupertinoDynamicColor_highContrastColor = dart.privateName(colors$, "CupertinoDynamicColor.highContrastColor");
  var CupertinoDynamicColor_darkColor = dart.privateName(colors$, "CupertinoDynamicColor.darkColor");
  var CupertinoDynamicColor_color = dart.privateName(colors$, "CupertinoDynamicColor.color");
  var CupertinoDynamicColor__debugResolveContext = dart.privateName(colors$, "CupertinoDynamicColor._debugResolveContext");
  var CupertinoDynamicColor__debugLabel = dart.privateName(colors$, "CupertinoDynamicColor._debugLabel");
  var CupertinoDynamicColor__effectiveColor = dart.privateName(colors$, "CupertinoDynamicColor._effectiveColor");
  var _TextThemeDefaultsBuilder_inactiveGrayColor = dart.privateName(text_theme, "_TextThemeDefaultsBuilder.inactiveGrayColor");
  var _TextThemeDefaultsBuilder_labelColor = dart.privateName(text_theme, "_TextThemeDefaultsBuilder.labelColor");
  var _defaults = dart.privateName(text_theme, "_defaults");
  var _primaryColor = dart.privateName(text_theme, "_primaryColor");
  var _textStyle = dart.privateName(text_theme, "_textStyle");
  var _actionTextStyle = dart.privateName(text_theme, "_actionTextStyle");
  var _tabLabelTextStyle = dart.privateName(text_theme, "_tabLabelTextStyle");
  var _navTitleTextStyle = dart.privateName(text_theme, "_navTitleTextStyle");
  var _navLargeTitleTextStyle = dart.privateName(text_theme, "_navLargeTitleTextStyle");
  var _navActionTextStyle = dart.privateName(text_theme, "_navActionTextStyle");
  var _pickerTextStyle = dart.privateName(text_theme, "_pickerTextStyle");
  var _dateTimePickerTextStyle = dart.privateName(text_theme, "_dateTimePickerTextStyle");
>>>>>>> AUg2
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
<<<<<<< HEAD
  semantics.SemanticsData = class SemanticsData extends Object_Diagnosticable$36 {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get actions() {
      return this[actions$];
    }
    set actions(value) {
      super.actions = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get increasedValue() {
      return this[increasedValue$];
    }
    set increasedValue(value) {
      super.increasedValue = value;
    }
    get decreasedValue() {
      return this[decreasedValue$];
    }
    set decreasedValue(value) {
      super.decreasedValue = value;
    }
    get hint() {
      return this[hint$0];
    }
    set hint(value) {
      super.hint = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get textSelection() {
      return this[textSelection$];
    }
    set textSelection(value) {
      super.textSelection = value;
    }
    get scrollChildCount() {
      return this[scrollChildCount$];
    }
    set scrollChildCount(value) {
      super.scrollChildCount = value;
    }
    get scrollIndex() {
      return this[scrollIndex$];
    }
    set scrollIndex(value) {
      super.scrollIndex = value;
    }
    get scrollPosition() {
      return this[scrollPosition$];
    }
    set scrollPosition(value) {
      super.scrollPosition = value;
    }
    get scrollExtentMax() {
      return this[scrollExtentMax$];
    }
    set scrollExtentMax(value) {
      super.scrollExtentMax = value;
    }
    get scrollExtentMin() {
      return this[scrollExtentMin$];
    }
    set scrollExtentMin(value) {
      super.scrollExtentMin = value;
    }
    get platformViewId() {
      return this[platformViewId$];
    }
    set platformViewId(value) {
      super.platformViewId = value;
    }
    get maxValueLength() {
      return this[maxValueLength$];
    }
    set maxValueLength(value) {
      super.maxValueLength = value;
    }
    get currentValueLength() {
      return this[currentValueLength$];
    }
    set currentValueLength(value) {
      super.currentValueLength = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get customSemanticsActionIds() {
      return this[customSemanticsActionIds$];
    }
    set customSemanticsActionIds(value) {
      super.customSemanticsActionIds = value;
    }
    hasFlag(flag) {
      return (this.flags & flag.index) !== 0;
    }
    hasAction(action) {
      return (this.actions & action.index) !== 0;
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsData");
    }
    debugFillProperties(properties) {
      let t2;
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfRect()).new("rect", this.rect, {showName: false}));
      properties.add(new matrix_utils.TransformProperty.new("transform", this.transform, {showName: false, defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation, {defaultValue: 0.0}));
      properties.add(new diagnostics.DoubleProperty.new("thickness", this.thickness, {defaultValue: 0.0}));
      let actionSummary = (() => {
        let t0 = T.JSArrayOfString().of([]);
        for (let action of ui.SemanticsAction.values[$values])
          if ((this.actions & action.index) !== 0) t0[$add](diagnostics.describeEnum(action));
        return t0;
      })();
      let customSemanticsActionSummary = dart.nullCheck(this.customSemanticsActionIds)[$map](T.StringN(), dart.fn(actionId => dart.nullCheck(semantics.CustomSemanticsAction.getAction(actionId)).label, T.intToStringN()))[$toList]();
      properties.add(new (T.IterablePropertyOfString()).new("actions", actionSummary, {ifEmpty: null}));
      properties.add(new (T.IterablePropertyOfStringN()).new("customActions", customSemanticsActionSummary, {ifEmpty: null}));
      let flagSummary = (() => {
        let t1 = T.JSArrayOfString().of([]);
        for (let flag of ui.SemanticsFlag.values[$values])
          if ((this.flags & flag.index) !== 0) t1[$add](diagnostics.describeEnum(flag));
        return t1;
      })();
      properties.add(new (T.IterablePropertyOfString()).new("flags", flagSummary, {ifEmpty: null}));
      properties.add(new diagnostics.StringProperty.new("label", this.label, {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("value", this.value, {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("increasedValue", this.increasedValue, {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("decreasedValue", this.decreasedValue, {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("hint", this.hint, {defaultValue: ""}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      if ((t2 = this.textSelection, t2 == null ? null : t2.isValid) === true) properties.add(new diagnostics.MessageProperty.new("textSelection", "[" + dart.str(dart.nullCheck(this.textSelection).start) + ", " + dart.str(dart.nullCheck(this.textSelection).end) + "]"));
      properties.add(new diagnostics.IntProperty.new("platformViewId", this.platformViewId, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("maxValueLength", this.maxValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("currentValueLength", this.currentValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollChildren", this.scrollChildCount, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollIndex", this.scrollIndex, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMin", this.scrollExtentMin, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollPosition", this.scrollPosition, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMax", this.scrollExtentMax, {defaultValue: null}));
    }
    _equals(other) {
      if (other == null) return false;
      return semantics.SemanticsData.is(other) && other.flags === this.flags && other.actions === this.actions && other.label === this.label && other.value === this.value && other.increasedValue === this.increasedValue && other.decreasedValue === this.decreasedValue && other.hint === this.hint && other.textDirection == this.textDirection && other.rect._equals(this.rect) && collections.setEquals(semantics.SemanticsTag, other.tags, this.tags) && other.scrollChildCount == this.scrollChildCount && other.scrollIndex == this.scrollIndex && dart.equals(other.textSelection, this.textSelection) && other.scrollPosition == this.scrollPosition && other.scrollExtentMax == this.scrollExtentMax && other.scrollExtentMin == this.scrollExtentMin && other.platformViewId == this.platformViewId && other.maxValueLength == this.maxValueLength && other.currentValueLength == this.currentValueLength && dart.equals(other.transform, this.transform) && other.elevation === this.elevation && other.thickness === this.thickness && semantics.SemanticsData._sortedListsEqual(other.customSemanticsActionIds, this.customSemanticsActionIds);
    }
    get hashCode() {
      return ui.hashValues(ui.hashValues(this.flags, this.actions, this.label, this.value, this.increasedValue, this.decreasedValue, this.hint, this.textDirection, this.rect, this.tags, this.textSelection, this.scrollChildCount, this.scrollIndex, this.scrollPosition, this.scrollExtentMax, this.scrollExtentMin, this.platformViewId, this.maxValueLength, this.currentValueLength, this.transform), this.elevation, this.thickness, ui.hashList(this.customSemanticsActionIds));
    }
    static _sortedListsEqual(left, right) {
      if (left == null && right == null) return true;
      if (left != null && right != null) {
        if (left[$length] !== right[$length]) return false;
        for (let i = 0; i < left[$length]; i = i + 1)
          if (left[$_get](i) !== right[$_get](i)) return false;
        return true;
      }
      return false;
    }
  };
  (semantics.SemanticsData.new = function(opts) {
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let textSelection = opts && 'textSelection' in opts ? opts.textSelection : null;
    let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
    let scrollChildCount = opts && 'scrollChildCount' in opts ? opts.scrollChildCount : null;
    let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
    let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
    let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
    let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
    let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
    let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
    let tags = opts && 'tags' in opts ? opts.tags : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let customSemanticsActionIds = opts && 'customSemanticsActionIds' in opts ? opts.customSemanticsActionIds : null;
    this[flags$] = flags;
    this[actions$] = actions;
    this[label$0] = label;
    this[increasedValue$] = increasedValue;
    this[value$] = value;
    this[decreasedValue$] = decreasedValue;
    this[hint$0] = hint;
    this[textDirection$] = textDirection;
    this[rect$] = rect;
    this[elevation$] = elevation;
    this[thickness$] = thickness;
    this[textSelection$] = textSelection;
    this[scrollIndex$] = scrollIndex;
    this[scrollChildCount$] = scrollChildCount;
    this[scrollPosition$] = scrollPosition;
    this[scrollExtentMax$] = scrollExtentMax;
    this[scrollExtentMin$] = scrollExtentMin;
    this[platformViewId$] = platformViewId;
    this[maxValueLength$] = maxValueLength;
    this[currentValueLength$] = currentValueLength;
    this[tags$] = tags;
    this[transform$] = transform;
    this[customSemanticsActionIds$] = customSemanticsActionIds;
    if (!(flags !== null)) dart.assertFailed(null, I[1], 209, 15, "flags != null");
    if (!(actions !== null)) dart.assertFailed(null, I[1], 210, 15, "actions != null");
    if (!(label !== null)) dart.assertFailed(null, I[1], 211, 15, "label != null");
    if (!(value !== null)) dart.assertFailed(null, I[1], 212, 15, "value != null");
    if (!(decreasedValue !== null)) dart.assertFailed(null, I[1], 213, 15, "decreasedValue != null");
    if (!(increasedValue !== null)) dart.assertFailed(null, I[1], 214, 15, "increasedValue != null");
    if (!(hint !== null)) dart.assertFailed(null, I[1], 215, 15, "hint != null");
    if (!(label === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with label \"" + label + "\" had a null textDirection.", I[1], 216, 15, "label == '' || textDirection != null");
    if (!(value === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with value \"" + value + "\" had a null textDirection.", I[1], 217, 15, "value == '' || textDirection != null");
    if (!(hint === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with hint \"" + hint + "\" had a null textDirection.", I[1], 218, 15, "hint == '' || textDirection != null");
    if (!(decreasedValue === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with decreasedValue \"" + decreasedValue + "\" had a null textDirection.", I[1], 219, 15, "decreasedValue == '' || textDirection != null");
    if (!(increasedValue === "" || textDirection != null)) dart.assertFailed("A SemanticsData object with increasedValue \"" + increasedValue + "\" had a null textDirection.", I[1], 220, 15, "increasedValue == '' || textDirection != null");
    if (!(rect !== null)) dart.assertFailed(null, I[1], 221, 15, "rect != null");
    ;
  }).prototype = semantics.SemanticsData.prototype;
  dart.addTypeTests(semantics.SemanticsData);
  dart.addTypeCaches(semantics.SemanticsData);
  dart.setMethodSignature(semantics.SemanticsData, () => ({
    __proto__: dart.getMethods(semantics.SemanticsData.__proto__),
    hasFlag: dart.fnType(core.bool, [ui.SemanticsFlag]),
    hasAction: dart.fnType(core.bool, [ui.SemanticsAction])
  }));
  dart.setLibraryUri(semantics.SemanticsData, I[0]);
  dart.setFieldSignature(semantics.SemanticsData, () => ({
    __proto__: dart.getFields(semantics.SemanticsData.__proto__),
    flags: dart.finalFieldType(core.int),
    actions: dart.finalFieldType(core.int),
    label: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    increasedValue: dart.finalFieldType(core.String),
    decreasedValue: dart.finalFieldType(core.String),
    hint: dart.finalFieldType(core.String),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    textSelection: dart.finalFieldType(dart.nullable(text_editing.TextSelection)),
    scrollChildCount: dart.finalFieldType(dart.nullable(core.int)),
    scrollIndex: dart.finalFieldType(dart.nullable(core.int)),
    scrollPosition: dart.finalFieldType(dart.nullable(core.double)),
    scrollExtentMax: dart.finalFieldType(dart.nullable(core.double)),
    scrollExtentMin: dart.finalFieldType(dart.nullable(core.double)),
    platformViewId: dart.finalFieldType(dart.nullable(core.int)),
    maxValueLength: dart.finalFieldType(dart.nullable(core.int)),
    currentValueLength: dart.finalFieldType(dart.nullable(core.int)),
    rect: dart.finalFieldType(ui.Rect),
    tags: dart.finalFieldType(dart.nullable(core.Set$(semantics.SemanticsTag))),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4)),
    elevation: dart.finalFieldType(core.double),
    thickness: dart.finalFieldType(core.double),
    customSemanticsActionIds: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  dart.defineExtensionMethods(semantics.SemanticsData, ['_equals']);
  dart.defineExtensionAccessors(semantics.SemanticsData, ['hashCode']);
  var key$ = dart.privateName(semantics, "SemanticsNode.key");
  var parentSemanticsClipRect = dart.privateName(semantics, "SemanticsNode.parentSemanticsClipRect");
  var parentPaintClipRect = dart.privateName(semantics, "SemanticsNode.parentPaintClipRect");
  var elevationAdjustment = dart.privateName(semantics, "SemanticsNode.elevationAdjustment");
  var indexInParent = dart.privateName(semantics, "SemanticsNode.indexInParent");
  var tags = dart.privateName(semantics, "SemanticsNode.tags");
  var _transform = dart.privateName(semantics, "_transform");
  var _rect = dart.privateName(semantics, "_rect");
  var _isMergedIntoParent = dart.privateName(semantics, "_isMergedIntoParent");
  var _mergeAllDescendantsIntoThisNode = dart.privateName(semantics, "_mergeAllDescendantsIntoThisNode");
  var _children = dart.privateName(semantics, "_children");
  var __SemanticsNode__debugPreviousSnapshot = dart.privateName(semantics, "_#SemanticsNode#_debugPreviousSnapshot");
  var _dead = dart.privateName(semantics, "_dead");
  var _dirty = dart.privateName(semantics, "_dirty");
  var _actions = dart.privateName(semantics, "_actions");
  var _customSemanticsActions = dart.privateName(semantics, "_customSemanticsActions");
  var _actionsAsBits = dart.privateName(semantics, "_actionsAsBits");
  var _flags = dart.privateName(semantics, "_flags");
  var _label = dart.privateName(semantics, "_label");
  var _value = dart.privateName(semantics, "_value");
  var _decreasedValue = dart.privateName(semantics, "_decreasedValue");
  var _increasedValue = dart.privateName(semantics, "_increasedValue");
  var _hint = dart.privateName(semantics, "_hint");
  var _elevation = dart.privateName(semantics, "_elevation");
  var _thickness = dart.privateName(semantics, "_thickness");
  var _hintOverrides = dart.privateName(semantics, "_hintOverrides");
  var _textDirection = dart.privateName(semantics, "_textDirection");
  var _sortKey = dart.privateName(semantics, "_sortKey");
  var _textSelection = dart.privateName(semantics, "_textSelection");
  var _isMultiline = dart.privateName(semantics, "_isMultiline");
  var _scrollChildCount = dart.privateName(semantics, "_scrollChildCount");
  var _scrollIndex = dart.privateName(semantics, "_scrollIndex");
  var _scrollPosition = dart.privateName(semantics, "_scrollPosition");
  var _scrollExtentMax = dart.privateName(semantics, "_scrollExtentMax");
  var _scrollExtentMin = dart.privateName(semantics, "_scrollExtentMin");
  var _platformViewId = dart.privateName(semantics, "_platformViewId");
  var _maxValueLength = dart.privateName(semantics, "_maxValueLength");
  var _currentValueLength = dart.privateName(semantics, "_currentValueLength");
  var _id = dart.privateName(semantics, "_id");
  var _showOnScreen = dart.privateName(semantics, "_showOnScreen");
  var _markDirty = dart.privateName(semantics, "_markDirty");
  var _debugPreviousSnapshot = dart.privateName(semantics, "_debugPreviousSnapshot");
  var _replaceChildren = dart.privateName(semantics, "_replaceChildren");
  var _visitDescendants = dart.privateName(semantics, "_visitDescendants");
  var _nodes = dart.privateName(semantics, "_nodes");
  var _detachedNodes = dart.privateName(semantics, "_detachedNodes");
  var _dirtyNodes = dart.privateName(semantics, "_dirtyNodes");
  var _isDifferentFromCurrentSemanticAnnotation = dart.privateName(semantics, "_isDifferentFromCurrentSemanticAnnotation");
  var _canPerformAction = dart.privateName(semantics, "_canPerformAction");
  var _childrenInTraversalOrder = dart.privateName(semantics, "_childrenInTraversalOrder");
  var _addToUpdate = dart.privateName(semantics, "_addToUpdate");
  var _name = dart.privateName(diagnostics, "_name");
  var _name$ = dart.privateName(semantics, "_name");
  const AbstractNode_DiagnosticableTreeMixin$36 = class AbstractNode_DiagnosticableTreeMixin extends node.AbstractNode {};
  (AbstractNode_DiagnosticableTreeMixin$36.new = function() {
    AbstractNode_DiagnosticableTreeMixin$36.__proto__.new.call(this);
  }).prototype = AbstractNode_DiagnosticableTreeMixin$36.prototype;
  dart.applyMixin(AbstractNode_DiagnosticableTreeMixin$36, diagnostics.DiagnosticableTreeMixin);
  semantics.SemanticsNode = class SemanticsNode extends AbstractNode_DiagnosticableTreeMixin$36 {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get parentSemanticsClipRect() {
      return this[parentSemanticsClipRect];
    }
    set parentSemanticsClipRect(value) {
      this[parentSemanticsClipRect] = value;
    }
    get parentPaintClipRect() {
      return this[parentPaintClipRect];
    }
    set parentPaintClipRect(value) {
      this[parentPaintClipRect] = value;
    }
    get elevationAdjustment() {
      return this[elevationAdjustment];
    }
    set elevationAdjustment(value) {
      this[elevationAdjustment] = value;
    }
    get indexInParent() {
      return this[indexInParent];
    }
    set indexInParent(value) {
      this[indexInParent] = value;
    }
    get tags() {
      return this[tags];
    }
    set tags(value) {
      this[tags] = value;
    }
    static _generateNewId() {
      semantics.SemanticsNode._lastIdentifier = (semantics.SemanticsNode._lastIdentifier + 1)[$modulo](65535);
      return semantics.SemanticsNode._lastIdentifier;
    }
    get id() {
      return this[_id];
    }
    get transform() {
      return this[_transform];
    }
    set transform(value) {
      if (!matrix_utils.MatrixUtils.matrixEquals(this[_transform], value)) {
        this[_transform] = value == null || matrix_utils.MatrixUtils.isIdentity(value) ? null : value;
        this[_markDirty]();
      }
    }
    get rect() {
      return this[_rect];
    }
    set rect(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 1283, 12, "value != null");
      if (!value.isFinite) dart.assertFailed(dart.str(this) + " (with " + dart.str(this.owner) + ") tried to set a non-finite rect.", I[1], 1284, 12, "value.isFinite");
      if (!this[_rect]._equals(value)) {
        this[_rect] = value;
        this[_markDirty]();
      }
    }
    get isInvisible() {
      return !this.isMergedIntoParent && this.rect.isEmpty;
    }
    get isMergedIntoParent() {
      return this[_isMergedIntoParent];
    }
    set isMergedIntoParent(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 1368, 12, "value != null");
      if (this[_isMergedIntoParent] === value) return;
      this[_isMergedIntoParent] = value;
      this[_markDirty]();
    }
    get isPartOfNodeMerging() {
      return this.mergeAllDescendantsIntoThisNode || this.isMergedIntoParent;
    }
    get mergeAllDescendantsIntoThisNode() {
      return this[_mergeAllDescendantsIntoThisNode];
    }
    get [_debugPreviousSnapshot]() {
      let t2;
      t2 = this[__SemanticsNode__debugPreviousSnapshot];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_debugPreviousSnapshot")) : t2;
    }
    set [_debugPreviousSnapshot](t2) {
      this[__SemanticsNode__debugPreviousSnapshot] = t2;
    }
    [_replaceChildren](newChildren) {
      let t4;
      if (!!newChildren[$any](dart.fn(child => child[$_equals](this), T.SemanticsNodeTobool()))) dart.assertFailed(null, I[1], 1402, 12, "!newChildren.any((SemanticsNode child) => child == this)");
      if (!dart.fn(() => {
        if (newChildren === this[_children]) {
          let mutationErrors = T.JSArrayOfDiagnosticsNode().of([]);
          if (newChildren[$length] !== this[_debugPreviousSnapshot][$length]) {
            mutationErrors[$add](new assertions.ErrorDescription.new("The list's length has changed from " + dart.str(this[_debugPreviousSnapshot][$length]) + " " + "to " + dart.str(newChildren[$length]) + "."));
          } else {
            for (let i = 0; i < newChildren[$length]; i = i + 1) {
              if (newChildren[$_get](i) !== this[_debugPreviousSnapshot][$_get](i)) {
                if (mutationErrors[$isNotEmpty]) {
                  mutationErrors[$add](new assertions.ErrorSpacer.new());
                }
                mutationErrors[$add](new assertions.ErrorDescription.new("Child node at position " + dart.str(i) + " was replaced:"));
                mutationErrors[$add](newChildren[$_get](i).toDiagnosticsNode({name: "Previous child", style: diagnostics.DiagnosticsTreeStyle.singleLine}));
                mutationErrors[$add](this[_debugPreviousSnapshot][$_get](i).toDiagnosticsNode({name: "New child", style: diagnostics.DiagnosticsTreeStyle.singleLine}));
              }
            }
          }
          if (mutationErrors[$isNotEmpty]) {
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t3 = T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Failed to replace child semantics nodes because the list of `SemanticsNode`s was mutated."), new assertions.ErrorHint.new("Instead of mutating the existing list, create a new list containing the desired `SemanticsNode`s."), new assertions.ErrorDescription.new("Error details:")]);
              t3[$addAll](mutationErrors);
              return t3;
            })()));
          }
        }
        if (!(!newChildren[$any](dart.fn(node => node.isMergedIntoParent, T.SemanticsNodeTobool())) || this.isPartOfNodeMerging)) dart.assertFailed(null, I[1], 1432, 14, "!newChildren.any((SemanticsNode node) => node.isMergedIntoParent) || isPartOfNodeMerging");
        this[_debugPreviousSnapshot] = T.ListOfSemanticsNode().from(newChildren);
        let ancestor = this;
        while (semantics.SemanticsNode.is(ancestor.parent))
          ancestor = dart.nullCheck(ancestor.parent);
        if (!!newChildren[$any](dart.fn(child => child[$_equals](ancestor), T.SemanticsNodeTobool()))) dart.assertFailed(null, I[1], 1439, 14, "!newChildren.any((SemanticsNode child) => child == ancestor)");
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1403, 12, "() {\r\n      if (identical(newChildren, _children)) {\r\n        final List<DiagnosticsNode> mutationErrors = <DiagnosticsNode>[];\r\n        if (newChildren.length != _debugPreviousSnapshot.length) {\r\n          mutationErrors.add(ErrorDescription(\r\n            \"The list's length has changed from ${_debugPreviousSnapshot.length} \"\r\n            'to ${newChildren.length}.',\r\n          ));\r\n        } else {\r\n          for (int i = 0; i < newChildren.length; i++) {\r\n            if (!identical(newChildren[i], _debugPreviousSnapshot[i])) {\r\n              if (mutationErrors.isNotEmpty) {\r\n                mutationErrors.add(ErrorSpacer());\r\n              }\r\n              mutationErrors.add(ErrorDescription('Child node at position $i was replaced:'));\r\n              mutationErrors.add(newChildren[i].toDiagnosticsNode(name: 'Previous child', style: DiagnosticsTreeStyle.singleLine));\r\n              mutationErrors.add(_debugPreviousSnapshot[i].toDiagnosticsNode(name: 'New child', style: DiagnosticsTreeStyle.singleLine));\r\n            }\r\n          }\r\n        }\r\n        if (mutationErrors.isNotEmpty) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Failed to replace child semantics nodes because the list of `SemanticsNode`s was mutated.'),\r\n            ErrorHint('Instead of mutating the existing list, create a new list containing the desired `SemanticsNode`s.'),\r\n            ErrorDescription('Error details:'),\r\n            ...mutationErrors,\r\n          ]);\r\n        }\r\n      }\r\n      assert(!newChildren.any((SemanticsNode node) => node.isMergedIntoParent) || isPartOfNodeMerging);\r\n\r\n      _debugPreviousSnapshot = List<SemanticsNode>.from(newChildren);\r\n\r\n      SemanticsNode ancestor = this;\r\n      while (ancestor.parent is SemanticsNode)\r\n        ancestor = ancestor.parent!;\r\n      assert(!newChildren.any((SemanticsNode child) => child == ancestor));\r\n      return true;\r\n    }()");
      if (!dart.fn(() => {
        let seenChildren = T.LinkedHashSetOfSemanticsNode().new();
        for (let child of newChildren)
          if (!seenChildren.add(child)) dart.assertFailed(null, I[1], 1445, 16, "seenChildren.add(child)");
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1442, 12, "() {\r\n      final Set<SemanticsNode> seenChildren = <SemanticsNode>{};\r\n      for (final SemanticsNode child in newChildren)\r\n        assert(seenChildren.add(child)); // check for duplicate adds\r\n      return true;\r\n    }()");
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children]))
          child[_dead] = true;
      }
      for (let child of newChildren) {
        if (!!child.isInvisible) dart.assertFailed("Child " + dart.str(child) + " is invisible and should not be added as a child of " + dart.str(this) + ".", I[1], 1455, 14, "!child.isInvisible");
        child[_dead] = false;
      }
      let sawChange = false;
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (child[_dead]) {
            if (dart.equals(child.parent, this)) {
              this.dropChild(child);
            }
            sawChange = true;
          }
        }
      }
      for (let child of newChildren) {
        if (!dart.equals(child.parent, this)) {
          if (child.parent != null) {
            t4 = child.parent;
            t4 == null ? null : t4.dropChild(child);
          }
          if (!!child.attached) dart.assertFailed(null, I[1], 1481, 16, "!child.attached");
          this.adoptChild(child);
          sawChange = true;
        }
      }
      if (!sawChange && this[_children] != null) {
        if (!(newChildren !== null)) dart.assertFailed(null, I[1], 1487, 14, "newChildren != null");
        if (!(newChildren[$length] === dart.nullCheck(this[_children])[$length])) dart.assertFailed(null, I[1], 1488, 14, "newChildren.length == _children!.length");
        for (let i = 0; i < dart.nullCheck(this[_children])[$length]; i = i + 1) {
          if (dart.nullCheck(this[_children])[$_get](i).id !== newChildren[$_get](i).id) {
            sawChange = true;
            break;
          }
        }
      }
      this[_children] = newChildren;
      if (sawChange) this[_markDirty]();
    }
    get hasChildren() {
      let t4, t4$;
      t4$ = (t4 = this[_children], t4 == null ? null : t4[$isNotEmpty]);
      return t4$ == null ? false : t4$;
    }
    get childrenCount() {
      return this.hasChildren ? dart.nullCheck(this[_children])[$length] : 0;
    }
    visitChildren(visitor) {
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (!visitor(child)) return;
        }
      }
    }
    [_visitDescendants](visitor) {
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (!visitor(child) || !child[_visitDescendants](visitor)) return false;
        }
      }
      return true;
    }
    get owner() {
      return T.SemanticsOwnerN().as(super.owner);
    }
    get parent() {
      return T.SemanticsNodeN().as(super.parent);
    }
    redepthChildren() {
      let t4;
      t4 = this[_children];
      t4 == null ? null : t4[$forEach](dart.bind(this, 'redepthChild'));
    }
    attach(owner) {
      semantics.SemanticsOwner.as(owner);
      super.attach(owner);
      while (owner[_nodes][$containsKey](this.id)) {
        this[_id] = semantics.SemanticsNode._generateNewId();
      }
      owner[_nodes][$_set](this.id, this);
      owner[_detachedNodes].remove(this);
      if (this[_dirty]) {
        this[_dirty] = false;
        this[_markDirty]();
      }
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children]))
          child.attach(owner);
      }
    }
    detach() {
      if (!dart.nullCheck(this.owner)[_nodes][$containsKey](this.id)) dart.assertFailed(null, I[1], 1573, 12, "owner!._nodes.containsKey(id)");
      if (!!dart.nullCheck(this.owner)[_detachedNodes].contains(this)) dart.assertFailed(null, I[1], 1574, 12, "!owner!._detachedNodes.contains(this)");
      dart.nullCheck(this.owner)[_nodes][$remove](this.id);
      dart.nullCheck(this.owner)[_detachedNodes].add(this);
      super.detach();
      if (!(this.owner == null)) dart.assertFailed(null, I[1], 1578, 12, "owner == null");
      if (this[_children] != null) {
        for (let child of dart.nullCheck(this[_children])) {
          if (dart.equals(child.parent, this)) child.detach();
        }
      }
      this[_markDirty]();
    }
    [_markDirty]() {
      if (this[_dirty]) return;
      this[_dirty] = true;
      if (this.attached) {
        if (!!dart.nullCheck(this.owner)[_detachedNodes].contains(this)) dart.assertFailed(null, I[1], 1601, 14, "!owner!._detachedNodes.contains(this)");
        dart.nullCheck(this.owner)[_dirtyNodes].add(this);
      }
    }
    [_isDifferentFromCurrentSemanticAnnotation](config) {
      return this[_label] !== config.label || this[_hint] !== config.hint || this[_elevation] !== config.elevation || this[_thickness] !== config.thickness || this[_decreasedValue] !== config.decreasedValue || this[_value] !== config.value || this[_increasedValue] !== config.increasedValue || this[_flags] !== config[_flags] || this[_textDirection] != config.textDirection || !dart.equals(this[_sortKey], config[_sortKey]) || !dart.equals(this[_textSelection], config[_textSelection]) || this[_scrollPosition] != config[_scrollPosition] || this[_scrollExtentMax] != config[_scrollExtentMax] || this[_scrollExtentMin] != config[_scrollExtentMin] || this[_actionsAsBits] !== config[_actionsAsBits] || this.indexInParent != config.indexInParent || this.platformViewId != config.platformViewId || this[_maxValueLength] != config[_maxValueLength] || this[_currentValueLength] != config[_currentValueLength] || this[_mergeAllDescendantsIntoThisNode] !== config.isMergingSemanticsOfDescendants;
    }
    isTagged(tag) {
      return this.tags != null && dart.nullCheck(this.tags).contains(tag);
    }
    hasFlag(flag) {
      return (this[_flags] & flag.index) !== 0;
    }
    get label() {
      return this[_label];
    }
    get value() {
      return this[_value];
    }
    get decreasedValue() {
      return this[_decreasedValue];
    }
    get increasedValue() {
      return this[_increasedValue];
    }
    get hint() {
      return this[_hint];
    }
    get elevation() {
      return this[_elevation];
    }
    get thickness() {
      return this[_thickness];
    }
    get hintOverrides() {
      return this[_hintOverrides];
    }
    get textDirection() {
      return this[_textDirection];
    }
    get sortKey() {
      return this[_sortKey];
    }
    get textSelection() {
      return this[_textSelection];
    }
    get isMultiline() {
      return this[_isMultiline];
    }
    get scrollChildCount() {
      return this[_scrollChildCount];
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    get platformViewId() {
      return this[_platformViewId];
    }
    get maxValueLength() {
      return this[_maxValueLength];
    }
    get currentValueLength() {
      return this[_currentValueLength];
    }
    [_canPerformAction](action) {
      return this[_actions][$containsKey](action);
    }
    updateWith(opts) {
      let t4;
      let config = opts && 'config' in opts ? opts.config : null;
      let childrenInInversePaintOrder = opts && 'childrenInInversePaintOrder' in opts ? opts.childrenInInversePaintOrder : null;
      config == null ? config = semantics.SemanticsNode._kEmptyConfig : null;
      if (this[_isDifferentFromCurrentSemanticAnnotation](config)) this[_markDirty]();
      if (!(config.platformViewId == null || childrenInInversePaintOrder == null || childrenInInversePaintOrder[$isEmpty])) dart.assertFailed("SemanticsNodes with children must not specify a platformViewId.", I[1], 1887, 7, "config.platformViewId == null || childrenInInversePaintOrder == null || childrenInInversePaintOrder.isEmpty");
      this[_label] = config.label;
      this[_decreasedValue] = config.decreasedValue;
      this[_value] = config.value;
      this[_increasedValue] = config.increasedValue;
      this[_hint] = config.hint;
      this[_hintOverrides] = config.hintOverrides;
      this[_elevation] = config.elevation;
      this[_thickness] = config.thickness;
      this[_flags] = config[_flags];
      this[_textDirection] = config.textDirection;
      this[_sortKey] = config.sortKey;
      this[_actions] = T.LinkedHashMapOfSemanticsAction$ObjectNTovoid().from(config[_actions]);
      this[_customSemanticsActions] = T.LinkedHashMapOfCustomSemanticsAction$VoidTovoid().from(config[_customSemanticsActions]);
      this[_actionsAsBits] = config[_actionsAsBits];
      this[_textSelection] = config[_textSelection];
      this[_isMultiline] = config.isMultiline;
      this[_scrollPosition] = config[_scrollPosition];
      this[_scrollExtentMax] = config[_scrollExtentMax];
      this[_scrollExtentMin] = config[_scrollExtentMin];
      this[_mergeAllDescendantsIntoThisNode] = config.isMergingSemanticsOfDescendants;
      this[_scrollChildCount] = config.scrollChildCount;
      this[_scrollIndex] = config.scrollIndex;
      this.indexInParent = config.indexInParent;
      this[_platformViewId] = config[_platformViewId];
      this[_maxValueLength] = config[_maxValueLength];
      this[_currentValueLength] = config[_currentValueLength];
      this[_replaceChildren]((t4 = childrenInInversePaintOrder, t4 == null ? C[0] || CT.C0 : t4));
      if (!(!this[_canPerformAction](ui.SemanticsAction.increase) || this[_value] === "" === (this[_increasedValue] === ""))) dart.assertFailed("A SemanticsNode with action \"increase\" needs to be annotated with either both \"value\" and \"increasedValue\" or neither", I[1], 1920, 7, "!_canPerformAction(SemanticsAction.increase) || (_value == '') == (_increasedValue == '')");
      if (!(!this[_canPerformAction](ui.SemanticsAction.decrease) || this[_value] === "" === (this[_decreasedValue] === ""))) dart.assertFailed("A SemanticsNode with action \"increase\" needs to be annotated with either both \"value\" and \"decreasedValue\" or neither", I[1], 1924, 7, "!_canPerformAction(SemanticsAction.decrease) || (_value == '') == (_decreasedValue == '')");
    }
    getSemanticsData() {
      let t4;
      let flags = this[_flags];
      let actions = this[_actionsAsBits];
      let label = this[_label];
      let hint = this[_hint];
      let value = this[_value];
      let increasedValue = this[_increasedValue];
      let decreasedValue = this[_decreasedValue];
      let textDirection = this[_textDirection];
      let mergedTags = this.tags == null ? null : T.LinkedHashSetOfSemanticsTag().from(dart.nullCheck(this.tags));
      let textSelection = this[_textSelection];
      let scrollChildCount = this[_scrollChildCount];
      let scrollIndex = this[_scrollIndex];
      let scrollPosition = this[_scrollPosition];
      let scrollExtentMax = this[_scrollExtentMax];
      let scrollExtentMin = this[_scrollExtentMin];
      let platformViewId = this[_platformViewId];
      let maxValueLength = this[_maxValueLength];
      let currentValueLength = this[_currentValueLength];
      let elevation = this[_elevation];
      let thickness = this[_thickness];
      let customSemanticsActionIds = T.LinkedHashSetOfint().new();
      for (let action of this[_customSemanticsActions][$keys])
        customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
      if (this.hintOverrides != null) {
        if (dart.nullCheck(this.hintOverrides).onTapHint != null) {
          let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(this.hintOverrides).onTapHint), action: ui.SemanticsAction.tap});
          customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
        }
        if (dart.nullCheck(this.hintOverrides).onLongPressHint != null) {
          let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(this.hintOverrides).onLongPressHint), action: ui.SemanticsAction.longPress});
          customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
        }
      }
      if (this.mergeAllDescendantsIntoThisNode) {
        this[_visitDescendants](dart.fn(node => {
          if (!node.isMergedIntoParent) dart.assertFailed(null, I[1], 1978, 16, "node.isMergedIntoParent");
          flags = (flags | node[_flags]) >>> 0;
          actions = (actions | node[_actionsAsBits]) >>> 0;
          textDirection == null ? textDirection = node[_textDirection] : null;
          textSelection == null ? textSelection = node[_textSelection] : null;
          scrollChildCount == null ? scrollChildCount = node[_scrollChildCount] : null;
          scrollIndex == null ? scrollIndex = node[_scrollIndex] : null;
          scrollPosition == null ? scrollPosition = node[_scrollPosition] : null;
          scrollExtentMax == null ? scrollExtentMax = node[_scrollExtentMax] : null;
          scrollExtentMin == null ? scrollExtentMin = node[_scrollExtentMin] : null;
          platformViewId == null ? platformViewId = node[_platformViewId] : null;
          maxValueLength == null ? maxValueLength = node[_maxValueLength] : null;
          currentValueLength == null ? currentValueLength = node[_currentValueLength] : null;
          if (value === "" || value === null) value = node[_value];
          if (increasedValue === "" || increasedValue === null) increasedValue = node[_increasedValue];
          if (decreasedValue === "" || decreasedValue === null) decreasedValue = node[_decreasedValue];
          if (node.tags != null) {
            mergedTags == null ? mergedTags = T.LinkedHashSetOfSemanticsTag().new() : null;
            dart.nullCheck(mergedTags).addAll(dart.nullCheck(node.tags));
          }
          for (let action of this[_customSemanticsActions][$keys])
            customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
          if (node.hintOverrides != null) {
            if (dart.nullCheck(node.hintOverrides).onTapHint != null) {
              let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(node.hintOverrides).onTapHint), action: ui.SemanticsAction.tap});
              customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
            }
            if (dart.nullCheck(node.hintOverrides).onLongPressHint != null) {
              let action = new semantics.CustomSemanticsAction.overridingAction({hint: dart.nullCheck(dart.nullCheck(node.hintOverrides).onLongPressHint), action: ui.SemanticsAction.longPress});
              customSemanticsActionIds.add(semantics.CustomSemanticsAction.getIdentifier(action));
            }
          }
          label = semantics._concatStrings({thisString: label, thisTextDirection: textDirection, otherString: node[_label], otherTextDirection: node[_textDirection]});
          hint = semantics._concatStrings({thisString: hint, thisTextDirection: textDirection, otherString: node[_hint], otherTextDirection: node[_textDirection]});
          thickness = math.max(core.double, thickness, node[_thickness] + node[_elevation]);
          return true;
        }, T.SemanticsNodeTobool()));
      }
      return new semantics.SemanticsData.new({flags: flags, actions: actions, label: label, value: value, increasedValue: increasedValue, decreasedValue: decreasedValue, hint: hint, textDirection: textDirection, rect: this.rect, transform: this.transform, elevation: elevation, thickness: thickness, tags: mergedTags, textSelection: textSelection, scrollChildCount: scrollChildCount, scrollIndex: scrollIndex, scrollPosition: scrollPosition, scrollExtentMax: scrollExtentMax, scrollExtentMin: scrollExtentMin, platformViewId: platformViewId, maxValueLength: maxValueLength, currentValueLength: currentValueLength, customSemanticsActionIds: (t4 = customSemanticsActionIds[$toList](), (() => {
          t4[$sort]();
          return t4;
        })())});
    }
    static _initIdentityTransform() {
      return vector_math_64.Matrix4.identity().storage;
    }
    [_addToUpdate](builder, customSemanticsActionIdsUpdate) {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6, t4$7, t4$8, t4$9;
      if (!this[_dirty]) dart.assertFailed(null, I[1], 2074, 12, "_dirty");
      let data = this.getSemanticsData();
      let childrenInTraversalOrder = null;
      let childrenInHitTestOrder = null;
      if (!this.hasChildren || this.mergeAllDescendantsIntoThisNode) {
        childrenInTraversalOrder = semantics.SemanticsNode._kEmptyChildList;
        childrenInHitTestOrder = semantics.SemanticsNode._kEmptyChildList;
      } else {
        let childCount = dart.nullCheck(this[_children])[$length];
        let sortedChildren = this[_childrenInTraversalOrder]();
        childrenInTraversalOrder = _native_typed_data.NativeInt32List.new(childCount);
        for (let i = 0; i < childCount; i = i + 1) {
          childrenInTraversalOrder[$_set](i, sortedChildren[$_get](i).id);
        }
        childrenInHitTestOrder = _native_typed_data.NativeInt32List.new(childCount);
        for (let i = childCount - 1; i >= 0; i = i - 1) {
          childrenInHitTestOrder[$_set](i, dart.nullCheck(this[_children])[$_get](childCount - i - 1).id);
        }
      }
      let customSemanticsActionIds = null;
      if ((t4 = data.customSemanticsActionIds, t4 == null ? null : t4[$isNotEmpty]) === true) {
        customSemanticsActionIds = _native_typed_data.NativeInt32List.new(dart.nullCheck(data.customSemanticsActionIds)[$length]);
        for (let i = 0; i < dart.nullCheck(data.customSemanticsActionIds)[$length]; i = i + 1) {
          customSemanticsActionIds[$_set](i, dart.nullCheck(data.customSemanticsActionIds)[$_get](i));
          customSemanticsActionIdsUpdate.add(dart.nullCheck(data.customSemanticsActionIds)[$_get](i));
        }
      }
      builder.updateNode({id: this.id, flags: data.flags, actions: data.actions, rect: data.rect, label: data.label, value: data.value, decreasedValue: data.decreasedValue, increasedValue: data.increasedValue, hint: data.hint, textDirection: data.textDirection, textSelectionBase: data.textSelection != null ? dart.nullCheck(data.textSelection).baseOffset : -1, textSelectionExtent: data.textSelection != null ? dart.nullCheck(data.textSelection).extentOffset : -1, platformViewId: (t4$ = data.platformViewId, t4$ == null ? -1 : t4$), maxValueLength: (t4$0 = data.maxValueLength, t4$0 == null ? -1 : t4$0), currentValueLength: (t4$1 = data.currentValueLength, t4$1 == null ? -1 : t4$1), scrollChildren: (t4$2 = data.scrollChildCount, t4$2 == null ? 0 : t4$2), scrollIndex: (t4$3 = data.scrollIndex, t4$3 == null ? 0 : t4$3), scrollPosition: (t4$4 = data.scrollPosition, t4$4 == null ? 0 / 0 : t4$4), scrollExtentMax: (t4$5 = data.scrollExtentMax, t4$5 == null ? 0 / 0 : t4$5), scrollExtentMin: (t4$6 = data.scrollExtentMin, t4$6 == null ? 0 / 0 : t4$6), transform: (t4$8 = (t4$7 = data.transform, t4$7 == null ? null : t4$7.storage), t4$8 == null ? semantics.SemanticsNode._kIdentityTransform : t4$8), elevation: data.elevation, thickness: data.thickness, childrenInTraversalOrder: childrenInTraversalOrder, childrenInHitTestOrder: childrenInHitTestOrder, additionalActions: (t4$9 = customSemanticsActionIds, t4$9 == null ? semantics.SemanticsNode._kEmptyCustomSemanticsActionsList : t4$9)});
      this[_dirty] = false;
    }
    [_childrenInTraversalOrder]() {
      let inheritedTextDirection = this.textDirection;
      let ancestor = this.parent;
      while (inheritedTextDirection == null && ancestor != null) {
        inheritedTextDirection = ancestor.textDirection;
        ancestor = ancestor.parent;
      }
      let childrenInDefaultOrder = null;
      if (inheritedTextDirection != null) {
        childrenInDefaultOrder = semantics._childrenInDefaultOrder(dart.nullCheck(this[_children]), inheritedTextDirection);
      } else {
        childrenInDefaultOrder = this[_children];
      }
      let everythingSorted = T.JSArrayOf_TraversalSortNode().of([]);
      let sortNodes = T.JSArrayOf_TraversalSortNode().of([]);
      let lastSortKey = null;
      for (let position = 0; position < dart.nullCheck(childrenInDefaultOrder)[$length]; position = position + 1) {
        let child = childrenInDefaultOrder[$_get](position);
        let sortKey = child.sortKey;
        lastSortKey = position > 0 ? childrenInDefaultOrder[$_get](position - 1).sortKey : null;
        let isCompatibleWithPreviousSortKey = position === 0 || dart.runtimeType(sortKey)._equals(dart.runtimeType(lastSortKey)) && (sortKey == null || sortKey.name == dart.nullCheck(lastSortKey).name);
        if (!isCompatibleWithPreviousSortKey && sortNodes[$isNotEmpty]) {
          if (lastSortKey != null) {
            sortNodes[$sort]();
          }
          everythingSorted[$addAll](sortNodes);
          sortNodes[$clear]();
        }
        sortNodes[$add](new semantics._TraversalSortNode.new({node: child, sortKey: sortKey, position: position}));
      }
      if (lastSortKey != null) {
        sortNodes[$sort]();
      }
      everythingSorted[$addAll](sortNodes);
      return everythingSorted[$map](semantics.SemanticsNode, dart.fn(sortNode => sortNode.node, T._TraversalSortNodeToSemanticsNode()))[$toList]();
    }
    sendEvent(event) {
      if (!this.attached) return;
      system_channels.SystemChannels.accessibility.send(event.toMap({nodeId: this.id}));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsNode") + "#" + dart.str(this.id);
=======
  text_theme.CupertinoTextThemeData = class CupertinoTextThemeData extends Object_Diagnosticable$36 {
    get [_defaults]() {
      return this[_defaults$];
    }
    set [_defaults](value) {
      super[_defaults] = value;
    }
    get [_primaryColor]() {
      return this[_primaryColor$];
    }
    set [_primaryColor](value) {
      super[_primaryColor] = value;
    }
    get [_textStyle]() {
      return this[_textStyle$];
    }
    set [_textStyle](value) {
      super[_textStyle] = value;
    }
    get [_actionTextStyle]() {
      return this[_actionTextStyle$];
    }
    set [_actionTextStyle](value) {
      super[_actionTextStyle] = value;
    }
    get [_tabLabelTextStyle]() {
      return this[_tabLabelTextStyle$];
    }
    set [_tabLabelTextStyle](value) {
      super[_tabLabelTextStyle] = value;
    }
    get [_navTitleTextStyle]() {
      return this[_navTitleTextStyle$];
    }
    set [_navTitleTextStyle](value) {
      super[_navTitleTextStyle] = value;
    }
    get [_navLargeTitleTextStyle]() {
      return this[_navLargeTitleTextStyle$];
    }
    set [_navLargeTitleTextStyle](value) {
      super[_navLargeTitleTextStyle] = value;
    }
    get [_navActionTextStyle]() {
      return this[_navActionTextStyle$];
    }
    set [_navActionTextStyle](value) {
      super[_navActionTextStyle] = value;
    }
    get [_pickerTextStyle]() {
      return this[_pickerTextStyle$];
    }
    set [_pickerTextStyle](value) {
      super[_pickerTextStyle] = value;
    }
    get [_dateTimePickerTextStyle]() {
      return this[_dateTimePickerTextStyle$];
    }
    set [_dateTimePickerTextStyle](value) {
      super[_dateTimePickerTextStyle] = value;
    }
    get textStyle() {
      let t0;
      t0 = this[_textStyle];
      return t0 == null ? this[_defaults].textStyle : t0;
    }
    get actionTextStyle() {
      let t0;
      t0 = this[_actionTextStyle];
      return t0 == null ? this[_defaults].actionTextStyle({primaryColor: this[_primaryColor]}) : t0;
    }
    get tabLabelTextStyle() {
      let t0;
      t0 = this[_tabLabelTextStyle];
      return t0 == null ? this[_defaults].tabLabelTextStyle : t0;
    }
    get navTitleTextStyle() {
      let t0;
      t0 = this[_navTitleTextStyle];
      return t0 == null ? this[_defaults].navTitleTextStyle : t0;
    }
    get navLargeTitleTextStyle() {
      let t0;
      t0 = this[_navLargeTitleTextStyle];
      return t0 == null ? this[_defaults].navLargeTitleTextStyle : t0;
    }
    get navActionTextStyle() {
      let t0;
      t0 = this[_navActionTextStyle];
      return t0 == null ? this[_defaults].navActionTextStyle({primaryColor: this[_primaryColor]}) : t0;
    }
    get pickerTextStyle() {
      let t0;
      t0 = this[_pickerTextStyle];
      return t0 == null ? this[_defaults].pickerTextStyle : t0;
    }
    get dateTimePickerTextStyle() {
      let t0;
      t0 = this[_dateTimePickerTextStyle];
      return t0 == null ? this[_defaults].dateTimePickerTextStyle : t0;
    }
    resolveFrom(context) {
      return new text_theme.CupertinoTextThemeData._raw(this[_defaults].resolveFrom(context), colors$.CupertinoDynamicColor.maybeResolve(this[_primaryColor], context), text_theme._resolveTextStyle(this[_textStyle], context), text_theme._resolveTextStyle(this[_actionTextStyle], context), text_theme._resolveTextStyle(this[_tabLabelTextStyle], context), text_theme._resolveTextStyle(this[_navTitleTextStyle], context), text_theme._resolveTextStyle(this[_navLargeTitleTextStyle], context), text_theme._resolveTextStyle(this[_navActionTextStyle], context), text_theme._resolveTextStyle(this[_pickerTextStyle], context), text_theme._resolveTextStyle(this[_dateTimePickerTextStyle], context));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let actionTextStyle = opts && 'actionTextStyle' in opts ? opts.actionTextStyle : null;
      let tabLabelTextStyle = opts && 'tabLabelTextStyle' in opts ? opts.tabLabelTextStyle : null;
      let navTitleTextStyle = opts && 'navTitleTextStyle' in opts ? opts.navTitleTextStyle : null;
      let navLargeTitleTextStyle = opts && 'navLargeTitleTextStyle' in opts ? opts.navLargeTitleTextStyle : null;
      let navActionTextStyle = opts && 'navActionTextStyle' in opts ? opts.navActionTextStyle : null;
      let pickerTextStyle = opts && 'pickerTextStyle' in opts ? opts.pickerTextStyle : null;
      let dateTimePickerTextStyle = opts && 'dateTimePickerTextStyle' in opts ? opts.dateTimePickerTextStyle : null;
      return new text_theme.CupertinoTextThemeData._raw(this[_defaults], (t0 = primaryColor, t0 == null ? this[_primaryColor] : t0), (t0$ = textStyle, t0$ == null ? this[_textStyle] : t0$), (t0$0 = actionTextStyle, t0$0 == null ? this[_actionTextStyle] : t0$0), (t0$1 = tabLabelTextStyle, t0$1 == null ? this[_tabLabelTextStyle] : t0$1), (t0$2 = navTitleTextStyle, t0$2 == null ? this[_navTitleTextStyle] : t0$2), (t0$3 = navLargeTitleTextStyle, t0$3 == null ? this[_navLargeTitleTextStyle] : t0$3), (t0$4 = navActionTextStyle, t0$4 == null ? this[_navActionTextStyle] : t0$4), (t0$5 = pickerTextStyle, t0$5 == null ? this[_pickerTextStyle] : t0$5), (t0$6 = dateTimePickerTextStyle, t0$6 == null ? this[_dateTimePickerTextStyle] : t0$6));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = C[12] || CT.C12;
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle, {defaultValue: defaultData.textStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("actionTextStyle", this.actionTextStyle, {defaultValue: defaultData.actionTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("tabLabelTextStyle", this.tabLabelTextStyle, {defaultValue: defaultData.tabLabelTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("navTitleTextStyle", this.navTitleTextStyle, {defaultValue: defaultData.navTitleTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("navLargeTitleTextStyle", this.navLargeTitleTextStyle, {defaultValue: defaultData.navLargeTitleTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("navActionTextStyle", this.navActionTextStyle, {defaultValue: defaultData.navActionTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("pickerTextStyle", this.pickerTextStyle, {defaultValue: defaultData.pickerTextStyle}));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("dateTimePickerTextStyle", this.dateTimePickerTextStyle, {defaultValue: defaultData.dateTimePickerTextStyle}));
    }
  };
  (text_theme.CupertinoTextThemeData.new = function(opts) {
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : C[0] || CT.C0;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let actionTextStyle = opts && 'actionTextStyle' in opts ? opts.actionTextStyle : null;
    let tabLabelTextStyle = opts && 'tabLabelTextStyle' in opts ? opts.tabLabelTextStyle : null;
    let navTitleTextStyle = opts && 'navTitleTextStyle' in opts ? opts.navTitleTextStyle : null;
    let navLargeTitleTextStyle = opts && 'navLargeTitleTextStyle' in opts ? opts.navLargeTitleTextStyle : null;
    let navActionTextStyle = opts && 'navActionTextStyle' in opts ? opts.navActionTextStyle : null;
    let pickerTextStyle = opts && 'pickerTextStyle' in opts ? opts.pickerTextStyle : null;
    let dateTimePickerTextStyle = opts && 'dateTimePickerTextStyle' in opts ? opts.dateTimePickerTextStyle : null;
    text_theme.CupertinoTextThemeData._raw.call(this, C[5] || CT.C5, primaryColor, textStyle, actionTextStyle, tabLabelTextStyle, navTitleTextStyle, navLargeTitleTextStyle, navActionTextStyle, pickerTextStyle, dateTimePickerTextStyle);
  }).prototype = text_theme.CupertinoTextThemeData.prototype;
  (text_theme.CupertinoTextThemeData._raw = function(_defaults, _primaryColor, _textStyle, _actionTextStyle, _tabLabelTextStyle, _navTitleTextStyle, _navLargeTitleTextStyle, _navActionTextStyle, _pickerTextStyle, _dateTimePickerTextStyle) {
    this[_defaults$] = _defaults;
    this[_primaryColor$] = _primaryColor;
    this[_textStyle$] = _textStyle;
    this[_actionTextStyle$] = _actionTextStyle;
    this[_tabLabelTextStyle$] = _tabLabelTextStyle;
    this[_navTitleTextStyle$] = _navTitleTextStyle;
    this[_navLargeTitleTextStyle$] = _navLargeTitleTextStyle;
    this[_navActionTextStyle$] = _navActionTextStyle;
    this[_pickerTextStyle$] = _pickerTextStyle;
    this[_dateTimePickerTextStyle$] = _dateTimePickerTextStyle;
    if (!(_navActionTextStyle != null && _actionTextStyle != null || _primaryColor != null)) dart.assertFailed(null, I[0], 159, 14, "(_navActionTextStyle != null && _actionTextStyle != null) || _primaryColor != null");
    ;
  }).prototype = text_theme.CupertinoTextThemeData.prototype;
  dart.addTypeTests(text_theme.CupertinoTextThemeData);
  dart.addTypeCaches(text_theme.CupertinoTextThemeData);
  dart.setMethodSignature(text_theme.CupertinoTextThemeData, () => ({
    __proto__: dart.getMethods(text_theme.CupertinoTextThemeData.__proto__),
    resolveFrom: dart.fnType(text_theme.CupertinoTextThemeData, [framework.BuildContext]),
    copyWith: dart.fnType(text_theme.CupertinoTextThemeData, [], {actionTextStyle: dart.nullable(text_style.TextStyle), dateTimePickerTextStyle: dart.nullable(text_style.TextStyle), navActionTextStyle: dart.nullable(text_style.TextStyle), navLargeTitleTextStyle: dart.nullable(text_style.TextStyle), navTitleTextStyle: dart.nullable(text_style.TextStyle), pickerTextStyle: dart.nullable(text_style.TextStyle), primaryColor: dart.nullable(ui.Color), tabLabelTextStyle: dart.nullable(text_style.TextStyle), textStyle: dart.nullable(text_style.TextStyle)}, {})
  }));
  dart.setGetterSignature(text_theme.CupertinoTextThemeData, () => ({
    __proto__: dart.getGetters(text_theme.CupertinoTextThemeData.__proto__),
    textStyle: text_style.TextStyle,
    actionTextStyle: text_style.TextStyle,
    tabLabelTextStyle: text_style.TextStyle,
    navTitleTextStyle: text_style.TextStyle,
    navLargeTitleTextStyle: text_style.TextStyle,
    navActionTextStyle: text_style.TextStyle,
    pickerTextStyle: text_style.TextStyle,
    dateTimePickerTextStyle: text_style.TextStyle
  }));
  dart.setLibraryUri(text_theme.CupertinoTextThemeData, I[1]);
  dart.setFieldSignature(text_theme.CupertinoTextThemeData, () => ({
    __proto__: dart.getFields(text_theme.CupertinoTextThemeData.__proto__),
    [_defaults]: dart.finalFieldType(text_theme._TextThemeDefaultsBuilder),
    [_primaryColor]: dart.finalFieldType(dart.nullable(ui.Color)),
    [_textStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_actionTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_tabLabelTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_navTitleTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_navLargeTitleTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_navActionTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_pickerTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_dateTimePickerTextStyle]: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  const labelColor$ = _TextThemeDefaultsBuilder_labelColor;
  const inactiveGrayColor$ = _TextThemeDefaultsBuilder_inactiveGrayColor;
  text_theme._TextThemeDefaultsBuilder = class _TextThemeDefaultsBuilder extends core.Object {
    get labelColor() {
      return this[labelColor$];
    }
    set labelColor(value) {
      super.labelColor = value;
    }
    get inactiveGrayColor() {
      return this[inactiveGrayColor$];
    }
    set inactiveGrayColor(value) {
      super.inactiveGrayColor = value;
    }
    static _applyLabelColor(original, color) {
      return dart.equals(original.color, color) ? original : original.copyWith({color: color});
    }
    get textStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultTextStyle, this.labelColor);
    }
    get tabLabelTextStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultTabLabelTextStyle, this.inactiveGrayColor);
    }
    get navTitleTextStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultMiddleTitleTextStyle, this.labelColor);
    }
    get navLargeTitleTextStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultLargeTitleTextStyle, this.labelColor);
    }
    get pickerTextStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultPickerTextStyle, this.labelColor);
    }
    get dateTimePickerTextStyle() {
      return text_theme._TextThemeDefaultsBuilder._applyLabelColor(text_theme._kDefaultDateTimePickerTextStyle, this.labelColor);
    }
    actionTextStyle(opts) {
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      return text_theme._kDefaultActionTextStyle.copyWith({color: primaryColor});
    }
    navActionTextStyle(opts) {
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      return this.actionTextStyle({primaryColor: primaryColor});
    }
    resolveFrom(context) {
      let resolvedLabelColor = colors$.CupertinoDynamicColor.resolve(this.labelColor, context);
      let resolvedInactiveGray = colors$.CupertinoDynamicColor.resolve(this.inactiveGrayColor, context);
      return resolvedLabelColor._equals(this.labelColor) && resolvedInactiveGray._equals(colors$.CupertinoColors.inactiveGray) ? this : new text_theme._TextThemeDefaultsBuilder.new(resolvedLabelColor, resolvedInactiveGray);
    }
  };
  (text_theme._TextThemeDefaultsBuilder.new = function(labelColor, inactiveGrayColor) {
    this[labelColor$] = labelColor;
    this[inactiveGrayColor$] = inactiveGrayColor;
    if (!(labelColor !== null)) dart.assertFailed(null, I[0], 271, 14, "labelColor != null");
    if (!(inactiveGrayColor !== null)) dart.assertFailed(null, I[0], 272, 14, "inactiveGrayColor != null");
    ;
  }).prototype = text_theme._TextThemeDefaultsBuilder.prototype;
  dart.addTypeTests(text_theme._TextThemeDefaultsBuilder);
  dart.addTypeCaches(text_theme._TextThemeDefaultsBuilder);
  dart.setMethodSignature(text_theme._TextThemeDefaultsBuilder, () => ({
    __proto__: dart.getMethods(text_theme._TextThemeDefaultsBuilder.__proto__),
    actionTextStyle: dart.fnType(text_style.TextStyle, [], {primaryColor: dart.nullable(ui.Color)}, {}),
    navActionTextStyle: dart.fnType(text_style.TextStyle, [], {primaryColor: dart.nullable(ui.Color)}, {}),
    resolveFrom: dart.fnType(text_theme._TextThemeDefaultsBuilder, [framework.BuildContext])
  }));
  dart.setGetterSignature(text_theme._TextThemeDefaultsBuilder, () => ({
    __proto__: dart.getGetters(text_theme._TextThemeDefaultsBuilder.__proto__),
    textStyle: text_style.TextStyle,
    tabLabelTextStyle: text_style.TextStyle,
    navTitleTextStyle: text_style.TextStyle,
    navLargeTitleTextStyle: text_style.TextStyle,
    pickerTextStyle: text_style.TextStyle,
    dateTimePickerTextStyle: text_style.TextStyle
  }));
  dart.setLibraryUri(text_theme._TextThemeDefaultsBuilder, I[1]);
  dart.setFieldSignature(text_theme._TextThemeDefaultsBuilder, () => ({
    __proto__: dart.getFields(text_theme._TextThemeDefaultsBuilder.__proto__),
    labelColor: dart.finalFieldType(ui.Color),
    inactiveGrayColor: dart.finalFieldType(ui.Color)
  }));
  text_theme._resolveTextStyle = function _resolveTextStyle(style, context) {
    let t0;
    t0 = style;
    return t0 == null ? null : t0.copyWith({color: colors$.CupertinoDynamicColor.maybeResolve(style.color, context), backgroundColor: colors$.CupertinoDynamicColor.maybeResolve(style.backgroundColor, context), decorationColor: colors$.CupertinoDynamicColor.maybeResolve(style.decorationColor, context)});
  };
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextDecoration__mask = dart.privateName(ui, "TextDecoration._mask");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  dart.defineLazy(text_theme, {
    /*text_theme._kDefaultTextStyle*/get _kDefaultTextStyle() {
      return C[13] || CT.C13;
    },
    /*text_theme._kDefaultActionTextStyle*/get _kDefaultActionTextStyle() {
      return C[15] || CT.C15;
    },
    /*text_theme._kDefaultTabLabelTextStyle*/get _kDefaultTabLabelTextStyle() {
      return C[16] || CT.C16;
    },
    /*text_theme._kDefaultMiddleTitleTextStyle*/get _kDefaultMiddleTitleTextStyle() {
      return C[17] || CT.C17;
    },
    /*text_theme._kDefaultLargeTitleTextStyle*/get _kDefaultLargeTitleTextStyle() {
      return C[19] || CT.C19;
    },
    /*text_theme._kDefaultPickerTextStyle*/get _kDefaultPickerTextStyle() {
      return C[21] || CT.C21;
    },
    /*text_theme._kDefaultDateTimePickerTextStyle*/get _kDefaultDateTimePickerTextStyle() {
      return C[23] || CT.C23;
    }
  }, false);
  const IconThemeData_Diagnosticable$36 = class IconThemeData_Diagnosticable extends icon_theme_data.IconThemeData {};
  (IconThemeData_Diagnosticable$36.new = function(opts) {
    IconThemeData_Diagnosticable$36.__proto__.new.call(this, opts);
  }).prototype = IconThemeData_Diagnosticable$36.prototype;
  (IconThemeData_Diagnosticable$36.fallback = function() {
    IconThemeData_Diagnosticable$36.__proto__.fallback.call(this);
  }).prototype = IconThemeData_Diagnosticable$36.prototype;
  dart.applyMixin(IconThemeData_Diagnosticable$36, diagnostics.Diagnosticable);
  icon_theme_data$.CupertinoIconThemeData = class CupertinoIconThemeData extends IconThemeData_Diagnosticable$36 {
    resolve(context) {
      let resolvedColor = colors$.CupertinoDynamicColor.maybeResolve(this.color, context);
      return dart.equals(resolvedColor, this.color) ? this : this.copyWith({color: resolvedColor});
    }
    copyWith(opts) {
      let t0, t0$, t0$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      return new icon_theme_data$.CupertinoIconThemeData.new({color: (t0 = color, t0 == null ? this.color : t0), opacity: (t0$ = opacity, t0$ == null ? this.opacity : t0$), size: (t0$0 = size, t0$0 == null ? this.size : t0$0)});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(colors$.createCupertinoColorProperty("color", this.color, {defaultValue: null}));
    }
  };
  (icon_theme_data$.CupertinoIconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    icon_theme_data$.CupertinoIconThemeData.__proto__.new.call(this, {color: color, opacity: opacity, size: size});
    ;
  }).prototype = icon_theme_data$.CupertinoIconThemeData.prototype;
  dart.addTypeTests(icon_theme_data$.CupertinoIconThemeData);
  dart.addTypeCaches(icon_theme_data$.CupertinoIconThemeData);
  dart.setMethodSignature(icon_theme_data$.CupertinoIconThemeData, () => ({
    __proto__: dart.getMethods(icon_theme_data$.CupertinoIconThemeData.__proto__),
    copyWith: dart.fnType(icon_theme_data$.CupertinoIconThemeData, [], {color: dart.nullable(ui.Color), opacity: dart.nullable(core.double), size: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(icon_theme_data$.CupertinoIconThemeData, I[2]);
  var data$ = dart.privateName(theme$, "CupertinoTheme.data");
  var child$ = dart.privateName(theme$, "CupertinoTheme.child");
  var NoDefaultCupertinoThemeData_scaffoldBackgroundColor = dart.privateName(theme$, "NoDefaultCupertinoThemeData.scaffoldBackgroundColor");
  var NoDefaultCupertinoThemeData_barBackgroundColor = dart.privateName(theme$, "NoDefaultCupertinoThemeData.barBackgroundColor");
  var NoDefaultCupertinoThemeData_textTheme = dart.privateName(theme$, "NoDefaultCupertinoThemeData.textTheme");
  var NoDefaultCupertinoThemeData_primaryContrastingColor = dart.privateName(theme$, "NoDefaultCupertinoThemeData.primaryContrastingColor");
  var NoDefaultCupertinoThemeData_primaryColor = dart.privateName(theme$, "NoDefaultCupertinoThemeData.primaryColor");
  var NoDefaultCupertinoThemeData_brightness = dart.privateName(theme$, "NoDefaultCupertinoThemeData.brightness");
  var _CupertinoTextThemeDefaults_inactiveGray = dart.privateName(theme$, "_CupertinoTextThemeDefaults.inactiveGray");
  var _CupertinoTextThemeDefaults_labelColor = dart.privateName(theme$, "_CupertinoTextThemeDefaults.labelColor");
  var _CupertinoThemeDefaults_textThemeDefaults = dart.privateName(theme$, "_CupertinoThemeDefaults.textThemeDefaults");
  var _CupertinoThemeDefaults_scaffoldBackgroundColor = dart.privateName(theme$, "_CupertinoThemeDefaults.scaffoldBackgroundColor");
  var _CupertinoThemeDefaults_barBackgroundColor = dart.privateName(theme$, "_CupertinoThemeDefaults.barBackgroundColor");
  var _CupertinoThemeDefaults_primaryContrastingColor = dart.privateName(theme$, "_CupertinoThemeDefaults.primaryContrastingColor");
  var _CupertinoThemeDefaults_primaryColor = dart.privateName(theme$, "_CupertinoThemeDefaults.primaryColor");
  var _CupertinoThemeDefaults_brightness = dart.privateName(theme$, "_CupertinoThemeDefaults.brightness");
  var CupertinoThemeData__defaults = dart.privateName(theme$, "CupertinoThemeData._defaults");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  theme$.CupertinoTheme = class CupertinoTheme extends framework.StatelessWidget {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t0, t0$;
      let inheritedTheme = context.dependOnInheritedWidgetOfExactType(theme$._InheritedCupertinoTheme);
      return (t0$ = (t0 = inheritedTheme, t0 == null ? null : t0.theme.data), t0$ == null ? C[24] || CT.C24 : t0$).resolveFrom(context);
    }
    static brightnessOf(context) {
      let t0, t0$;
      let inheritedTheme = context.dependOnInheritedWidgetOfExactType(theme$._InheritedCupertinoTheme);
      t0$ = (t0 = inheritedTheme, t0 == null ? null : t0.theme.data.brightness);
      return t0$ == null ? media_query.MediaQuery.of(context).platformBrightness : t0$;
    }
    static maybeBrightnessOf(context) {
      let t0, t1, t0$;
      let inheritedTheme = context.dependOnInheritedWidgetOfExactType(theme$._InheritedCupertinoTheme);
      t0$ = (t0 = inheritedTheme, t0 == null ? null : t0.theme.data.brightness);
      return t0$ == null ? (t1 = media_query.MediaQuery.maybeOf(context), t1 == null ? null : t1.platformBrightness) : t0$;
    }
    build(context) {
      return new theme$._InheritedCupertinoTheme.new({theme: this, child: new icon_theme.IconTheme.new({data: new icon_theme_data$.CupertinoIconThemeData.new({color: this.data.primaryColor}), child: this.child, $creationLocationd_0dea112b090073317d4: C[33] || CT.C33}), $creationLocationd_0dea112b090073317d4: C[37] || CT.C37});
>>>>>>> AUg2
    }
    debugFillProperties(properties) {
      let t4, t4$, t4$0;
      super.debugFillProperties(properties);
<<<<<<< HEAD
      let hideOwner = true;
      if (this[_dirty]) {
        let inDirtyNodes = this.owner != null && dart.nullCheck(this.owner)[_dirtyNodes].contains(this);
        properties.add(new diagnostics.FlagProperty.new("inDirtyNodes", {value: inDirtyNodes, ifTrue: "dirty", ifFalse: "STALE"}));
        hideOwner = inDirtyNodes;
      }
      properties.add(new (T.DiagnosticsPropertyOfSemanticsOwner()).new("owner", this.owner, {level: hideOwner ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      properties.add(new diagnostics.FlagProperty.new("isMergedIntoParent", {value: this.isMergedIntoParent, ifTrue: "merged up ⬆️"}));
      properties.add(new diagnostics.FlagProperty.new("mergeAllDescendantsIntoThisNode", {value: this.mergeAllDescendantsIntoThisNode, ifTrue: "merge boundary ⛔️"}));
      let offset = this.transform != null ? matrix_utils.MatrixUtils.getAsTranslation(dart.nullCheck(this.transform)) : null;
      if (offset != null) {
        properties.add(new (T.DiagnosticsPropertyOfRect()).new("rect", this.rect.shift(offset), {showName: false}));
      } else {
        let scale = this.transform != null ? matrix_utils.MatrixUtils.getAsScale(dart.nullCheck(this.transform)) : null;
        let description = null;
        if (scale != null) {
          description = dart.str(this.rect) + " scaled by " + scale[$toStringAsFixed](1) + "x";
        } else if (this.transform != null && !matrix_utils.MatrixUtils.isIdentity(dart.nullCheck(this.transform))) {
          let matrix = dart.toString(this.transform)[$split]("\n")[$take](4)[$map](core.String, dart.fn(line => line[$substring](4), T.StringToString()))[$join]("; ");
          description = dart.str(this.rect) + " with transform [" + matrix + "]";
        }
        properties.add(new (T.DiagnosticsPropertyOfRect()).new("rect", this.rect, {description: description, showName: false}));
      }
      properties.add(new (T.IterablePropertyOfString()).new("tags", (t4 = this.tags, t4 == null ? null : t4[$map](core.String, dart.fn(tag => tag.name, T.SemanticsTagToString()))), {defaultValue: null}));
      let actions = (t4$ = this[_actions][$keys][$map](core.String, dart.fn(action => diagnostics.describeEnum(action), T.SemanticsActionToString()))[$toList](), (() => {
        t4$[$sort]();
        return t4$;
      })());
      let customSemanticsActions = this[_customSemanticsActions][$keys][$map](T.StringN(), dart.fn(action => action.label, T.CustomSemanticsActionToStringN()))[$toList]();
      properties.add(new (T.IterablePropertyOfString()).new("actions", actions, {ifEmpty: null}));
      properties.add(new (T.IterablePropertyOfStringN()).new("customActions", customSemanticsActions, {ifEmpty: null}));
      let flags = ui.SemanticsFlag.values[$values][$where](dart.fn(flag => this.hasFlag(flag), T.SemanticsFlagTobool()))[$map](core.String, dart.fn(flag => flag.toString()[$substring]("SemanticsFlag.".length), T.SemanticsFlagToString()))[$toList]();
      properties.add(new (T.IterablePropertyOfString()).new("flags", flags, {ifEmpty: null}));
      properties.add(new diagnostics.FlagProperty.new("isInvisible", {value: this.isInvisible, ifTrue: "invisible"}));
      properties.add(new diagnostics.FlagProperty.new("isHidden", {value: this.hasFlag(ui.SemanticsFlag.isHidden), ifTrue: "HIDDEN"}));
      properties.add(new diagnostics.StringProperty.new("label", this[_label], {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("value", this[_value], {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("increasedValue", this[_increasedValue], {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("decreasedValue", this[_decreasedValue], {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("hint", this[_hint], {defaultValue: ""}));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this[_textDirection], {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfSemanticsSortKey()).new("sortKey", this.sortKey, {defaultValue: null}));
      if ((t4$0 = this[_textSelection], t4$0 == null ? null : t4$0.isValid) === true) properties.add(new diagnostics.MessageProperty.new("text selection", "[" + dart.str(dart.nullCheck(this[_textSelection]).start) + ", " + dart.str(dart.nullCheck(this[_textSelection]).end) + "]"));
      properties.add(new diagnostics.IntProperty.new("platformViewId", this.platformViewId, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("maxValueLength", this.maxValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("currentValueLength", this.currentValueLength, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollChildren", this.scrollChildCount, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("scrollIndex", this.scrollIndex, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMin", this.scrollExtentMin, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollPosition", this.scrollPosition, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("scrollExtentMax", this.scrollExtentMax, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("elevation", this.elevation, {defaultValue: 0.0}));
      properties.add(new diagnostics.DoubleProperty.new("thickness", this.thickness, {defaultValue: 0.0}));
    }
    toStringDeep(opts) {
      let prefixLineOne = opts && 'prefixLineOne' in opts ? opts.prefixLineOne : "";
      let prefixOtherLines = opts && 'prefixOtherLines' in opts ? opts.prefixOtherLines : null;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[1] || CT.C1;
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[2] || CT.C2;
      if (!(childOrder !== null)) dart.assertFailed(null, I[1], 2278, 12, "childOrder != null");
      return this.toDiagnosticsNode({childOrder: childOrder}).toStringDeep({prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel});
    }
    toDiagnosticsNode(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let style = opts && 'style' in opts ? opts.style : C[3] || CT.C3;
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[2] || CT.C2;
      return new semantics._SemanticsDiagnosticableNode.new({name: name, value: this, style: style, childOrder: childOrder});
    }
    debugDescribeChildren(opts) {
      let childOrder = opts && 'childOrder' in opts ? opts.childOrder : C[4] || CT.C4;
      return this.debugListChildrenInOrder(childOrder)[$map](diagnostics.DiagnosticsNode, dart.fn(node => node.toDiagnosticsNode({childOrder: childOrder}), T.SemanticsNodeToDiagnosticsNode()))[$toList]();
    }
    debugListChildrenInOrder(childOrder) {
      if (!(childOrder !== null)) dart.assertFailed(null, I[1], 2305, 12, "childOrder != null");
      if (this[_children] == null) return C[0] || CT.C0;
      switch (childOrder) {
        case C[4] || CT.C4:
        {
          return dart.nullCheck(this[_children]);
        }
        case C[2] || CT.C2:
        {
          return this[_childrenInTraversalOrder]();
        }
      }
    }
  };
  (semantics.SemanticsNode.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
    this[_transform] = null;
    this[_rect] = ui.Rect.zero;
    this[parentSemanticsClipRect] = null;
    this[parentPaintClipRect] = null;
    this[elevationAdjustment] = null;
    this[indexInParent] = null;
    this[_isMergedIntoParent] = false;
    this[_mergeAllDescendantsIntoThisNode] = semantics.SemanticsNode._kEmptyConfig.isMergingSemanticsOfDescendants;
    this[_children] = null;
    this[__SemanticsNode__debugPreviousSnapshot] = null;
    this[_dead] = false;
    this[_dirty] = false;
    this[_actions] = semantics.SemanticsNode._kEmptyConfig[_actions];
    this[_customSemanticsActions] = semantics.SemanticsNode._kEmptyConfig[_customSemanticsActions];
    this[_actionsAsBits] = semantics.SemanticsNode._kEmptyConfig[_actionsAsBits];
    this[tags] = null;
    this[_flags] = semantics.SemanticsNode._kEmptyConfig[_flags];
    this[_label] = semantics.SemanticsNode._kEmptyConfig.label;
    this[_value] = semantics.SemanticsNode._kEmptyConfig.value;
    this[_decreasedValue] = semantics.SemanticsNode._kEmptyConfig.decreasedValue;
    this[_increasedValue] = semantics.SemanticsNode._kEmptyConfig.increasedValue;
    this[_hint] = semantics.SemanticsNode._kEmptyConfig.hint;
    this[_elevation] = semantics.SemanticsNode._kEmptyConfig.elevation;
    this[_thickness] = semantics.SemanticsNode._kEmptyConfig.thickness;
    this[_hintOverrides] = null;
    this[_textDirection] = semantics.SemanticsNode._kEmptyConfig.textDirection;
    this[_sortKey] = null;
    this[_textSelection] = null;
    this[_isMultiline] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[key$] = key;
    this[_id] = semantics.SemanticsNode._generateNewId();
    this[_showOnScreen] = showOnScreen;
    semantics.SemanticsNode.__proto__.new.call(this);
    ;
  }).prototype = semantics.SemanticsNode.prototype;
  (semantics.SemanticsNode.root = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let showOnScreen = opts && 'showOnScreen' in opts ? opts.showOnScreen : null;
    let owner = opts && 'owner' in opts ? opts.owner : null;
    this[_transform] = null;
    this[_rect] = ui.Rect.zero;
    this[parentSemanticsClipRect] = null;
    this[parentPaintClipRect] = null;
    this[elevationAdjustment] = null;
    this[indexInParent] = null;
    this[_isMergedIntoParent] = false;
    this[_mergeAllDescendantsIntoThisNode] = semantics.SemanticsNode._kEmptyConfig.isMergingSemanticsOfDescendants;
    this[_children] = null;
    this[__SemanticsNode__debugPreviousSnapshot] = null;
    this[_dead] = false;
    this[_dirty] = false;
    this[_actions] = semantics.SemanticsNode._kEmptyConfig[_actions];
    this[_customSemanticsActions] = semantics.SemanticsNode._kEmptyConfig[_customSemanticsActions];
    this[_actionsAsBits] = semantics.SemanticsNode._kEmptyConfig[_actionsAsBits];
    this[tags] = null;
    this[_flags] = semantics.SemanticsNode._kEmptyConfig[_flags];
    this[_label] = semantics.SemanticsNode._kEmptyConfig.label;
    this[_value] = semantics.SemanticsNode._kEmptyConfig.value;
    this[_decreasedValue] = semantics.SemanticsNode._kEmptyConfig.decreasedValue;
    this[_increasedValue] = semantics.SemanticsNode._kEmptyConfig.increasedValue;
    this[_hint] = semantics.SemanticsNode._kEmptyConfig.hint;
    this[_elevation] = semantics.SemanticsNode._kEmptyConfig.elevation;
    this[_thickness] = semantics.SemanticsNode._kEmptyConfig.thickness;
    this[_hintOverrides] = null;
    this[_textDirection] = semantics.SemanticsNode._kEmptyConfig.textDirection;
    this[_sortKey] = null;
    this[_textSelection] = null;
    this[_isMultiline] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[key$] = key;
    this[_id] = 0;
    this[_showOnScreen] = showOnScreen;
    semantics.SemanticsNode.__proto__.new.call(this);
    this.attach(owner);
  }).prototype = semantics.SemanticsNode.prototype;
  dart.addTypeTests(semantics.SemanticsNode);
  dart.addTypeCaches(semantics.SemanticsNode);
  dart.setMethodSignature(semantics.SemanticsNode, () => ({
    __proto__: dart.getMethods(semantics.SemanticsNode.__proto__),
    [_replaceChildren]: dart.fnType(dart.void, [core.List$(semantics.SemanticsNode)]),
    visitChildren: dart.fnType(dart.void, [dart.fnType(core.bool, [semantics.SemanticsNode])]),
    [_visitDescendants]: dart.fnType(core.bool, [dart.fnType(core.bool, [semantics.SemanticsNode])]),
    [_markDirty]: dart.fnType(dart.void, []),
    [_isDifferentFromCurrentSemanticAnnotation]: dart.fnType(core.bool, [semantics.SemanticsConfiguration]),
    isTagged: dart.fnType(core.bool, [semantics.SemanticsTag]),
    hasFlag: dart.fnType(core.bool, [ui.SemanticsFlag]),
    [_canPerformAction]: dart.fnType(core.bool, [ui.SemanticsAction]),
    updateWith: dart.fnType(dart.void, [], {childrenInInversePaintOrder: dart.nullable(core.List$(semantics.SemanticsNode))}, {config: dart.nullable(semantics.SemanticsConfiguration)}),
    getSemanticsData: dart.fnType(semantics.SemanticsData, []),
    [_addToUpdate]: dart.fnType(dart.void, [ui.SemanticsUpdateBuilder, core.Set$(core.int)]),
    [_childrenInTraversalOrder]: dart.fnType(core.List$(semantics.SemanticsNode), []),
    sendEvent: dart.fnType(dart.void, [semantics_event.SemanticsEvent]),
    toStringDeep: dart.fnType(core.String, [], {childOrder: semantics.DebugSemanticsDumpOrder, minLevel: diagnostics.DiagnosticLevel, prefixLineOne: core.String, prefixOtherLines: dart.nullable(core.String)}, {}),
    toDiagnosticsNode: dart.fnType(diagnostics.DiagnosticsNode, [], {childOrder: semantics.DebugSemanticsDumpOrder, name: dart.nullable(core.String), style: dart.nullable(diagnostics.DiagnosticsTreeStyle)}, {}),
    debugDescribeChildren: dart.fnType(core.List$(diagnostics.DiagnosticsNode), [], {childOrder: semantics.DebugSemanticsDumpOrder}, {}),
    debugListChildrenInOrder: dart.fnType(core.List$(semantics.SemanticsNode), [semantics.DebugSemanticsDumpOrder])
  }));
  dart.setGetterSignature(semantics.SemanticsNode, () => ({
    __proto__: dart.getGetters(semantics.SemanticsNode.__proto__),
    id: core.int,
    transform: dart.nullable(vector_math_64.Matrix4),
    rect: ui.Rect,
    isInvisible: core.bool,
    isMergedIntoParent: core.bool,
    isPartOfNodeMerging: core.bool,
    mergeAllDescendantsIntoThisNode: core.bool,
    [_debugPreviousSnapshot]: core.List$(semantics.SemanticsNode),
    hasChildren: core.bool,
    childrenCount: core.int,
    owner: dart.nullable(semantics.SemanticsOwner),
    parent: dart.nullable(semantics.SemanticsNode),
    label: core.String,
    value: core.String,
    decreasedValue: core.String,
    increasedValue: core.String,
    hint: core.String,
    elevation: core.double,
    thickness: core.double,
    hintOverrides: dart.nullable(semantics.SemanticsHintOverrides),
    textDirection: dart.nullable(ui.TextDirection),
    sortKey: dart.nullable(semantics.SemanticsSortKey),
    textSelection: dart.nullable(text_editing.TextSelection),
    isMultiline: dart.nullable(core.bool),
    scrollChildCount: dart.nullable(core.int),
    scrollIndex: dart.nullable(core.int),
    scrollPosition: dart.nullable(core.double),
    scrollExtentMax: dart.nullable(core.double),
    scrollExtentMin: dart.nullable(core.double),
    platformViewId: dart.nullable(core.int),
    maxValueLength: dart.nullable(core.int),
    currentValueLength: dart.nullable(core.int)
  }));
  dart.setSetterSignature(semantics.SemanticsNode, () => ({
    __proto__: dart.getSetters(semantics.SemanticsNode.__proto__),
    transform: dart.nullable(vector_math_64.Matrix4),
    rect: ui.Rect,
    isMergedIntoParent: core.bool,
    [_debugPreviousSnapshot]: core.List$(semantics.SemanticsNode)
  }));
  dart.setLibraryUri(semantics.SemanticsNode, I[0]);
  dart.setFieldSignature(semantics.SemanticsNode, () => ({
    __proto__: dart.getFields(semantics.SemanticsNode.__proto__),
    key: dart.finalFieldType(dart.nullable(key.Key)),
    [_id]: dart.fieldType(core.int),
    [_showOnScreen]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_transform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4)),
    [_rect]: dart.fieldType(ui.Rect),
    parentSemanticsClipRect: dart.fieldType(dart.nullable(ui.Rect)),
    parentPaintClipRect: dart.fieldType(dart.nullable(ui.Rect)),
    elevationAdjustment: dart.fieldType(dart.nullable(core.double)),
    indexInParent: dart.fieldType(dart.nullable(core.int)),
    [_isMergedIntoParent]: dart.fieldType(core.bool),
    [_mergeAllDescendantsIntoThisNode]: dart.fieldType(core.bool),
    [_children]: dart.fieldType(dart.nullable(core.List$(semantics.SemanticsNode))),
    [__SemanticsNode__debugPreviousSnapshot]: dart.fieldType(dart.nullable(core.List$(semantics.SemanticsNode))),
    [_dead]: dart.fieldType(core.bool),
    [_dirty]: dart.fieldType(core.bool),
    [_actions]: dart.fieldType(core.Map$(ui.SemanticsAction, dart.fnType(dart.void, [dart.nullable(core.Object)]))),
    [_customSemanticsActions]: dart.fieldType(core.Map$(semantics.CustomSemanticsAction, dart.fnType(dart.void, []))),
    [_actionsAsBits]: dart.fieldType(core.int),
    tags: dart.fieldType(dart.nullable(core.Set$(semantics.SemanticsTag))),
    [_flags]: dart.fieldType(core.int),
    [_label]: dart.fieldType(core.String),
    [_value]: dart.fieldType(core.String),
    [_decreasedValue]: dart.fieldType(core.String),
    [_increasedValue]: dart.fieldType(core.String),
    [_hint]: dart.fieldType(core.String),
    [_elevation]: dart.fieldType(core.double),
    [_thickness]: dart.fieldType(core.double),
    [_hintOverrides]: dart.fieldType(dart.nullable(semantics.SemanticsHintOverrides)),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_sortKey]: dart.fieldType(dart.nullable(semantics.SemanticsSortKey)),
    [_textSelection]: dart.fieldType(dart.nullable(text_editing.TextSelection)),
    [_isMultiline]: dart.fieldType(dart.nullable(core.bool)),
    [_scrollChildCount]: dart.fieldType(dart.nullable(core.int)),
    [_scrollIndex]: dart.fieldType(dart.nullable(core.int)),
    [_scrollPosition]: dart.fieldType(dart.nullable(core.double)),
    [_scrollExtentMax]: dart.fieldType(dart.nullable(core.double)),
    [_scrollExtentMin]: dart.fieldType(dart.nullable(core.double)),
    [_platformViewId]: dart.fieldType(dart.nullable(core.int)),
    [_maxValueLength]: dart.fieldType(dart.nullable(core.int)),
    [_currentValueLength]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineLazy(semantics.SemanticsNode, {
    /*semantics.SemanticsNode._maxFrameworkAccessibilityIdentifier*/get _maxFrameworkAccessibilityIdentifier() {
      return 65535;
    },
    /*semantics.SemanticsNode._lastIdentifier*/get _lastIdentifier() {
      return 0;
    },
    set _lastIdentifier(_) {},
    /*semantics.SemanticsNode._kEmptyConfig*/get _kEmptyConfig() {
      return new semantics.SemanticsConfiguration.new();
    },
    /*semantics.SemanticsNode._kEmptyChildList*/get _kEmptyChildList() {
      return _native_typed_data.NativeInt32List.new(0);
    },
    /*semantics.SemanticsNode._kEmptyCustomSemanticsActionsList*/get _kEmptyCustomSemanticsActionsList() {
      return _native_typed_data.NativeInt32List.new(0);
    },
    /*semantics.SemanticsNode._kIdentityTransform*/get _kIdentityTransform() {
      return semantics.SemanticsNode._initIdentityTransform();
    }
  }, false);
  semantics._SemanticsDiagnosticableNode = class _SemanticsDiagnosticableNode extends diagnostics.DiagnosticableNode$(semantics.SemanticsNode) {
    getChildren() {
      return this.value.debugDescribeChildren({childOrder: this.childOrder});
    }
  };
  (semantics._SemanticsDiagnosticableNode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let childOrder = opts && 'childOrder' in opts ? opts.childOrder : null;
    this.childOrder = childOrder;
    semantics._SemanticsDiagnosticableNode.__proto__.new.call(this, {name: name, value: value, style: style});
    ;
  }).prototype = semantics._SemanticsDiagnosticableNode.prototype;
  dart.addTypeTests(semantics._SemanticsDiagnosticableNode);
  dart.addTypeCaches(semantics._SemanticsDiagnosticableNode);
  dart.setLibraryUri(semantics._SemanticsDiagnosticableNode, I[0]);
  dart.setFieldSignature(semantics._SemanticsDiagnosticableNode, () => ({
    __proto__: dart.getFields(semantics._SemanticsDiagnosticableNode.__proto__),
    childOrder: dart.finalFieldType(semantics.DebugSemanticsDumpOrder)
  }));
  var onTapHint$ = dart.privateName(semantics, "SemanticsHintOverrides.onTapHint");
  var onLongPressHint$ = dart.privateName(semantics, "SemanticsHintOverrides.onLongPressHint");
  semantics.SemanticsHintOverrides = class SemanticsHintOverrides extends diagnostics.DiagnosticableTree {
    get onTapHint() {
      return this[onTapHint$];
    }
    set onTapHint(value) {
      super.onTapHint = value;
    }
    get onLongPressHint() {
      return this[onLongPressHint$];
    }
    set onLongPressHint(value) {
      super.onLongPressHint = value;
    }
    get isNotEmpty() {
      return this.onTapHint != null || this.onLongPressHint != null;
    }
    get hashCode() {
      return ui.hashValues(this.onTapHint, this.onLongPressHint);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return semantics.SemanticsHintOverrides.is(other) && other.onTapHint == this.onTapHint && other.onLongPressHint == this.onLongPressHint;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("onTapHint", this.onTapHint, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("onLongPressHint", this.onLongPressHint, {defaultValue: null}));
    }
  };
  (semantics.SemanticsHintOverrides.new = function(opts) {
    let onTapHint = opts && 'onTapHint' in opts ? opts.onTapHint : null;
    let onLongPressHint = opts && 'onLongPressHint' in opts ? opts.onLongPressHint : null;
    this[onTapHint$] = onTapHint;
    this[onLongPressHint$] = onLongPressHint;
    if (!(onTapHint !== "")) dart.assertFailed(null, I[1], 529, 15, "onTapHint != ''");
    if (!(onLongPressHint !== "")) dart.assertFailed(null, I[1], 530, 15, "onLongPressHint != ''");
    semantics.SemanticsHintOverrides.__proto__.new.call(this);
    ;
  }).prototype = semantics.SemanticsHintOverrides.prototype;
  dart.addTypeTests(semantics.SemanticsHintOverrides);
  dart.addTypeCaches(semantics.SemanticsHintOverrides);
  dart.setGetterSignature(semantics.SemanticsHintOverrides, () => ({
    __proto__: dart.getGetters(semantics.SemanticsHintOverrides.__proto__),
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(semantics.SemanticsHintOverrides, I[0]);
  dart.setFieldSignature(semantics.SemanticsHintOverrides, () => ({
    __proto__: dart.getFields(semantics.SemanticsHintOverrides.__proto__),
    onTapHint: dart.finalFieldType(dart.nullable(core.String)),
    onLongPressHint: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(semantics.SemanticsHintOverrides, ['_equals']);
  dart.defineExtensionAccessors(semantics.SemanticsHintOverrides, ['hashCode']);
  var enabled$ = dart.privateName(semantics, "SemanticsProperties.enabled");
  var checked$ = dart.privateName(semantics, "SemanticsProperties.checked");
  var toggled$ = dart.privateName(semantics, "SemanticsProperties.toggled");
  var selected$ = dart.privateName(semantics, "SemanticsProperties.selected");
  var button$ = dart.privateName(semantics, "SemanticsProperties.button");
  var link$ = dart.privateName(semantics, "SemanticsProperties.link");
  var header$ = dart.privateName(semantics, "SemanticsProperties.header");
  var textField$ = dart.privateName(semantics, "SemanticsProperties.textField");
  var slider$ = dart.privateName(semantics, "SemanticsProperties.slider");
  var keyboardKey$ = dart.privateName(semantics, "SemanticsProperties.keyboardKey");
  var readOnly$ = dart.privateName(semantics, "SemanticsProperties.readOnly");
  var focusable$ = dart.privateName(semantics, "SemanticsProperties.focusable");
  var focused$ = dart.privateName(semantics, "SemanticsProperties.focused");
  var inMutuallyExclusiveGroup$ = dart.privateName(semantics, "SemanticsProperties.inMutuallyExclusiveGroup");
  var hidden$ = dart.privateName(semantics, "SemanticsProperties.hidden");
  var obscured$ = dart.privateName(semantics, "SemanticsProperties.obscured");
  var multiline$ = dart.privateName(semantics, "SemanticsProperties.multiline");
  var scopesRoute$ = dart.privateName(semantics, "SemanticsProperties.scopesRoute");
  var namesRoute$ = dart.privateName(semantics, "SemanticsProperties.namesRoute");
  var image$ = dart.privateName(semantics, "SemanticsProperties.image");
  var liveRegion$ = dart.privateName(semantics, "SemanticsProperties.liveRegion");
  var maxValueLength$0 = dart.privateName(semantics, "SemanticsProperties.maxValueLength");
  var currentValueLength$0 = dart.privateName(semantics, "SemanticsProperties.currentValueLength");
  var label$1 = dart.privateName(semantics, "SemanticsProperties.label");
  var value$0 = dart.privateName(semantics, "SemanticsProperties.value");
  var increasedValue$0 = dart.privateName(semantics, "SemanticsProperties.increasedValue");
  var decreasedValue$0 = dart.privateName(semantics, "SemanticsProperties.decreasedValue");
  var hint$1 = dart.privateName(semantics, "SemanticsProperties.hint");
  var hintOverrides$ = dart.privateName(semantics, "SemanticsProperties.hintOverrides");
  var textDirection$0 = dart.privateName(semantics, "SemanticsProperties.textDirection");
  var sortKey$ = dart.privateName(semantics, "SemanticsProperties.sortKey");
  var tagForChildren$ = dart.privateName(semantics, "SemanticsProperties.tagForChildren");
  var onTap$ = dart.privateName(semantics, "SemanticsProperties.onTap");
  var onLongPress$ = dart.privateName(semantics, "SemanticsProperties.onLongPress");
  var onScrollLeft$ = dart.privateName(semantics, "SemanticsProperties.onScrollLeft");
  var onScrollRight$ = dart.privateName(semantics, "SemanticsProperties.onScrollRight");
  var onScrollUp$ = dart.privateName(semantics, "SemanticsProperties.onScrollUp");
  var onScrollDown$ = dart.privateName(semantics, "SemanticsProperties.onScrollDown");
  var onIncrease$ = dart.privateName(semantics, "SemanticsProperties.onIncrease");
  var onDecrease$ = dart.privateName(semantics, "SemanticsProperties.onDecrease");
  var onCopy$ = dart.privateName(semantics, "SemanticsProperties.onCopy");
  var onCut$ = dart.privateName(semantics, "SemanticsProperties.onCut");
  var onPaste$ = dart.privateName(semantics, "SemanticsProperties.onPaste");
  var onMoveCursorForwardByCharacter$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorForwardByCharacter");
  var onMoveCursorBackwardByCharacter$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorBackwardByCharacter");
  var onMoveCursorForwardByWord$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorForwardByWord");
  var onMoveCursorBackwardByWord$ = dart.privateName(semantics, "SemanticsProperties.onMoveCursorBackwardByWord");
  var onSetSelection$ = dart.privateName(semantics, "SemanticsProperties.onSetSelection");
  var onSetText$ = dart.privateName(semantics, "SemanticsProperties.onSetText");
  var onDidGainAccessibilityFocus$ = dart.privateName(semantics, "SemanticsProperties.onDidGainAccessibilityFocus");
  var onDidLoseAccessibilityFocus$ = dart.privateName(semantics, "SemanticsProperties.onDidLoseAccessibilityFocus");
  var onDismiss$ = dart.privateName(semantics, "SemanticsProperties.onDismiss");
  var customSemanticsActions$ = dart.privateName(semantics, "SemanticsProperties.customSemanticsActions");
  semantics.SemanticsProperties = class SemanticsProperties extends diagnostics.DiagnosticableTree {
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get checked() {
      return this[checked$];
    }
    set checked(value) {
      super.checked = value;
    }
    get toggled() {
      return this[toggled$];
    }
    set toggled(value) {
      super.toggled = value;
    }
    get selected() {
      return this[selected$];
    }
    set selected(value) {
      super.selected = value;
    }
    get button() {
      return this[button$];
    }
    set button(value) {
      super.button = value;
    }
    get link() {
      return this[link$];
    }
    set link(value) {
      super.link = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get textField() {
      return this[textField$];
    }
    set textField(value) {
      super.textField = value;
    }
    get slider() {
      return this[slider$];
    }
    set slider(value) {
      super.slider = value;
    }
    get keyboardKey() {
      return this[keyboardKey$];
    }
    set keyboardKey(value) {
      super.keyboardKey = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get focusable() {
      return this[focusable$];
    }
    set focusable(value) {
      super.focusable = value;
    }
    get focused() {
      return this[focused$];
    }
    set focused(value) {
      super.focused = value;
    }
    get inMutuallyExclusiveGroup() {
      return this[inMutuallyExclusiveGroup$];
    }
    set inMutuallyExclusiveGroup(value) {
      super.inMutuallyExclusiveGroup = value;
    }
    get hidden() {
      return this[hidden$];
    }
    set hidden(value) {
      super.hidden = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get multiline() {
      return this[multiline$];
    }
    set multiline(value) {
      super.multiline = value;
    }
    get scopesRoute() {
      return this[scopesRoute$];
    }
    set scopesRoute(value) {
      super.scopesRoute = value;
    }
    get namesRoute() {
      return this[namesRoute$];
    }
    set namesRoute(value) {
      super.namesRoute = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get liveRegion() {
      return this[liveRegion$];
    }
    set liveRegion(value) {
      super.liveRegion = value;
    }
    get maxValueLength() {
      return this[maxValueLength$0];
    }
    set maxValueLength(value) {
      super.maxValueLength = value;
    }
    get currentValueLength() {
      return this[currentValueLength$0];
    }
    set currentValueLength(value) {
      super.currentValueLength = value;
    }
    get label() {
      return this[label$1];
    }
    set label(value) {
      super.label = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get increasedValue() {
      return this[increasedValue$0];
    }
    set increasedValue(value) {
      super.increasedValue = value;
    }
    get decreasedValue() {
      return this[decreasedValue$0];
    }
    set decreasedValue(value) {
      super.decreasedValue = value;
    }
    get hint() {
      return this[hint$1];
    }
    set hint(value) {
      super.hint = value;
    }
    get hintOverrides() {
      return this[hintOverrides$];
    }
    set hintOverrides(value) {
      super.hintOverrides = value;
    }
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get sortKey() {
      return this[sortKey$];
    }
    set sortKey(value) {
      super.sortKey = value;
    }
    get tagForChildren() {
      return this[tagForChildren$];
    }
    set tagForChildren(value) {
      super.tagForChildren = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onScrollLeft() {
      return this[onScrollLeft$];
    }
    set onScrollLeft(value) {
      super.onScrollLeft = value;
    }
    get onScrollRight() {
      return this[onScrollRight$];
    }
    set onScrollRight(value) {
      super.onScrollRight = value;
    }
    get onScrollUp() {
      return this[onScrollUp$];
    }
    set onScrollUp(value) {
      super.onScrollUp = value;
    }
    get onScrollDown() {
      return this[onScrollDown$];
    }
    set onScrollDown(value) {
      super.onScrollDown = value;
    }
    get onIncrease() {
      return this[onIncrease$];
    }
    set onIncrease(value) {
      super.onIncrease = value;
    }
    get onDecrease() {
      return this[onDecrease$];
    }
    set onDecrease(value) {
      super.onDecrease = value;
    }
    get onCopy() {
      return this[onCopy$];
    }
    set onCopy(value) {
      super.onCopy = value;
    }
    get onCut() {
      return this[onCut$];
    }
    set onCut(value) {
      super.onCut = value;
    }
    get onPaste() {
      return this[onPaste$];
    }
    set onPaste(value) {
      super.onPaste = value;
    }
    get onMoveCursorForwardByCharacter() {
      return this[onMoveCursorForwardByCharacter$];
    }
    set onMoveCursorForwardByCharacter(value) {
      super.onMoveCursorForwardByCharacter = value;
    }
    get onMoveCursorBackwardByCharacter() {
      return this[onMoveCursorBackwardByCharacter$];
    }
    set onMoveCursorBackwardByCharacter(value) {
      super.onMoveCursorBackwardByCharacter = value;
    }
    get onMoveCursorForwardByWord() {
      return this[onMoveCursorForwardByWord$];
    }
    set onMoveCursorForwardByWord(value) {
      super.onMoveCursorForwardByWord = value;
    }
    get onMoveCursorBackwardByWord() {
      return this[onMoveCursorBackwardByWord$];
    }
    set onMoveCursorBackwardByWord(value) {
      super.onMoveCursorBackwardByWord = value;
    }
    get onSetSelection() {
      return this[onSetSelection$];
    }
    set onSetSelection(value) {
      super.onSetSelection = value;
    }
    get onSetText() {
      return this[onSetText$];
    }
    set onSetText(value) {
      super.onSetText = value;
    }
    get onDidGainAccessibilityFocus() {
      return this[onDidGainAccessibilityFocus$];
    }
    set onDidGainAccessibilityFocus(value) {
      super.onDidGainAccessibilityFocus = value;
    }
    get onDidLoseAccessibilityFocus() {
      return this[onDidLoseAccessibilityFocus$];
    }
    set onDidLoseAccessibilityFocus(value) {
      super.onDidLoseAccessibilityFocus = value;
    }
    get onDismiss() {
      return this[onDismiss$];
    }
    set onDismiss(value) {
      super.onDismiss = value;
    }
    get customSemanticsActions() {
      return this[customSemanticsActions$];
    }
    set customSemanticsActions(value) {
      super.customSemanticsActions = value;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("checked", this.checked, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("selected", this.selected, {defaultValue: null}));
      properties.add(new diagnostics.StringProperty.new("label", this.label, {defaultValue: ""}));
      properties.add(new diagnostics.StringProperty.new("value", this.value));
      properties.add(new diagnostics.StringProperty.new("hint", this.hint));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfSemanticsSortKey()).new("sortKey", this.sortKey, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfSemanticsHintOverrides()).new("hintOverrides", this.hintOverrides));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "SemanticsProperties");
    }
  };
  (semantics.SemanticsProperties.new = function(opts) {
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let checked = opts && 'checked' in opts ? opts.checked : null;
    let selected = opts && 'selected' in opts ? opts.selected : null;
    let toggled = opts && 'toggled' in opts ? opts.toggled : null;
    let button = opts && 'button' in opts ? opts.button : null;
    let link = opts && 'link' in opts ? opts.link : null;
    let header = opts && 'header' in opts ? opts.header : null;
    let textField = opts && 'textField' in opts ? opts.textField : null;
    let slider = opts && 'slider' in opts ? opts.slider : null;
    let keyboardKey = opts && 'keyboardKey' in opts ? opts.keyboardKey : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
    let focusable = opts && 'focusable' in opts ? opts.focusable : null;
    let focused = opts && 'focused' in opts ? opts.focused : null;
    let inMutuallyExclusiveGroup = opts && 'inMutuallyExclusiveGroup' in opts ? opts.inMutuallyExclusiveGroup : null;
    let hidden = opts && 'hidden' in opts ? opts.hidden : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : null;
    let multiline = opts && 'multiline' in opts ? opts.multiline : null;
    let scopesRoute = opts && 'scopesRoute' in opts ? opts.scopesRoute : null;
    let namesRoute = opts && 'namesRoute' in opts ? opts.namesRoute : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let liveRegion = opts && 'liveRegion' in opts ? opts.liveRegion : null;
    let maxValueLength = opts && 'maxValueLength' in opts ? opts.maxValueLength : null;
    let currentValueLength = opts && 'currentValueLength' in opts ? opts.currentValueLength : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let hintOverrides = opts && 'hintOverrides' in opts ? opts.hintOverrides : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
    let tagForChildren = opts && 'tagForChildren' in opts ? opts.tagForChildren : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onScrollLeft = opts && 'onScrollLeft' in opts ? opts.onScrollLeft : null;
    let onScrollRight = opts && 'onScrollRight' in opts ? opts.onScrollRight : null;
    let onScrollUp = opts && 'onScrollUp' in opts ? opts.onScrollUp : null;
    let onScrollDown = opts && 'onScrollDown' in opts ? opts.onScrollDown : null;
    let onIncrease = opts && 'onIncrease' in opts ? opts.onIncrease : null;
    let onDecrease = opts && 'onDecrease' in opts ? opts.onDecrease : null;
    let onCopy = opts && 'onCopy' in opts ? opts.onCopy : null;
    let onCut = opts && 'onCut' in opts ? opts.onCut : null;
    let onPaste = opts && 'onPaste' in opts ? opts.onPaste : null;
    let onMoveCursorForwardByCharacter = opts && 'onMoveCursorForwardByCharacter' in opts ? opts.onMoveCursorForwardByCharacter : null;
    let onMoveCursorBackwardByCharacter = opts && 'onMoveCursorBackwardByCharacter' in opts ? opts.onMoveCursorBackwardByCharacter : null;
    let onMoveCursorForwardByWord = opts && 'onMoveCursorForwardByWord' in opts ? opts.onMoveCursorForwardByWord : null;
    let onMoveCursorBackwardByWord = opts && 'onMoveCursorBackwardByWord' in opts ? opts.onMoveCursorBackwardByWord : null;
    let onSetSelection = opts && 'onSetSelection' in opts ? opts.onSetSelection : null;
    let onSetText = opts && 'onSetText' in opts ? opts.onSetText : null;
    let onDidGainAccessibilityFocus = opts && 'onDidGainAccessibilityFocus' in opts ? opts.onDidGainAccessibilityFocus : null;
    let onDidLoseAccessibilityFocus = opts && 'onDidLoseAccessibilityFocus' in opts ? opts.onDidLoseAccessibilityFocus : null;
    let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
    let customSemanticsActions = opts && 'customSemanticsActions' in opts ? opts.customSemanticsActions : null;
    this[enabled$] = enabled;
    this[checked$] = checked;
    this[selected$] = selected;
    this[toggled$] = toggled;
    this[button$] = button;
    this[link$] = link;
    this[header$] = header;
    this[textField$] = textField;
    this[slider$] = slider;
    this[keyboardKey$] = keyboardKey;
    this[readOnly$] = readOnly;
    this[focusable$] = focusable;
    this[focused$] = focused;
    this[inMutuallyExclusiveGroup$] = inMutuallyExclusiveGroup;
    this[hidden$] = hidden;
    this[obscured$] = obscured;
    this[multiline$] = multiline;
    this[scopesRoute$] = scopesRoute;
    this[namesRoute$] = namesRoute;
    this[image$] = image;
    this[liveRegion$] = liveRegion;
    this[maxValueLength$0] = maxValueLength;
    this[currentValueLength$0] = currentValueLength;
    this[label$1] = label;
    this[value$0] = value;
    this[increasedValue$0] = increasedValue;
    this[decreasedValue$0] = decreasedValue;
    this[hint$1] = hint;
    this[hintOverrides$] = hintOverrides;
    this[textDirection$0] = textDirection;
    this[sortKey$] = sortKey;
    this[tagForChildren$] = tagForChildren;
    this[onTap$] = onTap;
    this[onLongPress$] = onLongPress;
    this[onScrollLeft$] = onScrollLeft;
    this[onScrollRight$] = onScrollRight;
    this[onScrollUp$] = onScrollUp;
    this[onScrollDown$] = onScrollDown;
    this[onIncrease$] = onIncrease;
    this[onDecrease$] = onDecrease;
    this[onCopy$] = onCopy;
    this[onCut$] = onCut;
    this[onPaste$] = onPaste;
    this[onMoveCursorForwardByCharacter$] = onMoveCursorForwardByCharacter;
    this[onMoveCursorBackwardByCharacter$] = onMoveCursorBackwardByCharacter;
    this[onMoveCursorForwardByWord$] = onMoveCursorForwardByWord;
    this[onMoveCursorBackwardByWord$] = onMoveCursorBackwardByWord;
    this[onSetSelection$] = onSetSelection;
    this[onSetText$] = onSetText;
    this[onDidGainAccessibilityFocus$] = onDidGainAccessibilityFocus;
    this[onDidLoseAccessibilityFocus$] = onDidLoseAccessibilityFocus;
    this[onDismiss$] = onDismiss;
    this[customSemanticsActions$] = customSemanticsActions;
    semantics.SemanticsProperties.__proto__.new.call(this);
    ;
  }).prototype = semantics.SemanticsProperties.prototype;
  dart.addTypeTests(semantics.SemanticsProperties);
  dart.addTypeCaches(semantics.SemanticsProperties);
  dart.setLibraryUri(semantics.SemanticsProperties, I[0]);
  dart.setFieldSignature(semantics.SemanticsProperties, () => ({
    __proto__: dart.getFields(semantics.SemanticsProperties.__proto__),
    enabled: dart.finalFieldType(dart.nullable(core.bool)),
    checked: dart.finalFieldType(dart.nullable(core.bool)),
    toggled: dart.finalFieldType(dart.nullable(core.bool)),
    selected: dart.finalFieldType(dart.nullable(core.bool)),
    button: dart.finalFieldType(dart.nullable(core.bool)),
    link: dart.finalFieldType(dart.nullable(core.bool)),
    header: dart.finalFieldType(dart.nullable(core.bool)),
    textField: dart.finalFieldType(dart.nullable(core.bool)),
    slider: dart.finalFieldType(dart.nullable(core.bool)),
    keyboardKey: dart.finalFieldType(dart.nullable(core.bool)),
    readOnly: dart.finalFieldType(dart.nullable(core.bool)),
    focusable: dart.finalFieldType(dart.nullable(core.bool)),
    focused: dart.finalFieldType(dart.nullable(core.bool)),
    inMutuallyExclusiveGroup: dart.finalFieldType(dart.nullable(core.bool)),
    hidden: dart.finalFieldType(dart.nullable(core.bool)),
    obscured: dart.finalFieldType(dart.nullable(core.bool)),
    multiline: dart.finalFieldType(dart.nullable(core.bool)),
    scopesRoute: dart.finalFieldType(dart.nullable(core.bool)),
    namesRoute: dart.finalFieldType(dart.nullable(core.bool)),
    image: dart.finalFieldType(dart.nullable(core.bool)),
    liveRegion: dart.finalFieldType(dart.nullable(core.bool)),
    maxValueLength: dart.finalFieldType(dart.nullable(core.int)),
    currentValueLength: dart.finalFieldType(dart.nullable(core.int)),
    label: dart.finalFieldType(dart.nullable(core.String)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    increasedValue: dart.finalFieldType(dart.nullable(core.String)),
    decreasedValue: dart.finalFieldType(dart.nullable(core.String)),
    hint: dart.finalFieldType(dart.nullable(core.String)),
    hintOverrides: dart.finalFieldType(dart.nullable(semantics.SemanticsHintOverrides)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    sortKey: dart.finalFieldType(dart.nullable(semantics.SemanticsSortKey)),
    tagForChildren: dart.finalFieldType(dart.nullable(semantics.SemanticsTag)),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onLongPress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onScrollLeft: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onScrollRight: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onScrollUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onScrollDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onIncrease: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDecrease: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onCopy: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onCut: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onPaste: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onMoveCursorForwardByCharacter: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    onMoveCursorBackwardByCharacter: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    onMoveCursorForwardByWord: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    onMoveCursorBackwardByWord: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    onSetSelection: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [text_editing.TextSelection]))),
    onSetText: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onDidGainAccessibilityFocus: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDidLoseAccessibilityFocus: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDismiss: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    customSemanticsActions: dart.finalFieldType(dart.nullable(core.Map$(semantics.CustomSemanticsAction, dart.fnType(dart.void, []))))
  }));
  semantics._BoxEdge = class _BoxEdge extends core.Object {
    compareTo(other) {
      semantics._BoxEdge.as(other);
      return (this.offset - other.offset)[$sign][$toInt]();
    }
  };
  (semantics._BoxEdge.new = function(opts) {
    let isLeadingEdge = opts && 'isLeadingEdge' in opts ? opts.isLeadingEdge : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let node = opts && 'node' in opts ? opts.node : null;
    this.isLeadingEdge = isLeadingEdge;
    this.offset = offset;
    this.node = node;
    if (!(isLeadingEdge !== null)) dart.assertFailed(null, I[1], 2331, 15, "isLeadingEdge != null");
    if (!(offset !== null)) dart.assertFailed(null, I[1], 2332, 15, "offset != null");
    if (!offset[$isFinite]) dart.assertFailed(null, I[1], 2333, 15, "offset.isFinite");
    if (!(node !== null)) dart.assertFailed(null, I[1], 2334, 15, "node != null");
    ;
  }).prototype = semantics._BoxEdge.prototype;
  dart.addTypeTests(semantics._BoxEdge);
  dart.addTypeCaches(semantics._BoxEdge);
  semantics._BoxEdge[dart.implements] = () => [core.Comparable$(semantics._BoxEdge)];
  dart.setMethodSignature(semantics._BoxEdge, () => ({
    __proto__: dart.getMethods(semantics._BoxEdge.__proto__),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(semantics._BoxEdge, I[0]);
  dart.setFieldSignature(semantics._BoxEdge, () => ({
    __proto__: dart.getFields(semantics._BoxEdge.__proto__),
    isLeadingEdge: dart.finalFieldType(core.bool),
    offset: dart.finalFieldType(core.double),
    node: dart.finalFieldType(semantics.SemanticsNode)
  }));
  dart.defineExtensionMethods(semantics._BoxEdge, ['compareTo']);
  semantics._SemanticsSortGroup = class _SemanticsSortGroup extends core.Comparable {
    compareTo(other) {
      semantics._SemanticsSortGroup.as(other);
      return (this.startOffset - other.startOffset)[$sign][$toInt]();
    }
    sortedWithinVerticalGroup() {
      let edges = T.JSArrayOf_BoxEdge().of([]);
      for (let child of this.nodes) {
        let childRect = child.rect.deflate(0.1);
        edges[$add](new semantics._BoxEdge.new({isLeadingEdge: true, offset: semantics._pointInParentCoordinates(child, childRect.topLeft).dx, node: child}));
        edges[$add](new semantics._BoxEdge.new({isLeadingEdge: false, offset: semantics._pointInParentCoordinates(child, childRect.bottomRight).dx, node: child}));
      }
      edges[$sort]();
      let horizontalGroups = T.JSArrayOf_SemanticsSortGroup().of([]);
      let group = null;
      let depth = 0;
      for (let edge of edges) {
        if (edge.isLeadingEdge) {
          depth = depth + 1;
          group == null ? group = new semantics._SemanticsSortGroup.new({startOffset: edge.offset, textDirection: this.textDirection}) : null;
          group.nodes[$add](edge.node);
        } else {
          depth = depth - 1;
        }
        if (depth === 0) {
          horizontalGroups[$add](dart.nullCheck(group));
          group = null;
        }
      }
      horizontalGroups[$sort]();
      if (this.textDirection === ui.TextDirection.rtl) {
        horizontalGroups = horizontalGroups[$reversed][$toList]();
      }
      return horizontalGroups[$expand](semantics.SemanticsNode, dart.fn(group => group.sortedWithinKnot(), T._SemanticsSortGroupToListOfSemanticsNode()))[$toList]();
    }
    sortedWithinKnot() {
      let t4;
      if (this.nodes[$length] <= 1) {
        return this.nodes;
      }
      let nodeMap = new (T.IdentityMapOfint$SemanticsNode()).new();
      let edges = new (T.IdentityMapOfint$int()).new();
      for (let node of this.nodes) {
        nodeMap[$_set](node.id, node);
        let center = semantics._pointInParentCoordinates(node, node.rect.center);
        for (let nextNode of this.nodes) {
          if (node === nextNode || edges[$_get](nextNode.id) === node.id) {
            continue;
          }
          let nextCenter = semantics._pointInParentCoordinates(nextNode, nextNode.rect.center);
          let centerDelta = nextCenter['-'](center);
          let direction = centerDelta.direction;
          let isLtrAndForward = this.textDirection === ui.TextDirection.ltr && -3.141592653589793 / 4 < direction && direction < 3 * 3.141592653589793 / 4;
          let isRtlAndForward = this.textDirection === ui.TextDirection.rtl && (direction < -3 * 3.141592653589793 / 4 || direction > 3 * 3.141592653589793 / 4);
          if (isLtrAndForward || isRtlAndForward) {
            edges[$_set](node.id, nextNode.id);
          }
        }
      }
      let sortedIds = T.JSArrayOfint().of([]);
      let visitedIds = T.LinkedHashSetOfint().new();
      let startNodes = (t4 = this.nodes[$toList](), (() => {
        t4[$sort](dart.fn((a, b) => {
          let aTopLeft = semantics._pointInParentCoordinates(a, a.rect.topLeft);
          let bTopLeft = semantics._pointInParentCoordinates(b, b.rect.topLeft);
          let verticalDiff = aTopLeft.dy[$compareTo](bTopLeft.dy);
          if (verticalDiff !== 0) {
            return -verticalDiff;
          }
          return -aTopLeft.dx[$compareTo](bTopLeft.dx);
        }, T.SemanticsNodeAndSemanticsNodeToint()));
        return t4;
      })());
      function search(id) {
        if (visitedIds.contains(id)) {
          return;
        }
        visitedIds.add(id);
        if (edges[$containsKey](id)) {
          search(dart.nullCheck(edges[$_get](id)));
        }
        sortedIds[$add](id);
      }
      dart.fn(search, T.intTovoid());
      startNodes[$map](core.int, dart.fn(node => node.id, T.SemanticsNodeToint()))[$forEach](search);
      return sortedIds[$map](semantics.SemanticsNode, dart.fn(id => dart.nullCheck(nodeMap[$_get](id)), T.intToSemanticsNode()))[$toList]()[$reversed][$toList]();
    }
  };
  (semantics._SemanticsSortGroup.new = function(opts) {
    let startOffset = opts && 'startOffset' in opts ? opts.startOffset : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this.nodes = T.JSArrayOfSemanticsNode().of([]);
    this.startOffset = startOffset;
    this.textDirection = textDirection;
    if (!(startOffset !== null)) dart.assertFailed(null, I[1], 2368, 15, "startOffset != null");
    ;
  }).prototype = semantics._SemanticsSortGroup.prototype;
  dart.addTypeTests(semantics._SemanticsSortGroup);
  dart.addTypeCaches(semantics._SemanticsSortGroup);
  dart.setMethodSignature(semantics._SemanticsSortGroup, () => ({
    __proto__: dart.getMethods(semantics._SemanticsSortGroup.__proto__),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
    sortedWithinVerticalGroup: dart.fnType(core.List$(semantics.SemanticsNode), []),
    sortedWithinKnot: dart.fnType(core.List$(semantics.SemanticsNode), [])
  }));
  dart.setLibraryUri(semantics._SemanticsSortGroup, I[0]);
  dart.setFieldSignature(semantics._SemanticsSortGroup, () => ({
    __proto__: dart.getFields(semantics._SemanticsSortGroup.__proto__),
    startOffset: dart.finalFieldType(core.double),
    textDirection: dart.finalFieldType(ui.TextDirection),
    nodes: dart.finalFieldType(core.List$(semantics.SemanticsNode))
  }));
  dart.defineExtensionMethods(semantics._SemanticsSortGroup, ['compareTo']);
  semantics._TraversalSortNode = class _TraversalSortNode extends core.Object {
    compareTo(other) {
      semantics._TraversalSortNode.as(other);
      if (this.sortKey == null || other.sortKey == null) {
        return this.position - other.position;
      }
      return dart.nullCheck(this.sortKey).compareTo(dart.nullCheck(other.sortKey));
    }
  };
  (semantics._TraversalSortNode.new = function(opts) {
    let node = opts && 'node' in opts ? opts.node : null;
    let sortKey = opts && 'sortKey' in opts ? opts.sortKey : null;
    let position = opts && 'position' in opts ? opts.position : null;
    this.node = node;
    this.sortKey = sortKey;
    this.position = position;
    if (!(node !== null)) dart.assertFailed(null, I[1], 2592, 14, "node != null");
    if (!(position !== null)) dart.assertFailed(null, I[1], 2593, 14, "position != null");
    ;
  }).prototype = semantics._TraversalSortNode.prototype;
  dart.addTypeTests(semantics._TraversalSortNode);
  dart.addTypeCaches(semantics._TraversalSortNode);
  semantics._TraversalSortNode[dart.implements] = () => [core.Comparable$(semantics._TraversalSortNode)];
  dart.setMethodSignature(semantics._TraversalSortNode, () => ({
    __proto__: dart.getMethods(semantics._TraversalSortNode.__proto__),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(semantics._TraversalSortNode, I[0]);
  dart.setFieldSignature(semantics._TraversalSortNode, () => ({
    __proto__: dart.getFields(semantics._TraversalSortNode.__proto__),
    node: dart.finalFieldType(semantics.SemanticsNode),
    sortKey: dart.finalFieldType(dart.nullable(semantics.SemanticsSortKey)),
    position: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(semantics._TraversalSortNode, ['compareTo']);
  var _getSemanticsActionHandlerForId = dart.privateName(semantics, "_getSemanticsActionHandlerForId");
  var _getSemanticsActionHandlerForPosition = dart.privateName(semantics, "_getSemanticsActionHandlerForPosition");
  semantics.SemanticsOwner = class SemanticsOwner extends change_notifier.ChangeNotifier {
    get rootSemanticsNode() {
      return this[_nodes][$_get](0);
    }
    dispose() {
      this[_dirtyNodes].clear();
      this[_nodes][$clear]();
      this[_detachedNodes].clear();
      super.dispose();
    }
    sendSemanticsUpdate() {
      let t4, t4$, t4$0;
      if (this[_dirtyNodes][$isEmpty]) return;
      let customSemanticsActionIds = T.LinkedHashSetOfint().new();
      let visitedNodes = T.JSArrayOfSemanticsNode().of([]);
      while (this[_dirtyNodes][$isNotEmpty]) {
        let localDirtyNodes = this[_dirtyNodes][$where](dart.fn(node => !this[_detachedNodes].contains(node), T.SemanticsNodeTobool()))[$toList]();
        this[_dirtyNodes].clear();
        this[_detachedNodes].clear();
        localDirtyNodes[$sort](dart.fn((a, b) => a.depth - b.depth, T.SemanticsNodeAndSemanticsNodeToint()));
        visitedNodes[$addAll](localDirtyNodes);
        for (let node of localDirtyNodes) {
          if (!node[_dirty]) dart.assertFailed(null, I[1], 2654, 16, "node._dirty");
          if (!(node.parent == null || !dart.nullCheck(node.parent).isPartOfNodeMerging || node.isMergedIntoParent)) dart.assertFailed(null, I[1], 2655, 16, "node.parent == null || !node.parent!.isPartOfNodeMerging || node.isMergedIntoParent");
          if (node.isPartOfNodeMerging) {
            if (!(node.mergeAllDescendantsIntoThisNode || node.parent != null)) dart.assertFailed(null, I[1], 2657, 18, "node.mergeAllDescendantsIntoThisNode || node.parent != null");
            if (node.parent != null && dart.nullCheck(node.parent).isPartOfNodeMerging) {
              dart.nullCheck(node.parent)[_markDirty]();
              node[_dirty] = false;
            }
          }
        }
      }
      visitedNodes[$sort](dart.fn((a, b) => a.depth - b.depth, T.SemanticsNodeAndSemanticsNodeToint()));
      let builder = dart.nullCheck(binding.SemanticsBinding.instance).createSemanticsUpdateBuilder();
      for (let node of visitedNodes) {
        if (!((t4 = node.parent, t4 == null ? null : t4[_dirty]) !== true)) dart.assertFailed(null, I[1], 2669, 14, "node.parent?._dirty != true");
        if (node[_dirty] && node.attached) node[_addToUpdate](builder, customSemanticsActionIds);
      }
      this[_dirtyNodes].clear();
      for (let actionId of customSemanticsActionIds) {
        let action = dart.nullCheck(semantics.CustomSemanticsAction.getAction(actionId));
        builder.updateCustomAction({id: actionId, label: action.label, hint: action.hint, overrideId: (t4$0 = (t4$ = action.action, t4$ == null ? null : t4$.index), t4$0 == null ? -1 : t4$0)});
      }
      dart.nullCheck(binding.SemanticsBinding.instance).window.updateSemantics(builder.build());
      this.notifyListeners();
    }
    [_getSemanticsActionHandlerForId](id, action) {
      let result = this[_nodes][$_get](id);
      if (result != null && result.isPartOfNodeMerging && !result[_canPerformAction](action)) {
        result[_visitDescendants](dart.fn(node => {
          if (node[_canPerformAction](action)) {
            result = node;
            return false;
          }
          return true;
        }, T.SemanticsNodeTobool()));
      }
      if (result == null || !dart.nullCheck(result)[_canPerformAction](action)) return null;
      return dart.nullCheck(result)[_actions][$_get](action);
    }
    performAction(id, action, args = null) {
      if (!(action !== null)) dart.assertFailed(null, I[1], 2716, 12, "action != null");
      let handler = this[_getSemanticsActionHandlerForId](id, action);
      if (handler != null) {
        handler(args);
        return;
      }
      if (action[$_equals](ui.SemanticsAction.showOnScreen) && dart.nullCheck(this[_nodes][$_get](id))[_showOnScreen] != null) dart.nullCheck(dart.nullCheck(this[_nodes][$_get](id))[_showOnScreen])();
    }
    [_getSemanticsActionHandlerForPosition](node, position, action) {
      let t4;
      if (node.transform != null) {
        let inverse = vector_math_64.Matrix4.identity();
        if (inverse.copyInverse(dart.nullCheck(node.transform)) === 0.0) return null;
        position = matrix_utils.MatrixUtils.transformPoint(inverse, position);
      }
      if (!node.rect.contains(position)) return null;
      if (node.mergeAllDescendantsIntoThisNode) {
        let result = null;
        node[_visitDescendants](dart.fn(child => {
          if (child[_canPerformAction](action)) {
            result = child;
            return false;
          }
          return true;
        }, T.SemanticsNodeTobool()));
        t4 = result;
        return t4 == null ? null : t4[_actions][$_get](action);
      }
      if (node.hasChildren) {
        for (let child of dart.nullCheck(node[_children])[$reversed]) {
          let handler = this[_getSemanticsActionHandlerForPosition](child, position, action);
          if (handler != null) return handler;
        }
      }
      return node[_actions][$_get](action);
    }
    performActionAt(position, action, args = null) {
      if (!(action !== null)) dart.assertFailed(null, I[1], 2766, 12, "action != null");
      let node = this.rootSemanticsNode;
      if (node == null) return;
      let handler = this[_getSemanticsActionHandlerForPosition](node, position, action);
      if (handler != null) handler(args);
    }
    toString() {
      return diagnostics.describeIdentity(this);
    }
  };
  (semantics.SemanticsOwner.new = function() {
    this[_dirtyNodes] = T.LinkedHashSetOfSemanticsNode().new();
    this[_nodes] = new (T.IdentityMapOfint$SemanticsNode()).new();
    this[_detachedNodes] = T.LinkedHashSetOfSemanticsNode().new();
    semantics.SemanticsOwner.__proto__.new.call(this);
    ;
  }).prototype = semantics.SemanticsOwner.prototype;
  dart.addTypeTests(semantics.SemanticsOwner);
  dart.addTypeCaches(semantics.SemanticsOwner);
  dart.setMethodSignature(semantics.SemanticsOwner, () => ({
    __proto__: dart.getMethods(semantics.SemanticsOwner.__proto__),
    sendSemanticsUpdate: dart.fnType(dart.void, []),
    [_getSemanticsActionHandlerForId]: dart.fnType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.Object)])), [core.int, ui.SemanticsAction]),
    performAction: dart.fnType(dart.void, [core.int, ui.SemanticsAction], [dart.nullable(core.Object)]),
    [_getSemanticsActionHandlerForPosition]: dart.fnType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.Object)])), [semantics.SemanticsNode, ui.Offset, ui.SemanticsAction]),
    performActionAt: dart.fnType(dart.void, [ui.Offset, ui.SemanticsAction], [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(semantics.SemanticsOwner, () => ({
    __proto__: dart.getGetters(semantics.SemanticsOwner.__proto__),
    rootSemanticsNode: dart.nullable(semantics.SemanticsNode)
  }));
  dart.setLibraryUri(semantics.SemanticsOwner, I[0]);
  dart.setFieldSignature(semantics.SemanticsOwner, () => ({
    __proto__: dart.getFields(semantics.SemanticsOwner.__proto__),
    [_dirtyNodes]: dart.finalFieldType(core.Set$(semantics.SemanticsNode)),
    [_nodes]: dart.finalFieldType(core.Map$(core.int, semantics.SemanticsNode)),
    [_detachedNodes]: dart.finalFieldType(core.Set$(semantics.SemanticsNode))
  }));
  dart.defineExtensionMethods(semantics.SemanticsOwner, ['toString']);
  var explicitChildNodes = dart.privateName(semantics, "SemanticsConfiguration.explicitChildNodes");
  var isBlockingSemanticsOfPreviouslyPaintedNodes = dart.privateName(semantics, "SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes");
  var _isSemanticBoundary = dart.privateName(semantics, "_isSemanticBoundary");
  var _hasBeenAnnotated = dart.privateName(semantics, "_hasBeenAnnotated");
  var _onTap = dart.privateName(semantics, "_onTap");
  var _onLongPress = dart.privateName(semantics, "_onLongPress");
  var _onScrollLeft = dart.privateName(semantics, "_onScrollLeft");
  var _onDismiss = dart.privateName(semantics, "_onDismiss");
  var _onScrollRight = dart.privateName(semantics, "_onScrollRight");
  var _onScrollUp = dart.privateName(semantics, "_onScrollUp");
  var _onScrollDown = dart.privateName(semantics, "_onScrollDown");
  var _onIncrease = dart.privateName(semantics, "_onIncrease");
  var _onDecrease = dart.privateName(semantics, "_onDecrease");
  var _onCopy = dart.privateName(semantics, "_onCopy");
  var _onCut = dart.privateName(semantics, "_onCut");
  var _onPaste = dart.privateName(semantics, "_onPaste");
  var _onShowOnScreen = dart.privateName(semantics, "_onShowOnScreen");
  var _onMoveCursorForwardByCharacter = dart.privateName(semantics, "_onMoveCursorForwardByCharacter");
  var _onMoveCursorBackwardByCharacter = dart.privateName(semantics, "_onMoveCursorBackwardByCharacter");
  var _onMoveCursorForwardByWord = dart.privateName(semantics, "_onMoveCursorForwardByWord");
  var _onMoveCursorBackwardByWord = dart.privateName(semantics, "_onMoveCursorBackwardByWord");
  var _onSetSelection = dart.privateName(semantics, "_onSetSelection");
  var _onSetText = dart.privateName(semantics, "_onSetText");
  var _onDidGainAccessibilityFocus = dart.privateName(semantics, "_onDidGainAccessibilityFocus");
  var _onDidLoseAccessibilityFocus = dart.privateName(semantics, "_onDidLoseAccessibilityFocus");
  var _indexInParent = dart.privateName(semantics, "_indexInParent");
  var _isMergingSemanticsOfDescendants = dart.privateName(semantics, "_isMergingSemanticsOfDescendants");
  var _tagsForChildren = dart.privateName(semantics, "_tagsForChildren");
  var _addAction = dart.privateName(semantics, "_addAction");
  var _addArgumentlessAction = dart.privateName(semantics, "_addArgumentlessAction");
  var _onCustomSemanticsAction = dart.privateName(semantics, "_onCustomSemanticsAction");
  var _hasFlag = dart.privateName(semantics, "_hasFlag");
  var _setFlag = dart.privateName(semantics, "_setFlag");
  semantics.SemanticsConfiguration = class SemanticsConfiguration extends core.Object {
    get explicitChildNodes() {
      return this[explicitChildNodes];
    }
    set explicitChildNodes(value) {
      this[explicitChildNodes] = value;
    }
    get isBlockingSemanticsOfPreviouslyPaintedNodes() {
      return this[isBlockingSemanticsOfPreviouslyPaintedNodes];
    }
    set isBlockingSemanticsOfPreviouslyPaintedNodes(value) {
      this[isBlockingSemanticsOfPreviouslyPaintedNodes] = value;
    }
    get isSemanticBoundary() {
      return this[_isSemanticBoundary];
    }
    set isSemanticBoundary(value) {
      if (!(!this.isMergingSemanticsOfDescendants || value)) dart.assertFailed(null, I[1], 2804, 12, "!isMergingSemanticsOfDescendants || value");
      this[_isSemanticBoundary] = value;
    }
    get hasBeenAnnotated() {
      return this[_hasBeenAnnotated];
    }
    [_addAction](action, handler) {
      if (!(handler !== null)) dart.assertFailed(null, I[1], 2866, 12, "handler != null");
      this[_actions][$_set](action, handler);
      this[_actionsAsBits] = (this[_actionsAsBits] | action.index) >>> 0;
      this[_hasBeenAnnotated] = true;
    }
    [_addArgumentlessAction](action, handler) {
      if (!(handler !== null)) dart.assertFailed(null, I[1], 2878, 12, "handler != null");
      this[_addAction](action, dart.fn(args => {
        if (!(args == null)) dart.assertFailed(null, I[1], 2880, 14, "args == null");
        handler();
      }, T.ObjectNTovoid()));
    }
    get onTap() {
      return this[_onTap];
    }
    set onTap(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.tap, dart.nullCheck(value));
      this[_onTap] = value;
    }
    get onLongPress() {
      return this[_onLongPress];
    }
    set onLongPress(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.longPress, dart.nullCheck(value));
      this[_onLongPress] = value;
    }
    get onScrollLeft() {
      return this[_onScrollLeft];
    }
    set onScrollLeft(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollLeft, dart.nullCheck(value));
      this[_onScrollLeft] = value;
    }
    get onDismiss() {
      return this[_onDismiss];
    }
    set onDismiss(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.dismiss, dart.nullCheck(value));
      this[_onDismiss] = value;
    }
    get onScrollRight() {
      return this[_onScrollRight];
    }
    set onScrollRight(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollRight, dart.nullCheck(value));
      this[_onScrollRight] = value;
    }
    get onScrollUp() {
      return this[_onScrollUp];
    }
    set onScrollUp(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollUp, dart.nullCheck(value));
      this[_onScrollUp] = value;
    }
    get onScrollDown() {
      return this[_onScrollDown];
    }
    set onScrollDown(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.scrollDown, dart.nullCheck(value));
      this[_onScrollDown] = value;
    }
    get onIncrease() {
      return this[_onIncrease];
    }
    set onIncrease(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.increase, dart.nullCheck(value));
      this[_onIncrease] = value;
    }
    get onDecrease() {
      return this[_onDecrease];
    }
    set onDecrease(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.decrease, dart.nullCheck(value));
      this[_onDecrease] = value;
    }
    get onCopy() {
      return this[_onCopy];
    }
    set onCopy(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.copy, dart.nullCheck(value));
      this[_onCopy] = value;
    }
    get onCut() {
      return this[_onCut];
    }
    set onCut(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.cut, dart.nullCheck(value));
      this[_onCut] = value;
    }
    get onPaste() {
      return this[_onPaste];
    }
    set onPaste(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.paste, dart.nullCheck(value));
      this[_onPaste] = value;
    }
    get onShowOnScreen() {
      return this[_onShowOnScreen];
    }
    set onShowOnScreen(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.showOnScreen, dart.nullCheck(value));
      this[_onShowOnScreen] = value;
    }
    get onMoveCursorForwardByCharacter() {
      return this[_onMoveCursorForwardByCharacter];
    }
    set onMoveCursorForwardByCharacter(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3115, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorForwardByCharacter, dart.fn(args => {
        let extentSelection = core.bool.as(dart.nullCheck(args));
        dart.nullCheck(value)(extentSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorForwardByCharacter] = value;
    }
    get onMoveCursorBackwardByCharacter() {
      return this[_onMoveCursorBackwardByCharacter];
    }
    set onMoveCursorBackwardByCharacter(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3133, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorBackwardByCharacter, dart.fn(args => {
        let extentSelection = core.bool.as(dart.nullCheck(args));
        dart.nullCheck(value)(extentSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorBackwardByCharacter] = value;
    }
    get onMoveCursorForwardByWord() {
      return this[_onMoveCursorForwardByWord];
    }
    set onMoveCursorForwardByWord(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3151, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorForwardByWord, dart.fn(args => {
        let extentSelection = core.bool.as(dart.nullCheck(args));
        dart.nullCheck(value)(extentSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorForwardByCharacter] = value;
    }
    get onMoveCursorBackwardByWord() {
      return this[_onMoveCursorBackwardByWord];
    }
    set onMoveCursorBackwardByWord(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3169, 12, "value != null");
      this[_addAction](ui.SemanticsAction.moveCursorBackwardByWord, dart.fn(args => {
        let extentSelection = core.bool.as(dart.nullCheck(args));
        dart.nullCheck(value)(extentSelection);
      }, T.ObjectNTovoid()));
      this[_onMoveCursorBackwardByCharacter] = value;
    }
    get onSetSelection() {
      return this[_onSetSelection];
    }
    set onSetSelection(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3187, 12, "value != null");
      this[_addAction](ui.SemanticsAction.setSelection, dart.fn(args => {
        if (!(args != null && core.Map.is(args))) dart.assertFailed(null, I[1], 3189, 14, "args != null && args is Map");
        let selection = core.Map.as(dart.nullCheck(args))[$cast](core.String, core.int);
        if (!(selection !== null && selection[$_get]("base") != null && selection[$_get]("extent") != null)) dart.assertFailed(null, I[1], 3191, 14, "selection != null && selection['base'] != null && selection['extent'] != null");
        dart.nullCheck(value)(new text_editing.TextSelection.new({baseOffset: dart.nullCheck(selection[$_get]("base")), extentOffset: dart.nullCheck(selection[$_get]("extent"))}));
      }, T.ObjectNTovoid()));
      this[_onSetSelection] = value;
    }
    get onSetText() {
      return this[_onSetText];
    }
    set onSetText(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3210, 12, "value != null");
      this[_addAction](ui.SemanticsAction.setText, dart.fn(args => {
        if (!(args != null && typeof args == 'string')) dart.assertFailed(null, I[1], 3212, 14, "args != null && args is String");
        let text = core.String.as(dart.nullCheck(args));
        dart.nullCheck(value)(text);
      }, T.ObjectNTovoid()));
      this[_onSetText] = value;
    }
    get onDidGainAccessibilityFocus() {
      return this[_onDidGainAccessibilityFocus];
    }
    set onDidGainAccessibilityFocus(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.didGainAccessibilityFocus, dart.nullCheck(value));
      this[_onDidGainAccessibilityFocus] = value;
    }
    get onDidLoseAccessibilityFocus() {
      return this[_onDidLoseAccessibilityFocus];
    }
    set onDidLoseAccessibilityFocus(value) {
      this[_addArgumentlessAction](ui.SemanticsAction.didLoseAccessibilityFocus, dart.nullCheck(value));
      this[_onDidLoseAccessibilityFocus] = value;
    }
    getActionHandler(action) {
      return this[_actions][$_get](action);
    }
    get sortKey() {
      return this[_sortKey];
    }
    set sortKey(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3285, 12, "value != null");
      this[_sortKey] = value;
      this[_hasBeenAnnotated] = true;
    }
    get indexInParent() {
      return this[_indexInParent];
    }
    set indexInParent(value) {
      this[_indexInParent] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollChildCount() {
      return this[_scrollChildCount];
    }
    set scrollChildCount(value) {
      if (value == this.scrollChildCount) return;
      this[_scrollChildCount] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    set scrollIndex(value) {
      if (value == this.scrollIndex) return;
      this[_scrollIndex] = value;
      this[_hasBeenAnnotated] = true;
    }
    get platformViewId() {
      return this[_platformViewId];
    }
    set platformViewId(value) {
      if (value == this.platformViewId) return;
      this[_platformViewId] = value;
      this[_hasBeenAnnotated] = true;
    }
    get maxValueLength() {
      return this[_maxValueLength];
    }
    set maxValueLength(value) {
      if (value == this.maxValueLength) return;
      this[_maxValueLength] = value;
      this[_hasBeenAnnotated] = true;
    }
    get currentValueLength() {
      return this[_currentValueLength];
    }
    set currentValueLength(value) {
      if (value == this.currentValueLength) return;
      this[_currentValueLength] = value;
      this[_hasBeenAnnotated] = true;
    }
    get isMergingSemanticsOfDescendants() {
      return this[_isMergingSemanticsOfDescendants];
    }
    set isMergingSemanticsOfDescendants(value) {
      if (!this.isSemanticBoundary) dart.assertFailed(null, I[1], 3383, 12, "isSemanticBoundary");
      this[_isMergingSemanticsOfDescendants] = value;
      this[_hasBeenAnnotated] = true;
    }
    get customSemanticsActions() {
      return this[_customSemanticsActions];
    }
    set customSemanticsActions(value) {
      this[_hasBeenAnnotated] = true;
      this[_actionsAsBits] = (this[_actionsAsBits] | ui.SemanticsAction.customAction.index) >>> 0;
      this[_customSemanticsActions] = value;
      this[_actions][$_set](ui.SemanticsAction.customAction, dart.bind(this, _onCustomSemanticsAction));
    }
    [_onCustomSemanticsAction](args) {
      let action = semantics.CustomSemanticsAction.getAction(core.int.as(dart.nullCheck(args)));
      if (action == null) return;
      let callback = this[_customSemanticsActions][$_get](action);
      if (callback != null) callback();
    }
    get label() {
      return this[_label];
    }
    set label(label) {
      if (!(label !== null)) dart.assertFailed(null, I[1], 3423, 12, "label != null");
      this[_label] = label;
      this[_hasBeenAnnotated] = true;
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 3446, 12, "value != null");
      this[_value] = value;
      this[_hasBeenAnnotated] = true;
    }
    get decreasedValue() {
      return this[_decreasedValue];
    }
    set decreasedValue(decreasedValue) {
      if (!(decreasedValue !== null)) dart.assertFailed(null, I[1], 3461, 12, "decreasedValue != null");
      this[_decreasedValue] = decreasedValue;
      this[_hasBeenAnnotated] = true;
    }
    get increasedValue() {
      return this[_increasedValue];
    }
    set increasedValue(increasedValue) {
      if (!(increasedValue !== null)) dart.assertFailed(null, I[1], 3476, 12, "increasedValue != null");
      this[_increasedValue] = increasedValue;
      this[_hasBeenAnnotated] = true;
    }
    get hint() {
      return this[_hint];
    }
    set hint(hint) {
      if (!(hint !== null)) dart.assertFailed(null, I[1], 3492, 12, "hint != null");
      this[_hint] = hint;
      this[_hasBeenAnnotated] = true;
    }
    get hintOverrides() {
      return this[_hintOverrides];
    }
    set hintOverrides(value) {
      if (value == null) return;
      this[_hintOverrides] = value;
      this[_hasBeenAnnotated] = true;
    }
    get elevation() {
      return this[_elevation];
    }
    set elevation(value) {
      if (!(value !== null && value >= 0.0)) dart.assertFailed(null, I[1], 3513, 12, "value != null && value >= 0.0");
      if (value === this[_elevation]) {
        return;
      }
      this[_elevation] = value;
      this[_hasBeenAnnotated] = true;
    }
    get thickness() {
      return this[_thickness];
    }
    set thickness(value) {
      if (!(value !== null && value >= 0.0)) dart.assertFailed(null, I[1], 3530, 12, "value != null && value >= 0.0");
      if (value === this[_thickness]) {
        return;
      }
      this[_thickness] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scopesRoute() {
      return this[_hasFlag](ui.SemanticsFlag.scopesRoute);
    }
    set scopesRoute(value) {
      this[_setFlag](ui.SemanticsFlag.scopesRoute, value);
    }
    get namesRoute() {
      return this[_hasFlag](ui.SemanticsFlag.namesRoute);
    }
    set namesRoute(value) {
      this[_setFlag](ui.SemanticsFlag.namesRoute, value);
    }
    get isImage() {
      return this[_hasFlag](ui.SemanticsFlag.isImage);
    }
    set isImage(value) {
      this[_setFlag](ui.SemanticsFlag.isImage, value);
    }
    get liveRegion() {
      return this[_hasFlag](ui.SemanticsFlag.isLiveRegion);
    }
    set liveRegion(value) {
      this[_setFlag](ui.SemanticsFlag.isLiveRegion, value);
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(textDirection) {
      this[_textDirection] = textDirection;
      this[_hasBeenAnnotated] = true;
    }
    get isSelected() {
      return this[_hasFlag](ui.SemanticsFlag.isSelected);
    }
    set isSelected(value) {
      this[_setFlag](ui.SemanticsFlag.isSelected, value);
    }
    get isEnabled() {
      return this[_hasFlag](ui.SemanticsFlag.hasEnabledState) ? this[_hasFlag](ui.SemanticsFlag.isEnabled) : null;
    }
    set isEnabled(value) {
      this[_setFlag](ui.SemanticsFlag.hasEnabledState, true);
      this[_setFlag](ui.SemanticsFlag.isEnabled, dart.nullCheck(value));
    }
    get isChecked() {
      return this[_hasFlag](ui.SemanticsFlag.hasCheckedState) ? this[_hasFlag](ui.SemanticsFlag.isChecked) : null;
    }
    set isChecked(value) {
      this[_setFlag](ui.SemanticsFlag.hasCheckedState, true);
      this[_setFlag](ui.SemanticsFlag.isChecked, dart.nullCheck(value));
    }
    get isToggled() {
      return this[_hasFlag](ui.SemanticsFlag.hasToggledState) ? this[_hasFlag](ui.SemanticsFlag.isToggled) : null;
    }
    set isToggled(value) {
      this[_setFlag](ui.SemanticsFlag.hasToggledState, true);
      this[_setFlag](ui.SemanticsFlag.isToggled, dart.nullCheck(value));
    }
    get isInMutuallyExclusiveGroup() {
      return this[_hasFlag](ui.SemanticsFlag.isInMutuallyExclusiveGroup);
    }
    set isInMutuallyExclusiveGroup(value) {
      this[_setFlag](ui.SemanticsFlag.isInMutuallyExclusiveGroup, value);
    }
    get isFocusable() {
      return this[_hasFlag](ui.SemanticsFlag.isFocusable);
    }
    set isFocusable(value) {
      this[_setFlag](ui.SemanticsFlag.isFocusable, value);
    }
    get isFocused() {
      return this[_hasFlag](ui.SemanticsFlag.isFocused);
    }
    set isFocused(value) {
      this[_setFlag](ui.SemanticsFlag.isFocused, value);
    }
    get isButton() {
      return this[_hasFlag](ui.SemanticsFlag.isButton);
    }
    set isButton(value) {
      this[_setFlag](ui.SemanticsFlag.isButton, value);
    }
    get isLink() {
      return this[_hasFlag](ui.SemanticsFlag.isLink);
    }
    set isLink(value) {
      this[_setFlag](ui.SemanticsFlag.isLink, value);
    }
    get isHeader() {
      return this[_hasFlag](ui.SemanticsFlag.isHeader);
    }
    set isHeader(value) {
      this[_setFlag](ui.SemanticsFlag.isHeader, value);
    }
    get isSlider() {
      return this[_hasFlag](ui.SemanticsFlag.isSlider);
    }
    set isSlider(value) {
      this[_setFlag](ui.SemanticsFlag.isSlider, value);
    }
    get isKeyboardKey() {
      return this[_hasFlag](ui.SemanticsFlag.isKeyboardKey);
    }
    set isKeyboardKey(value) {
      this[_setFlag](ui.SemanticsFlag.isKeyboardKey, value);
    }
    get isHidden() {
      return this[_hasFlag](ui.SemanticsFlag.isHidden);
    }
    set isHidden(value) {
      this[_setFlag](ui.SemanticsFlag.isHidden, value);
    }
    get isTextField() {
      return this[_hasFlag](ui.SemanticsFlag.isTextField);
    }
    set isTextField(value) {
      this[_setFlag](ui.SemanticsFlag.isTextField, value);
    }
    get isReadOnly() {
      return this[_hasFlag](ui.SemanticsFlag.isReadOnly);
    }
    set isReadOnly(value) {
      this[_setFlag](ui.SemanticsFlag.isReadOnly, value);
    }
    get isObscured() {
      return this[_hasFlag](ui.SemanticsFlag.isObscured);
    }
    set isObscured(value) {
      this[_setFlag](ui.SemanticsFlag.isObscured, value);
    }
    get isMultiline() {
      return this[_hasFlag](ui.SemanticsFlag.isMultiline);
    }
    set isMultiline(value) {
      this[_setFlag](ui.SemanticsFlag.isMultiline, value);
    }
    get hasImplicitScrolling() {
      return this[_hasFlag](ui.SemanticsFlag.hasImplicitScrolling);
    }
    set hasImplicitScrolling(value) {
      this[_setFlag](ui.SemanticsFlag.hasImplicitScrolling, value);
    }
    get textSelection() {
      return this[_textSelection];
    }
    set textSelection(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3779, 12, "value != null");
      this[_textSelection] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    set scrollPosition(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3797, 12, "value != null");
      this[_scrollPosition] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    set scrollExtentMax(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3813, 12, "value != null");
      this[_scrollExtentMax] = value;
      this[_hasBeenAnnotated] = true;
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    set scrollExtentMin(value) {
      if (!(value != null)) dart.assertFailed(null, I[1], 3829, 12, "value != null");
      this[_scrollExtentMin] = value;
      this[_hasBeenAnnotated] = true;
    }
    get tagsForChildren() {
      return this[_tagsForChildren];
    }
    addTagForChildren(tag) {
      this[_tagsForChildren] == null ? this[_tagsForChildren] = T.LinkedHashSetOfSemanticsTag().new() : null;
      dart.nullCheck(this[_tagsForChildren]).add(tag);
    }
    [_setFlag](flag, value) {
      if (value) {
        this[_flags] = (this[_flags] | flag.index) >>> 0;
      } else {
        this[_flags] = (this[_flags] & ~flag.index >>> 0) >>> 0;
      }
      this[_hasBeenAnnotated] = true;
    }
    [_hasFlag](flag) {
      return (this[_flags] & flag.index) !== 0;
    }
    isCompatibleWith(other) {
      if (other == null || !other.hasBeenAnnotated || !this.hasBeenAnnotated) return true;
      if ((this[_actionsAsBits] & other[_actionsAsBits]) !== 0) return false;
      if ((this[_flags] & other[_flags]) !== 0) return false;
      if (this[_platformViewId] != null && other[_platformViewId] != null) {
        return false;
      }
      if (this[_maxValueLength] != null && other[_maxValueLength] != null) {
        return false;
      }
      if (this[_currentValueLength] != null && other[_currentValueLength] != null) {
        return false;
      }
      if (this[_value] !== null && this[_value][$isNotEmpty] && other[_value] !== null && other[_value][$isNotEmpty]) return false;
      return true;
    }
    absorb(child) {
      if (!!this.explicitChildNodes) dart.assertFailed(null, I[1], 3920, 12, "!explicitChildNodes");
      if (!child.hasBeenAnnotated) return;
      this[_actions][$addAll](child[_actions]);
      this[_customSemanticsActions][$addAll](child[_customSemanticsActions]);
      this[_actionsAsBits] = (this[_actionsAsBits] | child[_actionsAsBits]) >>> 0;
      this[_flags] = (this[_flags] | child[_flags]) >>> 0;
      this[_textSelection] == null ? this[_textSelection] = child[_textSelection] : null;
      this[_scrollPosition] == null ? this[_scrollPosition] = child[_scrollPosition] : null;
      this[_scrollExtentMax] == null ? this[_scrollExtentMax] = child[_scrollExtentMax] : null;
      this[_scrollExtentMin] == null ? this[_scrollExtentMin] = child[_scrollExtentMin] : null;
      this[_hintOverrides] == null ? this[_hintOverrides] = child[_hintOverrides] : null;
      this[_indexInParent] == null ? this[_indexInParent] = child.indexInParent : null;
      this[_scrollIndex] == null ? this[_scrollIndex] = child[_scrollIndex] : null;
      this[_scrollChildCount] == null ? this[_scrollChildCount] = child[_scrollChildCount] : null;
      this[_platformViewId] == null ? this[_platformViewId] = child[_platformViewId] : null;
      this[_maxValueLength] == null ? this[_maxValueLength] = child[_maxValueLength] : null;
      this[_currentValueLength] == null ? this[_currentValueLength] = child[_currentValueLength] : null;
      this.textDirection == null ? this.textDirection = child.textDirection : null;
      this[_sortKey] == null ? this[_sortKey] = child[_sortKey] : null;
      this[_label] = semantics._concatStrings({thisString: this[_label], thisTextDirection: this.textDirection, otherString: child[_label], otherTextDirection: child.textDirection});
      if (this[_decreasedValue] === "" || this[_decreasedValue] === null) this[_decreasedValue] = child[_decreasedValue];
      if (this[_value] === "" || this[_value] === null) this[_value] = child[_value];
      if (this[_increasedValue] === "" || this[_increasedValue] === null) this[_increasedValue] = child[_increasedValue];
      this[_hint] = semantics._concatStrings({thisString: this[_hint], thisTextDirection: this.textDirection, otherString: child[_hint], otherTextDirection: child.textDirection});
      this[_thickness] = math.max(core.double, this[_thickness], child[_thickness] + child[_elevation]);
      this[_hasBeenAnnotated] = this[_hasBeenAnnotated] || child[_hasBeenAnnotated];
    }
    copy() {
      let t4;
      t4 = new semantics.SemanticsConfiguration.new();
      return (() => {
        t4[_isSemanticBoundary] = this[_isSemanticBoundary];
        t4.explicitChildNodes = this.explicitChildNodes;
        t4.isBlockingSemanticsOfPreviouslyPaintedNodes = this.isBlockingSemanticsOfPreviouslyPaintedNodes;
        t4[_hasBeenAnnotated] = this[_hasBeenAnnotated];
        t4[_isMergingSemanticsOfDescendants] = this[_isMergingSemanticsOfDescendants];
        t4[_textDirection] = this[_textDirection];
        t4[_sortKey] = this[_sortKey];
        t4[_label] = this[_label];
        t4[_increasedValue] = this[_increasedValue];
        t4[_value] = this[_value];
        t4[_decreasedValue] = this[_decreasedValue];
        t4[_hint] = this[_hint];
        t4[_hintOverrides] = this[_hintOverrides];
        t4[_elevation] = this[_elevation];
        t4[_thickness] = this[_thickness];
        t4[_flags] = this[_flags];
        t4[_tagsForChildren] = this[_tagsForChildren];
        t4[_textSelection] = this[_textSelection];
        t4[_scrollPosition] = this[_scrollPosition];
        t4[_scrollExtentMax] = this[_scrollExtentMax];
        t4[_scrollExtentMin] = this[_scrollExtentMin];
        t4[_actionsAsBits] = this[_actionsAsBits];
        t4[_indexInParent] = this.indexInParent;
        t4[_scrollIndex] = this[_scrollIndex];
        t4[_scrollChildCount] = this[_scrollChildCount];
        t4[_platformViewId] = this[_platformViewId];
        t4[_maxValueLength] = this[_maxValueLength];
        t4[_currentValueLength] = this[_currentValueLength];
        t4[_actions][$addAll](this[_actions]);
        t4[_customSemanticsActions][$addAll](this[_customSemanticsActions]);
        return t4;
      })();
    }
  };
  (semantics.SemanticsConfiguration.new = function() {
    this[_isSemanticBoundary] = false;
    this[explicitChildNodes] = false;
    this[isBlockingSemanticsOfPreviouslyPaintedNodes] = false;
    this[_hasBeenAnnotated] = false;
    this[_actions] = new (T.LinkedMapOfSemanticsAction$ObjectNTovoid()).new();
    this[_actionsAsBits] = 0;
    this[_onTap] = null;
    this[_onLongPress] = null;
    this[_onScrollLeft] = null;
    this[_onDismiss] = null;
    this[_onScrollRight] = null;
    this[_onScrollUp] = null;
    this[_onScrollDown] = null;
    this[_onIncrease] = null;
    this[_onDecrease] = null;
    this[_onCopy] = null;
    this[_onCut] = null;
    this[_onPaste] = null;
    this[_onShowOnScreen] = null;
    this[_onMoveCursorForwardByCharacter] = null;
    this[_onMoveCursorBackwardByCharacter] = null;
    this[_onMoveCursorForwardByWord] = null;
    this[_onMoveCursorBackwardByWord] = null;
    this[_onSetSelection] = null;
    this[_onSetText] = null;
    this[_onDidGainAccessibilityFocus] = null;
    this[_onDidLoseAccessibilityFocus] = null;
    this[_sortKey] = null;
    this[_indexInParent] = null;
    this[_scrollChildCount] = null;
    this[_scrollIndex] = null;
    this[_platformViewId] = null;
    this[_maxValueLength] = null;
    this[_currentValueLength] = null;
    this[_isMergingSemanticsOfDescendants] = false;
    this[_customSemanticsActions] = new (T.LinkedMapOfCustomSemanticsAction$VoidTovoid()).new();
    this[_label] = "";
    this[_value] = "";
    this[_decreasedValue] = "";
    this[_increasedValue] = "";
    this[_hint] = "";
    this[_hintOverrides] = null;
    this[_elevation] = 0.0;
    this[_thickness] = 0.0;
    this[_textDirection] = null;
    this[_textSelection] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_tagsForChildren] = null;
    this[_flags] = 0;
    ;
  }).prototype = semantics.SemanticsConfiguration.prototype;
  dart.addTypeTests(semantics.SemanticsConfiguration);
  dart.addTypeCaches(semantics.SemanticsConfiguration);
  dart.setMethodSignature(semantics.SemanticsConfiguration, () => ({
    __proto__: dart.getMethods(semantics.SemanticsConfiguration.__proto__),
    [_addAction]: dart.fnType(dart.void, [ui.SemanticsAction, dart.fnType(dart.void, [dart.nullable(core.Object)])]),
    [_addArgumentlessAction]: dart.fnType(dart.void, [ui.SemanticsAction, dart.fnType(dart.void, [])]),
    getActionHandler: dart.fnType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.Object)])), [ui.SemanticsAction]),
    [_onCustomSemanticsAction]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addTagForChildren: dart.fnType(dart.void, [semantics.SemanticsTag]),
    [_setFlag]: dart.fnType(dart.void, [ui.SemanticsFlag, core.bool]),
    [_hasFlag]: dart.fnType(core.bool, [ui.SemanticsFlag]),
    isCompatibleWith: dart.fnType(core.bool, [dart.nullable(semantics.SemanticsConfiguration)]),
    absorb: dart.fnType(dart.void, [semantics.SemanticsConfiguration]),
    copy: dart.fnType(semantics.SemanticsConfiguration, [])
  }));
  dart.setGetterSignature(semantics.SemanticsConfiguration, () => ({
    __proto__: dart.getGetters(semantics.SemanticsConfiguration.__proto__),
    isSemanticBoundary: core.bool,
    hasBeenAnnotated: core.bool,
    onTap: dart.nullable(dart.fnType(dart.void, [])),
    onLongPress: dart.nullable(dart.fnType(dart.void, [])),
    onScrollLeft: dart.nullable(dart.fnType(dart.void, [])),
    onDismiss: dart.nullable(dart.fnType(dart.void, [])),
    onScrollRight: dart.nullable(dart.fnType(dart.void, [])),
    onScrollUp: dart.nullable(dart.fnType(dart.void, [])),
    onScrollDown: dart.nullable(dart.fnType(dart.void, [])),
    onIncrease: dart.nullable(dart.fnType(dart.void, [])),
    onDecrease: dart.nullable(dart.fnType(dart.void, [])),
    onCopy: dart.nullable(dart.fnType(dart.void, [])),
    onCut: dart.nullable(dart.fnType(dart.void, [])),
    onPaste: dart.nullable(dart.fnType(dart.void, [])),
    onShowOnScreen: dart.nullable(dart.fnType(dart.void, [])),
    onMoveCursorForwardByCharacter: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorBackwardByCharacter: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorForwardByWord: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorBackwardByWord: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onSetSelection: dart.nullable(dart.fnType(dart.void, [text_editing.TextSelection])),
    onSetText: dart.nullable(dart.fnType(dart.void, [core.String])),
    onDidGainAccessibilityFocus: dart.nullable(dart.fnType(dart.void, [])),
    onDidLoseAccessibilityFocus: dart.nullable(dart.fnType(dart.void, [])),
    sortKey: dart.nullable(semantics.SemanticsSortKey),
    indexInParent: dart.nullable(core.int),
    scrollChildCount: dart.nullable(core.int),
    scrollIndex: dart.nullable(core.int),
    platformViewId: dart.nullable(core.int),
    maxValueLength: dart.nullable(core.int),
    currentValueLength: dart.nullable(core.int),
    isMergingSemanticsOfDescendants: core.bool,
    customSemanticsActions: core.Map$(semantics.CustomSemanticsAction, dart.fnType(dart.void, [])),
    label: core.String,
    value: core.String,
    decreasedValue: core.String,
    increasedValue: core.String,
    hint: core.String,
    hintOverrides: dart.nullable(semantics.SemanticsHintOverrides),
    elevation: core.double,
    thickness: core.double,
    scopesRoute: core.bool,
    namesRoute: core.bool,
    isImage: core.bool,
    liveRegion: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    isSelected: core.bool,
    isEnabled: dart.nullable(core.bool),
    isChecked: dart.nullable(core.bool),
    isToggled: dart.nullable(core.bool),
    isInMutuallyExclusiveGroup: core.bool,
    isFocusable: core.bool,
    isFocused: core.bool,
    isButton: core.bool,
    isLink: core.bool,
    isHeader: core.bool,
    isSlider: core.bool,
    isKeyboardKey: core.bool,
    isHidden: core.bool,
    isTextField: core.bool,
    isReadOnly: core.bool,
    isObscured: core.bool,
    isMultiline: core.bool,
    hasImplicitScrolling: core.bool,
    textSelection: dart.nullable(text_editing.TextSelection),
    scrollPosition: dart.nullable(core.double),
    scrollExtentMax: dart.nullable(core.double),
    scrollExtentMin: dart.nullable(core.double),
    tagsForChildren: dart.nullable(core.Iterable$(semantics.SemanticsTag))
  }));
  dart.setSetterSignature(semantics.SemanticsConfiguration, () => ({
    __proto__: dart.getSetters(semantics.SemanticsConfiguration.__proto__),
    isSemanticBoundary: core.bool,
    onTap: dart.nullable(dart.fnType(dart.void, [])),
    onLongPress: dart.nullable(dart.fnType(dart.void, [])),
    onScrollLeft: dart.nullable(dart.fnType(dart.void, [])),
    onDismiss: dart.nullable(dart.fnType(dart.void, [])),
    onScrollRight: dart.nullable(dart.fnType(dart.void, [])),
    onScrollUp: dart.nullable(dart.fnType(dart.void, [])),
    onScrollDown: dart.nullable(dart.fnType(dart.void, [])),
    onIncrease: dart.nullable(dart.fnType(dart.void, [])),
    onDecrease: dart.nullable(dart.fnType(dart.void, [])),
    onCopy: dart.nullable(dart.fnType(dart.void, [])),
    onCut: dart.nullable(dart.fnType(dart.void, [])),
    onPaste: dart.nullable(dart.fnType(dart.void, [])),
    onShowOnScreen: dart.nullable(dart.fnType(dart.void, [])),
    onMoveCursorForwardByCharacter: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorBackwardByCharacter: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorForwardByWord: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onMoveCursorBackwardByWord: dart.nullable(dart.fnType(dart.void, [core.bool])),
    onSetSelection: dart.nullable(dart.fnType(dart.void, [text_editing.TextSelection])),
    onSetText: dart.nullable(dart.fnType(dart.void, [core.String])),
    onDidGainAccessibilityFocus: dart.nullable(dart.fnType(dart.void, [])),
    onDidLoseAccessibilityFocus: dart.nullable(dart.fnType(dart.void, [])),
    sortKey: dart.nullable(semantics.SemanticsSortKey),
    indexInParent: dart.nullable(core.int),
    scrollChildCount: dart.nullable(core.int),
    scrollIndex: dart.nullable(core.int),
    platformViewId: dart.nullable(core.int),
    maxValueLength: dart.nullable(core.int),
    currentValueLength: dart.nullable(core.int),
    isMergingSemanticsOfDescendants: core.bool,
    customSemanticsActions: core.Map$(semantics.CustomSemanticsAction, dart.fnType(dart.void, [])),
    label: core.String,
    value: core.String,
    decreasedValue: core.String,
    increasedValue: core.String,
    hint: core.String,
    hintOverrides: dart.nullable(semantics.SemanticsHintOverrides),
    elevation: core.double,
    thickness: core.double,
    scopesRoute: core.bool,
    namesRoute: core.bool,
    isImage: core.bool,
    liveRegion: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    isSelected: core.bool,
    isEnabled: dart.nullable(core.bool),
    isChecked: dart.nullable(core.bool),
    isToggled: dart.nullable(core.bool),
    isInMutuallyExclusiveGroup: core.bool,
    isFocusable: core.bool,
    isFocused: core.bool,
    isButton: core.bool,
    isLink: core.bool,
    isHeader: core.bool,
    isSlider: core.bool,
    isKeyboardKey: core.bool,
    isHidden: core.bool,
    isTextField: core.bool,
    isReadOnly: core.bool,
    isObscured: core.bool,
    isMultiline: core.bool,
    hasImplicitScrolling: core.bool,
    textSelection: dart.nullable(text_editing.TextSelection),
    scrollPosition: dart.nullable(core.double),
    scrollExtentMax: dart.nullable(core.double),
    scrollExtentMin: dart.nullable(core.double)
  }));
  dart.setLibraryUri(semantics.SemanticsConfiguration, I[0]);
  dart.setFieldSignature(semantics.SemanticsConfiguration, () => ({
    __proto__: dart.getFields(semantics.SemanticsConfiguration.__proto__),
    [_isSemanticBoundary]: dart.fieldType(core.bool),
    explicitChildNodes: dart.fieldType(core.bool),
    isBlockingSemanticsOfPreviouslyPaintedNodes: dart.fieldType(core.bool),
    [_hasBeenAnnotated]: dart.fieldType(core.bool),
    [_actions]: dart.finalFieldType(core.Map$(ui.SemanticsAction, dart.fnType(dart.void, [dart.nullable(core.Object)]))),
    [_actionsAsBits]: dart.fieldType(core.int),
    [_onTap]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onLongPress]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onScrollLeft]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onDismiss]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onScrollRight]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onScrollUp]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onScrollDown]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onIncrease]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onDecrease]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onCopy]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onCut]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onPaste]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onShowOnScreen]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onMoveCursorForwardByCharacter]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    [_onMoveCursorBackwardByCharacter]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    [_onMoveCursorForwardByWord]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    [_onMoveCursorBackwardByWord]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    [_onSetSelection]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [text_editing.TextSelection]))),
    [_onSetText]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    [_onDidGainAccessibilityFocus]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_onDidLoseAccessibilityFocus]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_sortKey]: dart.fieldType(dart.nullable(semantics.SemanticsSortKey)),
    [_indexInParent]: dart.fieldType(dart.nullable(core.int)),
    [_scrollChildCount]: dart.fieldType(dart.nullable(core.int)),
    [_scrollIndex]: dart.fieldType(dart.nullable(core.int)),
    [_platformViewId]: dart.fieldType(dart.nullable(core.int)),
    [_maxValueLength]: dart.fieldType(dart.nullable(core.int)),
    [_currentValueLength]: dart.fieldType(dart.nullable(core.int)),
    [_isMergingSemanticsOfDescendants]: dart.fieldType(core.bool),
    [_customSemanticsActions]: dart.fieldType(core.Map$(semantics.CustomSemanticsAction, dart.fnType(dart.void, []))),
    [_label]: dart.fieldType(core.String),
    [_value]: dart.fieldType(core.String),
    [_decreasedValue]: dart.fieldType(core.String),
    [_increasedValue]: dart.fieldType(core.String),
    [_hint]: dart.fieldType(core.String),
    [_hintOverrides]: dart.fieldType(dart.nullable(semantics.SemanticsHintOverrides)),
    [_elevation]: dart.fieldType(core.double),
    [_thickness]: dart.fieldType(core.double),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_textSelection]: dart.fieldType(dart.nullable(text_editing.TextSelection)),
    [_scrollPosition]: dart.fieldType(dart.nullable(core.double)),
    [_scrollExtentMax]: dart.fieldType(dart.nullable(core.double)),
    [_scrollExtentMin]: dart.fieldType(dart.nullable(core.double)),
    [_tagsForChildren]: dart.fieldType(dart.nullable(core.Set$(semantics.SemanticsTag))),
    [_flags]: dart.fieldType(core.int)
  }));
  semantics.DebugSemanticsDumpOrder = class DebugSemanticsDumpOrder extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (semantics.DebugSemanticsDumpOrder.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = semantics.DebugSemanticsDumpOrder.prototype;
  dart.addTypeTests(semantics.DebugSemanticsDumpOrder);
  dart.addTypeCaches(semantics.DebugSemanticsDumpOrder);
  dart.setLibraryUri(semantics.DebugSemanticsDumpOrder, I[0]);
  dart.setFieldSignature(semantics.DebugSemanticsDumpOrder, () => ({
    __proto__: dart.getFields(semantics.DebugSemanticsDumpOrder.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(semantics.DebugSemanticsDumpOrder, ['toString']);
  semantics.DebugSemanticsDumpOrder.inverseHitTest = C[4] || CT.C4;
  semantics.DebugSemanticsDumpOrder.traversalOrder = C[2] || CT.C2;
  semantics.DebugSemanticsDumpOrder.values = C[5] || CT.C5;
  var name$0 = dart.privateName(semantics, "SemanticsSortKey.name");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  semantics.SemanticsSortKey = class SemanticsSortKey extends Object_Diagnosticable$36$ {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    compareTo(other) {
      semantics.SemanticsSortKey.as(other);
      if (!this[$runtimeType]._equals(other[$runtimeType])) dart.assertFailed("Semantics sort keys can only be compared to other sort keys of the same type.", I[1], 4077, 12, "runtimeType == other.runtimeType");
      if (this.name == other.name) {
        return this.doCompare(other);
      }
      if (this.name == null && other.name != null) {
        return -1;
      } else if (this.name != null && other.name == null) {
        return 1;
      }
      return dart.nullCheck(this.name)[$compareTo](dart.nullCheck(other.name));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("name", this.name, {defaultValue: null}));
    }
  };
  (semantics.SemanticsSortKey.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[name$0] = name;
    ;
  }).prototype = semantics.SemanticsSortKey.prototype;
  dart.addTypeTests(semantics.SemanticsSortKey);
  dart.addTypeCaches(semantics.SemanticsSortKey);
  semantics.SemanticsSortKey[dart.implements] = () => [core.Comparable$(semantics.SemanticsSortKey)];
  dart.setMethodSignature(semantics.SemanticsSortKey, () => ({
    __proto__: dart.getMethods(semantics.SemanticsSortKey.__proto__),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(semantics.SemanticsSortKey, I[0]);
  dart.setFieldSignature(semantics.SemanticsSortKey, () => ({
    __proto__: dart.getFields(semantics.SemanticsSortKey.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(semantics.SemanticsSortKey, ['compareTo']);
  var order$ = dart.privateName(semantics, "OrdinalSortKey.order");
  semantics.OrdinalSortKey = class OrdinalSortKey extends semantics.SemanticsSortKey {
    get order() {
      return this[order$];
    }
    set order(value) {
      super.order = value;
    }
    doCompare(other) {
      semantics.OrdinalSortKey.as(other);
      if (other.order === null || this.order === null || other.order === this.order) return 0;
      return this.order[$compareTo](other.order);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("order", this.order, {defaultValue: null}));
    }
  };
  (semantics.OrdinalSortKey.new = function(order, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[order$] = order;
    if (!(order !== null)) dart.assertFailed(null, I[1], 4140, 15, "order != null");
    if (!(order !== 0 / 0)) dart.assertFailed(null, I[1], 4141, 15, "order != double.nan");
    if (!(order > -1 / 0)) dart.assertFailed(null, I[1], 4142, 15, "order > double.negativeInfinity");
    if (!(order < 1 / 0)) dart.assertFailed(null, I[1], 4143, 15, "order < double.infinity");
    semantics.OrdinalSortKey.__proto__.new.call(this, {name: name});
    ;
  }).prototype = semantics.OrdinalSortKey.prototype;
  dart.addTypeTests(semantics.OrdinalSortKey);
  dart.addTypeCaches(semantics.OrdinalSortKey);
  dart.setMethodSignature(semantics.OrdinalSortKey, () => ({
    __proto__: dart.getMethods(semantics.OrdinalSortKey.__proto__),
    doCompare: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(semantics.OrdinalSortKey, I[0]);
  dart.setFieldSignature(semantics.OrdinalSortKey, () => ({
    __proto__: dart.getFields(semantics.OrdinalSortKey.__proto__),
    order: dart.finalFieldType(core.double)
  }));
  var _name$0 = dart.privateName(ui, "_name");
  semantics.debugResetSemanticsIdCounter = function debugResetSemanticsIdCounter() {
    semantics.SemanticsNode._lastIdentifier = 0;
  };
  semantics._pointInParentCoordinates = function _pointInParentCoordinates(node, point) {
    if (node.transform == null) {
      return point;
    }
    let vector = vector_math_64.Vector3.new(point.dx, point.dy, 0.0);
    dart.nullCheck(node.transform).transform3(vector);
    return new ui.Offset.new(vector.x, vector.y);
  };
  semantics._childrenInDefaultOrder = function _childrenInDefaultOrder(children, textDirection) {
    let edges = T.JSArrayOf_BoxEdge().of([]);
    for (let child of children) {
      if (!child.rect.isFinite) dart.assertFailed(null, I[1], 2537, 12, "child.rect.isFinite");
      let childRect = child.rect.deflate(0.1);
      edges[$add](new semantics._BoxEdge.new({isLeadingEdge: true, offset: semantics._pointInParentCoordinates(child, childRect.topLeft).dy, node: child}));
      edges[$add](new semantics._BoxEdge.new({isLeadingEdge: false, offset: semantics._pointInParentCoordinates(child, childRect.bottomRight).dy, node: child}));
    }
    edges[$sort]();
    let verticalGroups = T.JSArrayOf_SemanticsSortGroup().of([]);
    let group = null;
    let depth = 0;
    for (let edge of edges) {
      if (edge.isLeadingEdge) {
        depth = depth + 1;
        group == null ? group = new semantics._SemanticsSortGroup.new({startOffset: edge.offset, textDirection: textDirection}) : null;
        group.nodes[$add](edge.node);
      } else {
        depth = depth - 1;
      }
      if (depth === 0) {
        verticalGroups[$add](dart.nullCheck(group));
        group = null;
      }
    }
    verticalGroups[$sort]();
    return verticalGroups[$expand](semantics.SemanticsNode, dart.fn(group => group.sortedWithinVerticalGroup(), T._SemanticsSortGroupToListOfSemanticsNode()))[$toList]();
  };
  semantics._concatStrings = function _concatStrings(opts) {
    let thisString = opts && 'thisString' in opts ? opts.thisString : null;
    let otherString = opts && 'otherString' in opts ? opts.otherString : null;
    let thisTextDirection = opts && 'thisTextDirection' in opts ? opts.thisTextDirection : null;
    let otherTextDirection = opts && 'otherTextDirection' in opts ? opts.otherTextDirection : null;
    if (otherString[$isEmpty]) return thisString;
    let nestedLabel = otherString;
    if (thisTextDirection != otherTextDirection && otherTextDirection != null) {
      switch (otherTextDirection) {
        case C[6] || CT.C6:
        {
          nestedLabel = "‫" + nestedLabel + "‬";
          break;
        }
        case C[7] || CT.C7:
        {
          nestedLabel = "‪" + nestedLabel + "‬";
          break;
        }
      }
    }
    if (thisString[$isEmpty]) return nestedLabel;
    return thisString + "\n" + nestedLabel;
  };
  dart.setBaseClass(semantics._SemanticsSortGroup, core.Comparable$(semantics._SemanticsSortGroup));
  dart.trackLibraries("packages/flutter/src/semantics/semantics.dart", {
    "package:flutter/src/semantics/semantics.dart": semantics
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["semantics.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/semantics/semantics.dart.lib.js"}');
  // Exports:
  return {
    src__semantics__semantics: semantics
  };
}));

//# sourceMappingURL=semantics.dart.lib.js.map
=======
      this.data.debugFillProperties(properties);
    }
  };
  (theme$.CupertinoTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$] = data;
    this[child$] = child;
    if (!(child !== null)) dart.assertFailed(null, I[3], 56, 15, "child != null");
    if (!(data !== null)) dart.assertFailed(null, I[3], 57, 15, "data != null");
    theme$.CupertinoTheme.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = theme$.CupertinoTheme.prototype;
  dart.addTypeTests(theme$.CupertinoTheme);
  dart.addTypeCaches(theme$.CupertinoTheme);
  dart.setMethodSignature(theme$.CupertinoTheme, () => ({
    __proto__: dart.getMethods(theme$.CupertinoTheme.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(theme$.CupertinoTheme, I[4]);
  dart.setFieldSignature(theme$.CupertinoTheme, () => ({
    __proto__: dart.getFields(theme$.CupertinoTheme.__proto__),
    data: dart.finalFieldType(theme$.CupertinoThemeData),
    child: dart.finalFieldType(framework.Widget)
  }));
  var theme$0 = dart.privateName(theme$, "_InheritedCupertinoTheme.theme");
  theme$._InheritedCupertinoTheme = class _InheritedCupertinoTheme extends framework.InheritedWidget {
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    updateShouldNotify(old) {
      theme$._InheritedCupertinoTheme.as(old);
      return !this.theme.data[$_equals](old.theme.data);
    }
  };
  (theme$._InheritedCupertinoTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[theme$0] = theme;
    if (!(theme !== null)) dart.assertFailed(null, I[3], 142, 15, "theme != null");
    theme$._InheritedCupertinoTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = theme$._InheritedCupertinoTheme.prototype;
  dart.addTypeTests(theme$._InheritedCupertinoTheme);
  dart.addTypeCaches(theme$._InheritedCupertinoTheme);
  dart.setMethodSignature(theme$._InheritedCupertinoTheme, () => ({
    __proto__: dart.getMethods(theme$._InheritedCupertinoTheme.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(theme$._InheritedCupertinoTheme, I[4]);
  dart.setFieldSignature(theme$._InheritedCupertinoTheme, () => ({
    __proto__: dart.getFields(theme$._InheritedCupertinoTheme.__proto__),
    theme: dart.finalFieldType(theme$.CupertinoTheme)
  }));
  var _defaults$0 = dart.privateName(theme$, "_defaults");
  const brightness$ = NoDefaultCupertinoThemeData_brightness;
  const primaryColor$ = NoDefaultCupertinoThemeData_primaryColor;
  const primaryContrastingColor$ = NoDefaultCupertinoThemeData_primaryContrastingColor;
  const textTheme$ = NoDefaultCupertinoThemeData_textTheme;
  const barBackgroundColor$ = NoDefaultCupertinoThemeData_barBackgroundColor;
  const scaffoldBackgroundColor$ = NoDefaultCupertinoThemeData_scaffoldBackgroundColor;
  theme$.NoDefaultCupertinoThemeData = class NoDefaultCupertinoThemeData extends core.Object {
    get brightness() {
      return this[brightness$];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
    get primaryContrastingColor() {
      return this[primaryContrastingColor$];
    }
    set primaryContrastingColor(value) {
      super.primaryContrastingColor = value;
    }
    get textTheme() {
      return this[textTheme$];
    }
    set textTheme(value) {
      super.textTheme = value;
    }
    get barBackgroundColor() {
      return this[barBackgroundColor$];
    }
    set barBackgroundColor(value) {
      super.barBackgroundColor = value;
    }
    get scaffoldBackgroundColor() {
      return this[scaffoldBackgroundColor$];
    }
    set scaffoldBackgroundColor(value) {
      super.scaffoldBackgroundColor = value;
    }
    noDefault() {
      return this;
    }
    resolveFrom(context) {
      let t0;
      function convertColor(color) {
        return colors$.CupertinoDynamicColor.maybeResolve(color, context);
      }
      dart.fn(convertColor, T.ColorNToColorN());
      return new theme$.NoDefaultCupertinoThemeData.new({brightness: this.brightness, primaryColor: convertColor(this.primaryColor), primaryContrastingColor: convertColor(this.primaryContrastingColor), textTheme: (t0 = this.textTheme, t0 == null ? null : t0.resolveFrom(context)), barBackgroundColor: convertColor(this.barBackgroundColor), scaffoldBackgroundColor: convertColor(this.scaffoldBackgroundColor)});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      let primaryContrastingColor = opts && 'primaryContrastingColor' in opts ? opts.primaryContrastingColor : null;
      let textTheme = opts && 'textTheme' in opts ? opts.textTheme : null;
      let barBackgroundColor = opts && 'barBackgroundColor' in opts ? opts.barBackgroundColor : null;
      let scaffoldBackgroundColor = opts && 'scaffoldBackgroundColor' in opts ? opts.scaffoldBackgroundColor : null;
      return new theme$.NoDefaultCupertinoThemeData.new({brightness: (t0 = brightness, t0 == null ? this.brightness : t0), primaryColor: (t0$ = primaryColor, t0$ == null ? this.primaryColor : t0$), primaryContrastingColor: (t0$0 = primaryContrastingColor, t0$0 == null ? this.primaryContrastingColor : t0$0), textTheme: (t0$1 = textTheme, t0$1 == null ? this.textTheme : t0$1), barBackgroundColor: (t0$2 = barBackgroundColor, t0$2 == null ? this.barBackgroundColor : t0$2), scaffoldBackgroundColor: (t0$3 = scaffoldBackgroundColor, t0$3 == null ? this.scaffoldBackgroundColor : t0$3)});
    }
  };
  (theme$.NoDefaultCupertinoThemeData.new = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    let primaryContrastingColor = opts && 'primaryContrastingColor' in opts ? opts.primaryContrastingColor : null;
    let textTheme = opts && 'textTheme' in opts ? opts.textTheme : null;
    let barBackgroundColor = opts && 'barBackgroundColor' in opts ? opts.barBackgroundColor : null;
    let scaffoldBackgroundColor = opts && 'scaffoldBackgroundColor' in opts ? opts.scaffoldBackgroundColor : null;
    this[brightness$] = brightness;
    this[primaryColor$] = primaryColor;
    this[primaryContrastingColor$] = primaryContrastingColor;
    this[textTheme$] = textTheme;
    this[barBackgroundColor$] = barBackgroundColor;
    this[scaffoldBackgroundColor$] = scaffoldBackgroundColor;
    ;
  }).prototype = theme$.NoDefaultCupertinoThemeData.prototype;
  dart.addTypeTests(theme$.NoDefaultCupertinoThemeData);
  dart.addTypeCaches(theme$.NoDefaultCupertinoThemeData);
  dart.setMethodSignature(theme$.NoDefaultCupertinoThemeData, () => ({
    __proto__: dart.getMethods(theme$.NoDefaultCupertinoThemeData.__proto__),
    noDefault: dart.fnType(theme$.NoDefaultCupertinoThemeData, []),
    resolveFrom: dart.fnType(theme$.NoDefaultCupertinoThemeData, [framework.BuildContext]),
    copyWith: dart.fnType(theme$.NoDefaultCupertinoThemeData, [], {barBackgroundColor: dart.nullable(ui.Color), brightness: dart.nullable(ui.Brightness), primaryColor: dart.nullable(ui.Color), primaryContrastingColor: dart.nullable(ui.Color), scaffoldBackgroundColor: dart.nullable(ui.Color), textTheme: dart.nullable(text_theme.CupertinoTextThemeData)}, {})
  }));
  dart.setLibraryUri(theme$.NoDefaultCupertinoThemeData, I[4]);
  dart.setFieldSignature(theme$.NoDefaultCupertinoThemeData, () => ({
    __proto__: dart.getFields(theme$.NoDefaultCupertinoThemeData.__proto__),
    brightness: dart.finalFieldType(dart.nullable(ui.Brightness)),
    primaryColor: dart.finalFieldType(dart.nullable(ui.Color)),
    primaryContrastingColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textTheme: dart.finalFieldType(dart.nullable(text_theme.CupertinoTextThemeData)),
    barBackgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    scaffoldBackgroundColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  const _defaults$1 = CupertinoThemeData__defaults;
  const NoDefaultCupertinoThemeData_Diagnosticable$36 = class NoDefaultCupertinoThemeData_Diagnosticable extends theme$.NoDefaultCupertinoThemeData {};
  (NoDefaultCupertinoThemeData_Diagnosticable$36.new = function(opts) {
    NoDefaultCupertinoThemeData_Diagnosticable$36.__proto__.new.call(this, opts);
  }).prototype = NoDefaultCupertinoThemeData_Diagnosticable$36.prototype;
  dart.applyMixin(NoDefaultCupertinoThemeData_Diagnosticable$36, diagnostics.Diagnosticable);
  theme$.CupertinoThemeData = class CupertinoThemeData extends NoDefaultCupertinoThemeData_Diagnosticable$36 {
    get [_defaults$0]() {
      return this[_defaults$1];
    }
    set [_defaults$0](value) {
      super[_defaults$0] = value;
    }
    get primaryColor() {
      let t0;
      t0 = super.primaryColor;
      return t0 == null ? this[_defaults$0].primaryColor : t0;
    }
    get primaryContrastingColor() {
      let t0;
      t0 = super.primaryContrastingColor;
      return t0 == null ? this[_defaults$0].primaryContrastingColor : t0;
    }
    get textTheme() {
      let t0;
      t0 = super.textTheme;
      return t0 == null ? this[_defaults$0].textThemeDefaults.createDefaults({primaryColor: this.primaryColor}) : t0;
    }
    get barBackgroundColor() {
      let t0;
      t0 = super.barBackgroundColor;
      return t0 == null ? this[_defaults$0].barBackgroundColor : t0;
    }
    get scaffoldBackgroundColor() {
      let t0;
      t0 = super.scaffoldBackgroundColor;
      return t0 == null ? this[_defaults$0].scaffoldBackgroundColor : t0;
    }
    noDefault() {
      return new theme$.NoDefaultCupertinoThemeData.new({brightness: super.brightness, primaryColor: super.primaryColor, primaryContrastingColor: super.primaryContrastingColor, textTheme: super.textTheme, barBackgroundColor: super.barBackgroundColor, scaffoldBackgroundColor: super.scaffoldBackgroundColor});
    }
    resolveFrom(context) {
      let t0;
      function convertColor(color) {
        return colors$.CupertinoDynamicColor.maybeResolve(color, context);
      }
      dart.fn(convertColor, T.ColorNToColorN());
      return new theme$.CupertinoThemeData._rawWithDefaults(this.brightness, convertColor(super.primaryColor), convertColor(super.primaryContrastingColor), (t0 = super.textTheme, t0 == null ? null : t0.resolveFrom(context)), convertColor(super.barBackgroundColor), convertColor(super.scaffoldBackgroundColor), this[_defaults$0].resolveFrom(context, super.textTheme == null));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let brightness = opts && 'brightness' in opts ? opts.brightness : null;
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      let primaryContrastingColor = opts && 'primaryContrastingColor' in opts ? opts.primaryContrastingColor : null;
      let textTheme = opts && 'textTheme' in opts ? opts.textTheme : null;
      let barBackgroundColor = opts && 'barBackgroundColor' in opts ? opts.barBackgroundColor : null;
      let scaffoldBackgroundColor = opts && 'scaffoldBackgroundColor' in opts ? opts.scaffoldBackgroundColor : null;
      return new theme$.CupertinoThemeData._rawWithDefaults((t0 = brightness, t0 == null ? super.brightness : t0), (t0$ = primaryColor, t0$ == null ? super.primaryColor : t0$), (t0$0 = primaryContrastingColor, t0$0 == null ? super.primaryContrastingColor : t0$0), (t0$1 = textTheme, t0$1 == null ? super.textTheme : t0$1), (t0$2 = barBackgroundColor, t0$2 == null ? super.barBackgroundColor : t0$2), (t0$3 = scaffoldBackgroundColor, t0$3 == null ? super.scaffoldBackgroundColor : t0$3), this[_defaults$0]);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      let defaultData = C[24] || CT.C24;
      properties.add(new (T.EnumPropertyOfBrightness()).new("brightness", this.brightness, {defaultValue: null}));
      properties.add(colors$.createCupertinoColorProperty("primaryColor", this.primaryColor, {defaultValue: defaultData.primaryColor}));
      properties.add(colors$.createCupertinoColorProperty("primaryContrastingColor", this.primaryContrastingColor, {defaultValue: defaultData.primaryContrastingColor}));
      properties.add(colors$.createCupertinoColorProperty("barBackgroundColor", this.barBackgroundColor, {defaultValue: defaultData.barBackgroundColor}));
      properties.add(colors$.createCupertinoColorProperty("scaffoldBackgroundColor", this.scaffoldBackgroundColor, {defaultValue: defaultData.scaffoldBackgroundColor}));
      this.textTheme.debugFillProperties(properties);
    }
  };
  (theme$.CupertinoThemeData.new = function(opts) {
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    let primaryContrastingColor = opts && 'primaryContrastingColor' in opts ? opts.primaryContrastingColor : null;
    let textTheme = opts && 'textTheme' in opts ? opts.textTheme : null;
    let barBackgroundColor = opts && 'barBackgroundColor' in opts ? opts.barBackgroundColor : null;
    let scaffoldBackgroundColor = opts && 'scaffoldBackgroundColor' in opts ? opts.scaffoldBackgroundColor : null;
    theme$.CupertinoThemeData.raw.call(this, brightness, primaryColor, primaryContrastingColor, textTheme, barBackgroundColor, scaffoldBackgroundColor);
  }).prototype = theme$.CupertinoThemeData.prototype;
  (theme$.CupertinoThemeData.raw = function(brightness, primaryColor, primaryContrastingColor, textTheme, barBackgroundColor, scaffoldBackgroundColor) {
    theme$.CupertinoThemeData._rawWithDefaults.call(this, brightness, primaryColor, primaryContrastingColor, textTheme, barBackgroundColor, scaffoldBackgroundColor, theme$._kDefaultTheme);
  }).prototype = theme$.CupertinoThemeData.prototype;
  (theme$.CupertinoThemeData._rawWithDefaults = function(brightness, primaryColor, primaryContrastingColor, textTheme, barBackgroundColor, scaffoldBackgroundColor, _defaults) {
    this[_defaults$1] = _defaults;
    theme$.CupertinoThemeData.__proto__.new.call(this, {brightness: brightness, primaryColor: primaryColor, primaryContrastingColor: primaryContrastingColor, textTheme: textTheme, barBackgroundColor: barBackgroundColor, scaffoldBackgroundColor: scaffoldBackgroundColor});
    ;
  }).prototype = theme$.CupertinoThemeData.prototype;
  dart.addTypeTests(theme$.CupertinoThemeData);
  dart.addTypeCaches(theme$.CupertinoThemeData);
  dart.setMethodSignature(theme$.CupertinoThemeData, () => ({
    __proto__: dart.getMethods(theme$.CupertinoThemeData.__proto__),
    resolveFrom: dart.fnType(theme$.CupertinoThemeData, [framework.BuildContext]),
    copyWith: dart.fnType(theme$.CupertinoThemeData, [], {barBackgroundColor: dart.nullable(ui.Color), brightness: dart.nullable(ui.Brightness), primaryColor: dart.nullable(ui.Color), primaryContrastingColor: dart.nullable(ui.Color), scaffoldBackgroundColor: dart.nullable(ui.Color), textTheme: dart.nullable(text_theme.CupertinoTextThemeData)}, {})
  }));
  dart.setGetterSignature(theme$.CupertinoThemeData, () => ({
    __proto__: dart.getGetters(theme$.CupertinoThemeData.__proto__),
    primaryColor: ui.Color,
    primaryContrastingColor: ui.Color,
    textTheme: text_theme.CupertinoTextThemeData,
    barBackgroundColor: ui.Color,
    scaffoldBackgroundColor: ui.Color
  }));
  dart.setLibraryUri(theme$.CupertinoThemeData, I[4]);
  dart.setFieldSignature(theme$.CupertinoThemeData, () => ({
    __proto__: dart.getFields(theme$.CupertinoThemeData.__proto__),
    [_defaults$0]: dart.finalFieldType(theme$._CupertinoThemeDefaults)
  }));
  const brightness$0 = _CupertinoThemeDefaults_brightness;
  const primaryColor$0 = _CupertinoThemeDefaults_primaryColor;
  const primaryContrastingColor$0 = _CupertinoThemeDefaults_primaryContrastingColor;
  const barBackgroundColor$0 = _CupertinoThemeDefaults_barBackgroundColor;
  const scaffoldBackgroundColor$0 = _CupertinoThemeDefaults_scaffoldBackgroundColor;
  const textThemeDefaults$ = _CupertinoThemeDefaults_textThemeDefaults;
  theme$._CupertinoThemeDefaults = class _CupertinoThemeDefaults extends core.Object {
    get brightness() {
      return this[brightness$0];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get primaryColor() {
      return this[primaryColor$0];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
    get primaryContrastingColor() {
      return this[primaryContrastingColor$0];
    }
    set primaryContrastingColor(value) {
      super.primaryContrastingColor = value;
    }
    get barBackgroundColor() {
      return this[barBackgroundColor$0];
    }
    set barBackgroundColor(value) {
      super.barBackgroundColor = value;
    }
    get scaffoldBackgroundColor() {
      return this[scaffoldBackgroundColor$0];
    }
    set scaffoldBackgroundColor(value) {
      super.scaffoldBackgroundColor = value;
    }
    get textThemeDefaults() {
      return this[textThemeDefaults$];
    }
    set textThemeDefaults(value) {
      super.textThemeDefaults = value;
    }
    resolveFrom(context, resolveTextTheme) {
      function convertColor(color) {
        return colors$.CupertinoDynamicColor.resolve(color, context);
      }
      dart.fn(convertColor, T.ColorToColor());
      return new theme$._CupertinoThemeDefaults.new(this.brightness, convertColor(this.primaryColor), convertColor(this.primaryContrastingColor), convertColor(this.barBackgroundColor), convertColor(this.scaffoldBackgroundColor), resolveTextTheme ? this.textThemeDefaults.resolveFrom(context) : this.textThemeDefaults);
    }
  };
  (theme$._CupertinoThemeDefaults.new = function(brightness, primaryColor, primaryContrastingColor, barBackgroundColor, scaffoldBackgroundColor, textThemeDefaults) {
    this[brightness$0] = brightness;
    this[primaryColor$0] = primaryColor;
    this[primaryContrastingColor$0] = primaryContrastingColor;
    this[barBackgroundColor$0] = barBackgroundColor;
    this[scaffoldBackgroundColor$0] = scaffoldBackgroundColor;
    this[textThemeDefaults$] = textThemeDefaults;
    ;
  }).prototype = theme$._CupertinoThemeDefaults.prototype;
  dart.addTypeTests(theme$._CupertinoThemeDefaults);
  dart.addTypeCaches(theme$._CupertinoThemeDefaults);
  dart.setMethodSignature(theme$._CupertinoThemeDefaults, () => ({
    __proto__: dart.getMethods(theme$._CupertinoThemeDefaults.__proto__),
    resolveFrom: dart.fnType(theme$._CupertinoThemeDefaults, [framework.BuildContext, core.bool])
  }));
  dart.setLibraryUri(theme$._CupertinoThemeDefaults, I[4]);
  dart.setFieldSignature(theme$._CupertinoThemeDefaults, () => ({
    __proto__: dart.getFields(theme$._CupertinoThemeDefaults.__proto__),
    brightness: dart.finalFieldType(dart.nullable(ui.Brightness)),
    primaryColor: dart.finalFieldType(ui.Color),
    primaryContrastingColor: dart.finalFieldType(ui.Color),
    barBackgroundColor: dart.finalFieldType(ui.Color),
    scaffoldBackgroundColor: dart.finalFieldType(ui.Color),
    textThemeDefaults: dart.finalFieldType(theme$._CupertinoTextThemeDefaults)
  }));
  const labelColor$0 = _CupertinoTextThemeDefaults_labelColor;
  const inactiveGray$ = _CupertinoTextThemeDefaults_inactiveGray;
  theme$._CupertinoTextThemeDefaults = class _CupertinoTextThemeDefaults extends core.Object {
    get labelColor() {
      return this[labelColor$0];
    }
    set labelColor(value) {
      super.labelColor = value;
    }
    get inactiveGray() {
      return this[inactiveGray$];
    }
    set inactiveGray(value) {
      super.inactiveGray = value;
    }
    resolveFrom(context) {
      return new theme$._CupertinoTextThemeDefaults.new(colors$.CupertinoDynamicColor.resolve(this.labelColor, context), colors$.CupertinoDynamicColor.resolve(this.inactiveGray, context));
    }
    createDefaults(opts) {
      let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
      if (!(primaryColor !== null)) dart.assertFailed(null, I[3], 497, 12, "primaryColor != null");
      return new theme$._DefaultCupertinoTextThemeData.new({primaryColor: primaryColor, labelColor: this.labelColor, inactiveGray: this.inactiveGray});
    }
  };
  (theme$._CupertinoTextThemeDefaults.new = function(labelColor, inactiveGray) {
    this[labelColor$0] = labelColor;
    this[inactiveGray$] = inactiveGray;
    ;
  }).prototype = theme$._CupertinoTextThemeDefaults.prototype;
  dart.addTypeTests(theme$._CupertinoTextThemeDefaults);
  dart.addTypeCaches(theme$._CupertinoTextThemeDefaults);
  dart.setMethodSignature(theme$._CupertinoTextThemeDefaults, () => ({
    __proto__: dart.getMethods(theme$._CupertinoTextThemeDefaults.__proto__),
    resolveFrom: dart.fnType(theme$._CupertinoTextThemeDefaults, [framework.BuildContext]),
    createDefaults: dart.fnType(text_theme.CupertinoTextThemeData, [], {}, {primaryColor: ui.Color})
  }));
  dart.setLibraryUri(theme$._CupertinoTextThemeDefaults, I[4]);
  dart.setFieldSignature(theme$._CupertinoTextThemeDefaults, () => ({
    __proto__: dart.getFields(theme$._CupertinoTextThemeDefaults.__proto__),
    labelColor: dart.finalFieldType(ui.Color),
    inactiveGray: dart.finalFieldType(ui.Color)
  }));
  var labelColor$1 = dart.privateName(theme$, "_DefaultCupertinoTextThemeData.labelColor");
  var inactiveGray$0 = dart.privateName(theme$, "_DefaultCupertinoTextThemeData.inactiveGray");
  theme$._DefaultCupertinoTextThemeData = class _DefaultCupertinoTextThemeData extends text_theme.CupertinoTextThemeData {
    get labelColor() {
      return this[labelColor$1];
    }
    set labelColor(value) {
      super.labelColor = value;
    }
    get inactiveGray() {
      return this[inactiveGray$0];
    }
    set inactiveGray(value) {
      super.inactiveGray = value;
    }
    get textStyle() {
      return super.textStyle.copyWith({color: this.labelColor});
    }
    get tabLabelTextStyle() {
      return super.tabLabelTextStyle.copyWith({color: this.inactiveGray});
    }
    get navTitleTextStyle() {
      return super.navTitleTextStyle.copyWith({color: this.labelColor});
    }
    get navLargeTitleTextStyle() {
      return super.navLargeTitleTextStyle.copyWith({color: this.labelColor});
    }
    get pickerTextStyle() {
      return super.pickerTextStyle.copyWith({color: this.labelColor});
    }
    get dateTimePickerTextStyle() {
      return super.dateTimePickerTextStyle.copyWith({color: this.labelColor});
    }
  };
  (theme$._DefaultCupertinoTextThemeData.new = function(opts) {
    let labelColor = opts && 'labelColor' in opts ? opts.labelColor : null;
    let inactiveGray = opts && 'inactiveGray' in opts ? opts.inactiveGray : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    this[labelColor$1] = labelColor;
    this[inactiveGray$0] = inactiveGray;
    if (!(labelColor !== null)) dart.assertFailed(null, I[3], 514, 15, "labelColor != null");
    if (!(inactiveGray !== null)) dart.assertFailed(null, I[3], 515, 15, "inactiveGray != null");
    if (!(primaryColor !== null)) dart.assertFailed(null, I[3], 516, 15, "primaryColor != null");
    theme$._DefaultCupertinoTextThemeData.__proto__.new.call(this, {primaryColor: primaryColor});
    ;
  }).prototype = theme$._DefaultCupertinoTextThemeData.prototype;
  dart.addTypeTests(theme$._DefaultCupertinoTextThemeData);
  dart.addTypeCaches(theme$._DefaultCupertinoTextThemeData);
  dart.setLibraryUri(theme$._DefaultCupertinoTextThemeData, I[4]);
  dart.setFieldSignature(theme$._DefaultCupertinoTextThemeData, () => ({
    __proto__: dart.getFields(theme$._DefaultCupertinoTextThemeData.__proto__),
    labelColor: dart.finalFieldType(ui.Color),
    inactiveGray: dart.finalFieldType(ui.Color)
  }));
  dart.defineLazy(theme$, {
    /*theme$._kDefaultTheme*/get _kDefaultTheme() {
      return C[25] || CT.C25;
    }
  }, false);
  colors$.CupertinoColors = class CupertinoColors extends core.Object {};
  (colors$.CupertinoColors.__ = function() {
    ;
  }).prototype = colors$.CupertinoColors.prototype;
  dart.addTypeTests(colors$.CupertinoColors);
  dart.addTypeCaches(colors$.CupertinoColors);
  dart.setLibraryUri(colors$.CupertinoColors, I[5]);
  dart.defineLazy(colors$.CupertinoColors, {
    /*colors$.CupertinoColors.activeBlue*/get activeBlue() {
      return C[0] || CT.C0;
    },
    /*colors$.CupertinoColors.activeGreen*/get activeGreen() {
      return C[41] || CT.C41;
    },
    /*colors$.CupertinoColors.activeOrange*/get activeOrange() {
      return C[46] || CT.C46;
    },
    /*colors$.CupertinoColors.white*/get white() {
      return C[10] || CT.C10;
    },
    /*colors$.CupertinoColors.black*/get black() {
      return C[11] || CT.C11;
    },
    /*colors$.CupertinoColors.lightBackgroundGray*/get lightBackgroundGray() {
      return C[51] || CT.C51;
    },
    /*colors$.CupertinoColors.extraLightBackgroundGray*/get extraLightBackgroundGray() {
      return C[52] || CT.C52;
    },
    /*colors$.CupertinoColors.darkBackgroundGray*/get darkBackgroundGray() {
      return C[53] || CT.C53;
    },
    /*colors$.CupertinoColors.inactiveGray*/get inactiveGray() {
      return C[6] || CT.C6;
    },
    /*colors$.CupertinoColors.destructiveRed*/get destructiveRed() {
      return C[54] || CT.C54;
    },
    /*colors$.CupertinoColors.systemBlue*/get systemBlue() {
      return C[0] || CT.C0;
    },
    /*colors$.CupertinoColors.systemGreen*/get systemGreen() {
      return C[41] || CT.C41;
    },
    /*colors$.CupertinoColors.systemIndigo*/get systemIndigo() {
      return C[59] || CT.C59;
    },
    /*colors$.CupertinoColors.systemOrange*/get systemOrange() {
      return C[46] || CT.C46;
    },
    /*colors$.CupertinoColors.systemPink*/get systemPink() {
      return C[64] || CT.C64;
    },
    /*colors$.CupertinoColors.systemPurple*/get systemPurple() {
      return C[69] || CT.C69;
    },
    /*colors$.CupertinoColors.systemRed*/get systemRed() {
      return C[54] || CT.C54;
    },
    /*colors$.CupertinoColors.systemTeal*/get systemTeal() {
      return C[74] || CT.C74;
    },
    /*colors$.CupertinoColors.systemYellow*/get systemYellow() {
      return C[79] || CT.C79;
    },
    /*colors$.CupertinoColors.systemGrey*/get systemGrey() {
      return C[84] || CT.C84;
    },
    /*colors$.CupertinoColors.systemGrey2*/get systemGrey2() {
      return C[88] || CT.C88;
    },
    /*colors$.CupertinoColors.systemGrey3*/get systemGrey3() {
      return C[91] || CT.C91;
    },
    /*colors$.CupertinoColors.systemGrey4*/get systemGrey4() {
      return C[95] || CT.C95;
    },
    /*colors$.CupertinoColors.systemGrey5*/get systemGrey5() {
      return C[100] || CT.C100;
    },
    /*colors$.CupertinoColors.systemGrey6*/get systemGrey6() {
      return C[104] || CT.C104;
    },
    /*colors$.CupertinoColors.label*/get label() {
      return C[9] || CT.C9;
    },
    /*colors$.CupertinoColors.secondaryLabel*/get secondaryLabel() {
      return C[107] || CT.C107;
    },
    /*colors$.CupertinoColors.tertiaryLabel*/get tertiaryLabel() {
      return C[112] || CT.C112;
    },
    /*colors$.CupertinoColors.quaternaryLabel*/get quaternaryLabel() {
      return C[117] || CT.C117;
    },
    /*colors$.CupertinoColors.systemFill*/get systemFill() {
      return C[122] || CT.C122;
    },
    /*colors$.CupertinoColors.secondarySystemFill*/get secondarySystemFill() {
      return C[127] || CT.C127;
    },
    /*colors$.CupertinoColors.tertiarySystemFill*/get tertiarySystemFill() {
      return C[132] || CT.C132;
    },
    /*colors$.CupertinoColors.quaternarySystemFill*/get quaternarySystemFill() {
      return C[137] || CT.C137;
    },
    /*colors$.CupertinoColors.placeholderText*/get placeholderText() {
      return C[142] || CT.C142;
    },
    /*colors$.CupertinoColors.systemBackground*/get systemBackground() {
      return C[27] || CT.C27;
    },
    /*colors$.CupertinoColors.secondarySystemBackground*/get secondarySystemBackground() {
      return C[143] || CT.C143;
    },
    /*colors$.CupertinoColors.tertiarySystemBackground*/get tertiarySystemBackground() {
      return C[144] || CT.C144;
    },
    /*colors$.CupertinoColors.systemGroupedBackground*/get systemGroupedBackground() {
      return C[145] || CT.C145;
    },
    /*colors$.CupertinoColors.secondarySystemGroupedBackground*/get secondarySystemGroupedBackground() {
      return C[146] || CT.C146;
    },
    /*colors$.CupertinoColors.tertiarySystemGroupedBackground*/get tertiarySystemGroupedBackground() {
      return C[147] || CT.C147;
    },
    /*colors$.CupertinoColors.separator*/get separator() {
      return C[148] || CT.C148;
    },
    /*colors$.CupertinoColors.opaqueSeparator*/get opaqueSeparator() {
      return C[153] || CT.C153;
    },
    /*colors$.CupertinoColors.link*/get link() {
      return C[156] || CT.C156;
    }
  }, false);
  var _effectiveColor = dart.privateName(colors$, "_effectiveColor");
  var _debugLabel = dart.privateName(colors$, "_debugLabel");
  var _debugResolveContext = dart.privateName(colors$, "_debugResolveContext");
  var _isPlatformBrightnessDependent = dart.privateName(colors$, "_isPlatformBrightnessDependent");
  var _isHighContrastDependent = dart.privateName(colors$, "_isHighContrastDependent");
  var _isInterfaceElevationDependent = dart.privateName(colors$, "_isInterfaceElevationDependent");
  var _name = dart.privateName(interface_level, "_name");
  var _name$ = dart.privateName(ui, "_name");
  var _name$0 = dart.privateName(diagnostics, "_name");
  const _effectiveColor$ = CupertinoDynamicColor__effectiveColor;
  const _debugLabel$ = CupertinoDynamicColor__debugLabel;
  const _debugResolveContext$ = CupertinoDynamicColor__debugResolveContext;
  const color$ = CupertinoDynamicColor_color;
  const darkColor$ = CupertinoDynamicColor_darkColor;
  const highContrastColor$ = CupertinoDynamicColor_highContrastColor;
  const darkHighContrastColor$ = CupertinoDynamicColor_darkHighContrastColor;
  const elevatedColor$ = CupertinoDynamicColor_elevatedColor;
  const darkElevatedColor$ = CupertinoDynamicColor_darkElevatedColor;
  const highContrastElevatedColor$ = CupertinoDynamicColor_highContrastElevatedColor;
  const darkHighContrastElevatedColor$ = CupertinoDynamicColor_darkHighContrastElevatedColor;
  const Color_Diagnosticable$36 = class Color_Diagnosticable extends ui.Color {};
  (Color_Diagnosticable$36.new = function(value) {
    Color_Diagnosticable$36.__proto__.new.call(this, value);
  }).prototype = Color_Diagnosticable$36.prototype;
  (Color_Diagnosticable$36.fromARGB = function(a, r, g, b) {
    Color_Diagnosticable$36.__proto__.fromARGB.call(this, a, r, g, b);
  }).prototype = Color_Diagnosticable$36.prototype;
  (Color_Diagnosticable$36.fromRGBO = function(r, g, b, opacity) {
    Color_Diagnosticable$36.__proto__.fromRGBO.call(this, r, g, b, opacity);
  }).prototype = Color_Diagnosticable$36.prototype;
  dart.applyMixin(Color_Diagnosticable$36, diagnostics.Diagnosticable);
  colors$.CupertinoDynamicColor = class CupertinoDynamicColor extends Color_Diagnosticable$36 {
    get [_effectiveColor]() {
      return this[_effectiveColor$];
    }
    set [_effectiveColor](value) {
      super[_effectiveColor] = value;
    }
    get [_debugLabel]() {
      return this[_debugLabel$];
    }
    set [_debugLabel](value) {
      super[_debugLabel] = value;
    }
    get [_debugResolveContext]() {
      return this[_debugResolveContext$];
    }
    set [_debugResolveContext](value) {
      super[_debugResolveContext] = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get darkColor() {
      return this[darkColor$];
    }
    set darkColor(value) {
      super.darkColor = value;
    }
    get highContrastColor() {
      return this[highContrastColor$];
    }
    set highContrastColor(value) {
      super.highContrastColor = value;
    }
    get darkHighContrastColor() {
      return this[darkHighContrastColor$];
    }
    set darkHighContrastColor(value) {
      super.darkHighContrastColor = value;
    }
    get elevatedColor() {
      return this[elevatedColor$];
    }
    set elevatedColor(value) {
      super.elevatedColor = value;
    }
    get darkElevatedColor() {
      return this[darkElevatedColor$];
    }
    set darkElevatedColor(value) {
      super.darkElevatedColor = value;
    }
    get highContrastElevatedColor() {
      return this[highContrastElevatedColor$];
    }
    set highContrastElevatedColor(value) {
      super.highContrastElevatedColor = value;
    }
    get darkHighContrastElevatedColor() {
      return this[darkHighContrastElevatedColor$];
    }
    set darkHighContrastElevatedColor(value) {
      super.darkHighContrastElevatedColor = value;
    }
    get value() {
      return this[_effectiveColor].value;
    }
    static resolve(resolvable, context) {
      if (!(context !== null)) dart.assertFailed(null, I[6], 891, 12, "context != null");
      return colors$.CupertinoDynamicColor.is(resolvable) ? resolvable.resolveFrom(context) : resolvable;
    }
    static maybeResolve(resolvable, context) {
      if (resolvable == null) return null;
      if (!(context !== null)) dart.assertFailed(null, I[6], 913, 12, "context != null");
      return colors$.CupertinoDynamicColor.is(resolvable) ? resolvable.resolveFrom(context) : resolvable;
    }
    get [_isPlatformBrightnessDependent]() {
      return !this.color._equals(this.darkColor) || !this.elevatedColor._equals(this.darkElevatedColor) || !this.highContrastColor._equals(this.darkHighContrastColor) || !this.highContrastElevatedColor._equals(this.darkHighContrastElevatedColor);
    }
    get [_isHighContrastDependent]() {
      return !this.color._equals(this.highContrastColor) || !this.darkColor._equals(this.darkHighContrastColor) || !this.elevatedColor._equals(this.highContrastElevatedColor) || !this.darkElevatedColor._equals(this.darkHighContrastElevatedColor);
    }
    get [_isInterfaceElevationDependent]() {
      return !this.color._equals(this.elevatedColor) || !this.darkColor._equals(this.darkElevatedColor) || !this.highContrastColor._equals(this.highContrastElevatedColor) || !this.darkHighContrastColor._equals(this.darkHighContrastElevatedColor);
    }
    resolveFrom(context) {
      let t0, t0$, t0$0, t0$1;
      let brightness = ui.Brightness.light;
      if (this[_isPlatformBrightnessDependent]) {
        brightness = (t0 = theme$.CupertinoTheme.maybeBrightnessOf(context), t0 == null ? ui.Brightness.light : t0);
      }
      let isHighContrastEnabled = false;
      if (this[_isHighContrastDependent]) {
        isHighContrastEnabled = (t0$0 = (t0$ = media_query.MediaQuery.maybeOf(context), t0$ == null ? null : t0$.highContrast), t0$0 == null ? false : t0$0);
      }
      let level = this[_isInterfaceElevationDependent] ? (t0$1 = interface_level.CupertinoUserInterfaceLevel.maybeOf(context), t0$1 == null ? interface_level.CupertinoUserInterfaceLevelData.base : t0$1) : interface_level.CupertinoUserInterfaceLevelData.base;
      let resolved = null;
      switch (brightness) {
        case C[160] || CT.C160:
        {
          switch (level) {
            case C[158] || CT.C158:
            {
              resolved = dart.test(isHighContrastEnabled) ? this.highContrastColor : this.color;
              break;
            }
            case C[159] || CT.C159:
            {
              resolved = dart.test(isHighContrastEnabled) ? this.highContrastElevatedColor : this.elevatedColor;
              break;
            }
          }
          break;
        }
        case C[161] || CT.C161:
        {
          switch (level) {
            case C[158] || CT.C158:
            {
              resolved = dart.test(isHighContrastEnabled) ? this.darkHighContrastColor : this.darkColor;
              break;
            }
            case C[159] || CT.C159:
            {
              resolved = dart.test(isHighContrastEnabled) ? this.darkHighContrastElevatedColor : this.darkElevatedColor;
              break;
            }
          }
        }
      }
      let _debugContext = null;
      if (!dart.fn(() => {
        _debugContext = framework.Element.as(context);
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[6], 1007, 12, "() {\r\n      _debugContext = context as Element;\r\n      return true;\r\n    }()");
      return new colors$.CupertinoDynamicColor.__(resolved, this.color, this.darkColor, this.highContrastColor, this.darkHighContrastColor, this.elevatedColor, this.darkElevatedColor, this.highContrastElevatedColor, this.darkHighContrastElevatedColor, _debugContext, this[_debugLabel]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return colors$.CupertinoDynamicColor.is(other) && other.value === this.value && other.color._equals(this.color) && other.darkColor._equals(this.darkColor) && other.highContrastColor._equals(this.highContrastColor) && other.darkHighContrastColor._equals(this.darkHighContrastColor) && other.elevatedColor._equals(this.elevatedColor) && other.darkElevatedColor._equals(this.darkElevatedColor) && other.highContrastElevatedColor._equals(this.highContrastElevatedColor) && other.darkHighContrastElevatedColor._equals(this.darkHighContrastElevatedColor);
    }
    get hashCode() {
      return ui.hashValues(this.value, this.color, this.darkColor, this.highContrastColor, this.elevatedColor, this.darkElevatedColor, this.darkHighContrastColor, this.darkHighContrastElevatedColor, this.highContrastElevatedColor);
    }
    toString(opts) {
      let t1, t1$, t1$0;
      let minLevel = opts && 'minLevel' in opts ? opts.minLevel : C[162] || CT.C162;
      const toString = (name, color) => {
        let marker = color._equals(this[_effectiveColor]) ? "*" : "";
        return marker + name + " = " + dart.str(color) + marker;
      };
      dart.fn(toString, T.StringAndColorToString());
      let xs = (() => {
        let t0 = T.JSArrayOfString().of([toString("color", this.color)]);
        if (this[_isPlatformBrightnessDependent]) t0[$add](toString("darkColor", this.darkColor));
        if (this[_isHighContrastDependent]) t0[$add](toString("highContrastColor", this.highContrastColor));
        if (this[_isPlatformBrightnessDependent] && this[_isHighContrastDependent]) t0[$add](toString("darkHighContrastColor", this.darkHighContrastColor));
        if (this[_isInterfaceElevationDependent]) t0[$add](toString("elevatedColor", this.elevatedColor));
        if (this[_isPlatformBrightnessDependent] && this[_isInterfaceElevationDependent]) t0[$add](toString("darkElevatedColor", this.darkElevatedColor));
        if (this[_isHighContrastDependent] && this[_isInterfaceElevationDependent]) t0[$add](toString("highContrastElevatedColor", this.highContrastElevatedColor));
        if (this[_isPlatformBrightnessDependent] && this[_isHighContrastDependent] && this[_isInterfaceElevationDependent]) t0[$add](toString("darkHighContrastElevatedColor", this.darkHighContrastElevatedColor));
        return t0;
      })();
      return dart.str((t1 = this[_debugLabel], t1 == null ? object.objectRuntimeType(this, "CupertinoDynamicColor") : t1)) + "(" + xs[$join](", ") + ", resolved by: " + dart.str((t1$0 = (t1$ = this[_debugResolveContext], t1$ == null ? null : t1$.widget), t1$0 == null ? "UNRESOLVED" : t1$0)) + ")";
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      if (this[_debugLabel] != null) properties.add(new diagnostics.MessageProperty.new("debugLabel", dart.nullCheck(this[_debugLabel])));
      properties.add(colors$.createCupertinoColorProperty("color", this.color));
      if (this[_isPlatformBrightnessDependent]) properties.add(colors$.createCupertinoColorProperty("darkColor", this.darkColor));
      if (this[_isHighContrastDependent]) properties.add(colors$.createCupertinoColorProperty("highContrastColor", this.highContrastColor));
      if (this[_isPlatformBrightnessDependent] && this[_isHighContrastDependent]) properties.add(colors$.createCupertinoColorProperty("darkHighContrastColor", this.darkHighContrastColor));
      if (this[_isInterfaceElevationDependent]) properties.add(colors$.createCupertinoColorProperty("elevatedColor", this.elevatedColor));
      if (this[_isPlatformBrightnessDependent] && this[_isInterfaceElevationDependent]) properties.add(colors$.createCupertinoColorProperty("darkElevatedColor", this.darkElevatedColor));
      if (this[_isHighContrastDependent] && this[_isInterfaceElevationDependent]) properties.add(colors$.createCupertinoColorProperty("highContrastElevatedColor", this.highContrastElevatedColor));
      if (this[_isPlatformBrightnessDependent] && this[_isHighContrastDependent] && this[_isInterfaceElevationDependent]) properties.add(colors$.createCupertinoColorProperty("darkHighContrastElevatedColor", this.darkHighContrastElevatedColor));
      if (this[_debugResolveContext] != null) properties.add(new (T.DiagnosticsPropertyOfElement()).new("last resolved", this[_debugResolveContext]));
    }
  };
  (colors$.CupertinoDynamicColor.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let darkColor = opts && 'darkColor' in opts ? opts.darkColor : null;
    let highContrastColor = opts && 'highContrastColor' in opts ? opts.highContrastColor : null;
    let darkHighContrastColor = opts && 'darkHighContrastColor' in opts ? opts.darkHighContrastColor : null;
    let elevatedColor = opts && 'elevatedColor' in opts ? opts.elevatedColor : null;
    let darkElevatedColor = opts && 'darkElevatedColor' in opts ? opts.darkElevatedColor : null;
    let highContrastElevatedColor = opts && 'highContrastElevatedColor' in opts ? opts.highContrastElevatedColor : null;
    let darkHighContrastElevatedColor = opts && 'darkHighContrastElevatedColor' in opts ? opts.darkHighContrastElevatedColor : null;
    colors$.CupertinoDynamicColor.__.call(this, color, color, darkColor, highContrastColor, darkHighContrastColor, elevatedColor, darkElevatedColor, highContrastElevatedColor, darkHighContrastElevatedColor, null, debugLabel);
  }).prototype = colors$.CupertinoDynamicColor.prototype;
  (colors$.CupertinoDynamicColor.withBrightnessAndContrast = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let darkColor = opts && 'darkColor' in opts ? opts.darkColor : null;
    let highContrastColor = opts && 'highContrastColor' in opts ? opts.highContrastColor : null;
    let darkHighContrastColor = opts && 'darkHighContrastColor' in opts ? opts.darkHighContrastColor : null;
    colors$.CupertinoDynamicColor.new.call(this, {debugLabel: debugLabel, color: color, darkColor: darkColor, highContrastColor: highContrastColor, darkHighContrastColor: darkHighContrastColor, elevatedColor: color, darkElevatedColor: darkColor, highContrastElevatedColor: highContrastColor, darkHighContrastElevatedColor: darkHighContrastColor});
  }).prototype = colors$.CupertinoDynamicColor.prototype;
  (colors$.CupertinoDynamicColor.withBrightness = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let darkColor = opts && 'darkColor' in opts ? opts.darkColor : null;
    colors$.CupertinoDynamicColor.new.call(this, {debugLabel: debugLabel, color: color, darkColor: darkColor, highContrastColor: color, darkHighContrastColor: darkColor, elevatedColor: color, darkElevatedColor: darkColor, highContrastElevatedColor: color, darkHighContrastElevatedColor: darkColor});
  }).prototype = colors$.CupertinoDynamicColor.prototype;
  (colors$.CupertinoDynamicColor.__ = function(_effectiveColor, color, darkColor, highContrastColor, darkHighContrastColor, elevatedColor, darkElevatedColor, highContrastElevatedColor, darkHighContrastElevatedColor, _debugResolveContext, _debugLabel) {
    this[_effectiveColor$] = _effectiveColor;
    this[color$] = color;
    this[darkColor$] = darkColor;
    this[highContrastColor$] = highContrastColor;
    this[darkHighContrastColor$] = darkHighContrastColor;
    this[elevatedColor$] = elevatedColor;
    this[darkElevatedColor$] = darkElevatedColor;
    this[highContrastElevatedColor$] = highContrastElevatedColor;
    this[darkHighContrastElevatedColor$] = darkHighContrastElevatedColor;
    this[_debugResolveContext$] = _debugResolveContext;
    this[_debugLabel$] = _debugLabel;
    if (!(color !== null)) dart.assertFailed(null, I[6], 763, 14, "color != null");
    if (!(darkColor !== null)) dart.assertFailed(null, I[6], 764, 14, "darkColor != null");
    if (!(highContrastColor !== null)) dart.assertFailed(null, I[6], 765, 14, "highContrastColor != null");
    if (!(darkHighContrastColor !== null)) dart.assertFailed(null, I[6], 766, 14, "darkHighContrastColor != null");
    if (!(elevatedColor !== null)) dart.assertFailed(null, I[6], 767, 14, "elevatedColor != null");
    if (!(darkElevatedColor !== null)) dart.assertFailed(null, I[6], 768, 14, "darkElevatedColor != null");
    if (!(highContrastElevatedColor !== null)) dart.assertFailed(null, I[6], 769, 14, "highContrastElevatedColor != null");
    if (!(darkHighContrastElevatedColor !== null)) dart.assertFailed(null, I[6], 770, 14, "darkHighContrastElevatedColor != null");
    if (!(_effectiveColor !== null)) dart.assertFailed(null, I[6], 771, 14, "_effectiveColor != null");
    colors$.CupertinoDynamicColor.__proto__.new.call(this, 0);
    ;
  }).prototype = colors$.CupertinoDynamicColor.prototype;
  dart.addTypeTests(colors$.CupertinoDynamicColor);
  dart.addTypeCaches(colors$.CupertinoDynamicColor);
  dart.setMethodSignature(colors$.CupertinoDynamicColor, () => ({
    __proto__: dart.getMethods(colors$.CupertinoDynamicColor.__proto__),
    resolveFrom: dart.fnType(colors$.CupertinoDynamicColor, [framework.BuildContext])
  }));
  dart.setGetterSignature(colors$.CupertinoDynamicColor, () => ({
    __proto__: dart.getGetters(colors$.CupertinoDynamicColor.__proto__),
    value: core.int,
    [_isPlatformBrightnessDependent]: core.bool,
    [_isHighContrastDependent]: core.bool,
    [_isInterfaceElevationDependent]: core.bool
  }));
  dart.setLibraryUri(colors$.CupertinoDynamicColor, I[5]);
  dart.setFieldSignature(colors$.CupertinoDynamicColor, () => ({
    __proto__: dart.getFields(colors$.CupertinoDynamicColor.__proto__),
    [_effectiveColor]: dart.finalFieldType(ui.Color),
    [_debugLabel]: dart.finalFieldType(dart.nullable(core.String)),
    [_debugResolveContext]: dart.finalFieldType(dart.nullable(framework.Element)),
    color: dart.finalFieldType(ui.Color),
    darkColor: dart.finalFieldType(ui.Color),
    highContrastColor: dart.finalFieldType(ui.Color),
    darkHighContrastColor: dart.finalFieldType(ui.Color),
    elevatedColor: dart.finalFieldType(ui.Color),
    darkElevatedColor: dart.finalFieldType(ui.Color),
    highContrastElevatedColor: dart.finalFieldType(ui.Color),
    darkHighContrastElevatedColor: dart.finalFieldType(ui.Color)
  }));
  dart.defineExtensionMethods(colors$.CupertinoDynamicColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors$.CupertinoDynamicColor, ['hashCode']);
  colors$.createCupertinoColorProperty = function createCupertinoColorProperty(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[163] || CT.C163;
    let style = opts && 'style' in opts ? opts.style : C[164] || CT.C164;
    let level = opts && 'level' in opts ? opts.level : C[162] || CT.C162;
    if (colors$.CupertinoDynamicColor.is(value)) {
      return new (T.DiagnosticsPropertyOfCupertinoDynamicColor()).new(name, value, {description: value[_debugLabel], showName: showName, defaultValue: defaultValue, style: style, level: level});
    } else {
      return new colors.ColorProperty.new(name, value, {showName: showName, defaultValue: defaultValue, style: style, level: level});
    }
  };
  dart.trackLibraries("packages/flutter/src/cupertino/text_theme.dart", {
    "package:flutter/src/cupertino/text_theme.dart": text_theme,
    "package:flutter/src/cupertino/icon_theme_data.dart": icon_theme_data$,
    "package:flutter/src/cupertino/theme.dart": theme$,
    "package:flutter/src/cupertino/colors.dart": colors$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_theme.dart","icon_theme_data.dart","theme.dart","colors.dart"],"names":[],"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","file":"../../../../../../../packages/flutter/src/cupertino/text_theme.dart.lib.js"}');
  // Exports:
  return {
    src__cupertino__text_theme: text_theme,
    src__cupertino__icon_theme_data: icon_theme_data$,
    src__cupertino__theme: theme$,
    src__cupertino__colors: colors$
  };
}));

//# sourceMappingURL=text_theme.dart.lib.js.map
>>>>>>> AUg2
