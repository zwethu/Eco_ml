<<<<<<< HEAD
define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__gradient_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var gradient = Object.create(dart.library);
  var $length = dartx.length;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $runtimeType = dartx.runtimeType;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $last = dartx.last;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    intTodouble: () => (T.intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))(),
    ColorToColor: () => (T.ColorToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color])))(),
    LinearGradientN: () => (T.LinearGradientN = dart.constFn(dart.nullable(gradient.LinearGradient)))(),
    RadialGradientN: () => (T.RadialGradientN = dart.constFn(dart.nullable(gradient.RadialGradient)))(),
    SweepGradientN: () => (T.SweepGradientN = dart.constFn(dart.nullable(gradient.SweepGradient)))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))(),
    SplayTreeSetOfdouble: () => (T.SplayTreeSetOfdouble = dart.constFn(collection.SplayTreeSet$(core.double)))(),
    doubleToColor: () => (T.doubleToColor = dart.constFn(dart.fnType(ui.Color, [core.double])))()
=======
define(['dart_sdk', 'packages/audioplayers/src/api/log_level.dart', 'packages/audioplayers/src/api/player_mode.dart', 'packages/audioplayers/src/api/player_state.dart', 'packages/audioplayers/src/api/playing_route.dart', 'packages/audioplayers/src/notifications/notification_service.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/audioplayers/src/api/release_mode.dart', 'packages/uuid/uuid.dart', 'packages/http/src/multipart_request.dart', 'packages/path_provider/path_provider.dart'], (function load__packages__audioplayers__src__logger_dart(dart_sdk, packages__audioplayers__src__api__log_level$46dart, packages__audioplayers__src__api__player_mode$46dart, packages__audioplayers__src__api__player_state$46dart, packages__audioplayers__src__api__playing_route$46dart, packages__audioplayers__src__notifications__notification_service$46dart, packages__flutter__src__services__system_channels$46dart, packages__audioplayers__src__api__release_mode$46dart, packages__uuid__uuid$46dart, packages__http__src__multipart_request$46dart, packages__path_provider__path_provider$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const log_level = packages__audioplayers__src__api__log_level$46dart.src__api__log_level;
  const player_mode = packages__audioplayers__src__api__player_mode$46dart.src__api__player_mode;
  const player_state = packages__audioplayers__src__api__player_state$46dart.src__api__player_state;
  const playing_route = packages__audioplayers__src__api__playing_route$46dart.src__api__playing_route;
  const notification_service = packages__audioplayers__src__notifications__notification_service$46dart.src__notifications__notification_service;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const release_mode = packages__audioplayers__src__api__release_mode$46dart.src__api__release_mode;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const http = packages__http__src__multipart_request$46dart.http;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  var logger = Object.create(dart.library);
  var audioplayer = Object.create(dart.library);
  var audio_cache = Object.create(dart.library);
  var audioplayers = Object.create(dart.library);
  var $_set = dartx._set;
  var $entries = dartx.entries;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $values = dartx.values;
  var $map = dartx.map;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StreamControllerOfPlayerState: () => (T.StreamControllerOfPlayerState = dart.constFn(async.StreamController$(player_state.PlayerState)))(),
    StreamControllerOfDuration: () => (T.StreamControllerOfDuration = dart.constFn(async.StreamController$(core.Duration)))(),
    StreamControllerOfvoid: () => (T.StreamControllerOfvoid = dart.constFn(async.StreamController$(dart.void)))(),
    StreamControllerOfbool: () => (T.StreamControllerOfbool = dart.constFn(async.StreamController$(core.bool)))(),
    StreamControllerOfString: () => (T.StreamControllerOfString = dart.constFn(async.StreamController$(core.String)))(),
    JSArrayOfFuture: () => (T.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    MethodCallToFutureOfvoid: () => (T.MethodCallToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [message_codec.MethodCall])))(),
    IdentityMapOfString$AudioPlayer: () => (T.IdentityMapOfString$AudioPlayer = dart.constFn(_js_helper.IdentityMap$(core.String, audioplayer.AudioPlayer)))(),
    IdentityMapOfString$Uri: () => (T.IdentityMapOfString$Uri = dart.constFn(_js_helper.IdentityMap$(core.String, core.Uri)))(),
    FutureOfUri: () => (T.FutureOfUri = dart.constFn(async.Future$(core.Uri)))(),
    ListOfUri: () => (T.ListOfUri = dart.constFn(core.List$(core.Uri)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: -1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 1
=======
        __proto__: player_mode.PlayerMode.prototype,
        [_name]: "PlayerMode.MEDIA_PLAYER",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[4] || CT.C4
>>>>>>> AUg2
      });
    },
    get C2() {
      return C[2] = dart.const({
<<<<<<< HEAD
        __proto__: ui.TileMode.prototype,
        [_name]: "TileMode.clamp",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:flutter/src/painting/gradient.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/painting/gradient.dart"
  ];
  gradient._ColorsAndStops = class _ColorsAndStops extends core.Object {};
  (gradient._ColorsAndStops.new = function(colors, stops) {
    this.colors = colors;
    this.stops = stops;
    ;
  }).prototype = gradient._ColorsAndStops.prototype;
  dart.addTypeTests(gradient._ColorsAndStops);
  dart.addTypeCaches(gradient._ColorsAndStops);
  dart.setLibraryUri(gradient._ColorsAndStops, I[0]);
  dart.setFieldSignature(gradient._ColorsAndStops, () => ({
    __proto__: dart.getFields(gradient._ColorsAndStops.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  gradient.GradientTransform = class GradientTransform extends core.Object {};
  (gradient.GradientTransform.new = function() {
    ;
  }).prototype = gradient.GradientTransform.prototype;
  dart.addTypeTests(gradient.GradientTransform);
  dart.addTypeCaches(gradient.GradientTransform);
  dart.setLibraryUri(gradient.GradientTransform, I[0]);
  var radians$ = dart.privateName(gradient, "GradientRotation.radians");
  gradient.GradientRotation = class GradientRotation extends gradient.GradientTransform {
    get radians() {
      return this[radians$];
    }
    set radians(value) {
      super.radians = value;
    }
    transform(bounds, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(bounds !== null)) dart.assertFailed(null, I[1], 110, 12, "bounds != null");
      let sinRadians = math.sin(this.radians);
      let oneMinusCosRadians = 1 - math.cos(this.radians);
      let center = bounds.center;
      let originX = sinRadians * center.dy + oneMinusCosRadians * center.dx;
      let originY = -sinRadians * center.dx + oneMinusCosRadians * center.dy;
      t0 = vector_math_64.Matrix4.identity();
      return (() => {
        t0.translate(originX, originY);
        t0.rotateZ(this.radians);
        return t0;
      })();
    }
  };
  (gradient.GradientRotation.new = function(radians) {
    this[radians$] = radians;
    gradient.GradientRotation.__proto__.new.call(this);
    ;
  }).prototype = gradient.GradientRotation.prototype;
  dart.addTypeTests(gradient.GradientRotation);
  dart.addTypeCaches(gradient.GradientRotation);
  dart.setMethodSignature(gradient.GradientRotation, () => ({
    __proto__: dart.getMethods(gradient.GradientRotation.__proto__),
    transform: dart.fnType(vector_math_64.Matrix4, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {})
  }));
  dart.setLibraryUri(gradient.GradientRotation, I[0]);
  dart.setFieldSignature(gradient.GradientRotation, () => ({
    __proto__: dart.getFields(gradient.GradientRotation.__proto__),
    radians: dart.finalFieldType(core.double)
  }));
  var colors$ = dart.privateName(gradient, "Gradient.colors");
  var stops$ = dart.privateName(gradient, "Gradient.stops");
  var transform$ = dart.privateName(gradient, "Gradient.transform");
  var _impliedStops = dart.privateName(gradient, "_impliedStops");
  var _resolveTransform = dart.privateName(gradient, "_resolveTransform");
  gradient.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    [_impliedStops]() {
      if (this.stops != null) return dart.nullCheck(this.stops);
      if (!(this.colors[$length] >= 2)) dart.assertFailed("colors list must have at least two colors", I[1], 190, 12, "colors.length >= 2");
      let separation = 1.0 / (this.colors[$length] - 1);
      return T.ListOfdouble().generate(this.colors[$length], dart.fn(index => index * separation, T.intTodouble()), {growable: false});
    }
    lerpFrom(a, t) {
      if (a == null) return this.scale(t);
      return null;
    }
    lerpTo(b, t) {
      if (b == null) return this.scale(1.0 - t);
      return null;
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 291, 12, "t != null");
      let result = null;
      if (b != null) result = b.lerpFrom(a, t);
      if (result == null && a != null) result = a.lerpTo(b, t);
      if (result != null) return result;
      if (a == null && b == null) return null;
      if (!(a != null && b != null)) dart.assertFailed(null, I[1], 301, 12, "a != null && b != null");
      return t < 0.5 ? dart.nullCheck(a).scale(1.0 - t * 2.0) : dart.nullCheck(b).scale((t - 0.5) * 2.0);
    }
    [_resolveTransform](bounds, textDirection) {
      let t1, t0;
      t0 = this.transform;
      return t0 == null ? null : (t1 = t0.transform(bounds, {textDirection: textDirection}), t1 == null ? null : t1.storage);
    }
  };
  (gradient.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[colors$] = colors;
    this[stops$] = stops;
    this[transform$] = transform;
    if (!(colors !== null)) dart.assertFailed(null, I[1], 153, 15, "colors != null");
    ;
  }).prototype = gradient.Gradient.prototype;
  dart.addTypeTests(gradient.Gradient);
  dart.addTypeCaches(gradient.Gradient);
  dart.setMethodSignature(gradient.Gradient, () => ({
    __proto__: dart.getMethods(gradient.Gradient.__proto__),
    [_impliedStops]: dart.fnType(core.List$(core.double), []),
    lerpFrom: dart.fnType(dart.nullable(gradient.Gradient), [dart.nullable(gradient.Gradient), core.double]),
    lerpTo: dart.fnType(dart.nullable(gradient.Gradient), [dart.nullable(gradient.Gradient), core.double]),
    [_resolveTransform]: dart.fnType(dart.nullable(typed_data.Float64List), [ui.Rect, dart.nullable(ui.TextDirection)])
  }));
  dart.setLibraryUri(gradient.Gradient, I[0]);
  dart.setFieldSignature(gradient.Gradient, () => ({
    __proto__: dart.getFields(gradient.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    transform: dart.finalFieldType(dart.nullable(gradient.GradientTransform))
  }));
  var begin$ = dart.privateName(gradient, "LinearGradient.begin");
  var end$ = dart.privateName(gradient, "LinearGradient.end");
  var tileMode$ = dart.privateName(gradient, "LinearGradient.tileMode");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _name = dart.privateName(ui, "_name");
  gradient.LinearGradient = class LinearGradient extends gradient.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.linear(this.begin.resolve(textDirection).withinRect(rect), this.end.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.LinearGradient.new({begin: this.begin, end: this.end, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.LinearGradient.is(a)) return gradient.LinearGradient.lerp(T.LinearGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.LinearGradient.is(b)) return gradient.LinearGradient.lerp(this, T.LinearGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 477, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.LinearGradient.new({begin: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.begin, b.begin, t)), end: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.end, b.end, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.LinearGradient.is(other) && other.begin._equals(this.begin) && other.end._equals(this.end) && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops);
    }
    get hashCode() {
      return ui.hashValues(this.begin, this.end, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return object.objectRuntimeType(this, "LinearGradient") + "(" + dart.str(this.begin) + ", " + dart.str(this.end) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C[0] || CT.C0;
    let end = opts && 'end' in opts ? opts.end : C[1] || CT.C1;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    if (!(begin !== null)) dart.assertFailed(null, I[1], 374, 15, "begin != null");
    if (!(end !== null)) dart.assertFailed(null, I[1], 375, 15, "end != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 376, 15, "tileMode != null");
    gradient.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.LinearGradient.prototype;
  dart.addTypeTests(gradient.LinearGradient);
  dart.addTypeCaches(gradient.LinearGradient);
  dart.setMethodSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getMethods(gradient.LinearGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.LinearGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.LinearGradient, I[0]);
  dart.setFieldSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getFields(gradient.LinearGradient.__proto__),
    begin: dart.finalFieldType(alignment.AlignmentGeometry),
    end: dart.finalFieldType(alignment.AlignmentGeometry),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.LinearGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.LinearGradient, ['hashCode']);
  var center$ = dart.privateName(gradient, "RadialGradient.center");
  var radius$ = dart.privateName(gradient, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(gradient, "RadialGradient.tileMode");
  var focal$ = dart.privateName(gradient, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(gradient, "RadialGradient.focalRadius");
  gradient.RadialGradient = class RadialGradient extends gradient.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.radial(this.center.resolve(textDirection).withinRect(rect), this.radius * rect.shortestSide, this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection), this.focal == null ? null : dart.nullCheck(this.focal).resolve(textDirection).withinRect(rect), this.focalRadius * rect.shortestSide);
    }
    scale(factor) {
      return new gradient.RadialGradient.new({center: this.center, radius: this.radius, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode, focal: this.focal, focalRadius: this.focalRadius});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.RadialGradient.is(a)) return gradient.RadialGradient.lerp(T.RadialGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.RadialGradient.is(b)) return gradient.RadialGradient.lerp(this, T.RadialGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 735, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.RadialGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), radius: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.radius, b.radius, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode, focal: alignment.AlignmentGeometry.lerp(a.focal, b.focal, t), focalRadius: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.focalRadius, b.focalRadius, t)))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.RadialGradient.is(other) && other.center._equals(this.center) && other.radius === this.radius && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops) && dart.equals(other.focal, this.focal) && other.focalRadius === this.focalRadius;
    }
    get hashCode() {
      return ui.hashValues(this.center, this.radius, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops), this.focal, this.focalRadius);
    }
    toString() {
      return object.objectRuntimeType(this, "RadialGradient") + "(" + dart.str(this.center) + ", " + dart.str(this.radius) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ", " + dart.str(this.focal) + ", " + dart.str(this.focalRadius) + ")";
    }
  };
  (gradient.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    if (!(center !== null)) dart.assertFailed(null, I[1], 606, 15, "center != null");
    if (!(radius !== null)) dart.assertFailed(null, I[1], 607, 15, "radius != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 608, 15, "tileMode != null");
    if (!(focalRadius !== null)) dart.assertFailed(null, I[1], 609, 15, "focalRadius != null");
    gradient.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.RadialGradient.prototype;
  dart.addTypeTests(gradient.RadialGradient);
  dart.addTypeCaches(gradient.RadialGradient);
  dart.setMethodSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getMethods(gradient.RadialGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.RadialGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.RadialGradient, I[0]);
  dart.setFieldSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getFields(gradient.RadialGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode),
    focal: dart.finalFieldType(dart.nullable(alignment.AlignmentGeometry)),
    focalRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(gradient.RadialGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.RadialGradient, ['hashCode']);
  var center$0 = dart.privateName(gradient, "SweepGradient.center");
  var startAngle$ = dart.privateName(gradient, "SweepGradient.startAngle");
  var endAngle$ = dart.privateName(gradient, "SweepGradient.endAngle");
  var tileMode$1 = dart.privateName(gradient, "SweepGradient.tileMode");
  gradient.SweepGradient = class SweepGradient extends gradient.Gradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.sweep(this.center.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this.startAngle, this.endAngle, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.SweepGradient.new({center: this.center, startAngle: this.startAngle, endAngle: this.endAngle, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.SweepGradient.is(a)) return gradient.SweepGradient.lerp(T.SweepGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.SweepGradient.is(b)) return gradient.SweepGradient.lerp(this, T.SweepGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 982, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.SweepGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), startAngle: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.startAngle, b.startAngle, t))), endAngle: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.endAngle, b.endAngle, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.SweepGradient.is(other) && other.center._equals(this.center) && other.startAngle === this.startAngle && other.endAngle === this.endAngle && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops);
    }
    get hashCode() {
      return ui.hashValues(this.center, this.startAngle, this.endAngle, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return object.objectRuntimeType(this, "SweepGradient") + "(" + dart.str(this.center) + ", " + dart.str(this.startAngle) + ", " + dart.str(this.endAngle) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.SweepGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    let endAngle = opts && 'endAngle' in opts ? opts.endAngle : 6.283185307179586;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$0] = center;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[tileMode$1] = tileMode;
    if (!(center !== null)) dart.assertFailed(null, I[1], 880, 15, "center != null");
    if (!(startAngle !== null)) dart.assertFailed(null, I[1], 881, 15, "startAngle != null");
    if (!(endAngle !== null)) dart.assertFailed(null, I[1], 882, 15, "endAngle != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 883, 15, "tileMode != null");
    gradient.SweepGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.SweepGradient.prototype;
  dart.addTypeTests(gradient.SweepGradient);
  dart.addTypeCaches(gradient.SweepGradient);
  dart.setMethodSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getMethods(gradient.SweepGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.SweepGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.SweepGradient, I[0]);
  dart.setFieldSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getFields(gradient.SweepGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.SweepGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.SweepGradient, ['hashCode']);
  gradient._sample = function _sample(colors, stops, t) {
    if (!(colors !== null)) dart.assertFailed(null, I[1], 25, 10, "colors != null");
    if (!colors[$isNotEmpty]) dart.assertFailed(null, I[1], 26, 10, "colors.isNotEmpty");
    if (!(stops !== null)) dart.assertFailed(null, I[1], 27, 10, "stops != null");
    if (!stops[$isNotEmpty]) dart.assertFailed(null, I[1], 28, 10, "stops.isNotEmpty");
    if (!(t !== null)) dart.assertFailed(null, I[1], 29, 10, "t != null");
    if (t <= stops[$first]) return colors[$first];
    if (t >= stops[$last]) return colors[$last];
    let index = stops[$lastIndexWhere](dart.fn(s => s <= t, T.doubleTobool()));
    if (!(index !== -1)) dart.assertFailed(null, I[1], 35, 10, "index != -1");
    return dart.nullCheck(ui.Color.lerp(colors[$_get](index), colors[$_get](index + 1), (t - stops[$_get](index)) / (stops[$_get](index + 1) - stops[$_get](index))));
  };
  gradient._interpolateColorsAndStops = function _interpolateColorsAndStops(aColors, aStops, bColors, bStops, t) {
    let t0;
    if (!(aColors[$length] >= 2)) dart.assertFailed(null, I[1], 49, 10, "aColors.length >= 2");
    if (!(bColors[$length] >= 2)) dart.assertFailed(null, I[1], 50, 10, "bColors.length >= 2");
    if (!(aStops[$length] === aColors[$length])) dart.assertFailed(null, I[1], 51, 10, "aStops.length == aColors.length");
    if (!(bStops[$length] === bColors[$length])) dart.assertFailed(null, I[1], 52, 10, "bStops.length == bColors.length");
    let stops = (t0 = new (T.SplayTreeSetOfdouble()).new(), (() => {
      t0.addAll(aStops);
      t0.addAll(bStops);
      return t0;
    })());
    let interpolatedStops = stops.toList({growable: false});
    let interpolatedColors = interpolatedStops[$map](ui.Color, dart.fn(stop => dart.nullCheck(ui.Color.lerp(gradient._sample(aColors, aStops, stop), gradient._sample(bColors, bStops, stop), t)), T.doubleToColor()))[$toList]({growable: false});
    return new gradient._ColorsAndStops.new(interpolatedColors, interpolatedStops);
  };
  dart.trackLibraries("packages/flutter/src/painting/gradient.dart", {
    "package:flutter/src/painting/gradient.dart": gradient
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gradient.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/gradient.dart.lib.js"}');
  // Exports:
  return {
    src__painting__gradient: gradient
  };
}));

//# sourceMappingURL=gradient.dart.lib.js.map
=======
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[3] || CT.C3,
        [MethodChannel_name]: "xyz.luan/audioplayers"
      });
    },
    get C5() {
      return C[5] = dart.fn(audioplayer.AudioPlayer.platformCallHandler, T.MethodCallToFutureOfvoid());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: uuid.Uuid.prototype,
        [Uuid_options]: null
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "package:audioplayers/src/logger.dart",
    "package:audioplayers/src/audioplayer.dart",
    "package:audioplayers/src/audio_cache.dart"
  ];
  logger.Logger = class Logger extends core.Object {
    static get logLevel() {
      return logger.Logger._logLevel;
    }
    static changeLogLevel(value) {
      logger.Logger._logLevel = value;
      return audioplayer.AudioPlayer.invokeMethod("changeLogLevel", new (T.IdentityMapOfString$dynamic()).from(["value", value.toString()]));
    }
    static log(level, message) {
      if (log_level['LogLevelExtension|getLevel'](level) <= log_level['LogLevelExtension|getLevel'](logger.Logger.logLevel)) {
        core.print(message);
      }
    }
    static info(message) {
      return logger.Logger.log(log_level.LogLevel.INFO, message);
    }
    static error(message) {
      return logger.Logger.log(log_level.LogLevel.ERROR, message);
    }
  };
  (logger.Logger.__ = function() {
    dart.throw(new core.UnimplementedError.new());
  }).prototype = logger.Logger.prototype;
  dart.addTypeTests(logger.Logger);
  dart.addTypeCaches(logger.Logger);
  dart.setLibraryUri(logger.Logger, I[0]);
  dart.defineLazy(logger.Logger, {
    /*logger.Logger._logLevel*/get _logLevel() {
      return log_level.LogLevel.ERROR;
    },
    set _logLevel(_) {}
  }, false);
  var playerId$ = dart.privateName(audioplayer, "AudioPlayer.playerId");
  var mode$ = dart.privateName(audioplayer, "AudioPlayer.mode");
  var _name = dart.privateName(player_mode, "_name");
  var _playerStateController = dart.privateName(audioplayer, "_playerStateController");
  var _notificationPlayerStateController = dart.privateName(audioplayer, "_notificationPlayerStateController");
  var _positionController = dart.privateName(audioplayer, "_positionController");
  var _durationController = dart.privateName(audioplayer, "_durationController");
  var _completionController = dart.privateName(audioplayer, "_completionController");
  var _seekCompleteController = dart.privateName(audioplayer, "_seekCompleteController");
  var _errorController = dart.privateName(audioplayer, "_errorController");
  var _playingRouteState = dart.privateName(audioplayer, "_playingRouteState");
  var __AudioPlayer_notificationService = dart.privateName(audioplayer, "_#AudioPlayer#notificationService");
  var _playerState = dart.privateName(audioplayer, "_playerState");
  var _invokeMethod = dart.privateName(audioplayer, "_invokeMethod");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var Uuid_options = dart.privateName(uuid, "Uuid.options");
  audioplayer.AudioPlayer = class AudioPlayer extends core.Object {
    get playerId() {
      return this[playerId$];
    }
    set playerId(value) {
      super.playerId = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    set notificationService(t0) {
      this[__AudioPlayer_notificationService] = t0;
    }
    get notificationService() {
      let t1;
      t1 = this[__AudioPlayer_notificationService];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("notificationService")) : t1;
    }
    get state() {
      return this[_playerState];
    }
    set state(state) {
      this[_playerStateController].add(state);
      this[_playerState] = state;
    }
    set playingRouteState(routeState) {
      this[_playingRouteState] = routeState;
    }
    set notificationState(state) {
      this[_notificationPlayerStateController].add(state);
      this[_playerState] = state;
    }
    get onPlayerStateChanged() {
      return this[_playerStateController].stream;
    }
    get onNotificationPlayerStateChanged() {
      return this[_notificationPlayerStateController].stream;
    }
    get onAudioPositionChanged() {
      return this[_positionController].stream;
    }
    get onDurationChanged() {
      return this[_durationController].stream.distinct();
    }
    get onPlayerCompletion() {
      return this[_completionController].stream;
    }
    get onSeekComplete() {
      return this[_seekCompleteController].stream;
    }
    get onPlayerError() {
      return this[_errorController].stream;
    }
    [_invokeMethod](method, $arguments = C[1] || CT.C1) {
      let enhancedArgs = (() => {
        let t1 = new (T.IdentityMapOfString$dynamic()).new();
        for (let t2 of $arguments[$entries])
          t1[$_set](t2.key, t2.value);
        t1[$_set]("playerId", this.playerId);
        t1[$_set]("mode", this.mode.toString());
        return t1;
      })();
      return audioplayer.AudioPlayer.invokeMethod(method, enhancedArgs);
    }
    static invokeMethod(method, args) {
      return async.async(core.int, function* invokeMethod() {
        let t3;
        let result = (yield audioplayer.AudioPlayer._channel.invokeMethod(core.int, method, args));
        t3 = result;
        return t3 == null ? 0 : t3;
      });
    }
    play(url, opts) {
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : null;
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      return async.async(core.int, (function* play() {
        let t3, t3$;
        let result = (yield this[_invokeMethod]("play", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", (t3 = isLocal, t3 == null ? this.isLocalUrl(url) : t3), "volume", volume, "position", (t3$ = position, t3$ == null ? null : t3$.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    playBytes(bytes, opts) {
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      return async.async(core.int, (function* playBytes() {
        let t3;
        if (!audioplayer.AudioPlayer._isAndroid()) {
          dart.throw(new message_codec.PlatformException.new({code: "Not supported", message: "Only Android is currently supported"}));
        }
        let result = (yield this[_invokeMethod]("playBytes", new (T.IdentityMapOfString$dynamic()).from(["bytes", bytes, "volume", volume, "position", (t3 = position, t3 == null ? null : t3.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    pause() {
      return async.async(core.int, (function* pause() {
        let result = (yield this[_invokeMethod]("pause"));
        if (result === 1) {
          this.state = player_state.PlayerState.PAUSED;
        }
        return result;
      }).bind(this));
    }
    stop() {
      return async.async(core.int, (function* stop() {
        let result = (yield this[_invokeMethod]("stop"));
        if (result === 1) {
          this.state = player_state.PlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    resume() {
      return async.async(core.int, (function* resume() {
        let result = (yield this[_invokeMethod]("resume"));
        if (result === 1) {
          this.state = player_state.PlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    release() {
      return async.async(core.int, (function* release() {
        let result = (yield this[_invokeMethod]("release"));
        if (result === 1) {
          this.state = player_state.PlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    seek(position) {
      this[_positionController].add(position);
      return this[_invokeMethod]("seek", new (T.IdentityMapOfString$dynamic()).from(["position", position.inMilliseconds]));
    }
    setVolume(volume) {
      return this[_invokeMethod]("setVolume", new (T.IdentityMapOfString$dynamic()).from(["volume", volume]));
    }
    setReleaseMode(releaseMode) {
      return this[_invokeMethod]("setReleaseMode", new (T.IdentityMapOfString$dynamic()).from(["releaseMode", releaseMode.toString()]));
    }
    setPlaybackRate(playbackRate) {
      return this[_invokeMethod]("setPlaybackRate", new (T.IdentityMapOfString$dynamic()).from(["playbackRate", playbackRate]));
    }
    setUrl(url, opts) {
      let t3;
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      return this[_invokeMethod]("setUrl", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", (t3 = isLocal, t3 == null ? this.isLocalUrl(url) : t3), "respectSilence", respectSilence, "recordingActive", recordingActive]));
    }
    getDuration() {
      return this[_invokeMethod]("getDuration");
    }
    getCurrentPosition() {
      return async.async(core.int, (function* getCurrentPosition() {
        return this[_invokeMethod]("getCurrentPosition");
      }).bind(this));
    }
    static platformCallHandler(call) {
      return async.async(dart.void, function* platformCallHandler() {
        try {
          audioplayer.AudioPlayer._doHandlePlatformCall(call);
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Object.is(ex)) {
            logger.Logger.error("Unexpected error: " + dart.str(ex));
          } else
            throw e;
        }
      });
    }
    static _doHandlePlatformCall(call) {
      return async.async(dart.void, function* _doHandlePlatformCall() {
        let callArgs = core.Map.as(call.arguments);
        logger.Logger.info("_platformCallHandler call " + call.method + " " + dart.str(callArgs));
        let playerId = core.String.as(callArgs[$_get]("playerId"));
        let player = audioplayer.AudioPlayer.players[$_get](playerId);
        if (!false && audioplayer.AudioPlayer._isAndroid() && player == null) {
          let oldPlayer = new audioplayer.AudioPlayer.new({playerId: playerId});
          yield oldPlayer.release();
          oldPlayer.dispose();
          audioplayer.AudioPlayer.players[$remove](playerId);
          return;
        }
        if (player == null) {
          return;
        }
        switch (call.method) {
          case "audio.onNotificationPlayerStateChanged":
          {
            let isPlaying = core.bool.as(callArgs[$_get]("value"));
            player.notificationState = isPlaying ? player_state.PlayerState.PLAYING : player_state.PlayerState.PAUSED;
            break;
          }
          case "audio.onDuration":
          {
            let millis = core.int.as(callArgs[$_get]("value"));
            let newDuration = new core.Duration.new({milliseconds: millis});
            player[_durationController].add(newDuration);
            break;
          }
          case "audio.onCurrentPosition":
          {
            let millis = core.int.as(callArgs[$_get]("value"));
            let newDuration = new core.Duration.new({milliseconds: millis});
            player[_positionController].add(newDuration);
            break;
          }
          case "audio.onComplete":
          {
            player.state = player_state.PlayerState.COMPLETED;
            player[_completionController].add(null);
            break;
          }
          case "audio.onSeekComplete":
          {
            let complete = core.bool.as(callArgs[$_get]("value"));
            player[_seekCompleteController].add(complete);
            break;
          }
          case "audio.onError":
          {
            let error = core.String.as(callArgs[$_get]("value"));
            player.state = player_state.PlayerState.STOPPED;
            player[_errorController].add(error);
            break;
          }
          case "audio.onGotNextTrackCommand":
          {
            player.notificationService.notifyNextTrack();
            break;
          }
          case "audio.onGotPreviousTrackCommand":
          {
            player.notificationService.notifyPreviousTrack();
            break;
          }
          default:
          {
            logger.Logger.error("Unknown method " + call.method + " ");
          }
        }
      });
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        yield this.release();
        let futures = T.JSArrayOfFuture().of([]);
        if (!this[_playerStateController].isClosed) {
          futures[$add](this[_playerStateController].close());
        }
        if (!this[_notificationPlayerStateController].isClosed) {
          futures[$add](this[_notificationPlayerStateController].close());
        }
        if (!this[_positionController].isClosed) {
          futures[$add](this[_positionController].close());
        }
        if (!this[_durationController].isClosed) {
          futures[$add](this[_durationController].close());
        }
        if (!this[_completionController].isClosed) {
          futures[$add](this[_completionController].close());
        }
        if (!this[_seekCompleteController].isClosed) {
          futures[$add](this[_seekCompleteController].close());
        }
        if (!this[_errorController].isClosed) {
          futures[$add](this[_errorController].close());
        }
        futures[$add](this.notificationService.dispose());
        yield async.Future.wait(dart.dynamic, futures);
        audioplayer.AudioPlayer.players[$remove](this.playerId);
      }).bind(this));
    }
    earpieceOrSpeakersToggle() {
      return async.async(core.int, (function* earpieceOrSpeakersToggle() {
        let playingRoute = playing_route['PlayingRouteExtensions|toggle'](this[_playingRouteState]);
        let result = (yield this[_invokeMethod]("earpieceOrSpeakersToggle", new (T.IdentityMapOfString$dynamic()).from(["playingRoute", playing_route['PlayingRouteExtensions|name'](playingRoute)])));
        if (result === 1) {
          this.playingRouteState = playingRoute;
        }
        return result;
      }).bind(this));
    }
    isLocalUrl(url) {
      return url[$startsWith]("/") || url[$startsWith]("file://") || url[$substring](1)[$startsWith](":\\");
    }
    static _isAndroid() {
      if (true) {
        return false;
      }
      return io.Platform.isAndroid;
    }
  };
  (audioplayer.AudioPlayer.new = function(opts) {
    let t0;
    let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
    let playerId = opts && 'playerId' in opts ? opts.playerId : null;
    this[_playerStateController] = T.StreamControllerOfPlayerState().broadcast();
    this[_notificationPlayerStateController] = T.StreamControllerOfPlayerState().broadcast();
    this[_positionController] = T.StreamControllerOfDuration().broadcast();
    this[_durationController] = T.StreamControllerOfDuration().broadcast();
    this[_completionController] = T.StreamControllerOfvoid().broadcast();
    this[_seekCompleteController] = T.StreamControllerOfbool().broadcast();
    this[_errorController] = T.StreamControllerOfString().broadcast();
    this[_playingRouteState] = playing_route.PlayingRoute.SPEAKERS;
    this[__AudioPlayer_notificationService] = null;
    this[_playerState] = player_state.PlayerState.STOPPED;
    this[mode$] = mode;
    this[playerId$] = (t0 = playerId, t0 == null ? audioplayer.AudioPlayer._uuid.v4() : t0);
    audioplayer.AudioPlayer.players[$_set](this.playerId, this);
    this.notificationService = new notification_service.NotificationService.new(dart.bind(this, _invokeMethod));
  }).prototype = audioplayer.AudioPlayer.prototype;
  dart.addTypeTests(audioplayer.AudioPlayer);
  dart.addTypeCaches(audioplayer.AudioPlayer);
  dart.setMethodSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getMethods(audioplayer.AudioPlayer.__proto__),
    [_invokeMethod]: dart.fnType(async.Future$(core.int), [core.String], [core.Map$(core.String, dart.dynamic)]),
    play: dart.fnType(async.Future$(core.int), [core.String], {duckAudio: core.bool, isLocal: dart.nullable(core.bool), position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    playBytes: dart.fnType(async.Future$(core.int), [typed_data.Uint8List], {duckAudio: core.bool, position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    pause: dart.fnType(async.Future$(core.int), []),
    stop: dart.fnType(async.Future$(core.int), []),
    resume: dart.fnType(async.Future$(core.int), []),
    release: dart.fnType(async.Future$(core.int), []),
    seek: dart.fnType(async.Future$(core.int), [core.Duration]),
    setVolume: dart.fnType(async.Future$(core.int), [core.double]),
    setReleaseMode: dart.fnType(async.Future$(core.int), [release_mode.ReleaseMode]),
    setPlaybackRate: dart.fnType(async.Future$(core.int), [core.double]),
    setUrl: dart.fnType(async.Future$(core.int), [core.String], {isLocal: dart.nullable(core.bool), recordingActive: core.bool, respectSilence: core.bool}, {}),
    getDuration: dart.fnType(async.Future$(core.int), []),
    getCurrentPosition: dart.fnType(async.Future$(core.int), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    earpieceOrSpeakersToggle: dart.fnType(async.Future$(core.int), []),
    isLocalUrl: dart.fnType(core.bool, [core.String])
  }));
  dart.setGetterSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getGetters(audioplayer.AudioPlayer.__proto__),
    notificationService: notification_service.NotificationService,
    state: player_state.PlayerState,
    onPlayerStateChanged: async.Stream$(player_state.PlayerState),
    onNotificationPlayerStateChanged: async.Stream$(player_state.PlayerState),
    onAudioPositionChanged: async.Stream$(core.Duration),
    onDurationChanged: async.Stream$(core.Duration),
    onPlayerCompletion: async.Stream$(dart.void),
    onSeekComplete: async.Stream$(dart.void),
    onPlayerError: async.Stream$(core.String)
  }));
  dart.setSetterSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getSetters(audioplayer.AudioPlayer.__proto__),
    notificationService: notification_service.NotificationService,
    state: player_state.PlayerState,
    playingRouteState: playing_route.PlayingRoute,
    notificationState: player_state.PlayerState
  }));
  dart.setLibraryUri(audioplayer.AudioPlayer, I[1]);
  dart.setFieldSignature(audioplayer.AudioPlayer, () => ({
    __proto__: dart.getFields(audioplayer.AudioPlayer.__proto__),
    [_playerStateController]: dart.finalFieldType(async.StreamController$(player_state.PlayerState)),
    [_notificationPlayerStateController]: dart.finalFieldType(async.StreamController$(player_state.PlayerState)),
    [_positionController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_durationController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_completionController]: dart.finalFieldType(async.StreamController$(dart.void)),
    [_seekCompleteController]: dart.finalFieldType(async.StreamController$(core.bool)),
    [_errorController]: dart.finalFieldType(async.StreamController$(core.String)),
    [_playingRouteState]: dart.fieldType(playing_route.PlayingRoute),
    [__AudioPlayer_notificationService]: dart.fieldType(dart.nullable(notification_service.NotificationService)),
    [_playerState]: dart.fieldType(player_state.PlayerState),
    playerId: dart.finalFieldType(core.String),
    mode: dart.finalFieldType(player_mode.PlayerMode)
  }));
  dart.defineLazy(audioplayer.AudioPlayer, {
    /*audioplayer.AudioPlayer._channel*/get _channel() {
      let t4;
      return t4 = C[2] || CT.C2, (() => {
        t4.setMethodCallHandler(C[5] || CT.C5);
        return t4;
      })();
    },
    /*audioplayer.AudioPlayer._uuid*/get _uuid() {
      return C[6] || CT.C6;
    },
    /*audioplayer.AudioPlayer.players*/get players() {
      return new (T.IdentityMapOfString$AudioPlayer()).new();
    }
  }, false);
  var loadedFiles = dart.privateName(audio_cache, "AudioCache.loadedFiles");
  var prefix$ = dart.privateName(audio_cache, "AudioCache.prefix");
  var fixedPlayer$ = dart.privateName(audio_cache, "AudioCache.fixedPlayer");
  var respectSilence$ = dart.privateName(audio_cache, "AudioCache.respectSilence");
  var duckAudio$ = dart.privateName(audio_cache, "AudioCache.duckAudio");
  var _sanitizeURLForWeb = dart.privateName(audio_cache, "_sanitizeURLForWeb");
  var _player = dart.privateName(audio_cache, "_player");
  audio_cache.AudioCache = class AudioCache extends core.Object {
    get loadedFiles() {
      return this[loadedFiles];
    }
    set loadedFiles(value) {
      this[loadedFiles] = value;
    }
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get fixedPlayer() {
      return this[fixedPlayer$];
    }
    set fixedPlayer(value) {
      this[fixedPlayer$] = value;
    }
    get respectSilence() {
      return this[respectSilence$];
    }
    set respectSilence(value) {
      this[respectSilence$] = value;
    }
    get duckAudio() {
      return this[duckAudio$];
    }
    set duckAudio(value) {
      this[duckAudio$] = value;
    }
    clear(fileName) {
      return async.async(dart.void, (function* clear() {
        let uri = this.loadedFiles[$remove](fileName);
        if (uri != null && !true) {
          yield io.File.new(uri.toFilePath()).delete();
        }
      }).bind(this));
    }
    clearAll() {
      return async.async(dart.void, (function* clearAll() {
        yield async.Future.wait(dart.void, this.loadedFiles[$values][$map](T.FutureOfvoid(), dart.bind(this, 'clear')));
      }).bind(this));
    }
    fetchToMemory(fileName) {
      return async.async(core.Uri, (function* fetchToMemory() {
        if (true) {
          let uri = this[_sanitizeURLForWeb](fileName);
          yield http.get(uri);
          return uri;
        }
        let byteData = (yield asset_bundle.rootBundle.load(this.prefix + fileName));
        let file = io.File.new((yield path_provider.getTemporaryDirectory()).path + "/" + fileName);
        yield file.create({recursive: true});
        yield file.writeAsBytes(byteData[$buffer][$asUint8List]());
        return file.uri;
      }).bind(this));
    }
    [_sanitizeURLForWeb](fileName) {
      let t4;
      let tryAbsolute = core.Uri.tryParse(fileName);
      if ((t4 = tryAbsolute, t4 == null ? null : t4.isAbsolute) === true) {
        return dart.nullCheck(tryAbsolute);
      }
      return core.Uri.parse("assets/" + this.prefix + fileName);
    }
    load(fileName) {
      return async.async(core.Uri, (function* load() {
        if (!this.loadedFiles[$containsKey](fileName)) {
          this.loadedFiles[$_set](fileName, yield this.fetchToMemory(fileName));
        }
        return dart.nullCheck(this.loadedFiles[$_get](fileName));
      }).bind(this));
    }
    loadAsFile(fileName) {
      return async.async(io.File, (function* loadAsFile() {
        if (true) {
          dart.throw("This method cannot be used on web!");
        }
        let uri = (yield this.load(fileName));
        return io.File.new(uri.toFilePath());
      }).bind(this));
    }
    loadAll(fileNames) {
      return async.async(T.ListOfUri(), (function* loadAll() {
        return async.Future.wait(core.Uri, fileNames[$map](T.FutureOfUri(), dart.bind(this, 'load')));
      }).bind(this));
    }
    [_player](mode) {
      let t4;
      t4 = this.fixedPlayer;
      return t4 == null ? new audioplayer.AudioPlayer.new({mode: mode}) : t4;
    }
    play(fileName, opts) {
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : null;
      return async.async(audioplayer.AudioPlayer, (function* play() {
        let t4, t4$;
        let uri = (yield this.load(fileName));
        let player = this[_player](mode);
        if (this.fixedPlayer != null) {
          yield player.setReleaseMode(release_mode.ReleaseMode.STOP);
        }
        yield player.play(uri.toString(), {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake, recordingActive: recordingActive, duckAudio: (t4$ = duckAudio, t4$ == null ? this.duckAudio : t4$)});
        return player;
      }).bind(this));
    }
    playBytes(fileBytes, opts) {
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      let loop = opts && 'loop' in opts ? opts.loop : false;
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      return async.async(audioplayer.AudioPlayer, (function* playBytes() {
        let t4;
        let player = this[_player](mode);
        if (loop) {
          yield player.setReleaseMode(release_mode.ReleaseMode.LOOP);
        } else if (this.fixedPlayer != null) {
          yield player.setReleaseMode(release_mode.ReleaseMode.STOP);
        }
        yield player.playBytes(fileBytes, {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake, recordingActive: recordingActive});
        return player;
      }).bind(this));
    }
    loop(fileName, opts) {
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      let isNotification = opts && 'isNotification' in opts ? opts.isNotification : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[0] || CT.C0;
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      return async.async(audioplayer.AudioPlayer, (function* loop() {
        let t4;
        let url = (yield this.load(fileName));
        let player = this[_player](mode);
        yield player.setReleaseMode(release_mode.ReleaseMode.LOOP);
        yield player.play(url.toString(), {volume: volume, respectSilence: (t4 = isNotification, t4 == null ? this.respectSilence : t4), stayAwake: stayAwake});
        return player;
      }).bind(this));
    }
  };
  (audio_cache.AudioCache.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : "assets/";
    let fixedPlayer = opts && 'fixedPlayer' in opts ? opts.fixedPlayer : null;
    let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
    let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
    this[loadedFiles] = new (T.IdentityMapOfString$Uri()).new();
    this[prefix$] = prefix;
    this[fixedPlayer$] = fixedPlayer;
    this[respectSilence$] = respectSilence;
    this[duckAudio$] = duckAudio;
    ;
  }).prototype = audio_cache.AudioCache.prototype;
  dart.addTypeTests(audio_cache.AudioCache);
  dart.addTypeCaches(audio_cache.AudioCache);
  dart.setMethodSignature(audio_cache.AudioCache, () => ({
    __proto__: dart.getMethods(audio_cache.AudioCache.__proto__),
    clear: dart.fnType(async.Future$(dart.void), [core.Uri]),
    clearAll: dart.fnType(async.Future$(dart.void), []),
    fetchToMemory: dart.fnType(async.Future$(core.Uri), [core.String]),
    [_sanitizeURLForWeb]: dart.fnType(core.Uri, [core.String]),
    load: dart.fnType(async.Future$(core.Uri), [core.String]),
    loadAsFile: dart.fnType(async.Future$(io.File), [core.String]),
    loadAll: dart.fnType(async.Future$(core.List$(core.Uri)), [core.List$(core.String)]),
    [_player]: dart.fnType(audioplayer.AudioPlayer, [player_mode.PlayerMode]),
    play: dart.fnType(async.Future$(audioplayer.AudioPlayer), [core.String], {duckAudio: dart.nullable(core.bool), isNotification: dart.nullable(core.bool), mode: player_mode.PlayerMode, recordingActive: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    playBytes: dart.fnType(async.Future$(audioplayer.AudioPlayer), [typed_data.Uint8List], {isNotification: dart.nullable(core.bool), loop: core.bool, mode: player_mode.PlayerMode, recordingActive: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    loop: dart.fnType(async.Future$(audioplayer.AudioPlayer), [core.String], {isNotification: dart.nullable(core.bool), mode: player_mode.PlayerMode, stayAwake: core.bool, volume: core.double}, {})
  }));
  dart.setLibraryUri(audio_cache.AudioCache, I[2]);
  dart.setFieldSignature(audio_cache.AudioCache, () => ({
    __proto__: dart.getFields(audio_cache.AudioCache.__proto__),
    loadedFiles: dart.fieldType(core.Map$(core.String, core.Uri)),
    prefix: dart.fieldType(core.String),
    fixedPlayer: dart.fieldType(dart.nullable(audioplayer.AudioPlayer)),
    respectSilence: dart.fieldType(core.bool),
    duckAudio: dart.fieldType(core.bool)
  }));
  dart.trackLibraries("packages/audioplayers/src/logger.dart", {
    "package:audioplayers/src/logger.dart": logger,
    "package:audioplayers/src/audioplayer.dart": audioplayer,
    "package:audioplayers/src/audio_cache.dart": audio_cache,
    "package:audioplayers/audioplayers.dart": audioplayers
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["logger.dart","audioplayer.dart","audio_cache.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/audioplayers/src/logger.dart.lib.js"}');
  // Exports:
  return {
    src__logger: logger,
    src__audioplayer: audioplayer,
    src__audio_cache: audio_cache,
    audioplayers: audioplayers
  };
}));

//# sourceMappingURL=logger.dart.lib.js.map
>>>>>>> AUg2
