<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/animation/curves.dart'], (function load__packages__flutter__src__widgets__dismissible_dart(dart_sdk, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__animation__curves$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const debug = packages__flutter__src__widgets__widget_span$46dart.src__widgets__debug;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const automatic_keep_alive = packages__flutter__src__widgets__widget_span$46dart.src__widgets__automatic_keep_alive;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  var dismissible = Object.create(dart.library);
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  var $_get = dartx._get;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    TweenOfOffset: () => (T.TweenOfOffset = dart.constFn(tween.Tween$(ui.Offset)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    AnimationStatusTovoid: () => (T.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))()
=======
define(['dart_sdk'], (function load__packages__hive__src__util__indexable_skip_list_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var indexable_skip_list = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $iterator = dartx.iterator;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
<<<<<<< HEAD
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.vertical",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.horizontal",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.endToStart",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.startToEnd",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.up",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.down",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: dismissible.DismissDirection.prototype,
        [_name$]: "DismissDirection.none",
        index: 6
      });
    },
    get C7() {
      return C[7] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6], dismissible.DismissDirection);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C9() {
      return C[9] = dart.constMap(dismissible.DismissDirection, core.double, []);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_name$0]: "HitTestBehavior.opaque",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$1]: "Axis.horizontal",
        index: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$1]: "Axis.vertical",
        index: 1
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: dismissible._FlingGestureKind.prototype,
        [_name$]: "_FlingGestureKind.none",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: dismissible._FlingGestureKind.prototype,
        [_name$]: "_FlingGestureKind.forward",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: dismissible._FlingGestureKind.prototype,
        [_name$]: "_FlingGestureKind.reverse",
        index: 2
      });
    },
    get C18() {
      return C[18] = dart.constList([C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17], dismissible._FlingGestureKind);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$2]: "TextDirection.rtl",
        index: 0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$2]: "TextDirection.ltr",
        index: 1
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 11,
        [_Location_line]: 585,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 586,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 587,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.constList([C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25], widget_inspector._Location);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[22] || CT.C22,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 584,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sizeFactor",
        [_Location_column]: 9,
        [_Location_line]: 582,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axis",
        [_Location_column]: 9,
        [_Location_line]: 583,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 584,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.constList([C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], widget_inspector._Location);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[27] || CT.C27,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 581,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "position",
        [_Location_column]: 7,
        [_Location_line]: 593,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 594,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.constList([C[33] || CT.C33, C[34] || CT.C34], widget_inspector._Location);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[32] || CT.C32,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 592,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipper",
        [_Location_column]: 15,
        [_Location_line]: 602,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 606,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.constList([C[37] || CT.C37, C[38] || CT.C38], widget_inspector._Location);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[36] || CT.C36,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 601,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 601,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.constList([C[41] || CT.C41], widget_inspector._Location);
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[40] || CT.C40,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 600,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 23,
        [_Location_line]: 598,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44], widget_inspector._Location);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 598,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragStart",
        [_Location_column]: 7,
        [_Location_line]: 614,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragUpdate",
        [_Location_column]: 7,
        [_Location_line]: 615,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragEnd",
        [_Location_column]: 7,
        [_Location_line]: 616,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragStart",
        [_Location_column]: 7,
        [_Location_line]: 617,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragUpdate",
        [_Location_column]: 7,
        [_Location_line]: 618,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragEnd",
        [_Location_column]: 7,
        [_Location_line]: 619,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "behavior",
        [_Location_column]: 7,
        [_Location_line]: 620,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 621,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 7,
        [_Location_line]: 622,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.constList([C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55], widget_inspector._Location);
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[46] || CT.C46,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 613,
        [_Location_file]: "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[57] || CT.C57,
        [Interval_end]: 1,
        [Interval_begin]: 0.4
      });
    }
  }, false);
  var C = Array(58).fill(void 0);
  var I = [
    "package:flutter/src/widgets/dismissible.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/widgets/dismissible.dart"
  ];
  var _name$ = dart.privateName(dismissible, "_name");
  dismissible.DismissDirection = class DismissDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (dismissible.DismissDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = dismissible.DismissDirection.prototype;
  dart.addTypeTests(dismissible.DismissDirection);
  dart.addTypeCaches(dismissible.DismissDirection);
  dart.setLibraryUri(dismissible.DismissDirection, I[0]);
  dart.setFieldSignature(dismissible.DismissDirection, () => ({
    __proto__: dart.getFields(dismissible.DismissDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dismissible.DismissDirection, ['toString']);
  dismissible.DismissDirection.vertical = C[0] || CT.C0;
  dismissible.DismissDirection.horizontal = C[1] || CT.C1;
  dismissible.DismissDirection.endToStart = C[2] || CT.C2;
  dismissible.DismissDirection.startToEnd = C[3] || CT.C3;
  dismissible.DismissDirection.up = C[4] || CT.C4;
  dismissible.DismissDirection.down = C[5] || CT.C5;
  dismissible.DismissDirection.none = C[6] || CT.C6;
  dismissible.DismissDirection.values = C[7] || CT.C7;
  var child$ = dart.privateName(dismissible, "Dismissible.child");
  var background$ = dart.privateName(dismissible, "Dismissible.background");
  var secondaryBackground$ = dart.privateName(dismissible, "Dismissible.secondaryBackground");
  var confirmDismiss$ = dart.privateName(dismissible, "Dismissible.confirmDismiss");
  var onResize$ = dart.privateName(dismissible, "Dismissible.onResize");
  var onDismissed$ = dart.privateName(dismissible, "Dismissible.onDismissed");
  var direction$ = dart.privateName(dismissible, "Dismissible.direction");
  var resizeDuration$ = dart.privateName(dismissible, "Dismissible.resizeDuration");
  var dismissThresholds$ = dart.privateName(dismissible, "Dismissible.dismissThresholds");
  var movementDuration$ = dart.privateName(dismissible, "Dismissible.movementDuration");
  var crossAxisEndOffset$ = dart.privateName(dismissible, "Dismissible.crossAxisEndOffset");
  var dragStartBehavior$ = dart.privateName(dismissible, "Dismissible.dragStartBehavior");
  var behavior$ = dart.privateName(dismissible, "Dismissible.behavior");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _name = dart.privateName(recognizer, "_name");
  var _name$0 = dart.privateName(proxy_box, "_name");
  dismissible.Dismissible = class Dismissible extends framework.StatefulWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get secondaryBackground() {
      return this[secondaryBackground$];
    }
    set secondaryBackground(value) {
      super.secondaryBackground = value;
    }
    get confirmDismiss() {
      return this[confirmDismiss$];
    }
    set confirmDismiss(value) {
      super.confirmDismiss = value;
    }
    get onResize() {
      return this[onResize$];
    }
    set onResize(value) {
      super.onResize = value;
    }
    get onDismissed() {
      return this[onDismissed$];
    }
    set onDismissed(value) {
      super.onDismissed = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get resizeDuration() {
      return this[resizeDuration$];
    }
    set resizeDuration(value) {
      super.resizeDuration = value;
    }
    get dismissThresholds() {
      return this[dismissThresholds$];
    }
    set dismissThresholds(value) {
      super.dismissThresholds = value;
    }
    get movementDuration() {
      return this[movementDuration$];
    }
    set movementDuration(value) {
      super.movementDuration = value;
    }
    get crossAxisEndOffset() {
      return this[crossAxisEndOffset$];
    }
    set crossAxisEndOffset(value) {
      super.crossAxisEndOffset = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get behavior() {
      return this[behavior$];
    }
    set behavior(value) {
      super.behavior = value;
    }
    createState() {
      return new dismissible._DismissibleState.new();
    }
  };
  (dismissible.Dismissible.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let secondaryBackground = opts && 'secondaryBackground' in opts ? opts.secondaryBackground : null;
    let confirmDismiss = opts && 'confirmDismiss' in opts ? opts.confirmDismiss : null;
    let onResize = opts && 'onResize' in opts ? opts.onResize : null;
    let onDismissed = opts && 'onDismissed' in opts ? opts.onDismissed : null;
    let direction = opts && 'direction' in opts ? opts.direction : C[1] || CT.C1;
    let resizeDuration = opts && 'resizeDuration' in opts ? opts.resizeDuration : C[8] || CT.C8;
    let dismissThresholds = opts && 'dismissThresholds' in opts ? opts.dismissThresholds : C[9] || CT.C9;
    let movementDuration = opts && 'movementDuration' in opts ? opts.movementDuration : C[10] || CT.C10;
    let crossAxisEndOffset = opts && 'crossAxisEndOffset' in opts ? opts.crossAxisEndOffset : 0;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[11] || CT.C11;
    let behavior = opts && 'behavior' in opts ? opts.behavior : C[12] || CT.C12;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[background$] = background;
    this[secondaryBackground$] = secondaryBackground;
    this[confirmDismiss$] = confirmDismiss;
    this[onResize$] = onResize;
    this[onDismissed$] = onDismissed;
    this[direction$] = direction;
    this[resizeDuration$] = resizeDuration;
    this[dismissThresholds$] = dismissThresholds;
    this[movementDuration$] = movementDuration;
    this[crossAxisEndOffset$] = crossAxisEndOffset;
    this[dragStartBehavior$] = dragStartBehavior;
    this[behavior$] = behavior;
    if (!(key !== null)) dart.assertFailed(null, I[1], 138, 15, "key != null");
    if (!(secondaryBackground == null || background != null)) dart.assertFailed(null, I[1], 139, 15, "secondaryBackground == null || background != null");
    if (!(dragStartBehavior !== null)) dart.assertFailed(null, I[1], 140, 15, "dragStartBehavior != null");
    dismissible.Dismissible.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = dismissible.Dismissible.prototype;
  dart.addTypeTests(dismissible.Dismissible);
  dart.addTypeCaches(dismissible.Dismissible);
  dart.setMethodSignature(dismissible.Dismissible, () => ({
    __proto__: dart.getMethods(dismissible.Dismissible.__proto__),
    createState: dart.fnType(dismissible._DismissibleState, [])
  }));
  dart.setLibraryUri(dismissible.Dismissible, I[0]);
  dart.setFieldSignature(dismissible.Dismissible, () => ({
    __proto__: dart.getFields(dismissible.Dismissible.__proto__),
    child: dart.finalFieldType(framework.Widget),
    background: dart.finalFieldType(dart.nullable(framework.Widget)),
    secondaryBackground: dart.finalFieldType(dart.nullable(framework.Widget)),
    confirmDismiss: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(core.bool)), [dismissible.DismissDirection]))),
    onResize: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDismissed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dismissible.DismissDirection]))),
    direction: dart.finalFieldType(dismissible.DismissDirection),
    resizeDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    dismissThresholds: dart.finalFieldType(core.Map$(dismissible.DismissDirection, core.double)),
    movementDuration: dart.finalFieldType(core.Duration),
    crossAxisEndOffset: dart.finalFieldType(core.double),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    behavior: dart.finalFieldType(proxy_box.HitTestBehavior)
  }));
  var _name$1 = dart.privateName(basic_types, "_name");
  dismissible._DismissibleClipper = class _DismissibleClipper extends proxy_box.CustomClipper$(ui.Rect) {
    getClip(size) {
      if (!(this.axis !== null)) dart.assertFailed(null, I[1], 251, 12, "axis != null");
      switch (this.axis) {
        case C[13] || CT.C13:
        {
          let offset = this.moveAnimation.value.dx * size.width;
          if (offset < 0) return new ui.Rect.fromLTRB(size.width + offset, 0.0, size.width, size.height);
          return new ui.Rect.fromLTRB(0.0, 0.0, offset, size.height);
        }
        case C[14] || CT.C14:
        {
          let offset = this.moveAnimation.value.dy * size.height;
          if (offset < 0) return new ui.Rect.fromLTRB(0.0, size.height + offset, size.width, size.height);
          return new ui.Rect.fromLTRB(0.0, 0.0, size.width, offset);
        }
      }
    }
    getApproximateClipRect(size) {
      return this.getClip(size);
    }
    shouldReclip(oldClipper) {
      dismissible._DismissibleClipper.as(oldClipper);
      return oldClipper.axis !== this.axis || !oldClipper.moveAnimation.value._equals(this.moveAnimation.value);
    }
  };
  (dismissible._DismissibleClipper.new = function(opts) {
    let axis = opts && 'axis' in opts ? opts.axis : null;
    let moveAnimation = opts && 'moveAnimation' in opts ? opts.moveAnimation : null;
    this.axis = axis;
    this.moveAnimation = moveAnimation;
    if (!(axis !== null)) dart.assertFailed(null, I[1], 242, 15, "axis != null");
    if (!(moveAnimation !== null)) dart.assertFailed(null, I[1], 243, 15, "moveAnimation != null");
    dismissible._DismissibleClipper.__proto__.new.call(this, {reclip: moveAnimation});
    ;
  }).prototype = dismissible._DismissibleClipper.prototype;
  dart.addTypeTests(dismissible._DismissibleClipper);
  dart.addTypeCaches(dismissible._DismissibleClipper);
  dart.setMethodSignature(dismissible._DismissibleClipper, () => ({
    __proto__: dart.getMethods(dismissible._DismissibleClipper.__proto__),
    getClip: dart.fnType(ui.Rect, [ui.Size]),
    shouldReclip: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dismissible._DismissibleClipper, I[0]);
  dart.setFieldSignature(dismissible._DismissibleClipper, () => ({
    __proto__: dart.getFields(dismissible._DismissibleClipper.__proto__),
    axis: dart.finalFieldType(basic_types.Axis),
    moveAnimation: dart.finalFieldType(animation.Animation$(ui.Offset))
  }));
  dismissible._FlingGestureKind = class _FlingGestureKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (dismissible._FlingGestureKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = dismissible._FlingGestureKind.prototype;
  dart.addTypeTests(dismissible._FlingGestureKind);
  dart.addTypeCaches(dismissible._FlingGestureKind);
  dart.setLibraryUri(dismissible._FlingGestureKind, I[0]);
  dart.setFieldSignature(dismissible._FlingGestureKind, () => ({
    __proto__: dart.getFields(dismissible._FlingGestureKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dismissible._FlingGestureKind, ['toString']);
  dismissible._FlingGestureKind.none = C[15] || CT.C15;
  dismissible._FlingGestureKind.forward = C[16] || CT.C16;
  dismissible._FlingGestureKind.reverse = C[17] || CT.C17;
  dismissible._FlingGestureKind.values = C[18] || CT.C18;
  var _moveController = dart.privateName(dismissible, "_moveController");
  var ___DismissibleState__moveAnimation = dart.privateName(dismissible, "_#_DismissibleState#_moveAnimation");
  var _resizeController = dart.privateName(dismissible, "_resizeController");
  var _resizeAnimation = dart.privateName(dismissible, "_resizeAnimation");
  var _dragExtent = dart.privateName(dismissible, "_dragExtent");
  var _dragUnderway = dart.privateName(dismissible, "_dragUnderway");
  var _sizePriorToCollapse = dart.privateName(dismissible, "_sizePriorToCollapse");
  var _handleDismissStatusChanged = dart.privateName(dismissible, "_handleDismissStatusChanged");
  var _updateMoveAnimation = dart.privateName(dismissible, "_updateMoveAnimation");
  var _moveAnimation = dart.privateName(dismissible, "_moveAnimation");
  var _directionIsXAxis = dart.privateName(dismissible, "_directionIsXAxis");
  var _name$2 = dart.privateName(ui, "_name");
  var _extentToDirection = dart.privateName(dismissible, "_extentToDirection");
  var _dismissDirection = dart.privateName(dismissible, "_dismissDirection");
  var _isActive = dart.privateName(dismissible, "_isActive");
  var _overallDragAxisExtent = dart.privateName(dismissible, "_overallDragAxisExtent");
  var _handleDragStart = dart.privateName(dismissible, "_handleDragStart");
  var _handleDragUpdate = dart.privateName(dismissible, "_handleDragUpdate");
  var _describeFlingGesture = dart.privateName(dismissible, "_describeFlingGesture");
  var _confirmStartResizeAnimation = dart.privateName(dismissible, "_confirmStartResizeAnimation");
  var _startResizeAnimation = dart.privateName(dismissible, "_startResizeAnimation");
  var _handleDragEnd = dart.privateName(dismissible, "_handleDragEnd");
  var _handleResizeProgressChanged = dart.privateName(dismissible, "_handleResizeProgressChanged");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(dismissible.Dismissible) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(dismissible.Dismissible)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(dismissible.Dismissible));
  const State_AutomaticKeepAliveClientMixin$36 = class State_AutomaticKeepAliveClientMixin extends State_TickerProviderStateMixin$36 {};
  (State_AutomaticKeepAliveClientMixin$36.new = function() {
    automatic_keep_alive.AutomaticKeepAliveClientMixin$(dismissible.Dismissible)[dart.mixinNew].call(this);
    State_AutomaticKeepAliveClientMixin$36.__proto__.new.call(this);
  }).prototype = State_AutomaticKeepAliveClientMixin$36.prototype;
  dart.applyMixin(State_AutomaticKeepAliveClientMixin$36, automatic_keep_alive.AutomaticKeepAliveClientMixin$(dismissible.Dismissible));
  dismissible._DismissibleState = class _DismissibleState extends State_AutomaticKeepAliveClientMixin$36 {
    initState() {
      let t0;
      super.initState();
      this[_moveController] = (t0 = new animation_controller.AnimationController.new({duration: this.widget.movementDuration, vsync: this}), (() => {
        t0.addStatusListener(dart.bind(this, _handleDismissStatusChanged));
        return t0;
      })());
      this[_updateMoveAnimation]();
    }
    get [_moveAnimation]() {
      let t0;
      t0 = this[___DismissibleState__moveAnimation];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_moveAnimation")) : t0;
    }
    set [_moveAnimation](t0) {
      this[___DismissibleState__moveAnimation] = t0;
    }
    get wantKeepAlive() {
      let t1, t1$;
      return (t1 = this[_moveController], t1 == null ? null : t1.isAnimating) === true || (t1$ = this[_resizeController], t1$ == null ? null : t1$.isAnimating) === true;
    }
    dispose() {
      let t1;
      dart.nullCheck(this[_moveController]).dispose();
      t1 = this[_resizeController];
      t1 == null ? null : t1.dispose();
      super.dispose();
    }
    get [_directionIsXAxis]() {
      return this.widget.direction === dismissible.DismissDirection.horizontal || this.widget.direction === dismissible.DismissDirection.endToStart || this.widget.direction === dismissible.DismissDirection.startToEnd;
    }
    [_extentToDirection](extent) {
      if (extent === 0.0) return dismissible.DismissDirection.none;
      if (this[_directionIsXAxis]) {
        switch (basic.Directionality.of(this.context)) {
          case C[19] || CT.C19:
          {
            return extent < 0 ? dismissible.DismissDirection.startToEnd : dismissible.DismissDirection.endToStart;
          }
          case C[20] || CT.C20:
          {
            return extent > 0 ? dismissible.DismissDirection.startToEnd : dismissible.DismissDirection.endToStart;
          }
        }
      }
      return extent > 0 ? dismissible.DismissDirection.down : dismissible.DismissDirection.up;
    }
    get [_dismissDirection]() {
      return this[_extentToDirection](this[_dragExtent]);
    }
    get [_isActive]() {
      return this[_dragUnderway] || dart.nullCheck(this[_moveController]).isAnimating;
    }
    get [_overallDragAxisExtent]() {
      let size = dart.nullCheck(this.context.size);
      return this[_directionIsXAxis] ? size.width : size.height;
    }
    [_handleDragStart](details) {
      this[_dragUnderway] = true;
      if (dart.nullCheck(this[_moveController]).isAnimating) {
        this[_dragExtent] = dart.nullCheck(this[_moveController]).value * this[_overallDragAxisExtent] * this[_dragExtent][$sign];
        dart.nullCheck(this[_moveController]).stop();
      } else {
        this[_dragExtent] = 0.0;
        dart.nullCheck(this[_moveController]).value = 0.0;
      }
      this.setState(dart.fn(() => {
        this[_updateMoveAnimation]();
      }, T.VoidTovoid()));
    }
    [_handleDragUpdate](details) {
      if (!this[_isActive] || dart.nullCheck(this[_moveController]).isAnimating) return;
      let delta = dart.nullCheck(details.primaryDelta);
      let oldDragExtent = this[_dragExtent];
      switch (this.widget.direction) {
        case C[1] || CT.C1:
        case C[0] || CT.C0:
        {
          this[_dragExtent] = this[_dragExtent] + delta;
          break;
        }
        case C[4] || CT.C4:
        {
          if (this[_dragExtent] + delta < 0) this[_dragExtent] = this[_dragExtent] + delta;
          break;
        }
        case C[5] || CT.C5:
        {
          if (this[_dragExtent] + delta > 0) this[_dragExtent] = this[_dragExtent] + delta;
          break;
        }
        case C[2] || CT.C2:
        {
          switch (basic.Directionality.of(this.context)) {
            case C[19] || CT.C19:
            {
              if (this[_dragExtent] + delta > 0) this[_dragExtent] = this[_dragExtent] + delta;
              break;
            }
            case C[20] || CT.C20:
            {
              if (this[_dragExtent] + delta < 0) this[_dragExtent] = this[_dragExtent] + delta;
              break;
            }
          }
          break;
        }
        case C[3] || CT.C3:
        {
          switch (basic.Directionality.of(this.context)) {
            case C[19] || CT.C19:
            {
              if (this[_dragExtent] + delta < 0) this[_dragExtent] = this[_dragExtent] + delta;
              break;
            }
            case C[20] || CT.C20:
            {
              if (this[_dragExtent] + delta > 0) this[_dragExtent] = this[_dragExtent] + delta;
              break;
            }
          }
          break;
        }
        case C[6] || CT.C6:
        {
          this[_dragExtent] = 0.0;
          break;
        }
      }
      if (oldDragExtent[$sign] !== this[_dragExtent][$sign]) {
        this.setState(dart.fn(() => {
          this[_updateMoveAnimation]();
        }, T.VoidTovoid()));
      }
      if (!dart.nullCheck(this[_moveController]).isAnimating) {
        dart.nullCheck(this[_moveController]).value = this[_dragExtent][$abs]() / this[_overallDragAxisExtent];
      }
    }
    [_updateMoveAnimation]() {
      let end = this[_dragExtent][$sign];
      this[_moveAnimation] = dart.nullCheck(this[_moveController]).drive(ui.Offset, new (T.TweenOfOffset()).new({begin: ui.Offset.zero, end: this[_directionIsXAxis] ? new ui.Offset.new(end, this.widget.crossAxisEndOffset) : new ui.Offset.new(this.widget.crossAxisEndOffset, end)}));
    }
    [_describeFlingGesture](velocity) {
      if (!(this.widget.direction !== null)) dart.assertFailed(null, I[1], 427, 12, "widget.direction != null");
      if (this[_dragExtent] === 0.0) {
        return dismissible._FlingGestureKind.none;
      }
      let vx = velocity.pixelsPerSecond.dx;
      let vy = velocity.pixelsPerSecond.dy;
      let flingDirection = null;
      if (this[_directionIsXAxis]) {
        if (vx[$abs]() - vy[$abs]() < 400 || vx[$abs]() < 700) return dismissible._FlingGestureKind.none;
        if (!(vx !== 0.0)) dart.assertFailed(null, I[1], 443, 14, "vx != 0.0");
        flingDirection = this[_extentToDirection](vx);
      } else {
        if (vy[$abs]() - vx[$abs]() < 400 || vy[$abs]() < 700) return dismissible._FlingGestureKind.none;
        if (!(vy !== 0.0)) dart.assertFailed(null, I[1], 448, 14, "vy != 0.0");
        flingDirection = this[_extentToDirection](vy);
      }
      if (!(this[_dismissDirection] !== null)) dart.assertFailed(null, I[1], 451, 12, "_dismissDirection != null");
      if (flingDirection === this[_dismissDirection]) return dismissible._FlingGestureKind.forward;
      return dismissible._FlingGestureKind.reverse;
    }
    [_handleDragEnd](details) {
      return async.async(dart.void, (function* _handleDragEnd() {
        let t1, t1$;
        if (!this[_isActive] || dart.nullCheck(this[_moveController]).isAnimating) return;
        this[_dragUnderway] = false;
        if (dart.nullCheck(this[_moveController]).isCompleted && (yield this[_confirmStartResizeAnimation]()) === true) {
          this[_startResizeAnimation]();
          return;
        }
        let flingVelocity = this[_directionIsXAxis] ? details.velocity.pixelsPerSecond.dx : details.velocity.pixelsPerSecond.dy;
        switch (this[_describeFlingGesture](details.velocity)) {
          case C[16] || CT.C16:
          {
            if (!(this[_dragExtent] !== 0.0)) dart.assertFailed(null, I[1], 468, 16, "_dragExtent != 0.0");
            if (!!dart.nullCheck(this[_moveController]).isDismissed) dart.assertFailed(null, I[1], 469, 16, "!_moveController!.isDismissed");
            if (dart.notNull((t1 = this.widget.dismissThresholds[$_get](this[_dismissDirection]), t1 == null ? 0.4 : t1)) >= 1.0) {
              dart.nullCheck(this[_moveController]).reverse();
              break;
            }
            this[_dragExtent] = flingVelocity[$sign];
            dart.nullCheck(this[_moveController]).fling({velocity: flingVelocity[$abs]() * 0.0033333333333333335});
            break;
          }
          case C[17] || CT.C17:
          {
            if (!(this[_dragExtent] !== 0.0)) dart.assertFailed(null, I[1], 478, 16, "_dragExtent != 0.0");
            if (!!dart.nullCheck(this[_moveController]).isDismissed) dart.assertFailed(null, I[1], 479, 16, "!_moveController!.isDismissed");
            this[_dragExtent] = flingVelocity[$sign];
            dart.nullCheck(this[_moveController]).fling({velocity: -flingVelocity[$abs]() * 0.0033333333333333335});
            break;
          }
          case C[15] || CT.C15:
          {
            if (!dart.nullCheck(this[_moveController]).isDismissed) {
              if (dart.nullCheck(this[_moveController]).value > dart.notNull((t1$ = this.widget.dismissThresholds[$_get](this[_dismissDirection]), t1$ == null ? 0.4 : t1$))) {
                dart.nullCheck(this[_moveController]).forward();
              } else {
                dart.nullCheck(this[_moveController]).reverse();
              }
            }
            break;
          }
        }
      }).bind(this));
    }
    [_handleDismissStatusChanged](status) {
      return async.async(dart.void, (function* _handleDismissStatusChanged() {
        if (status === animation.AnimationStatus.completed && !this[_dragUnderway]) {
          if ((yield this[_confirmStartResizeAnimation]()) === true)
            this[_startResizeAnimation]();
          else
            dart.nullCheck(this[_moveController]).reverse();
        }
        this.updateKeepAlive();
      }).bind(this));
    }
    [_confirmStartResizeAnimation]() {
      return async.async(T.boolN(), (function* _confirmStartResizeAnimation() {
        if (this.widget.confirmDismiss != null) {
          let direction = this[_dismissDirection];
          return dart.nullCheck(this.widget.confirmDismiss)(direction);
        }
        return true;
      }).bind(this));
    }
    [_startResizeAnimation]() {
      let t1;
      if (!(this[_moveController] != null)) dart.assertFailed(null, I[1], 514, 12, "_moveController != null");
      if (!dart.nullCheck(this[_moveController]).isCompleted) dart.assertFailed(null, I[1], 515, 12, "_moveController!.isCompleted");
      if (!(this[_resizeController] == null)) dart.assertFailed(null, I[1], 516, 12, "_resizeController == null");
      if (!(this[_sizePriorToCollapse] == null)) dart.assertFailed(null, I[1], 517, 12, "_sizePriorToCollapse == null");
      if (this.widget.resizeDuration == null) {
        if (this.widget.onDismissed != null) {
          let direction = this[_dismissDirection];
          dart.nullCheck(this.widget.onDismissed)(direction);
        }
      } else {
        this[_resizeController] = (t1 = new animation_controller.AnimationController.new({duration: this.widget.resizeDuration, vsync: this}), (() => {
          t1.addListener(dart.bind(this, _handleResizeProgressChanged));
          t1.addStatusListener(dart.fn(status => this.updateKeepAlive(), T.AnimationStatusTovoid()));
          return t1;
        })());
        dart.nullCheck(this[_resizeController]).forward();
        this.setState(dart.fn(() => {
          this[_sizePriorToCollapse] = this.context.size;
          this[_resizeAnimation] = dart.nullCheck(this[_resizeController]).drive(core.double, new tween.CurveTween.new({curve: dismissible._kResizeTimeCurve})).drive(core.double, new (T.TweenOfdouble()).new({begin: 1.0, end: 0.0}));
        }, T.VoidTovoid()));
      }
    }
    [_handleResizeProgressChanged]() {
      let t1, t1$;
      if (dart.nullCheck(this[_resizeController]).isCompleted) {
        t1 = this.widget.onDismissed;
        t1 == null ? null : t1(this[_dismissDirection]);
      } else {
        t1$ = this.widget.onResize;
        t1$ == null ? null : t1$();
      }
    }
    build(context) {
      super.build(context);
      if (!(!this[_directionIsXAxis] || debug.debugCheckHasDirectionality(context))) dart.assertFailed(null, I[1], 556, 12, "!_directionIsXAxis || debugCheckHasDirectionality(context)");
      let background = this.widget.background;
      if (this.widget.secondaryBackground != null) {
        let direction = this[_dismissDirection];
        if (direction === dismissible.DismissDirection.endToStart || direction === dismissible.DismissDirection.up) background = this.widget.secondaryBackground;
      }
      if (this[_resizeAnimation] != null) {
        if (!dart.fn(() => {
          if (dart.nullCheck(this[_resizeAnimation]).status !== animation.AnimationStatus.forward) {
            if (!(dart.nullCheck(this[_resizeAnimation]).status === animation.AnimationStatus.completed)) dart.assertFailed(null, I[1], 569, 18, "_resizeAnimation!.status == AnimationStatus.completed");
            dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("A dismissed Dismissible widget is still part of the tree."), new assertions.ErrorHint.new("Make sure to implement the onDismissed handler and to immediately remove the Dismissible " + "widget from the application once that handler has fired.")])));
          }
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 567, 14, "() {\r\n        if (_resizeAnimation!.status != AnimationStatus.forward) {\r\n          assert(_resizeAnimation!.status == AnimationStatus.completed);\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('A dismissed Dismissible widget is still part of the tree.'),\r\n            ErrorHint(\r\n              'Make sure to implement the onDismissed handler and to immediately remove the Dismissible '\r\n              'widget from the application once that handler has fired.',\r\n            ),\r\n          ]);\r\n        }\r\n        return true;\r\n      }()");
        return new transitions.SizeTransition.new({sizeFactor: dart.nullCheck(this[_resizeAnimation]), axis: this[_directionIsXAxis] ? basic_types.Axis.vertical : basic_types.Axis.horizontal, child: new basic.SizedBox.new({width: dart.nullCheck(this[_sizePriorToCollapse]).width, height: dart.nullCheck(this[_sizePriorToCollapse]).height, child: background, $creationLocationd_0dea112b090073317d4: C[21] || CT.C21}), $creationLocationd_0dea112b090073317d4: C[26] || CT.C26});
      }
      let content = new transitions.SlideTransition.new({position: this[_moveAnimation], child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[31] || CT.C31});
      if (background != null) {
        content = new basic.Stack.new({children: (() => {
            let t1 = T.JSArrayOfWidget().of([]);
            if (!this[_moveAnimation].isDismissed) t1[$add](new basic.Positioned.fill({child: new basic.ClipRect.new({clipper: new dismissible._DismissibleClipper.new({axis: this[_directionIsXAxis] ? basic_types.Axis.horizontal : basic_types.Axis.vertical, moveAnimation: this[_moveAnimation]}), child: background, $creationLocationd_0dea112b090073317d4: C[35] || CT.C35}), $creationLocationd_0dea112b090073317d4: C[39] || CT.C39}));
            t1[$add](content);
            return t1;
          })(), $creationLocationd_0dea112b090073317d4: C[42] || CT.C42});
      }
      return new gesture_detector.GestureDetector.new({onHorizontalDragStart: this[_directionIsXAxis] ? dart.bind(this, _handleDragStart) : null, onHorizontalDragUpdate: this[_directionIsXAxis] ? dart.bind(this, _handleDragUpdate) : null, onHorizontalDragEnd: this[_directionIsXAxis] ? dart.bind(this, _handleDragEnd) : null, onVerticalDragStart: this[_directionIsXAxis] ? null : dart.bind(this, _handleDragStart), onVerticalDragUpdate: this[_directionIsXAxis] ? null : dart.bind(this, _handleDragUpdate), onVerticalDragEnd: this[_directionIsXAxis] ? null : dart.bind(this, _handleDragEnd), behavior: this.widget.behavior, child: content, dragStartBehavior: this.widget.dragStartBehavior, $creationLocationd_0dea112b090073317d4: C[45] || CT.C45});
    }
  };
  (dismissible._DismissibleState.new = function() {
    this[_moveController] = null;
    this[___DismissibleState__moveAnimation] = null;
    this[_resizeController] = null;
    this[_resizeAnimation] = null;
    this[_dragExtent] = 0.0;
    this[_dragUnderway] = false;
    this[_sizePriorToCollapse] = null;
    dismissible._DismissibleState.__proto__.new.call(this);
    ;
  }).prototype = dismissible._DismissibleState.prototype;
  dart.addTypeTests(dismissible._DismissibleState);
  dart.addTypeCaches(dismissible._DismissibleState);
  dart.setMethodSignature(dismissible._DismissibleState, () => ({
    __proto__: dart.getMethods(dismissible._DismissibleState.__proto__),
    [_extentToDirection]: dart.fnType(dismissible.DismissDirection, [core.double]),
    [_handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_updateMoveAnimation]: dart.fnType(dart.void, []),
    [_describeFlingGesture]: dart.fnType(dismissible._FlingGestureKind, [velocity_tracker.Velocity]),
    [_handleDragEnd]: dart.fnType(async.Future$(dart.void), [drag_details.DragEndDetails]),
    [_handleDismissStatusChanged]: dart.fnType(async.Future$(dart.void), [animation.AnimationStatus]),
    [_confirmStartResizeAnimation]: dart.fnType(async.Future$(dart.nullable(core.bool)), []),
    [_startResizeAnimation]: dart.fnType(dart.void, []),
    [_handleResizeProgressChanged]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(dismissible._DismissibleState, () => ({
    __proto__: dart.getGetters(dismissible._DismissibleState.__proto__),
    [_moveAnimation]: animation.Animation$(ui.Offset),
    wantKeepAlive: core.bool,
    [_directionIsXAxis]: core.bool,
    [_dismissDirection]: dismissible.DismissDirection,
    [_isActive]: core.bool,
    [_overallDragAxisExtent]: core.double
  }));
  dart.setSetterSignature(dismissible._DismissibleState, () => ({
    __proto__: dart.getSetters(dismissible._DismissibleState.__proto__),
    [_moveAnimation]: animation.Animation$(ui.Offset)
  }));
  dart.setLibraryUri(dismissible._DismissibleState, I[0]);
  dart.setFieldSignature(dismissible._DismissibleState, () => ({
    __proto__: dart.getFields(dismissible._DismissibleState.__proto__),
    [_moveController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___DismissibleState__moveAnimation]: dart.fieldType(dart.nullable(animation.Animation$(ui.Offset))),
    [_resizeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [_resizeAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_dragExtent]: dart.fieldType(core.double),
    [_dragUnderway]: dart.fieldType(core.bool),
    [_sizePriorToCollapse]: dart.fieldType(dart.nullable(ui.Size))
  }));
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var Interval_curve = dart.privateName(curves, "Interval.curve");
  var Interval_end = dart.privateName(curves, "Interval.end");
  var Interval_begin = dart.privateName(curves, "Interval.begin");
  dart.defineLazy(dismissible, {
    /*dismissible._kResizeTimeCurve*/get _kResizeTimeCurve() {
      return C[56] || CT.C56;
    },
    /*dismissible._kMinFlingVelocity*/get _kMinFlingVelocity() {
      return 700;
    },
    /*dismissible._kMinFlingVelocityDelta*/get _kMinFlingVelocityDelta() {
      return 400;
    },
    /*dismissible._kFlingVelocityScale*/get _kFlingVelocityScale() {
      return 0.0033333333333333335;
    },
    /*dismissible._kDismissThreshold*/get _kDismissThreshold() {
      return 0.4;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/widgets/dismissible.dart", {
    "package:flutter/src/widgets/dismissible.dart": dismissible
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["dismissible.dart"],"names":[],"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","file":"../../../../../../../packages/flutter/src/widgets/dismissible.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__dismissible: dismissible
  };
}));

//# sourceMappingURL=dismissible.dart.lib.js.map
=======
  var I = ["package:hive/src/util/indexable_skip_list.dart"];
  var _head = dart.privateName(indexable_skip_list, "_head");
  var _height = dart.privateName(indexable_skip_list, "_height");
  var _length = dart.privateName(indexable_skip_list, "_length");
  var _comparator$ = dart.privateName(indexable_skip_list, "_comparator");
  var _random = dart.privateName(indexable_skip_list, "_random");
  var _getNode = dart.privateName(indexable_skip_list, "_getNode");
  var _getNodeAt = dart.privateName(indexable_skip_list, "_getNodeAt");
  const _is_IndexableSkipList_default = Symbol('_is_IndexableSkipList_default');
  indexable_skip_list.IndexableSkipList$ = dart.generic((K, V) => {
    var _NodeOfK$V = () => (_NodeOfK$V = dart.constFn(indexable_skip_list._Node$(K, V)))();
    var _NodeNOfK$V = () => (_NodeNOfK$V = dart.constFn(dart.nullable(_NodeOfK$V())))();
    var ListOf_NodeNOfK$V = () => (ListOf_NodeNOfK$V = dart.constFn(core.List$(_NodeNOfK$V())))();
    var _KeyIterableOfK$V = () => (_KeyIterableOfK$V = dart.constFn(indexable_skip_list._KeyIterable$(K, V)))();
    var _ValueIterableOfK$V = () => (_ValueIterableOfK$V = dart.constFn(indexable_skip_list._ValueIterable$(K, V)))();
    var KN = () => (KN = dart.constFn(dart.nullable(K)))();
    var _NodeOfKN$VN = () => (_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(KN(), VN())))();
    var JSArrayOf_NodeNOfK$V = () => (JSArrayOf_NodeNOfK$V = dart.constFn(_interceptors.JSArray$(_NodeNOfK$V())))();
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    class IndexableSkipList extends core.Object {
      get length() {
        return this[_length];
      }
      get keys() {
        return new (_KeyIterableOfK$V()).new(this[_head]);
      }
      get values() {
        return new (_ValueIterableOfK$V()).new(this[_head]);
      }
      insert(key, value) {
        let t0, t1, t0$, t1$, t0$0, t1$0, t0$1, t1$1, t0$2, t1$2, t0$3, t1$3, t0$4;
        K.as(key);
        VN().as(value);
        let existingNode = this[_getNode](key);
        if (existingNode != null) {
          let oldValue = existingNode.value;
          existingNode.value = value;
          return oldValue;
        }
        let newLevel = 0;
        while (this[_random].nextBool() && dart.notNull(newLevel) < 12 - 1) {
          newLevel = dart.notNull(newLevel) + 1;
        }
        if (dart.notNull(newLevel) >= this[_height]) {
          newLevel = (t0 = this[_height], this[_height] = t0 + 1, t0);
        }
        let newNode = new (_NodeOfK$V()).new(key, value, ListOf_NodeNOfK$V().filled(dart.notNull(newLevel) + 1, null), T.ListOfint().filled(dart.notNull(newLevel) + 1, 0));
        let current = this[_head];
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[$_get](level);
            if (next == null || (t0$ = key, t1 = dart.nullCheck(next.key), this[_comparator$](t0$, t1)) < 0) break;
            current = next;
          }
          if (level > dart.notNull(newLevel)) {
            let next = current.next[$_get](level);
            if (next != null) {
              t0$0 = next.width;
              t1$ = level;
              t0$0[$_set](t1$, t0$0[$_get](t1$) + 1);
            }
            continue;
          }
          if (level === 0) {
            newNode.width[$_set](0, 1);
          } else {
            let width = 0;
            let node = current.next[$_get](level - 1);
            while (node != null && (t0$1 = key, t1$0 = dart.nullCheck(node.key), this[_comparator$](t0$1, t1$0)) >= 0) {
              width = width + node.width[$_get](level - 1);
              node = node.next[$_get](level - 1);
            }
            for (let j = level; j <= dart.notNull(newLevel); j = j + 1) {
              t0$2 = newNode.width;
              t1$1 = j;
              t0$2[$_set](t1$1, t0$2[$_get](t1$1) + width);
            }
            t0$3 = newNode.width;
            t1$2 = level;
            t0$3[$_set](t1$2, t0$3[$_get](t1$2) + 1);
          }
          newNode.next[$_set](level, current.next[$_get](level));
          current.next[$_set](level, newNode);
        }
        for (let i = 1; i <= dart.notNull(newLevel); i = i + 1) {
          let next = newNode.next[$_get](i);
          if (next != null) {
            t0$4 = next.width;
            t1$3 = i;
            t0$4[$_set](t1$3, t0$4[$_get](t1$3) - (newNode.width[$_get](i) - 1));
          }
        }
        this[_length] = this[_length] + 1;
        return null;
      }
      delete(key) {
        let t1, t0, t1$, t0$, t1$0, t0$0;
        K.as(key);
        let node = this[_getNode](key);
        if (node == null) return null;
        let current = this[_head];
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[$_get](level);
            if (next == null || (t0 = key, t1 = dart.nullCheck(next.key), this[_comparator$](t0, t1)) <= 0) break;
            current = next;
          }
          if (level > node.level) {
            let next = current.next[$_get](level);
            if (next != null) {
              t0$ = next.width;
              t1$ = level;
              t0$[$_set](t1$, t0$[$_get](t1$) - 1);
            }
          } else {
            let next = node.next[$_get](level);
            current.next[$_set](level, next);
            if (next != null) {
              t0$0 = next.width;
              t1$0 = level;
              t0$0[$_set](t1$0, t0$0[$_get](t1$0) + (node.width[$_get](level) - 1));
            }
          }
        }
        if (node.level === this[_height] - 1 && this[_height] > 1 && this[_head].next[$_get](node.level) == null) {
          this[_height] = this[_height] - 1;
        }
        this[_length] = this[_length] - 1;
        return node.value;
      }
      get(key) {
        let t0;
        K.as(key);
        t0 = this[_getNode](key);
        return t0 == null ? null : t0.value;
      }
      valuesFromKey(key) {
        K.as(key);
        let node = this[_getNode](key);
        let virtualHead = new (_NodeOfKN$VN()).new(null, null, JSArrayOf_NodeNOfK$V().of([node]), T.JSArrayOfint().of([0]));
        return new (_ValueIterableOfK$V()).new(virtualHead);
      }
      [_getNode](key) {
        let t1, t0, t1$, t0$;
        let prev = this[_head];
        let node = null;
        for (let i = this[_height] - 1; i >= 0; i = i - 1) {
          node = prev.next[$_get](i);
          while (node != null && (t0 = key, t1 = dart.nullCheck(node.key), this[_comparator$](t0, t1)) > 0) {
            prev = node;
            node = node.next[$_get](i);
          }
        }
        if (node != null && (t0$ = key, t1$ = dart.nullCheck(node.key), this[_comparator$](t0$, t1$)) === 0) {
          return node;
        }
        return null;
      }
      getAt(index) {
        return this[_getNodeAt](index).value;
      }
      getKeyAt(index) {
        return this[_getNodeAt](index).key;
      }
      [_getNodeAt](index) {
        core.RangeError.checkValidIndex(index, this);
        let prev = this[_head];
        let node = null;
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          node = prev.next[$_get](level);
          while (node != null && index >= node.width[$_get](level)) {
            index = index - node.width[$_get](level);
            prev = node;
            node = node.next[$_get](level);
          }
        }
        return dart.nullCheck(node);
      }
      clear() {
        this[_height] = 1;
        for (let i = 0; i < 12; i = i + 1) {
          this[_head].next[$_set](i, null);
        }
        this[_height] = 1;
        this[_length] = 0;
      }
    }
    (IndexableSkipList.new = function(_comparator, random = null) {
      let t0;
      this[_head] = new (_NodeOfK$V()).new(null, null, ListOf_NodeNOfK$V().filled(12, null), T.ListOfint().filled(12, 0));
      this[_height] = 1;
      this[_length] = 0;
      this[_comparator$] = _comparator;
      this[_random] = (t0 = random, t0 == null ? math.Random.new() : t0);
      ;
    }).prototype = IndexableSkipList.prototype;
    dart.addTypeTests(IndexableSkipList);
    IndexableSkipList.prototype[_is_IndexableSkipList_default] = true;
    dart.addTypeCaches(IndexableSkipList);
    dart.setMethodSignature(IndexableSkipList, () => ({
      __proto__: dart.getMethods(IndexableSkipList.__proto__),
      insert: dart.fnType(dart.nullable(V), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      delete: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      valuesFromKey: dart.fnType(core.Iterable$(V), [dart.nullable(core.Object)]),
      [_getNode]: dart.fnType(dart.nullable(indexable_skip_list._Node$(K, V)), [K]),
      getAt: dart.fnType(dart.nullable(V), [core.int]),
      getKeyAt: dart.fnType(dart.nullable(K), [core.int]),
      [_getNodeAt]: dart.fnType(indexable_skip_list._Node$(K, V), [core.int]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(IndexableSkipList, () => ({
      __proto__: dart.getGetters(IndexableSkipList.__proto__),
      length: core.int,
      keys: core.Iterable$(K),
      values: core.Iterable$(V)
    }));
    dart.setLibraryUri(IndexableSkipList, I[0]);
    dart.setFieldSignature(IndexableSkipList, () => ({
      __proto__: dart.getFields(IndexableSkipList.__proto__),
      [_head]: dart.finalFieldType(indexable_skip_list._Node$(K, V)),
      [_random]: dart.finalFieldType(math.Random),
      [_comparator$]: dart.finalFieldType(dart.fnType(core.int, [K, K])),
      [_height]: dart.fieldType(core.int),
      [_length]: dart.fieldType(core.int)
    }));
    return IndexableSkipList;
  });
  indexable_skip_list.IndexableSkipList = indexable_skip_list.IndexableSkipList$();
  dart.defineLazy(indexable_skip_list.IndexableSkipList, {
    /*indexable_skip_list.IndexableSkipList._maxHeight*/get _maxHeight() {
      return 12;
    }
  }, false);
  dart.addTypeTests(indexable_skip_list.IndexableSkipList, _is_IndexableSkipList_default);
  var value$ = dart.privateName(indexable_skip_list, "_Node.value");
  const _is__Node_default = Symbol('_is__Node_default');
  indexable_skip_list._Node$ = dart.generic((K, V) => {
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    class _Node extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = VN().as(value);
      }
      get level() {
        return this.next[$length] - 1;
      }
    }
    (_Node.new = function(key, value, next, width) {
      this.key = key;
      this[value$] = value;
      this.next = next;
      this.width = width;
      ;
    }).prototype = _Node.prototype;
    dart.addTypeTests(_Node);
    _Node.prototype[_is__Node_default] = true;
    dart.addTypeCaches(_Node);
    dart.setGetterSignature(_Node, () => ({
      __proto__: dart.getGetters(_Node.__proto__),
      level: core.int
    }));
    dart.setLibraryUri(_Node, I[0]);
    dart.setFieldSignature(_Node, () => ({
      __proto__: dart.getFields(_Node.__proto__),
      key: dart.finalFieldType(dart.nullable(K)),
      value: dart.fieldType(dart.nullable(V)),
      next: dart.finalFieldType(core.List$(dart.nullable(indexable_skip_list._Node$(K, V)))),
      width: dart.finalFieldType(core.List$(core.int))
    }));
    return _Node;
  });
  indexable_skip_list._Node = indexable_skip_list._Node$();
  dart.addTypeTests(indexable_skip_list._Node, _is__Node_default);
  var node$ = dart.privateName(indexable_skip_list, "_Iterator.node");
  const _is__Iterator_default = Symbol('_is__Iterator_default');
  indexable_skip_list._Iterator$ = dart.generic((K, V, E) => {
    var KN = () => (KN = dart.constFn(dart.nullable(K)))();
    var _NodeOfKN$VN = () => (_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(KN(), VN())))();
    var _NodeNOfKN$VN = () => (_NodeNOfKN$VN = dart.constFn(dart.nullable(_NodeOfKN$VN())))();
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    class _Iterator extends core.Object {
      get node() {
        return this[node$];
      }
      set node(value) {
        this[node$] = _NodeNOfKN$VN().as(value);
      }
      moveNext() {
        return (this.node = dart.nullCheck(this.node).next[$_get](0)) != null;
      }
    }
    (_Iterator.new = function(node) {
      this[node$] = node;
      ;
    }).prototype = _Iterator.prototype;
    dart.addTypeTests(_Iterator);
    _Iterator.prototype[_is__Iterator_default] = true;
    dart.addTypeCaches(_Iterator);
    _Iterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_Iterator, () => ({
      __proto__: dart.getMethods(_Iterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setLibraryUri(_Iterator, I[0]);
    dart.setFieldSignature(_Iterator, () => ({
      __proto__: dart.getFields(_Iterator.__proto__),
      node: dart.fieldType(dart.nullable(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V))))
    }));
    return _Iterator;
  });
  indexable_skip_list._Iterator = indexable_skip_list._Iterator$();
  dart.addTypeTests(indexable_skip_list._Iterator, _is__Iterator_default);
  const _is__KeyIterator_default = Symbol('_is__KeyIterator_default');
  indexable_skip_list._KeyIterator$ = dart.generic((K, V) => {
    class _KeyIterator extends indexable_skip_list._Iterator$(K, V, K) {
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).key);
      }
    }
    (_KeyIterator.new = function(node) {
      _KeyIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _KeyIterator.prototype;
    dart.addTypeTests(_KeyIterator);
    _KeyIterator.prototype[_is__KeyIterator_default] = true;
    dart.addTypeCaches(_KeyIterator);
    dart.setGetterSignature(_KeyIterator, () => ({
      __proto__: dart.getGetters(_KeyIterator.__proto__),
      current: K
    }));
    dart.setLibraryUri(_KeyIterator, I[0]);
    return _KeyIterator;
  });
  indexable_skip_list._KeyIterator = indexable_skip_list._KeyIterator$();
  dart.addTypeTests(indexable_skip_list._KeyIterator, _is__KeyIterator_default);
  const _is__KeyIterable_default = Symbol('_is__KeyIterable_default');
  indexable_skip_list._KeyIterable$ = dart.generic((K, V) => {
    var _KeyIteratorOfK$V = () => (_KeyIteratorOfK$V = dart.constFn(indexable_skip_list._KeyIterator$(K, V)))();
    class _KeyIterable extends collection.IterableBase$(K) {
      get iterator() {
        return new (_KeyIteratorOfK$V()).new(this.head);
      }
    }
    (_KeyIterable.new = function(head) {
      this.head = head;
      _KeyIterable.__proto__.new.call(this);
      ;
    }).prototype = _KeyIterable.prototype;
    dart.addTypeTests(_KeyIterable);
    _KeyIterable.prototype[_is__KeyIterable_default] = true;
    dart.addTypeCaches(_KeyIterable);
    dart.setGetterSignature(_KeyIterable, () => ({
      __proto__: dart.getGetters(_KeyIterable.__proto__),
      iterator: core.Iterator$(K),
      [$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(_KeyIterable, I[0]);
    dart.setFieldSignature(_KeyIterable, () => ({
      __proto__: dart.getFields(_KeyIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_KeyIterable, ['iterator']);
    return _KeyIterable;
  });
  indexable_skip_list._KeyIterable = indexable_skip_list._KeyIterable$();
  dart.addTypeTests(indexable_skip_list._KeyIterable, _is__KeyIterable_default);
  const _is__ValueIterator_default = Symbol('_is__ValueIterator_default');
  indexable_skip_list._ValueIterator$ = dart.generic((K, V) => {
    class _ValueIterator extends indexable_skip_list._Iterator$(K, V, V) {
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).value);
      }
    }
    (_ValueIterator.new = function(node) {
      _ValueIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _ValueIterator.prototype;
    dart.addTypeTests(_ValueIterator);
    _ValueIterator.prototype[_is__ValueIterator_default] = true;
    dart.addTypeCaches(_ValueIterator);
    dart.setGetterSignature(_ValueIterator, () => ({
      __proto__: dart.getGetters(_ValueIterator.__proto__),
      current: V
    }));
    dart.setLibraryUri(_ValueIterator, I[0]);
    return _ValueIterator;
  });
  indexable_skip_list._ValueIterator = indexable_skip_list._ValueIterator$();
  dart.addTypeTests(indexable_skip_list._ValueIterator, _is__ValueIterator_default);
  const _is__ValueIterable_default = Symbol('_is__ValueIterable_default');
  indexable_skip_list._ValueIterable$ = dart.generic((K, V) => {
    var _ValueIteratorOfK$V = () => (_ValueIteratorOfK$V = dart.constFn(indexable_skip_list._ValueIterator$(K, V)))();
    class _ValueIterable extends collection.IterableBase$(V) {
      get iterator() {
        return new (_ValueIteratorOfK$V()).new(this.head);
      }
    }
    (_ValueIterable.new = function(head) {
      this.head = head;
      _ValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _ValueIterable.prototype;
    dart.addTypeTests(_ValueIterable);
    _ValueIterable.prototype[_is__ValueIterable_default] = true;
    dart.addTypeCaches(_ValueIterable);
    dart.setGetterSignature(_ValueIterable, () => ({
      __proto__: dart.getGetters(_ValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_ValueIterable, I[0]);
    dart.setFieldSignature(_ValueIterable, () => ({
      __proto__: dart.getFields(_ValueIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_ValueIterable, ['iterator']);
    return _ValueIterable;
  });
  indexable_skip_list._ValueIterable = indexable_skip_list._ValueIterable$();
  dart.addTypeTests(indexable_skip_list._ValueIterable, _is__ValueIterable_default);
  dart.trackLibraries("packages/hive/src/util/indexable_skip_list.dart", {
    "package:hive/src/util/indexable_skip_list.dart": indexable_skip_list
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["indexable_skip_list.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BoB;MAAO;;AAGD,6CAAa;MAAM;;AAGjB,+CAAe;MAAM;aAGnC,KAAQ;;aAAR;gBAAQ;AACd,2BAAe,eAAS,GAAG;AAC/B,YAAI,YAAY;AACV,yBAAW,AAAa,YAAD;AACD,UAA1B,AAAa,YAAD,SAAS,KAAK;AAC1B,gBAAO,SAAQ;;AAIb,uBAAW;AACf,eAAO,AAAQ,4BAAuB,aAAT,QAAQ,IAAc,KAAE;AACzC,UAAV,WAAQ,aAAR,QAAQ;;AAEV,YAAa,aAAT,QAAQ,KAAI;AACM,UAApB,YAAkB,oBAAP,qBAAO;;AAGhB,sBAAU,uBACZ,GAAG,EACH,KAAK,EACA,2BAAgB,aAAT,QAAQ,IAAG,GAAG,OACrB,qBAAgB,aAAT,QAAQ,IAAG,GAAG;AAGxB,sBAAU;AAEd,iBAAS,QAAQ,AAAQ,gBAAE,GAAG,AAAM,KAAD,IAAI,GAAG,QAAA,AAAK,KAAA;AAC7C,iBAAO;AACD,uBAAO,AAAQ,AAAI,OAAL,aAAM,KAAK;AAC7B,gBAAI,AAAK,IAAD,YAAwC,OAAhB,GAAG,OAAU,eAAR,AAAK,IAAD,OAArB,AAAW,+BAAmB,GAAG;AACvC,YAAd,UAAU,IAAI;;AAIhB,cAAI,AAAM,KAAD,gBAAG,QAAQ;AACd,uBAAO,AAAQ,AAAI,OAAL,aAAM,KAAK;AAC7B,gBAAI,IAAI;AACa,qBAAnB,AAAK,IAAD;oBAAO,KAAK;cAAN,iBAAA,AAAO,mBAAA;;AAEnB;;AAGF,cAAI,AAAM,KAAD,KAAI;AAES,YAApB,AAAQ,AAAK,OAAN,cAAO,GAAK;;AAGf,wBAAQ;AACR,uBAAO,AAAQ,AAAI,OAAL,aAAM,AAAM,KAAD,GAAG;AAChC,mBAAO,IAAI,YAAwC,QAAhB,GAAG,SAAU,eAAR,AAAK,IAAD,OAArB,AAAW,mCAAoB;AACtB,cAA9B,QAAA,AAAM,KAAD,GAAI,AAAK,AAAK,IAAN,cAAO,AAAM,KAAD,GAAG;AACD,cAA3B,OAAO,AAAK,AAAI,IAAL,aAAM,AAAM,KAAD,GAAG;;AAG3B,qBAAS,IAAI,KAAK,EAAE,AAAE,CAAD,iBAAI,QAAQ,GAAE,IAAA,AAAC,CAAA;AACT,qBAAzB,AAAQ,OAAD;qBAAO,CAAC;cAAF,kBAAA,AAAI,oBAAG,KAAK;;AAEF,mBAAzB,AAAQ,OAAD;mBAAO,KAAK;YAAN,kBAAA,AAAQ,oBAAG;;AAIe,UAAzC,AAAQ,AAAI,OAAL,aAAM,KAAK,EAAI,AAAQ,AAAI,OAAL,aAAM,KAAK;AACX,UAA7B,AAAQ,AAAI,OAAL,aAAM,KAAK,EAAI,OAAO;;AAI/B,iBAAS,IAAI,GAAG,AAAE,CAAD,iBAAI,QAAQ,GAAE,IAAA,AAAC,CAAA;AAC1B,qBAAO,AAAQ,AAAI,OAAL,aAAM,CAAC;AACzB,cAAI,IAAI;AAC+B,mBAArC,AAAK,IAAD;mBAAO,CAAC;YAAF,kBAAA,AAAI,qBAAG,AAAQ,AAAK,AAAI,OAAV,cAAO,CAAC,IAAI;;;AAI/B,QAAT,gBAAA,AAAO,gBAAA;AACP,cAAO;MACT;aAGY;;;AACN,mBAAO,eAAS,GAAG;AACvB,YAAI,AAAK,IAAD,UAAU,MAAO;AAErB,sBAAU;AAEd,iBAAS,QAAQ,AAAQ,gBAAE,GAAG,AAAM,KAAD,IAAI,GAAG,QAAA,AAAK,KAAA;AAC7C,iBAAO;AACD,uBAAO,AAAQ,AAAI,OAAL,aAAM,KAAK;AAC7B,gBAAI,AAAK,IAAD,YAAwC,MAAhB,GAAG,OAAU,eAAR,AAAK,IAAD,OAArB,AAAW,+BAAoB,GAAG;AACxC,YAAd,UAAU,IAAI;;AAGhB,cAAI,AAAM,KAAD,GAAG,AAAK,IAAD;AACV,uBAAO,AAAQ,AAAI,OAAL,aAAM,KAAK;AAC7B,gBAAI,IAAI;AACa,oBAAnB,AAAK,IAAD;oBAAO,KAAK;cAAN,gBAAA,AAAO,kBAAA;;;AAGf,uBAAO,AAAK,AAAI,IAAL,aAAM,KAAK;AACA,YAA1B,AAAQ,AAAI,OAAL,aAAM,KAAK,EAAI,IAAI;AAC1B,gBAAI,IAAI;AACoC,qBAA1C,AAAK,IAAD;qBAAO,KAAK;cAAN,kBAAA,AAAQ,qBAAG,AAAK,AAAK,AAAQ,IAAd,cAAO,KAAK,IAAI;;;;AAK/C,YAAI,AAAK,AAAM,IAAP,WAAU,AAAQ,gBAAE,KACxB,AAAQ,gBAAE,KACV,AAAM,AAAI,AAAa,wBAAZ,AAAK,IAAD;AACR,UAAT,gBAAA,AAAO,gBAAA;;AAGA,QAAT,gBAAA,AAAO,gBAAA;AACP,cAAO,AAAK,KAAD;MACb;UAKS;;;AAAQ,4BAAS,GAAG;4BAAZ,OAAe;MAAK;;aAMT;AACtB,mBAAO,eAAS,GAAG;AACnB,0BAAc,yBAAM,MAAM,MAAM,2BAAC,IAAI,IAAG,qBAAC;AAC7C,cAAO,iCAAe,WAAW;MACnC;iBAEwB;;AAClB,mBAAO;AACE;AACb,iBAAS,IAAI,AAAQ,gBAAE,GAAG,AAAE,CAAD,IAAI,GAAG,IAAA,AAAC,CAAA;AACd,UAAnB,OAAO,AAAK,AAAI,IAAL,aAAM,CAAC;AAElB,iBAAO,IAAI,YAAwC,MAAhB,GAAG,OAAU,eAAR,AAAK,IAAD,OAArB,AAAW,8BAAmB;AACxC,YAAX,OAAO,IAAI;AACQ,YAAnB,OAAO,AAAK,AAAI,IAAL,aAAM,CAAC;;;AAItB,YAAI,IAAI,YAAwC,OAAhB,GAAG,QAAU,eAAR,AAAK,IAAD,OAArB,AAAW,kCAAoB;AACjD,gBAAO,KAAI;;AAEb,cAAO;MACT;YAKa;AAAU,cAAA,AAAkB,kBAAP,KAAK;MAAO;eAK9B;AAAU,cAAA,AAAkB,kBAAP,KAAK;MAAK;mBAEpB;AACc,QAA5B,gCAAgB,KAAK,EAAE;AAE9B,mBAAO;AACE;AACb,iBAAS,QAAQ,AAAQ,gBAAE,GAAG,AAAM,KAAD,IAAI,GAAG,QAAA,AAAK,KAAA;AACtB,UAAvB,OAAO,AAAK,AAAI,IAAL,aAAM,KAAK;AAEtB,iBAAO,IAAI,YAAY,AAAM,KAAD,IAAI,AAAK,AAAK,IAAN,cAAO,KAAK;AACpB,YAA1B,QAAA,AAAM,KAAD,GAAI,AAAK,AAAK,IAAN,cAAO,KAAK;AACd,YAAX,OAAO,IAAI;AACY,YAAvB,OAAO,AAAK,AAAI,IAAL,aAAM,KAAK;;;AAI1B,cAAW,gBAAJ,IAAI;MACb;;AAIa,QAAX,gBAAU;AACV,iBAAS,IAAI,GAAG,AAAE,CAAD,OAAe,IAAA,AAAC,CAAA;AACX,UAApB,AAAM,AAAI,wBAAC,CAAC,EAAI;;AAEP,QAAX,gBAAU;AACC,QAAX,gBAAU;MACZ;;sCArMuB,aAAsB;;MAhB3B,cAAQ,uBACxB,MACA,MACK,+BAAmB,OACnB,yBAAmB;MAOtB,gBAAU;MAEV,gBAAU;MAGS;MACT,iBAAS,KAAP,MAAM,EAAN,aAAU;;IAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAnBrB,gDAAU;;;;;;;;;;MA6NpB;;;;;;;AAMc,cAAA,AAAK,AAAO,sBAAE;MAAC;;0BAErB,KAAU,OAAY,MAAW;MAAjC;MAAU;MAAY;MAAW;;IAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAInC;;;;;;;AAKI,cAAuB,EAAtB,YAAW,AAAE,AAAI,eAAV,uBAAW;MAAW;;;MAHlC;;IAAK;;;;;;;;;;;;;;;;;;;;;;AAUH,cAAS,gBAAL,AAAE,eAAN;MAAU;;iCAHA;AAAQ,4CAAM,IAAI;;IAAC;;;;;;;;;;;;;;;;;;AAYlB,6CAAa;MAAK;;;MAH5B;AAAlB;;IAAuB;;;;;;;;;;;;;;;;;;;;;;;AAUN,cAAW,gBAAP,AAAE,eAAN;MAAY;;mCAHA;AAAQ,8CAAM,IAAI;;IAAC;;;;;;;;;;;;;;;;;;AAYpB,+CAAe;MAAK;;;MAH5B;AAApB;;IAAyB","file":"../../../../../../../../../packages/hive/src/util/indexable_skip_list.dart.lib.js"}');
  // Exports:
  return {
    src__util__indexable_skip_list: indexable_skip_list
  };
}));

//# sourceMappingURL=indexable_skip_list.dart.lib.js.map
>>>>>>> AUg2
