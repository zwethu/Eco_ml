define(['dart_sdk'], (function load__packages__flutter__src__foundation__licenses_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
<<<<<<< HEAD
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const navigator = packages__flutter__src__widgets__widget_span$46dart.src__widgets__navigator;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const router = packages__flutter__src__widgets__widget_span$46dart.src__widgets__router;
  const routes = packages__flutter__src__widgets__widget_span$46dart.src__widgets__routes;
  const pages = packages__flutter__src__widgets__widget_span$46dart.src__widgets__pages;
  const heroes = packages__flutter__src__widgets__widget_span$46dart.src__widgets__heroes;
  const back_button = packages__flutter__src__material__icon_button$46dart.src__material__back_button;
  const scaffold = packages__flutter__src__material__icon_button$46dart.src__material__scaffold;
  const floating_action_button_location = packages__flutter__src__material__icon_button$46dart.src__material__floating_action_button_location;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const preferred_size = packages__flutter__src__widgets__preferred_size$46dart.src__widgets__preferred_size;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const path = packages__path__src__path_set$46dart.path;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const parameters = packages__auto_route__src__common__parameters$46dart.src__common__parameters;
  const utils = packages__auto_route__src__utils$46dart.src__utils;
  const auto_route_wrapper = packages__auto_route__src__common__auto_route_wrapper$46dart.src__common__auto_route_wrapper;
  const page = packages__flutter__src__material__page$46dart.src__material__page;
  const route = packages__flutter__src__cupertino__route$46dart.src__cupertino__route;
  const platform$ = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  var auto_back_button = Object.create(dart.library);
  var auto_tabs_scaffold = Object.create(dart.library);
  var auto_tabs_router = Object.create(dart.library);
  var route_information_parser = Object.create(dart.library);
  var auto_router_delegate = Object.create(dart.library);
  var auto_route_navigator = Object.create(dart.library);
  var controller_scope = Object.create(dart.library);
  var auto_router = Object.create(dart.library);
  var auto_router_x = Object.create(dart.library);
  var route_config = Object.create(dart.library);
  var auto_route_observer = Object.create(dart.library);
  var common = Object.create(dart.library);
  var auto_route_page = Object.create(dart.library);
  var route_data_scope = Object.create(dart.library);
  var route_matcher = Object.create(dart.library);
  var routing_controller = Object.create(dart.library);
  var auto_route_guard = Object.create(dart.library);
  var route_match = Object.create(dart.library);
  var page_route_info = Object.create(dart.library);
  var navigation_failure = Object.create(dart.library);
  var auto_route = Object.create(dart.library);
  var $plus = dartx['+'];
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $whereType = dartx.whereType;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $forEach = dartx.forEach;
  var $length = dartx.length;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $where = dartx.where;
  var $keys = dartx.keys;
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $containsKey = dartx.containsKey;
  var $addAll = dartx.addAll;
  var $_equals = dartx._equals;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $removeAt = dartx.removeAt;
  var $remove = dartx.remove;
  var $firstWhere = dartx.firstWhere;
  var $first = dartx.first;
  var $reversed = dartx.reversed;
  var $removeLast = dartx.removeLast;
  var $clear = dartx.clear;
  var $any = dartx.any;
  var $values = dartx.values;
  var $putIfAbsent = dartx.putIfAbsent;
  var $hashCode = dartx.hashCode;
  var $sublist = dartx.sublist;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $indexWhere = dartx.indexWhere;
  var $reduce = dartx.reduce;
  var $join = dartx.join;
  var $replaceAllMapped = dartx.replaceAllMapped;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfNavigatorObserver: () => (T$.ListOfNavigatorObserver = dart.constFn(core.List$(navigator.NavigatorObserver)))(),
    VoidToListOfNavigatorObserver: () => (T$.VoidToListOfNavigatorObserver = dart.constFn(dart.fnType(T$.ListOfNavigatorObserver(), [])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndWidgetAndAnimationOfdoubleToScaffold: () => (T$.BuildContextAndWidgetAndAnimationOfdoubleToScaffold = dart.constFn(dart.fnType(scaffold.Scaffold, [framework.BuildContext, framework.Widget, T$.AnimationOfdouble()])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    BuildContextAndintToWidget: () => (T$.BuildContextAndintToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, core.int])))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToWidget: () => (T$.BuildContextAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.WidgetN()])))(),
    IdentityMapOfint$bool: () => (T$.IdentityMapOfint$bool = dart.constFn(_js_helper.IdentityMap$(core.int, core.bool)))(),
    AutoRoutePageToRouteMatch: () => (T$.AutoRoutePageToRouteMatch = dart.constFn(dart.fnType(route_match.RouteMatch, [auto_route_page.AutoRoutePage])))(),
    TabPageRouteN: () => (T$.TabPageRouteN = dart.constFn(dart.nullable(auto_route_observer.TabPageRoute)))(),
    AutoRouterObserverTovoid: () => (T$.AutoRouterObserverTovoid = dart.constFn(dart.fnType(dart.void, [auto_route_observer.AutoRouterObserver])))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    intToWidget: () => (T$.intToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int])))(),
    SynchronousFutureOfUrlState: () => (T$.SynchronousFutureOfUrlState = dart.constFn(synchronous_future.SynchronousFuture$(route_information_parser.UrlState)))(),
    RouteMatchTobool: () => (T$.RouteMatchTobool = dart.constFn(dart.fnType(core.bool, [route_match.RouteMatch])))(),
    RouteMatchToString: () => (T$.RouteMatchToString = dart.constFn(dart.fnType(core.String, [route_match.RouteMatch])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    SynchronousFutureOfvoid: () => (T$.SynchronousFutureOfvoid = dart.constFn(synchronous_future.SynchronousFuture$(dart.void)))(),
    ListOfPageRouteInfo: () => (T$.ListOfPageRouteInfo = dart.constFn(core.List$(page_route_info.PageRouteInfo)))(),
    RouteMatchToPageRouteInfo: () => (T$.RouteMatchToPageRouteInfo = dart.constFn(dart.fnType(page_route_info.PageRouteInfo, [route_match.RouteMatch])))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    GlobalKeyOfNavigatorState: () => (T$.GlobalKeyOfNavigatorState = dart.constFn(framework.GlobalKey$(navigator.NavigatorState)))(),
    JSArrayOfRouteMatch: () => (T$.JSArrayOfRouteMatch = dart.constFn(_interceptors.JSArray$(route_match.RouteMatch)))(),
    SynchronousFutureOfbool: () => (T$.SynchronousFutureOfbool = dart.constFn(synchronous_future.SynchronousFuture$(core.bool)))(),
    AutoRoutePageTobool: () => (T$.AutoRoutePageTobool = dart.constFn(dart.fnType(core.bool, [auto_route_page.AutoRoutePage])))(),
    ListOfAutoRoutePage: () => (T$.ListOfAutoRoutePage = dart.constFn(core.List$(auto_route_page.AutoRoutePage)))(),
    StackRouterTobool: () => (T$.StackRouterTobool = dart.constFn(dart.fnType(core.bool, [routing_controller.StackRouter])))(),
    VoidToStackRouter: () => (T$.VoidToStackRouter = dart.constFn(dart.fnType(routing_controller.StackRouter, [])))(),
    NavigationFailureTovoid: () => (T$.NavigationFailureTovoid = dart.constFn(dart.fnType(dart.void, [navigation_failure.NavigationFailure])))(),
    NavigationFailureToNvoid: () => (T$.NavigationFailureToNvoid = dart.constFn(dart.nullable(T$.NavigationFailureTovoid())))(),
    RouteTobool: () => (T$.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))(),
    CompleterOfbool: () => (T$.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    LinkedMapOfLocalKey$RoutingController: () => (T$.LinkedMapOfLocalKey$RoutingController = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, routing_controller.RoutingController)))(),
    JSArrayOfAutoRoutePage: () => (T$.JSArrayOfAutoRoutePage = dart.constFn(_interceptors.JSArray$(auto_route_page.AutoRoutePage)))(),
    ListOfRouteMatch: () => (T$.ListOfRouteMatch = dart.constFn(core.List$(route_match.RouteMatch)))(),
    LinkedMapOfLocalKey$ListOfRouteMatch: () => (T$.LinkedMapOfLocalKey$ListOfRouteMatch = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, T$.ListOfRouteMatch())))(),
    ListOfRouteData: () => (T$.ListOfRouteData = dart.constFn(core.List$(routing_controller.RouteData)))(),
    AutoRoutePageToRouteData: () => (T$.AutoRoutePageToRouteData = dart.constFn(dart.fnType(routing_controller.RouteData, [auto_route_page.AutoRoutePage])))(),
    JSArrayOfRoutingController: () => (T$.JSArrayOfRoutingController = dart.constFn(_interceptors.JSArray$(routing_controller.RoutingController)))(),
    RoutingControllerTobool: () => (T$.RoutingControllerTobool = dart.constFn(dart.fnType(core.bool, [routing_controller.RoutingController])))(),
    VoidToRoutingController: () => (T$.VoidToRoutingController = dart.constFn(dart.fnType(routing_controller.RoutingController, [])))(),
    ListOfRoutingController: () => (T$.ListOfRoutingController = dart.constFn(core.List$(routing_controller.RoutingController)))(),
    RoutingControllerAndListOfRoutingControllerTovoid: () => (T$.RoutingControllerAndListOfRoutingControllerTovoid = dart.constFn(dart.fnType(dart.void, [routing_controller.RoutingController, T$.ListOfRoutingController()])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    JSArrayOfPage: () => (T$.JSArrayOfPage = dart.constFn(_interceptors.JSArray$(navigator.Page)))(),
    RouteAnddynamicTobool: () => (T$.RouteAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route, dart.dynamic])))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble()])))(),
    JSArrayOfRouteTransitionRecord: () => (T$.JSArrayOfRouteTransitionRecord = dart.constFn(_interceptors.JSArray$(navigator.RouteTransitionRecord)))(),
    RouteTransitionRecordN: () => (T$.RouteTransitionRecordN = dart.constFn(dart.nullable(navigator.RouteTransitionRecord)))(),
    RouteTransitionRecordNAndboolTovoid: () => (T$.RouteTransitionRecordNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T$.RouteTransitionRecordN(), core.bool])))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    PageRouteInfo__ToFutureOfTN: () => (T$.PageRouteInfo__ToFutureOfTN = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      var FutureOfTN = () => (FutureOfTN = dart.constFn(async.Future$(TN())))();
      return [FutureOfTN(), [page_route_info.PageRouteInfo], {onFailure: T$.NavigationFailureToNvoid()}, {}];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      var FutureOfTN = () => (FutureOfTN = dart.constFn(async.Future$(TN())))();
      return [T$.ObjectN()];
    })))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    TNToFutureOfbool: () => (T$.TNToFutureOfbool = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [T$.FutureOfbool(), [], [TN()]];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [T$.ObjectN()];
    })))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    PageRouteInfo__ToFutureOfvoid: () => (T$.PageRouteInfo__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [page_route_info.PageRouteInfo], {onFailure: T$.NavigationFailureToNvoid()}, {})))(),
    String__ToFutureOfvoid: () => (T$.String__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String], {includePrefixMatches: core.bool, onFailure: T$.NavigationFailureToNvoid()}, {})))(),
    StringToTN: () => (T$.StringToTN = dart.constFn(dart.gFnType(T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [TN(), [core.String]];
    }, T => {
      var TN = () => (TN = dart.constFn(dart.nullable(T)))();
      return [routing_controller.RoutingController];
    })))(),
    SetOfAutoRouteAware: () => (T$.SetOfAutoRouteAware = dart.constFn(core.Set$(auto_route_observer.AutoRouteAware)))(),
    LinkedMapOfLocalKey$SetOfAutoRouteAware: () => (T$.LinkedMapOfLocalKey$SetOfAutoRouteAware = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, T$.SetOfAutoRouteAware())))(),
    LinkedHashSetOfAutoRouteAware: () => (T$.LinkedHashSetOfAutoRouteAware = dart.constFn(collection.LinkedHashSet$(auto_route_observer.AutoRouteAware)))(),
    VoidToSetOfAutoRouteAware: () => (T$.VoidToSetOfAutoRouteAware = dart.constFn(dart.fnType(T$.SetOfAutoRouteAware(), [])))(),
    RouteObserverOfRoute: () => (T$.RouteObserverOfRoute = dart.constFn(routes.RouteObserver$(navigator.Route)))(),
    IdentityMapOfString$RouteConfig: () => (T$.IdentityMapOfString$RouteConfig = dart.constFn(_js_helper.IdentityMap$(core.String, route_config.RouteConfig)))(),
    RouteConfigTovoid: () => (T$.RouteConfigTovoid = dart.constFn(dart.fnType(dart.void, [route_config.RouteConfig])))(),
    RouteMatchToRouteMatch: () => (T$.RouteMatchToRouteMatch = dart.constFn(dart.fnType(route_match.RouteMatch, [route_match.RouteMatch])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    PageRouteInfoTobool: () => (T$.PageRouteInfoTobool = dart.constFn(dart.fnType(core.bool, [page_route_info.PageRouteInfo])))(),
    RouteMatchToParameters: () => (T$.RouteMatchToParameters = dart.constFn(dart.fnType(parameters.Parameters, [route_match.RouteMatch])))(),
    ParametersAndParametersToParameters: () => (T$.ParametersAndParametersToParameters = dart.constFn(dart.fnType(parameters.Parameters, [parameters.Parameters, parameters.Parameters])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    JSArrayOfPageRouteInfo: () => (T$.JSArrayOfPageRouteInfo = dart.constFn(_interceptors.JSArray$(page_route_info.PageRouteInfo)))(),
    PageRouteInfoToString: () => (T$.PageRouteInfoToString = dart.constFn(dart.fnType(core.String, [page_route_info.PageRouteInfo])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 20,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 21,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3], widget_inspector._Location);
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 19,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_back_button.dart"
      });
    },
    get C6() {
      return C[6] = dart.constList([], widget_inspector._Location);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 24,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_back_button.dart"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget__location]: C[5] || CT.C5,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    },
    get C9() {
      return C[9] = dart.fn(auto_router_delegate.AutoRouterDelegate.defaultNavigatorObserversBuilder, T$.VoidToListOfNavigatorObserver());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 32,
        [_Location_line]: 119,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 52,
        [_Location_line]: 119,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.constList([C[13] || CT.C13, C[14] || CT.C14], widget_inspector._Location);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[12] || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 119,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "extendBodyBehindAppBar",
        [_Location_column]: 11,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endDrawer",
        [_Location_column]: 11,
        [_Location_line]: 93,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "extendBody",
        [_Location_column]: 11,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationId",
        [_Location_column]: 11,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "resizeToAvoidBottomInset",
        [_Location_column]: 11,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 11,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawer",
        [_Location_column]: 11,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerDragStartBehavior",
        [_Location_column]: 11,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerEdgeDragWidth",
        [_Location_column]: 11,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerEnableOpenDragGesture",
        [_Location_column]: 11,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "drawerScrimColor",
        [_Location_column]: 11,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDrawerChanged",
        [_Location_column]: 11,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endDrawerEnableOpenDragGesture",
        [_Location_column]: 11,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEndDrawerChanged",
        [_Location_column]: 11,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButton",
        [_Location_column]: 11,
        [_Location_line]: 106,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButtonAnimator",
        [_Location_column]: 11,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "floatingActionButtonLocation",
        [_Location_column]: 11,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bottomSheet",
        [_Location_column]: 11,
        [_Location_line]: 109,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "persistentFooterButtons",
        [_Location_column]: 11,
        [_Location_line]: 110,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "primary",
        [_Location_column]: 11,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "appBar",
        [_Location_column]: 11,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "body",
        [_Location_column]: 11,
        [_Location_line]: 118,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bottomNavigationBar",
        [_Location_column]: 11,
        [_Location_line]: 125,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], widget_inspector._Location);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[16] || CT.C16,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 90,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routes",
        [_Location_column]: 7,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "duration",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "lazyLoad",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritNavigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "curve",
        [_Location_column]: 7,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.constList([C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49], widget_inspector._Location);
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[42] || CT.C42,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 81,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_scaffold.dart"
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 21,
        [_Location_line]: 185,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.constList([C[52] || CT.C52], widget_inspector._Location);
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[51] || CT.C51,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 185,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeIndex",
        [_Location_column]: 13,
        [_Location_line]: 187,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "lazyLoad",
        [_Location_column]: 13,
        [_Location_line]: 188,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 13,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "itemBuilder",
        [_Location_column]: 13,
        [_Location_line]: 190,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stack",
        [_Location_column]: 13,
        [_Location_line]: 194,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.constList([C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], widget_inspector._Location);
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[54] || CT.C54,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 186,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 13,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 13,
        [_Location_line]: 207,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 209,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64], widget_inspector._Location);
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[61] || CT.C61,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 205,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 11,
        [_Location_line]: 203,
        [_Location_file]: null
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 11,
        [_Location_line]: 204,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 205,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.constList([C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69], widget_inspector._Location);
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[66] || CT.C66,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 202,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 198,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 199,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 200,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 201,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 202,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.constList([C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76], widget_inspector._Location);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[71] || CT.C71,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 197,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 27,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 47,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.constList([C[79] || CT.C79, C[80] || CT.C80], widget_inspector._Location);
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[78] || CT.C78,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 215,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 30,
        [_Location_line]: 240,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget__location]: C[82] || CT.C82,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "index",
        [_Location_column]: 9,
        [_Location_line]: 299,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sizing",
        [_Location_column]: 9,
        [_Location_line]: 300,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 301,
        [_Location_file]: null
      });
    },
    get C84() {
      return C[84] = dart.constList([C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87], widget_inspector._Location);
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[84] || CT.C84,
        [_Location_name]: null,
        [_Location_column]: 41,
        [_Location_line]: 298,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart"
      });
    },
    get C88() {
      return C[88] = dart.constList([], route_match.RouteMatch);
    },
    get C89() {
      return C[89] = dart.constList([], navigator.NavigatorObserver);
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "placeholder",
        [_Location_column]: 11,
        [_Location_line]: 136,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 137,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 138,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.constList([C[92] || CT.C92, C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95], widget_inspector._Location);
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[91] || CT.C91,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 134,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 133,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.constList([C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100], widget_inspector._Location);
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[97] || CT.C97,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 131,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 127,
        [_Location_file]: null
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C102() {
      return C[102] = dart.constList([C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107], widget_inspector._Location);
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[102] || CT.C102,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 126,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 214,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "declarativeRoutesBuilder",
        [_Location_column]: 11,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 216,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 217,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "didPop",
        [_Location_column]: 11,
        [_Location_line]: 218,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.constList([C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114], widget_inspector._Location);
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[109] || CT.C109,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 213,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 211,
        [_Location_file]: null
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 212,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 213,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.constList([C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119], widget_inspector._Location);
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[116] || CT.C116,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 210,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 207,
        [_Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 208,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 209,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 210,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126], widget_inspector._Location);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[121] || CT.C121,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 205,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart"
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: T$.ValueKeyOfString().prototype,
        [ValueKey_value]: "Root"
      });
    },
    get C129() {
      return C[129] = dart.constList([], auto_route_guard.AutoRouteGuard);
    },
    get C130() {
      return C[130] = dart.constList([""], core.String);
    },
    get C132() {
      return C[132] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: parameters.Parameters.prototype,
        [Parameters__params]: C[132] || CT.C132
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: route_match.RouteMatch.prototype,
        [RouteMatch_key]: C[127] || CT.C127,
        [RouteMatch_guards]: C[129] || CT.C129,
        [RouteMatch_args]: null,
        [RouteMatch_stringMatch]: "",
        [RouteMatch_path]: "",
        [RouteMatch_routeName]: "Root",
        [RouteMatch_redirectedFrom]: null,
        [RouteMatch_segments]: C[130] || CT.C130,
        [RouteMatch_fragment]: "",
        [RouteMatch_children]: null,
        [RouteMatch_queryParams]: C[131] || CT.C131,
        [RouteMatch_pathParams]: C[131] || CT.C131
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[134] || CT.C134
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 71,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "observers",
        [_Location_column]: 7,
        [_Location_line]: 72,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationScopeId",
        [_Location_column]: 7,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pages",
        [_Location_column]: 7,
        [_Location_line]: 75,
        [_Location_file]: null
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "transitionDelegate",
        [_Location_column]: 7,
        [_Location_line]: 78,
        [_Location_file]: null
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPopPage",
        [_Location_column]: 7,
        [_Location_line]: 79,
        [_Location_file]: null
      });
    },
    get C136() {
      return C[136] = dart.constList([C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142], widget_inspector._Location);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[136] || CT.C136,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 70,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_route_navigator.dart"
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: T$.ValueKeyOfString().prototype,
        [ValueKey_value]: "_placeHolder_"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 17,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C145() {
      return C[145] = dart.constList([C[146] || CT.C146], widget_inspector._Location);
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[145] || CT.C145,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 110,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_route_navigator.dart"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPopRoute",
        [_Location_column]: 9,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorKey",
        [_Location_column]: 9,
        [_Location_line]: 41,
        [_Location_file]: null
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 9,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 9,
        [_Location_line]: 43,
        [_Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onNavigate",
        [_Location_column]: 9,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routes",
        [_Location_column]: 9,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C148() {
      return C[148] = dart.constList([C[149] || CT.C149, C[150] || CT.C150, C[151] || CT.C151, C[152] || CT.C152, C[153] || CT.C153, C[154] || CT.C154], widget_inspector._Location);
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[148] || CT.C148,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 39,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 7,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 7,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.constList([C[157] || CT.C157, C[158] || CT.C158, C[159] || CT.C159], widget_inspector._Location);
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[156] || CT.C156,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 121,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 17,
        [_Location_line]: 138,
        [_Location_file]: null
      });
    },
    get C161() {
      return C[161] = dart.constList([C[162] || CT.C162], widget_inspector._Location);
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[161] || CT.C161,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 137,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.constList([C[99] || CT.C99, C[165] || CT.C165, C[166] || CT.C166], widget_inspector._Location);
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[164] || CT.C164,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 132,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.constList([C[169] || CT.C169, C[105] || CT.C105, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172], widget_inspector._Location);
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[168] || CT.C168,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 127,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "router",
        [_Location_column]: 11,
        [_Location_line]: 248,
        [_Location_file]: null
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "declarativeRoutesBuilder",
        [_Location_column]: 11,
        [_Location_line]: 249,
        [_Location_file]: null
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navRestorationScopeId",
        [_Location_column]: 11,
        [_Location_line]: 250,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 11,
        [_Location_line]: 251,
        [_Location_file]: null
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "didPop",
        [_Location_column]: 11,
        [_Location_line]: 252,
        [_Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.constList([C[175] || CT.C175, C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179], widget_inspector._Location);
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[174] || CT.C174,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 247,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 246,
        [_Location_file]: null
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 247,
        [_Location_file]: null
      });
    },
    get C181() {
      return C[181] = dart.constList([C[182] || CT.C182, C[183] || CT.C183], widget_inspector._Location);
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[181] || CT.C181,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 245,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 241,
        [_Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inheritableObserversBuilder",
        [_Location_column]: 7,
        [_Location_line]: 242,
        [_Location_file]: null
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigatorObservers",
        [_Location_column]: 7,
        [_Location_line]: 243,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 244,
        [_Location_file]: null
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 245,
        [_Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.constList([C[186] || CT.C186, C[187] || CT.C187, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190], widget_inspector._Location);
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[185] || CT.C185,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 240,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart"
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "segmentsHash",
        [_Location_column]: 7,
        [_Location_line]: 48,
        [_Location_file]: null
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "routeData",
        [_Location_column]: 7,
        [_Location_line]: 49,
        [_Location_file]: null
      });
    },
    get C192() {
      return C[192] = dart.constList([C[193] || CT.C193, C[194] || CT.C194, C[195] || CT.C195], widget_inspector._Location);
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[192] || CT.C192,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 46,
        [_Location_file]: "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/auto_route_page.dart"
      });
    }
  }, false);
  var C = Array(196).fill(void 0);
  var I = [
    "package:auto_route/src/router/widgets/auto_back_button.dart",
    "package:auto_route/src/router/widgets/auto_tabs_scaffold.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_tabs_router.dart",
    "package:auto_route/src/router/widgets/auto_tabs_router.dart",
    "package:auto_route/src/router/parser/route_information_parser.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router_delegate.dart",
    "package:auto_route/src/router/widgets/auto_router_delegate.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/root_stack_router.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/controller/routing_controller.dart",
    "package:auto_route/src/router/controller/routing_controller.dart",
    "package:auto_route/src/router/widgets/auto_route_navigator.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/controller/controller_scope.dart",
    "package:auto_route/src/router/controller/controller_scope.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/router/widgets/auto_router.dart",
    "package:auto_route/src/router/widgets/auto_router.dart",
    "package:auto_route/src/route/route_config.dart",
    "package:auto_route/src/common/auto_route_observer.dart",
    "package:auto_route/src/router/auto_route_page.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/route/route_data_scope.dart",
    "package:auto_route/src/route/route_data_scope.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/matcher/route_matcher.dart",
    "package:auto_route/src/matcher/route_matcher.dart",
    "package:auto_route/src/auto_route_guard.dart",
    "file:///D:/DevTools/flutter/.pub-cache/hosted/pub.dartlang.org/auto_route-2.3.0/lib/src/auto_route_guard.dart",
    "package:auto_route/src/matcher/route_match.dart",
    "package:auto_route/src/route/page_route_info.dart",
    "package:auto_route/src/navigation_failure.dart"
  ];
  var color$ = dart.privateName(auto_back_button, "AutoBackButton.color");
  auto_back_button.AutoBackButton = class AutoBackButton extends framework.StatefulWidget {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    createState() {
      return new auto_back_button._AutoBackButtonState.new();
    }
  };
  (auto_back_button.AutoBackButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[color$] = color;
    auto_back_button.AutoBackButton.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_back_button.AutoBackButton.prototype;
  dart.addTypeTests(auto_back_button.AutoBackButton);
  dart.addTypeCaches(auto_back_button.AutoBackButton);
  dart.setMethodSignature(auto_back_button.AutoBackButton, () => ({
    __proto__: dart.getMethods(auto_back_button.AutoBackButton.__proto__),
    createState: dart.fnType(auto_back_button._AutoBackButtonState, [])
  }));
  dart.setLibraryUri(auto_back_button.AutoBackButton, I[0]);
  dart.setFieldSignature(auto_back_button.AutoBackButton, () => ({
    __proto__: dart.getFields(auto_back_button.AutoBackButton.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  auto_back_button._AutoBackButtonState = class _AutoBackButtonState extends framework.State$(auto_back_button.AutoBackButton) {
    build(context) {
      let scope = controller_scope.RouterScope.of(context);
      if (scope.controller.canPopSelfOrChildren) {
        return new back_button.BackButton.new({color: this.widget.color, onPressed: dart.gbind(dart.bind(scope.controller, 'popTop'), T$.ObjectN()), $creationLocationd_0dea112b090073317d4: C[0] || CT.C0});
      }
      return C[4] || CT.C4;
    }
  };
  (auto_back_button._AutoBackButtonState.new = function() {
    auto_back_button._AutoBackButtonState.__proto__.new.call(this);
    ;
  }).prototype = auto_back_button._AutoBackButtonState.prototype;
  dart.addTypeTests(auto_back_button._AutoBackButtonState);
  dart.addTypeCaches(auto_back_button._AutoBackButtonState);
  dart.setMethodSignature(auto_back_button._AutoBackButtonState, () => ({
    __proto__: dart.getMethods(auto_back_button._AutoBackButtonState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_back_button._AutoBackButtonState, I[0]);
  var builder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.builder");
  var routes$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.routes");
  var animationDuration$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.animationDuration");
  var animationCurve$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.animationCurve");
  var lazyLoad$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.lazyLoad");
  var bottomNavigationBuilder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.bottomNavigationBuilder");
  var navigatorObservers$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.navigatorObservers");
  var inheritNavigatorObservers$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.inheritNavigatorObservers");
  var floatingActionButton$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButton");
  var floatingActionButtonLocation$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButtonLocation");
  var floatingActionButtonAnimator$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.floatingActionButtonAnimator");
  var persistentFooterButtons$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.persistentFooterButtons");
  var drawer$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawer");
  var onDrawerChanged$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.onDrawerChanged");
  var endDrawer$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.endDrawer");
  var onEndDrawerChanged$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.onEndDrawerChanged");
  var drawerScrimColor$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerScrimColor");
  var backgroundColor$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.backgroundColor");
  var bottomSheet$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.bottomSheet");
  var resizeToAvoidBottomInset$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.resizeToAvoidBottomInset");
  var primary$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.primary");
  var drawerDragStartBehavior$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerDragStartBehavior");
  var drawerEdgeDragWidth$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerEdgeDragWidth");
  var drawerEnableOpenDragGesture$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.drawerEnableOpenDragGesture");
  var endDrawerEnableOpenDragGesture$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.endDrawerEnableOpenDragGesture");
  var restorationId$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.restorationId");
  var extendBody$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.extendBody");
  var extendBodyBehindAppBar$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.extendBodyBehindAppBar");
  var appBarBuilder$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.appBarBuilder");
  var scaffoldKey$ = dart.privateName(auto_tabs_scaffold, "AutoTabsScaffold.scaffoldKey");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var _name = dart.privateName(recognizer, "_name");
  auto_tabs_scaffold.AutoTabsScaffold = class AutoTabsScaffold extends framework.StatelessWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get routes() {
      return this[routes$];
    }
    set routes(value) {
      super.routes = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get animationCurve() {
      return this[animationCurve$];
    }
    set animationCurve(value) {
      super.animationCurve = value;
    }
    get lazyLoad() {
      return this[lazyLoad$];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get bottomNavigationBuilder() {
      return this[bottomNavigationBuilder$];
    }
    set bottomNavigationBuilder(value) {
      super.bottomNavigationBuilder = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get floatingActionButton() {
      return this[floatingActionButton$];
    }
    set floatingActionButton(value) {
      super.floatingActionButton = value;
    }
    get floatingActionButtonLocation() {
      return this[floatingActionButtonLocation$];
    }
    set floatingActionButtonLocation(value) {
      super.floatingActionButtonLocation = value;
    }
    get floatingActionButtonAnimator() {
      return this[floatingActionButtonAnimator$];
    }
    set floatingActionButtonAnimator(value) {
      super.floatingActionButtonAnimator = value;
    }
    get persistentFooterButtons() {
      return this[persistentFooterButtons$];
    }
    set persistentFooterButtons(value) {
      super.persistentFooterButtons = value;
    }
    get drawer() {
      return this[drawer$];
    }
    set drawer(value) {
      super.drawer = value;
    }
    get onDrawerChanged() {
      return this[onDrawerChanged$];
    }
    set onDrawerChanged(value) {
      super.onDrawerChanged = value;
    }
    get endDrawer() {
      return this[endDrawer$];
    }
    set endDrawer(value) {
      super.endDrawer = value;
    }
    get onEndDrawerChanged() {
      return this[onEndDrawerChanged$];
    }
    set onEndDrawerChanged(value) {
      super.onEndDrawerChanged = value;
    }
    get drawerScrimColor() {
      return this[drawerScrimColor$];
    }
    set drawerScrimColor(value) {
      super.drawerScrimColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get bottomSheet() {
      return this[bottomSheet$];
    }
    set bottomSheet(value) {
      super.bottomSheet = value;
    }
    get resizeToAvoidBottomInset() {
      return this[resizeToAvoidBottomInset$];
    }
    set resizeToAvoidBottomInset(value) {
      super.resizeToAvoidBottomInset = value;
    }
    get primary() {
      return this[primary$];
    }
    set primary(value) {
      super.primary = value;
    }
    get drawerDragStartBehavior() {
      return this[drawerDragStartBehavior$];
    }
    set drawerDragStartBehavior(value) {
      super.drawerDragStartBehavior = value;
    }
    get drawerEdgeDragWidth() {
      return this[drawerEdgeDragWidth$];
    }
    set drawerEdgeDragWidth(value) {
      super.drawerEdgeDragWidth = value;
    }
    get drawerEnableOpenDragGesture() {
      return this[drawerEnableOpenDragGesture$];
    }
    set drawerEnableOpenDragGesture(value) {
      super.drawerEnableOpenDragGesture = value;
    }
    get endDrawerEnableOpenDragGesture() {
      return this[endDrawerEnableOpenDragGesture$];
    }
    set endDrawerEnableOpenDragGesture(value) {
      super.endDrawerEnableOpenDragGesture = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get extendBody() {
      return this[extendBody$];
    }
    set extendBody(value) {
      super.extendBody = value;
    }
    get extendBodyBehindAppBar() {
      return this[extendBodyBehindAppBar$];
    }
    set extendBodyBehindAppBar(value) {
      super.extendBodyBehindAppBar = value;
    }
    get appBarBuilder() {
      return this[appBarBuilder$];
    }
    set appBarBuilder(value) {
      super.appBarBuilder = value;
    }
    get scaffoldKey() {
      return this[scaffoldKey$];
    }
    set scaffoldKey(value) {
      super.scaffoldKey = value;
    }
    build(context) {
      return new auto_tabs_router.AutoTabsRouter.new({routes: this.routes, duration: this.animationDuration, lazyLoad: this.lazyLoad, navigatorObservers: this.navigatorObservers, inheritNavigatorObservers: this.inheritNavigatorObservers, curve: this.animationCurve, builder: dart.fn((context, child, animation) => {
          let tabsRouter = auto_router_x['AutoRouterX|get#tabsRouter'](context);
          return new scaffold.Scaffold.new({key: this.scaffoldKey, extendBodyBehindAppBar: this.extendBodyBehindAppBar, endDrawer: this.endDrawer, extendBody: this.extendBody, restorationId: this.restorationId, resizeToAvoidBottomInset: this.resizeToAvoidBottomInset, backgroundColor: this.backgroundColor, drawer: this.drawer, drawerDragStartBehavior: this.drawerDragStartBehavior, drawerEdgeDragWidth: this.drawerEdgeDragWidth, drawerEnableOpenDragGesture: this.drawerEnableOpenDragGesture, drawerScrimColor: this.drawerScrimColor, onDrawerChanged: this.onDrawerChanged, endDrawerEnableOpenDragGesture: this.endDrawerEnableOpenDragGesture, onEndDrawerChanged: this.onEndDrawerChanged, floatingActionButton: this.floatingActionButton, floatingActionButtonAnimator: this.floatingActionButtonAnimator, floatingActionButtonLocation: this.floatingActionButtonLocation, bottomSheet: this.bottomSheet, persistentFooterButtons: this.persistentFooterButtons, primary: this.primary, appBar: this.appBarBuilder == null ? null : dart.nullCheck(this.appBarBuilder)(context, tabsRouter), body: this.builder == null ? new transitions.FadeTransition.new({opacity: animation, child: child, $creationLocationd_0dea112b090073317d4: C[11] || CT.C11}) : dart.nullCheck(this.builder)(context, child, animation), bottomNavigationBar: this.bottomNavigationBuilder == null ? null : dart.nullCheck(this.bottomNavigationBuilder)(context, tabsRouter), $creationLocationd_0dea112b090073317d4: C[15] || CT.C15});
        }, T$.BuildContextAndWidgetAndAnimationOfdoubleToScaffold()), $creationLocationd_0dea112b090073317d4: C[41] || CT.C41});
    }
  };
  (auto_tabs_scaffold.AutoTabsScaffold.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[7] || CT.C7;
    let animationCurve = opts && 'animationCurve' in opts ? opts.animationCurve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let bottomNavigationBuilder = opts && 'bottomNavigationBuilder' in opts ? opts.bottomNavigationBuilder : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let floatingActionButton = opts && 'floatingActionButton' in opts ? opts.floatingActionButton : null;
    let floatingActionButtonLocation = opts && 'floatingActionButtonLocation' in opts ? opts.floatingActionButtonLocation : null;
    let floatingActionButtonAnimator = opts && 'floatingActionButtonAnimator' in opts ? opts.floatingActionButtonAnimator : null;
    let persistentFooterButtons = opts && 'persistentFooterButtons' in opts ? opts.persistentFooterButtons : null;
    let drawer = opts && 'drawer' in opts ? opts.drawer : null;
    let onDrawerChanged = opts && 'onDrawerChanged' in opts ? opts.onDrawerChanged : null;
    let endDrawer = opts && 'endDrawer' in opts ? opts.endDrawer : null;
    let onEndDrawerChanged = opts && 'onEndDrawerChanged' in opts ? opts.onEndDrawerChanged : null;
    let drawerScrimColor = opts && 'drawerScrimColor' in opts ? opts.drawerScrimColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let bottomSheet = opts && 'bottomSheet' in opts ? opts.bottomSheet : null;
    let resizeToAvoidBottomInset = opts && 'resizeToAvoidBottomInset' in opts ? opts.resizeToAvoidBottomInset : null;
    let primary = opts && 'primary' in opts ? opts.primary : true;
    let drawerDragStartBehavior = opts && 'drawerDragStartBehavior' in opts ? opts.drawerDragStartBehavior : C[10] || CT.C10;
    let drawerEdgeDragWidth = opts && 'drawerEdgeDragWidth' in opts ? opts.drawerEdgeDragWidth : null;
    let drawerEnableOpenDragGesture = opts && 'drawerEnableOpenDragGesture' in opts ? opts.drawerEnableOpenDragGesture : true;
    let endDrawerEnableOpenDragGesture = opts && 'endDrawerEnableOpenDragGesture' in opts ? opts.endDrawerEnableOpenDragGesture : true;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let extendBody = opts && 'extendBody' in opts ? opts.extendBody : false;
    let extendBodyBehindAppBar = opts && 'extendBodyBehindAppBar' in opts ? opts.extendBodyBehindAppBar : false;
    let appBarBuilder = opts && 'appBarBuilder' in opts ? opts.appBarBuilder : null;
    let scaffoldKey = opts && 'scaffoldKey' in opts ? opts.scaffoldKey : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$] = routes;
    this[lazyLoad$] = lazyLoad;
    this[animationDuration$] = animationDuration;
    this[animationCurve$] = animationCurve;
    this[builder$] = builder;
    this[bottomNavigationBuilder$] = bottomNavigationBuilder;
    this[inheritNavigatorObservers$] = inheritNavigatorObservers;
    this[navigatorObservers$] = navigatorObservers;
    this[floatingActionButton$] = floatingActionButton;
    this[floatingActionButtonLocation$] = floatingActionButtonLocation;
    this[floatingActionButtonAnimator$] = floatingActionButtonAnimator;
    this[persistentFooterButtons$] = persistentFooterButtons;
    this[drawer$] = drawer;
    this[onDrawerChanged$] = onDrawerChanged;
    this[endDrawer$] = endDrawer;
    this[onEndDrawerChanged$] = onEndDrawerChanged;
    this[drawerScrimColor$] = drawerScrimColor;
    this[backgroundColor$] = backgroundColor;
    this[bottomSheet$] = bottomSheet;
    this[resizeToAvoidBottomInset$] = resizeToAvoidBottomInset;
    this[primary$] = primary;
    this[drawerDragStartBehavior$] = drawerDragStartBehavior;
    this[drawerEdgeDragWidth$] = drawerEdgeDragWidth;
    this[drawerEnableOpenDragGesture$] = drawerEnableOpenDragGesture;
    this[endDrawerEnableOpenDragGesture$] = endDrawerEnableOpenDragGesture;
    this[restorationId$] = restorationId;
    this[extendBody$] = extendBody;
    this[extendBodyBehindAppBar$] = extendBodyBehindAppBar;
    this[appBarBuilder$] = appBarBuilder;
    this[scaffoldKey$] = scaffoldKey;
    auto_tabs_scaffold.AutoTabsScaffold.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_scaffold.AutoTabsScaffold.prototype;
  dart.addTypeTests(auto_tabs_scaffold.AutoTabsScaffold);
  dart.addTypeCaches(auto_tabs_scaffold.AutoTabsScaffold);
  dart.setMethodSignature(auto_tabs_scaffold.AutoTabsScaffold, () => ({
    __proto__: dart.getMethods(auto_tabs_scaffold.AutoTabsScaffold.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_tabs_scaffold.AutoTabsScaffold, I[1]);
  dart.setFieldSignature(auto_tabs_scaffold.AutoTabsScaffold, () => ({
    __proto__: dart.getFields(auto_tabs_scaffold.AutoTabsScaffold.__proto__),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, animation.Animation$(core.double)]))),
    routes: dart.finalFieldType(core.List$(page_route_info.PageRouteInfo)),
    animationDuration: dart.finalFieldType(core.Duration),
    animationCurve: dart.finalFieldType(curves.Curve),
    lazyLoad: dart.finalFieldType(core.bool),
    bottomNavigationBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, routing_controller.TabsRouter]))),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    floatingActionButton: dart.finalFieldType(dart.nullable(framework.Widget)),
    floatingActionButtonLocation: dart.finalFieldType(dart.nullable(floating_action_button_location.FloatingActionButtonLocation)),
    floatingActionButtonAnimator: dart.finalFieldType(dart.nullable(floating_action_button_location.FloatingActionButtonAnimator)),
    persistentFooterButtons: dart.finalFieldType(dart.nullable(core.List$(framework.Widget))),
    drawer: dart.finalFieldType(dart.nullable(framework.Widget)),
    onDrawerChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    endDrawer: dart.finalFieldType(dart.nullable(framework.Widget)),
    onEndDrawerChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    drawerScrimColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    bottomSheet: dart.finalFieldType(dart.nullable(framework.Widget)),
    resizeToAvoidBottomInset: dart.finalFieldType(dart.nullable(core.bool)),
    primary: dart.finalFieldType(core.bool),
    drawerDragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    drawerEdgeDragWidth: dart.finalFieldType(dart.nullable(core.double)),
    drawerEnableOpenDragGesture: dart.finalFieldType(core.bool),
    endDrawerEnableOpenDragGesture: dart.finalFieldType(core.bool),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    extendBody: dart.finalFieldType(core.bool),
    extendBodyBehindAppBar: dart.finalFieldType(core.bool),
    appBarBuilder: dart.finalFieldType(dart.nullable(dart.fnType(preferred_size.PreferredSizeWidget, [framework.BuildContext, routing_controller.TabsRouter]))),
    scaffoldKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(scaffold.ScaffoldState)))
  }));
  var builder$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.builder");
  var routes$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.routes");
  var duration$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.duration");
  var curve$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.curve");
  var lazyLoad$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.lazyLoad");
  var navigatorObservers$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.navigatorObservers");
  var inheritNavigatorObservers$0 = dart.privateName(auto_tabs_router, "AutoTabsRouter.inheritNavigatorObservers");
  var _activeIndex = dart.privateName(auto_tabs_router, "AutoTabsRouter._activeIndex");
  var declarative = dart.privateName(auto_tabs_router, "AutoTabsRouter.declarative");
  var onNavigate$ = dart.privateName(auto_tabs_router, "AutoTabsRouter.onNavigate");
  var _activeIndex$ = dart.privateName(auto_tabs_router, "_activeIndex");
  auto_tabs_router.AutoTabsRouter = class AutoTabsRouter extends framework.StatefulWidget {
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    get routes() {
      return this[routes$0];
    }
    set routes(value) {
      super.routes = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      super.curve = value;
    }
    get lazyLoad() {
      return this[lazyLoad$0];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$0];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$0];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get [_activeIndex$]() {
      return this[_activeIndex];
    }
    set [_activeIndex$](value) {
      super[_activeIndex$] = value;
    }
    get declarative() {
      return this[declarative];
    }
    set declarative(value) {
      super.declarative = value;
    }
    get onNavigate() {
      return this[onNavigate$];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    createState() {
      return new auto_tabs_router.AutoTabsRouterState.new();
    }
    static of(context) {
      let scope = controller_scope.TabsRouterScope.of(context);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("AutoTabsRouter operation requested with a context that does not include an AutoTabsRouter.\n" + "The context used to retrieve the AutoTabsRouter must be that of a widget that " + "is a descendant of an AutoTabsRouter widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 62, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'AutoTabsRouter operation requested with a context that does not include an AutoTabsRouter.\\n'\n            'The context used to retrieve the AutoTabsRouter must be that of a widget that '\n            'is a descendant of an AutoTabsRouter widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope).controller;
    }
  };
  (auto_tabs_router.AutoTabsRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
    let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$0] = routes;
    this[lazyLoad$0] = lazyLoad;
    this[duration$] = duration;
    this[curve$] = curve;
    this[builder$0] = builder;
    this[inheritNavigatorObservers$0] = inheritNavigatorObservers;
    this[navigatorObservers$0] = navigatorObservers;
    this[declarative] = false;
    this[_activeIndex] = null;
    this[onNavigate$] = null;
    auto_tabs_router.AutoTabsRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router.AutoTabsRouter.prototype;
  (auto_tabs_router.AutoTabsRouter.declarative = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : true;
    let activeIndex = opts && 'activeIndex' in opts ? opts.activeIndex : null;
    let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
    let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$0] = routes;
    this[lazyLoad$0] = lazyLoad;
    this[duration$] = duration;
    this[curve$] = curve;
    this[builder$0] = builder;
    this[onNavigate$] = onNavigate;
    this[inheritNavigatorObservers$0] = inheritNavigatorObservers;
    this[navigatorObservers$0] = navigatorObservers;
    this[declarative] = true;
    this[_activeIndex] = activeIndex;
    auto_tabs_router.AutoTabsRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router.AutoTabsRouter.prototype;
  dart.addTypeTests(auto_tabs_router.AutoTabsRouter);
  dart.addTypeCaches(auto_tabs_router.AutoTabsRouter);
  dart.setMethodSignature(auto_tabs_router.AutoTabsRouter, () => ({
    __proto__: dart.getMethods(auto_tabs_router.AutoTabsRouter.__proto__),
    createState: dart.fnType(auto_tabs_router.AutoTabsRouterState, [])
  }));
  dart.setLibraryUri(auto_tabs_router.AutoTabsRouter, I[3]);
  dart.setFieldSignature(auto_tabs_router.AutoTabsRouter, () => ({
    __proto__: dart.getFields(auto_tabs_router.AutoTabsRouter.__proto__),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, animation.Animation$(core.double)]))),
    routes: dart.finalFieldType(core.List$(page_route_info.PageRouteInfo)),
    duration: dart.finalFieldType(core.Duration),
    curve: dart.finalFieldType(curves.Curve),
    lazyLoad: dart.finalFieldType(core.bool),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    [_activeIndex$]: dart.finalFieldType(dart.nullable(core.int)),
    declarative: dart.finalFieldType(core.bool),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, core.bool])))
  }));
  var _controller = dart.privateName(auto_tabs_router, "_controller");
  var __AutoTabsRouterState__animationController = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_animationController");
  var __AutoTabsRouterState__animation = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_animation");
  var _index = dart.privateName(auto_tabs_router, "_index");
  var __AutoTabsRouterState__parentController = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_parentController");
  var __AutoTabsRouterState__navigatorObservers = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_navigatorObservers");
  var __AutoTabsRouterState__inheritableObserversBuilder = dart.privateName(auto_tabs_router, "_#AutoTabsRouterState#_inheritableObserversBuilder");
  var _animationController = dart.privateName(auto_tabs_router, "_animationController");
  var _animation = dart.privateName(auto_tabs_router, "_animation");
  var _parentController = dart.privateName(auto_tabs_router, "_parentController");
  var _navigatorObservers = dart.privateName(auto_tabs_router, "_navigatorObservers");
  var _inheritableObserversBuilder = dart.privateName(auto_tabs_router, "_inheritableObserversBuilder");
  var _setupController = dart.privateName(auto_tabs_router, "_setupController");
  var _defaultBuilder = dart.privateName(auto_tabs_router, "_defaultBuilder");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(auto_tabs_router.AutoTabsRouter) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(auto_tabs_router.AutoTabsRouter)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(auto_tabs_router.AutoTabsRouter));
  auto_tabs_router.AutoTabsRouterState = class AutoTabsRouterState extends State_SingleTickerProviderStateMixin$36 {
    get [_animationController]() {
      let t0;
      t0 = this[__AutoTabsRouterState__animationController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_animationController")) : t0;
    }
    set [_animationController](t0) {
      this[__AutoTabsRouterState__animationController] = t0;
    }
    get [_animation]() {
      let t1;
      t1 = this[__AutoTabsRouterState__animation];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t1;
    }
    set [_animation](t1) {
      this[__AutoTabsRouterState__animation] = t1;
    }
    get [_parentController]() {
      let t2;
      t2 = this[__AutoTabsRouterState__parentController];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t2;
    }
    set [_parentController](t2) {
      this[__AutoTabsRouterState__parentController] = t2;
    }
    get controller() {
      return this[_controller];
    }
    initState() {
      this[_animationController] = new animation_controller.AnimationController.new({vsync: this, duration: this.widget.duration});
      this[_animation] = new (T$.TweenOfdouble()).new({begin: 0.0, end: 1.0}).animate(new animations.CurvedAnimation.new({parent: this[_animationController], curve: this.widget.curve}));
      super.initState();
    }
    get [_navigatorObservers]() {
      let t3;
      t3 = this[__AutoTabsRouterState__navigatorObservers];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t3;
    }
    set [_navigatorObservers](t3) {
      this[__AutoTabsRouterState__navigatorObservers] = t3;
    }
    get [_inheritableObserversBuilder]() {
      let t4;
      t4 = this[__AutoTabsRouterState__inheritableObserversBuilder];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t4;
    }
    set [_inheritableObserversBuilder](t4) {
      this[__AutoTabsRouterState__inheritableObserversBuilder] = t4;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentRoute = route_data_scope.RouteDataScope.of(this.context);
      if (this[_controller] == null) {
        let parentScope = controller_scope.RouterScope.of(this.context);
        this[_inheritableObserversBuilder] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers] = this[_inheritableObserversBuilder]();
        this[_parentController] = parentScope.controller;
        this[_controller] = new routing_controller.TabsRouter.new({parent: this[_parentController], key: parentRoute.key, managedByWidget: this.widget.declarative, initialIndex: this.widget[_activeIndex$], routeData: parentRoute, onNavigate: this.widget.onNavigate, routeCollection: this[_parentController].routeCollection.subCollectionOf(parentRoute.name), pageBuilder: this[_parentController].pageBuilder, initialPreMatchedRoutes: parentRoute.preMatchedPendingRoutes});
        this[_parentController].attachChildController(dart.nullCheck(this[_controller]));
        this[_setupController]();
      }
    }
    [_setupController]() {
      if (!(this[_controller] != null)) dart.assertFailed(null, I[2], 137, 12, "_controller != null");
      dart.nullCheck(this[_controller]).setupRoutes(this.widget.routes);
      this[_index] = dart.nullCheck(this[_controller]).activeIndex;
      this[_animationController].value = 1.0;
      dart.nullCheck(this[_controller]).addListener(dart.fn(() => {
        if (this.widget[_activeIndex$] == null && dart.nullCheck(this[_controller]).activeIndex !== this[_index]) {
          this.setState(dart.fn(() => {
            this[_index] = dart.nullCheck(this[_controller]).activeIndex;
          }, T$.VoidTovoid()));
          this[_animationController].forward({from: 0.0});
        }
      }, T$.VoidTovoid()));
    }
    dispose() {
      super.dispose();
      if (this[_controller] != null) {
        dart.nullCheck(this[_controller]).dispose();
        this[_parentController].removeChildController(dart.nullCheck(this[_controller]));
        this[_controller] = null;
      }
    }
    didUpdateWidget(oldWidget) {
      let t5;
      auto_tabs_router.AutoTabsRouter.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!new equality.ListEquality.new().equals(this.widget.routes, oldWidget.routes)) {
        dart.nullCheck(this[_controller]).replaceAll(this.widget.routes);
      }
      if (this.widget.declarative && this.widget[_activeIndex$] != oldWidget[_activeIndex$]) {
        this[_animationController].value = 1.0;
        this[_index] = dart.nullCheck(this.widget[_activeIndex$]);
        this[_animationController].forward({from: 0.0});
        dart.nullCheck(this[_controller]).setActiveIndex(this[_index], {notify: false});
        t5 = binding.WidgetsBinding.instance;
        t5 == null ? null : t5.addPostFrameCallback(dart.fn(_ => {
          auto_router_delegate.AutoRouterDelegate.of(this.context).notifyUrlChanged();
        }, T$.DurationTovoid()));
      }
    }
    build(context) {
      let t5;
      if (!(this[_controller] != null)) dart.assertFailed(null, I[2], 180, 12, "_controller != null");
      let stack = dart.nullCheck(this[_controller]).stack;
      let builder = (t5 = this.widget.builder, t5 == null ? dart.bind(this, _defaultBuilder) : t5);
      let builderChild = stack[$isEmpty] ? new container.Container.new({color: theme.Theme.of(context).scaffoldBackgroundColor, $creationLocationd_0dea112b090073317d4: C[50] || CT.C50}) : new auto_tabs_router._IndexedStackBuilder.new({activeIndex: this[_index], lazyLoad: this.widget.lazyLoad, navigatorObservers: this[_navigatorObservers], itemBuilder: dart.fn((context, index) => stack[$_get](index).buildPage(context), T$.BuildContextAndintToWidget()), stack: stack, $creationLocationd_0dea112b090073317d4: C[53] || CT.C53});
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller]), inheritableObserversBuilder: this[_inheritableObserversBuilder], segmentsHash: segmentsHash, navigatorObservers: this[_navigatorObservers], child: new controller_scope.TabsRouterScope.new({controller: dart.nullCheck(this[_controller]), segmentsHash: segmentsHash, child: new transitions.AnimatedBuilder.new({animation: this[_animation], builder: dart.fn((context, child) => {
              let t5;
              return builder(context, (t5 = child, t5 == null ? builderChild : t5), this[_animation]);
            }, T$.BuildContextAndWidgetNToWidget()), child: builderChild, $creationLocationd_0dea112b090073317d4: C[60] || CT.C60}), $creationLocationd_0dea112b090073317d4: C[65] || CT.C65}), $creationLocationd_0dea112b090073317d4: C[70] || CT.C70});
    }
    [_defaultBuilder](_, child, animation) {
      return new transitions.FadeTransition.new({opacity: T$.AnimationOfdouble().as(animation), child: T$.WidgetN().as(child), $creationLocationd_0dea112b090073317d4: C[77] || CT.C77});
    }
  };
  (auto_tabs_router.AutoTabsRouterState.new = function() {
    this[_controller] = null;
    this[__AutoTabsRouterState__animationController] = null;
    this[__AutoTabsRouterState__animation] = null;
    this[_index] = 0;
    this[__AutoTabsRouterState__parentController] = null;
    this[__AutoTabsRouterState__navigatorObservers] = null;
    this[__AutoTabsRouterState__inheritableObserversBuilder] = null;
    auto_tabs_router.AutoTabsRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_tabs_router.AutoTabsRouterState.prototype;
  dart.addTypeTests(auto_tabs_router.AutoTabsRouterState);
  dart.addTypeCaches(auto_tabs_router.AutoTabsRouterState);
  dart.setMethodSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getMethods(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_setupController]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_defaultBuilder]: dart.fnType(framework.Widget, [dart.dynamic, dart.dynamic, dart.dynamic])
  }));
  dart.setGetterSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getGetters(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_parentController]: routing_controller.RoutingController,
    controller: dart.nullable(routing_controller.TabsRouter),
    [_navigatorObservers]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder]: dart.fnType(core.List$(navigator.NavigatorObserver), [])
  }));
  dart.setSetterSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getSetters(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_parentController]: routing_controller.RoutingController,
    [_navigatorObservers]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder]: dart.fnType(core.List$(navigator.NavigatorObserver), [])
  }));
  dart.setLibraryUri(auto_tabs_router.AutoTabsRouterState, I[3]);
  dart.setFieldSignature(auto_tabs_router.AutoTabsRouterState, () => ({
    __proto__: dart.getFields(auto_tabs_router.AutoTabsRouterState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(routing_controller.TabsRouter)),
    [__AutoTabsRouterState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__AutoTabsRouterState__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_index]: dart.fieldType(core.int),
    [__AutoTabsRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController)),
    [__AutoTabsRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    [__AutoTabsRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator.NavigatorObserver), [])))
  }));
  var activeIndex$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.activeIndex");
  var itemBuilder$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.itemBuilder");
  var lazyLoad$1 = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.lazyLoad");
  var stack$ = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.stack");
  var navigatorObservers$1 = dart.privateName(auto_tabs_router, "_IndexedStackBuilder.navigatorObservers");
  auto_tabs_router._IndexedStackBuilder = class _IndexedStackBuilder extends framework.StatefulWidget {
    get activeIndex() {
      return this[activeIndex$];
    }
    set activeIndex(value) {
      super.activeIndex = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get lazyLoad() {
      return this[lazyLoad$1];
    }
    set lazyLoad(value) {
      super.lazyLoad = value;
    }
    get stack() {
      return this[stack$];
    }
    set stack(value) {
      super.stack = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$1];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    createState() {
      return new auto_tabs_router._IndexedStackBuilderState.new();
    }
  };
  (auto_tabs_router._IndexedStackBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let activeIndex = opts && 'activeIndex' in opts ? opts.activeIndex : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let lazyLoad = opts && 'lazyLoad' in opts ? opts.lazyLoad : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[activeIndex$] = activeIndex;
    this[itemBuilder$] = itemBuilder;
    this[navigatorObservers$1] = navigatorObservers;
    this[stack$] = stack;
    this[lazyLoad$1] = lazyLoad;
    auto_tabs_router._IndexedStackBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_tabs_router._IndexedStackBuilder.prototype;
  dart.addTypeTests(auto_tabs_router._IndexedStackBuilder);
  dart.addTypeCaches(auto_tabs_router._IndexedStackBuilder);
  dart.setMethodSignature(auto_tabs_router._IndexedStackBuilder, () => ({
    __proto__: dart.getMethods(auto_tabs_router._IndexedStackBuilder.__proto__),
    createState: dart.fnType(auto_tabs_router._IndexedStackBuilderState, [])
  }));
  dart.setLibraryUri(auto_tabs_router._IndexedStackBuilder, I[3]);
  dart.setFieldSignature(auto_tabs_router._IndexedStackBuilder, () => ({
    __proto__: dart.getFields(auto_tabs_router._IndexedStackBuilder.__proto__),
    activeIndex: dart.finalFieldType(core.int),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    lazyLoad: dart.finalFieldType(core.bool),
    stack: dart.finalFieldType(core.List$(auto_route_page.AutoRoutePage)),
    navigatorObservers: dart.finalFieldType(core.List$(navigator.NavigatorObserver))
  }));
  var _dummyWidget = dart.privateName(auto_tabs_router, "_dummyWidget");
  var _initializedPagesTracker = dart.privateName(auto_tabs_router, "_initializedPagesTracker");
  var _didInitTabRoute = dart.privateName(auto_tabs_router, "_didInitTabRoute");
  var _didChangeTabRoute = dart.privateName(auto_tabs_router, "_didChangeTabRoute");
  auto_tabs_router._IndexedStackBuilderState = class _IndexedStackBuilderState extends framework.State$(auto_tabs_router._IndexedStackBuilder) {
    [_didInitTabRoute](index, previous = -1) {
      this.widget.navigatorObservers[$whereType](auto_route_observer.AutoRouterObserver)[$forEach](dart.fn(observer => {
        let routes = this.widget.stack[$map](route_match.RouteMatch, dart.fn(e => e.routeData.route, T$.AutoRoutePageToRouteMatch()))[$toList]();
        let previousRoute = null;
        if (previous !== -1) {
          previousRoute = new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](previous), index: previous});
        }
        observer.didInitTabRoute(new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](index), index: index}), T$.TabPageRouteN().as(previousRoute));
      }, T$.AutoRouterObserverTovoid()));
    }
    [_didChangeTabRoute](index, previous) {
      this.widget.navigatorObservers[$whereType](auto_route_observer.AutoRouterObserver)[$forEach](dart.fn(observer => {
        let routes = this.widget.stack[$map](route_match.RouteMatch, dart.fn(e => e.routeData.route, T$.AutoRoutePageToRouteMatch()))[$toList]();
        observer.didChangeTabRoute(new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](index), index: index}), new auto_route_observer.TabPageRoute.new({routeInfo: routes[$_get](previous), index: previous}));
      }, T$.AutoRouterObserverTovoid()));
    }
    initState() {
      super.initState();
      for (let i = 0; i < this.widget.stack[$length]; i = i + 1) {
        if (i === this.widget.activeIndex || !this.widget.lazyLoad) {
          this[_initializedPagesTracker][$_set](i, true);
          this[_didInitTabRoute](i);
        } else {
          this[_initializedPagesTracker][$_set](i, false);
        }
      }
    }
    didUpdateWidget(oldWidget) {
      auto_tabs_router._IndexedStackBuilder.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.lazyLoad && this[_initializedPagesTracker][$_get](this.widget.activeIndex) === false) {
        this[_initializedPagesTracker][$_set](this.widget.activeIndex, true);
        this[_didInitTabRoute](this.widget.activeIndex, oldWidget.activeIndex);
      } else if (this.widget.activeIndex !== oldWidget.activeIndex) {
        this[_didChangeTabRoute](this.widget.activeIndex, oldWidget.activeIndex);
      }
    }
    build(context) {
      return new basic.IndexedStack.new({index: this.widget.activeIndex, sizing: stack.StackFit.expand, children: T$.ListOfWidget().generate(this.widget.stack[$length], dart.fn(index => {
          let t7, t6, t5;
          return this[_initializedPagesTracker][$_get](index) === true ? (t5 = this.widget, t6 = context, t7 = index, t5.itemBuilder(t6, t7)) : this[_dummyWidget];
        }, T$.intToWidget())), $creationLocationd_0dea112b090073317d4: C[83] || CT.C83});
    }
  };
  (auto_tabs_router._IndexedStackBuilderState.new = function() {
    this[_dummyWidget] = C[81] || CT.C81;
    this[_initializedPagesTracker] = new (T$.IdentityMapOfint$bool()).new();
    auto_tabs_router._IndexedStackBuilderState.__proto__.new.call(this);
    ;
  }).prototype = auto_tabs_router._IndexedStackBuilderState.prototype;
  dart.addTypeTests(auto_tabs_router._IndexedStackBuilderState);
  dart.addTypeCaches(auto_tabs_router._IndexedStackBuilderState);
  dart.setMethodSignature(auto_tabs_router._IndexedStackBuilderState, () => ({
    __proto__: dart.getMethods(auto_tabs_router._IndexedStackBuilderState.__proto__),
    [_didInitTabRoute]: dart.fnType(dart.void, [core.int], [core.int]),
    [_didChangeTabRoute]: dart.fnType(dart.void, [core.int, core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_tabs_router._IndexedStackBuilderState, I[3]);
  dart.setFieldSignature(auto_tabs_router._IndexedStackBuilderState, () => ({
    __proto__: dart.getFields(auto_tabs_router._IndexedStackBuilderState.__proto__),
    [_dummyWidget]: dart.finalFieldType(basic.SizedBox),
    [_initializedPagesTracker]: dart.finalFieldType(core.Map$(core.int, core.bool))
  }));
  var includePrefixMatches$ = dart.privateName(route_information_parser, "DefaultRouteParser.includePrefixMatches");
  var _matcher$ = dart.privateName(route_information_parser, "_matcher");
  var segments$ = dart.privateName(route_information_parser, "UrlState.segments");
  var uri$ = dart.privateName(route_information_parser, "UrlState.uri");
  var _findSegment = dart.privateName(route_information_parser, "_findSegment");
  route_information_parser.UrlState = class UrlState extends core.Object {
    get segments() {
      return this[segments$];
    }
    set segments(value) {
      super.segments = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    get url() {
      return this.uri.toString();
    }
    get path() {
      return this.uri.path;
    }
    static fromSegments(routes) {
      return new route_information_parser.UrlState.new(route_information_parser.UrlState._buildUri(routes), routes);
    }
    get hasSegments() {
      return this.segments[$isNotEmpty];
    }
    get topMatch() {
      return this.hasSegments ? this.segments[$last] : null;
    }
    [_findSegment](segments, predicate) {
      for (let segment of segments) {
        if (predicate(segment)) {
          return segment;
        } else if (segment.hasChildren) {
          let subSegment = this[_findSegment](dart.nullCheck(segment.children), predicate);
          if (subSegment != null) {
            return subSegment;
          }
        }
      }
    }
    childrenOfSegmentNamed(routeName) {
      let t5, t5$;
      t5$ = (t5 = this[_findSegment](this.segments, dart.fn(match => match.routeName === routeName, T$.RouteMatchTobool())), t5 == null ? null : t5.children);
      return t5$ == null ? C[88] || CT.C88 : t5$;
    }
    static _buildUri(routes) {
      let t5, t5$;
      let fullPath = "/";
      if (routes[$isEmpty]) {
        return core._Uri.new({path: fullPath});
      }
      fullPath = path.joinAll(routes[$where](dart.fn(e => e.stringMatch[$isNotEmpty], T$.RouteMatchTobool()))[$map](core.String, dart.fn(e => e.stringMatch, T$.RouteMatchToString())));
      let normalized = path.normalize(fullPath);
      let lastSegment = routes[$last];
      let queryParams = new (T$.IdentityMapOfString$dynamic()).new();
      if (lastSegment.queryParams.isNotEmpty) {
        let queries = lastSegment.queryParams.rawMap;
        for (let key of queries[$keys]) {
          let value = (t5$ = (t5 = queries[$_get](key), t5 == null ? null : dart.toString(t5)), t5$ == null ? "" : t5$);
          if (value[$isNotEmpty]) {
            queryParams[$_set](key, value[$toString]());
          }
        }
      }
      let fragment = null;
      if (lastSegment.fragment[$isNotEmpty] === true) {
        fragment = lastSegment.fragment;
      }
      return core._Uri.new({path: normalized, queryParameters: queryParams[$isNotEmpty] ? queryParams : null, fragment: T$.StringN().as(fragment)});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || route_information_parser.UrlState.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && new equality.ListEquality.new().equals(this.segments, other.segments);
    }
    get hashCode() {
      return new equality.ListEquality.new().hash(this.segments);
    }
  };
  (route_information_parser.UrlState.new = function(uri, segments) {
    this[uri$] = uri;
    this[segments$] = segments;
    ;
  }).prototype = route_information_parser.UrlState.prototype;
  dart.addTypeTests(route_information_parser.UrlState);
  dart.addTypeCaches(route_information_parser.UrlState);
  dart.setMethodSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getMethods(route_information_parser.UrlState.__proto__),
    [_findSegment]: dart.fnType(dart.nullable(route_match.RouteMatch), [core.List$(route_match.RouteMatch), dart.fnType(core.bool, [route_match.RouteMatch])]),
    childrenOfSegmentNamed: dart.fnType(core.List$(route_match.RouteMatch), [core.String])
  }));
  dart.setGetterSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getGetters(route_information_parser.UrlState.__proto__),
    url: core.String,
    path: core.String,
    hasSegments: core.bool,
    topMatch: dart.nullable(route_match.RouteMatch)
  }));
  dart.setLibraryUri(route_information_parser.UrlState, I[4]);
  dart.setFieldSignature(route_information_parser.UrlState, () => ({
    __proto__: dart.getFields(route_information_parser.UrlState.__proto__),
    segments: dart.finalFieldType(core.List$(route_match.RouteMatch)),
    uri: dart.finalFieldType(core.Uri)
  }));
  dart.defineExtensionMethods(route_information_parser.UrlState, ['_equals']);
  dart.defineExtensionAccessors(route_information_parser.UrlState, ['hashCode']);
  route_information_parser.DefaultRouteParser = class DefaultRouteParser extends router.RouteInformationParser$(route_information_parser.UrlState) {
    get includePrefixMatches() {
      return this[includePrefixMatches$];
    }
    set includePrefixMatches(value) {
      super.includePrefixMatches = value;
    }
    parseRouteInformation(routeInformation) {
      return async.async(route_information_parser.UrlState, (function* parseRouteInformation() {
        let t5, t5$;
        let uri = core.Uri.parse((t5 = routeInformation.location, t5 == null ? "" : t5));
        let matches = this[_matcher$].matchUri(uri, {includePrefixMatches: this.includePrefixMatches});
        return new (T$.SynchronousFutureOfUrlState()).new(new route_information_parser.UrlState.new(uri, (t5$ = matches, t5$ == null ? C[88] || CT.C88 : t5$)));
      }).bind(this));
    }
    restoreRouteInformation(tree) {
      route_information_parser.UrlState.as(tree);
      return new router.RouteInformation.new({location: tree.url[$isEmpty] ? "/" : tree.url});
    }
  };
  (route_information_parser.DefaultRouteParser.new = function(_matcher, opts) {
    let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
    this[_matcher$] = _matcher;
    this[includePrefixMatches$] = includePrefixMatches;
    route_information_parser.DefaultRouteParser.__proto__.new.call(this);
    ;
  }).prototype = route_information_parser.DefaultRouteParser.prototype;
  dart.addTypeTests(route_information_parser.DefaultRouteParser);
  dart.addTypeCaches(route_information_parser.DefaultRouteParser);
  dart.setMethodSignature(route_information_parser.DefaultRouteParser, () => ({
    __proto__: dart.getMethods(route_information_parser.DefaultRouteParser.__proto__),
    parseRouteInformation: dart.fnType(async.Future$(route_information_parser.UrlState), [router.RouteInformation]),
    restoreRouteInformation: dart.fnType(router.RouteInformation, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(route_information_parser.DefaultRouteParser, I[4]);
  dart.setFieldSignature(route_information_parser.DefaultRouteParser, () => ({
    __proto__: dart.getFields(route_information_parser.DefaultRouteParser.__proto__),
    [_matcher$]: dart.finalFieldType(route_matcher.RouteMatcher),
    includePrefixMatches: dart.finalFieldType(core.bool)
  }));
  var initialRoutes$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.initialRoutes");
  var controller$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.controller");
  var initialDeepLink$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.initialDeepLink");
  var navRestorationScopeId$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.navRestorationScopeId");
  var navigatorObservers$2 = dart.privateName(auto_router_delegate, "AutoRouterDelegate.navigatorObservers");
  var placeholder$ = dart.privateName(auto_router_delegate, "AutoRouterDelegate.placeholder");
  var __AutoRouterDelegate__navigatorObservers = dart.privateName(auto_router_delegate, "_#AutoRouterDelegate#_navigatorObservers");
  var _urlState = dart.privateName(auto_router_delegate, "_urlState");
  var _navigatorObservers$ = dart.privateName(auto_router_delegate, "_navigatorObservers");
  var _rebuildListener = dart.privateName(auto_router_delegate, "_rebuildListener");
  const RouterDelegate_ChangeNotifier$36 = class RouterDelegate_ChangeNotifier extends router.RouterDelegate$(route_information_parser.UrlState) {};
  (RouterDelegate_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
    RouterDelegate_ChangeNotifier$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_ChangeNotifier$36.prototype;
  dart.applyMixin(RouterDelegate_ChangeNotifier$36, change_notifier.ChangeNotifier);
  auto_router_delegate.AutoRouterDelegate = class AutoRouterDelegate extends RouterDelegate_ChangeNotifier$36 {
    get initialRoutes() {
      return this[initialRoutes$];
    }
    set initialRoutes(value) {
      super.initialRoutes = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get initialDeepLink() {
      return this[initialDeepLink$];
    }
    set initialDeepLink(value) {
      super.initialDeepLink = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$2];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get placeholder() {
      return this[placeholder$];
    }
    set placeholder(value) {
      this[placeholder$] = value;
    }
    static defaultNavigatorObserversBuilder() {
      return C[89] || CT.C89;
    }
    static of(context) {
      let delegate = router.Router.of(context).routerDelegate;
      if (!auto_router_delegate.AutoRouterDelegate.is(delegate)) dart.assertFailed(null, I[5], 36, 12, "delegate is AutoRouterDelegate");
      return auto_router_delegate.AutoRouterDelegate.as(delegate);
    }
    static reportUrlChanged(context, url) {
      let t5;
      t5 = router.Router.of(context).routeInformationProvider;
      t5 == null ? null : t5.routerReportsNewRouteInformation(new router.RouteInformation.new({location: url}));
    }
    popRoute() {
      return this.controller.topMost.pop(T$.ObjectN());
    }
    get [_navigatorObservers$]() {
      let t5;
      t5 = this[__AutoRouterDelegate__navigatorObservers];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t5;
    }
    set [_navigatorObservers$](t5) {
      this[__AutoRouterDelegate__navigatorObservers] = t5;
    }
    get urlState() {
      return this[_urlState];
    }
    get currentConfiguration() {
      let newState = route_information_parser.UrlState.fromSegments(this.controller.currentSegments);
      if (!this[_urlState]._equals(newState)) {
        this[_urlState] = newState;
        return newState;
      }
      return null;
    }
    setInitialRoutePath(tree) {
      let t6;
      route_information_parser.UrlState.as(tree);
      if (this.controller.hasEntries) {
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }
      if ((t6 = this.initialRoutes, t6 == null ? null : t6[$isNotEmpty]) === true) {
        return this.controller.pushAll(dart.nullCheck(this.initialRoutes));
      } else if (this.initialDeepLink != null) {
        return this.controller.pushNamed(T$.ObjectN(), dart.nullCheck(this.initialDeepLink), {includePrefixMatches: true});
      } else if (tree.hasSegments) {
        let routes = T$.ListOfPageRouteInfo().unmodifiable(tree.segments[$map](dart.dynamic, dart.fn(m => page_route_info.PageRouteInfo.fromMatch(m), T$.RouteMatchToPageRouteInfo())));
        return this.controller.pushAll(routes);
      } else {
        dart.throw(assertions.FlutterError.new("Can not resolve initial route"));
      }
    }
    setNewRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      if (tree.hasSegments) {
        return this.controller.navigateAll(tree.segments);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    build(context) {
      let segmentsHash = this.controller.currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: this.controller, navigatorObservers: this[_navigatorObservers$], inheritableObserversBuilder: this.navigatorObservers, segmentsHash: segmentsHash, child: new controller_scope.StackRouterScope.new({segmentsHash: segmentsHash, controller: this.controller, child: new auto_route_navigator.AutoRouteNavigator.new({router: this.controller, placeholder: this.placeholder, navRestorationScopeId: this.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$], $creationLocationd_0dea112b090073317d4: C[90] || CT.C90}), $creationLocationd_0dea112b090073317d4: C[96] || CT.C96}), $creationLocationd_0dea112b090073317d4: C[101] || CT.C101});
    }
    [_rebuildListener]() {
      this.notifyListeners();
    }
    dispose() {
      super.dispose();
      this.removeListener(dart.bind(this, _rebuildListener));
    }
    notifyUrlChanged() {
      this.notifyListeners();
    }
  };
  (auto_router_delegate.AutoRouterDelegate.new = function(controller, opts) {
    let initialRoutes = opts && 'initialRoutes' in opts ? opts.initialRoutes : null;
    let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let initialDeepLink = opts && 'initialDeepLink' in opts ? opts.initialDeepLink : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    this[__AutoRouterDelegate__navigatorObservers] = null;
    this[_urlState] = route_information_parser.UrlState.fromSegments(C[88] || CT.C88);
    this[controller$] = controller;
    this[initialRoutes$] = initialRoutes;
    this[placeholder$] = placeholder;
    this[navRestorationScopeId$] = navRestorationScopeId;
    this[initialDeepLink$] = initialDeepLink;
    this[navigatorObservers$2] = navigatorObservers;
    if (!(initialDeepLink == null || initialRoutes == null)) dart.assertFailed(null, I[5], 64, 15, "initialDeepLink == null || initialRoutes == null");
    auto_router_delegate.AutoRouterDelegate.__proto__.new.call(this);
    this[_navigatorObservers$] = this.navigatorObservers();
    this.controller.addListener(dart.bind(this, _rebuildListener));
  }).prototype = auto_router_delegate.AutoRouterDelegate.prototype;
  dart.addTypeTests(auto_router_delegate.AutoRouterDelegate);
  dart.addTypeCaches(auto_router_delegate.AutoRouterDelegate);
  dart.setMethodSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getMethods(auto_router_delegate.AutoRouterDelegate.__proto__),
    popRoute: dart.fnType(async.Future$(core.bool), []),
    setNewRoutePath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_rebuildListener]: dart.fnType(dart.void, []),
    notifyUrlChanged: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getGetters(auto_router_delegate.AutoRouterDelegate.__proto__),
    [_navigatorObservers$]: core.List$(navigator.NavigatorObserver),
    urlState: route_information_parser.UrlState
  }));
  dart.setSetterSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getSetters(auto_router_delegate.AutoRouterDelegate.__proto__),
    [_navigatorObservers$]: core.List$(navigator.NavigatorObserver)
  }));
  dart.setLibraryUri(auto_router_delegate.AutoRouterDelegate, I[6]);
  dart.setFieldSignature(auto_router_delegate.AutoRouterDelegate, () => ({
    __proto__: dart.getFields(auto_router_delegate.AutoRouterDelegate.__proto__),
    initialRoutes: dart.finalFieldType(dart.nullable(core.List$(page_route_info.PageRouteInfo))),
    controller: dart.finalFieldType(routing_controller.StackRouter),
    initialDeepLink: dart.finalFieldType(dart.nullable(core.String)),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    placeholder: dart.fieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
    [__AutoRouterDelegate__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    [_urlState]: dart.fieldType(route_information_parser.UrlState)
  }));
  var _managedByWidget = dart.privateName(auto_router_delegate, "_managedByWidget");
  var _onNavigate = dart.privateName(auto_router_delegate, "_onNavigate");
  auto_router_delegate._DeclarativeAutoRouterDelegate = class _DeclarativeAutoRouterDelegate extends auto_router_delegate.AutoRouterDelegate {
    setInitialRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      return this[_onNavigate](tree, true);
    }
    setNewRoutePath(tree) {
      route_information_parser.UrlState.as(tree);
      return async.async(dart.void, (function* setNewRoutePath() {
        return this[_onNavigate](tree);
      }).bind(this));
    }
    [_onNavigate](tree, initial = false) {
      this[_urlState] = tree;
      if (tree.hasSegments) {
        this.controller.navigateAll(tree.segments);
      }
      if (this.onNavigate != null) {
        dart.nullCheck(this.onNavigate)(tree, true);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    build(context) {
      let segmentsHash = this.controller.currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: this.controller, inheritableObserversBuilder: this.navigatorObservers, segmentsHash: segmentsHash, navigatorObservers: this[_navigatorObservers$], child: new controller_scope.StackRouterScope.new({controller: this.controller, segmentsHash: segmentsHash, child: new auto_route_navigator.AutoRouteNavigator.new({router: this.controller, declarativeRoutesBuilder: this.routes, navRestorationScopeId: this.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$], didPop: this.onPopRoute, $creationLocationd_0dea112b090073317d4: C[108] || CT.C108}), $creationLocationd_0dea112b090073317d4: C[115] || CT.C115}), $creationLocationd_0dea112b090073317d4: C[120] || CT.C120});
    }
  };
  (auto_router_delegate._DeclarativeAutoRouterDelegate.new = function(controller, opts) {
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    this.routes = routes;
    this.onPopRoute = onPopRoute;
    this.onNavigate = onNavigate;
    auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__.new.call(this, controller, {navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers});
    controller[_managedByWidget] = true;
  }).prototype = auto_router_delegate._DeclarativeAutoRouterDelegate.prototype;
  dart.addTypeTests(auto_router_delegate._DeclarativeAutoRouterDelegate);
  dart.addTypeCaches(auto_router_delegate._DeclarativeAutoRouterDelegate);
  dart.setMethodSignature(auto_router_delegate._DeclarativeAutoRouterDelegate, () => ({
    __proto__: dart.getMethods(auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__),
    [_onNavigate]: dart.fnType(async.Future$(dart.void), [route_information_parser.UrlState], [core.bool])
  }));
  dart.setLibraryUri(auto_router_delegate._DeclarativeAutoRouterDelegate, I[6]);
  dart.setFieldSignature(auto_router_delegate._DeclarativeAutoRouterDelegate, () => ({
    __proto__: dart.getFields(auto_router_delegate._DeclarativeAutoRouterDelegate.__proto__),
    routes: dart.finalFieldType(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])),
    onPopRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_information_parser.UrlState, core.bool])))
  }));
  var _lazyRootDelegate = dart.privateName(auto_router_delegate, "_lazyRootDelegate");
  var ValueKey_value = dart.privateName(key, "ValueKey.value");
  var RouteMatch_key = dart.privateName(route_match, "RouteMatch.key");
  var RouteMatch_guards = dart.privateName(route_match, "RouteMatch.guards");
  var RouteMatch_args = dart.privateName(route_match, "RouteMatch.args");
  var RouteMatch_stringMatch = dart.privateName(route_match, "RouteMatch.stringMatch");
  var RouteMatch_path = dart.privateName(route_match, "RouteMatch.path");
  var RouteMatch_routeName = dart.privateName(route_match, "RouteMatch.routeName");
  var RouteMatch_redirectedFrom = dart.privateName(route_match, "RouteMatch.redirectedFrom");
  var RouteMatch_segments = dart.privateName(route_match, "RouteMatch.segments");
  var RouteMatch_fragment = dart.privateName(route_match, "RouteMatch.fragment");
  var RouteMatch_children = dart.privateName(route_match, "RouteMatch.children");
  var Parameters__params = dart.privateName(parameters, "Parameters._params");
  var RouteMatch_queryParams = dart.privateName(route_match, "RouteMatch.queryParams");
  var RouteMatch_pathParams = dart.privateName(route_match, "RouteMatch.pathParams");
  var _pageBuilder = dart.privateName(auto_router_delegate, "_pageBuilder");
  var _parent = dart.privateName(routing_controller, "StackRouter._parent");
  var key$ = dart.privateName(routing_controller, "StackRouter.key");
  var initialPreMatchedRoutes$ = dart.privateName(routing_controller, "StackRouter.initialPreMatchedRoutes");
  var onNavigate$0 = dart.privateName(routing_controller, "StackRouter.onNavigate");
  var _navigatorKey = dart.privateName(routing_controller, "_navigatorKey");
  var _parent$ = dart.privateName(routing_controller, "_parent");
  var _childControllers = dart.privateName(routing_controller, "_childControllers");
  var _pages = dart.privateName(routing_controller, "_pages");
  var _updateRoute = dart.privateName(routing_controller, "_updateRoute");
  var _updateSharedPathData = dart.privateName(routing_controller, "_updateSharedPathData");
  var _removeLast = dart.privateName(routing_controller, "_removeLast");
  var _findStackScope = dart.privateName(routing_controller, "_findStackScope");
  var _push = dart.privateName(routing_controller, "_push");
  var _canHandleNavigation = dart.privateName(routing_controller, "_canHandleNavigation");
  var _getAncestors = dart.privateName(routing_controller, "_getAncestors");
  var _pushAllGuarded = dart.privateName(routing_controller, "_pushAllGuarded");
  var _popUntilOrPushAll = dart.privateName(routing_controller, "_popUntilOrPushAll");
  var _matchOrReportFailure = dart.privateName(routing_controller, "_matchOrReportFailure");
  var _canNavigate = dart.privateName(routing_controller, "_canNavigate");
  var _addEntry = dart.privateName(routing_controller, "_addEntry");
  var _pushAll = dart.privateName(routing_controller, "_pushAll");
  var _removeUntil = dart.privateName(routing_controller, "_removeUntil");
  var _createRouteData = dart.privateName(routing_controller, "_createRouteData");
  var _matchAllOrReportFailure = dart.privateName(routing_controller, "_matchAllOrReportFailure");
  var _navigateAll = dart.privateName(routing_controller, "_navigateAll");
  var _pendingInitialRoutes = dart.privateName(routing_controller, "_pendingInitialRoutes");
  var _reset = dart.privateName(routing_controller, "_reset");
  var _findPathScopeOrReportFailure = dart.privateName(routing_controller, "_findPathScopeOrReportFailure");
  var _isRouteActive = dart.privateName(routing_controller, "_isRouteActive");
  var _isPathActive = dart.privateName(routing_controller, "_isPathActive");
  var _findScope = dart.privateName(routing_controller, "_findScope");
  var _navigate = dart.privateName(routing_controller, "_navigate");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  const Object_ChangeNotifier$36 = class Object_ChangeNotifier extends core.Object {};
  (Object_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
  }).prototype = Object_ChangeNotifier$36.prototype;
  dart.applyMixin(Object_ChangeNotifier$36, change_notifier.ChangeNotifier);
  routing_controller.RoutingController = class RoutingController extends Object_ChangeNotifier$36 {
    attachChildController(childController) {
      this[_childControllers][$_set](childController.routeData.key, childController);
    }
    removeChildController(childController) {
      this[_childControllers][$remove](childController.routeData.key);
    }
    get stackData() {
      return T$.ListOfRouteData().unmodifiable(this[_pages][$map](dart.dynamic, dart.fn(e => e.routeData, T$.AutoRoutePageToRouteData())));
    }
    isRouteActive(routeName) {
      return this.root[_isRouteActive](routeName);
    }
    [_isRouteActive](routeName) {
      return this.currentSegments[$any](dart.fn(r => r.routeName === routeName, T$.RouteMatchTobool()));
    }
    [_createRouteData](route, parent) {
      let routeToPush = route;
      let pendingRoutes = null;
      let routeKey = routeToPush.key;
      if (this[_pendingInitialRoutes][$containsKey](routeKey)) {
        pendingRoutes = T$.ListOfRouteMatch().unmodifiable(dart.nullCheck(this[_pendingInitialRoutes][$_get](routeKey)));
        this[_pendingInitialRoutes][$remove](routeKey);
      } else if (routeToPush.hasChildren) {
        pendingRoutes = dart.nullCheck(routeToPush.children);
      }
      routeToPush = route.copyWith({children: pendingRoutes});
      return new routing_controller.RouteData.new({route: routeToPush, router: this, parent: parent, preMatchedPendingRoutes: pendingRoutes});
    }
    [_matchOrReportFailure](route, onFailure = null) {
      let match = this.matcher.matchByRoute(route);
      if (match != null) {
        return match;
      } else {
        if (onFailure != null) {
          onFailure(new navigation_failure.RouteNotFoundFailure.new(route));
          return null;
        } else {
          dart.throw(assertions.FlutterError.new("[" + this.toString() + "] Router can not navigate to " + route.fullPath));
        }
      }
    }
    [_matchAllOrReportFailure](routes, onFailure = null) {
      let matches = T$.JSArrayOfRouteMatch().of([]);
      for (let route of routes) {
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match != null) {
          matches[$add](match);
        } else {
          return null;
        }
      }
      return matches;
    }
    isPathActive(path) {
      return this.root[_isPathActive](path);
    }
    [_isPathActive](pattern) {
      return core.RegExp.new(pattern).hasMatch(path.joinAll(this.currentSegments[$map](core.String, dart.fn(e => e.stringMatch, T$.RouteMatchToString()))));
    }
    [_canHandleNavigation](route) {
      return this.routeCollection.containsKey(route.routeName);
    }
    [_findPathScopeOrReportFailure](T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let routers = (() => {
        let t6 = _interceptors.JSArray$(T).of([]);
        if (T.is(this)) t6[$add](T.as(this));
        t6[$addAll](this[_getAncestors]()[$whereType](T));
        return t6;
      })();
      for (let router of routers) {
        let matches = router.matcher.match(path, {includePrefixMatches: includePrefixMatches});
        if (matches != null) {
          return new (routing_controller._RouterScopeResult$(T)).new(router, matches);
        }
      }
      if (onFailure != null) {
        onFailure(new navigation_failure.RouteNotFoundFailure.new(new page_route_info.PageRouteInfo.new("", {path: path})));
      } else {
        dart.throw(assertions.FlutterError.new("Can not navigate to " + path));
      }
      return null;
    }
    [_findScope](T, route) {
      if (this[_parent$] == null || this[_canHandleNavigation](route)) {
        return this;
      }
      let routers = (() => {
        let t7 = T$.JSArrayOfRoutingController().of([this]);
        t7[$addAll](this[_getAncestors]());
        return t7;
      })();
      return routers[$firstWhere](dart.fn(r => r[_canHandleNavigation](route), T$.RoutingControllerTobool()), {orElse: dart.fn(() => this, T$.VoidToRoutingController())});
    }
    navigate(route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* navigate() {
        return this[_findScope](routing_controller.RoutingController, route)[_navigate](route, {onFailure: onFailure});
      }).bind(this));
    }
    [_navigate](route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* _navigate() {
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match != null) {
          return this[_navigateAll](T$.JSArrayOfRouteMatch().of([match]), {onFailure: onFailure});
        } else {
          return new synchronous_future.SynchronousFuture.new(null);
        }
      }).bind(this));
    }
    navigateNamed(path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.RoutingController, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        return scope.router[_navigateAll](scope.matches);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    [_getAncestors]() {
      function collectRouters(currentParent, all) {
        all[$add](currentParent);
        if (currentParent[_parent$] != null) {
          collectRouters(dart.nullCheck(currentParent[_parent$]), all);
        }
      }
      dart.fn(collectRouters, T$.RoutingControllerAndListOfRoutingControllerTovoid());
      let routers = T$.JSArrayOfRoutingController().of([]);
      if (this[_parent$] != null) {
        collectRouters(dart.nullCheck(this[_parent$]), routers);
      }
      return routers;
    }
    get currentSegmentsHash() {
      return (C[133] || CT.C133).hash(this.currentSegments);
    }
    parent(T) {
      return this[_parent$] == null ? null : T.as(this[_parent$]);
    }
    get root() {
      let t8, t8$;
      return routing_controller.StackRouter.as((t8$ = (t8 = this[_parent$], t8 == null ? null : t8.root), t8$ == null ? this : t8$));
    }
    get parentAsStackRouter() {
      return this.parent(routing_controller.StackRouter);
    }
    get isRoot() {
      return this[_parent$] == null;
    }
    get topRoute() {
      return this.topMost.current;
    }
    innerRouterOf(T, routeName) {
      if (this[_childControllers][$isEmpty]) {
        return null;
      }
      return utils['IterableExtenstion|lastOrNull'](T, this[_childControllers][$values][$whereType](T), dart.fn(c => c.routeData.name === routeName, dart.fnType(core.bool, [T])));
    }
    popTop(T, result = null) {
      return this.topMost.pop(T, result);
    }
    toString() {
      return this.routeData.name + " Router";
    }
  };
  (routing_controller.RoutingController.new = function() {
    this[_childControllers] = new (T$.LinkedMapOfLocalKey$RoutingController()).new();
    this[_pages] = T$.JSArrayOfAutoRoutePage().of([]);
    this[_pendingInitialRoutes] = new (T$.LinkedMapOfLocalKey$ListOfRouteMatch()).new();
    routing_controller.RoutingController.__proto__.new.call(this);
    ;
  }).prototype = routing_controller.RoutingController.prototype;
  dart.addTypeTests(routing_controller.RoutingController);
  dart.addTypeCaches(routing_controller.RoutingController);
  dart.setMethodSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getMethods(routing_controller.RoutingController.__proto__),
    attachChildController: dart.fnType(dart.void, [routing_controller.RoutingController]),
    removeChildController: dart.fnType(dart.void, [routing_controller.RoutingController]),
    isRouteActive: dart.fnType(core.bool, [core.String]),
    [_isRouteActive]: dart.fnType(core.bool, [core.String]),
    [_createRouteData]: dart.fnType(routing_controller.RouteData, [route_match.RouteMatch, routing_controller.RouteData]),
    [_matchOrReportFailure]: dart.fnType(dart.nullable(route_match.RouteMatch), [page_route_info.PageRouteInfo], [dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))]),
    [_matchAllOrReportFailure]: dart.fnType(dart.nullable(core.List$(route_match.RouteMatch)), [core.List$(page_route_info.PageRouteInfo)], [dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))]),
    isPathActive: dart.fnType(core.bool, [core.String]),
    [_isPathActive]: dart.fnType(core.bool, [core.String]),
    [_canHandleNavigation]: dart.fnType(core.bool, [page_route_info.PageRouteInfo]),
    [_findPathScopeOrReportFailure]: dart.gFnType(T => [dart.nullable(routing_controller._RouterScopeResult$(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [routing_controller.RoutingController]),
    [_findScope]: dart.gFnType(T => [routing_controller.RoutingController, [page_route_info.PageRouteInfo]], T => [routing_controller.RoutingController]),
    navigate: dart.fnType(async.Future, [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_navigate]: dart.fnType(async.Future, [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    navigateNamed: dart.fnType(async.Future$(dart.void), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_getAncestors]: dart.fnType(core.List$(routing_controller.RoutingController), []),
    parent: dart.gFnType(T => [dart.nullable(T), []], T => [routing_controller.RoutingController]),
    innerRouterOf: dart.gFnType(T => [dart.nullable(T), [core.String]], T => [routing_controller.RoutingController]),
    popTop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getGetters(routing_controller.RoutingController.__proto__),
    stackData: core.List$(routing_controller.RouteData),
    currentSegmentsHash: core.int,
    root: routing_controller.StackRouter,
    parentAsStackRouter: dart.nullable(routing_controller.StackRouter),
    isRoot: core.bool,
    topRoute: routing_controller.RouteData
  }));
  dart.setLibraryUri(routing_controller.RoutingController, I[9]);
  dart.setFieldSignature(routing_controller.RoutingController, () => ({
    __proto__: dart.getFields(routing_controller.RoutingController.__proto__),
    [_childControllers]: dart.finalFieldType(core.Map$(key.LocalKey, routing_controller.RoutingController)),
    [_pages]: dart.finalFieldType(core.List$(auto_route_page.AutoRoutePage)),
    [_pendingInitialRoutes]: dart.finalFieldType(core.Map$(key.LocalKey, core.List$(route_match.RouteMatch)))
  }));
  dart.defineExtensionMethods(routing_controller.RoutingController, ['toString']);
  routing_controller.StackRouter = class StackRouter extends routing_controller.RoutingController {
    get [_parent$]() {
      return this[_parent];
    }
    set [_parent$](value) {
      super[_parent$] = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get initialPreMatchedRoutes() {
      return this[initialPreMatchedRoutes$];
    }
    set initialPreMatchedRoutes(value) {
      super.initialPreMatchedRoutes = value;
    }
    get onNavigate() {
      return this[onNavigate$0];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    get navigatorKey() {
      return this[_navigatorKey];
    }
    get currentSegments() {
      let currentData = this.currentChild;
      let segments = T$.JSArrayOfRouteMatch().of([]);
      if (currentData != null) {
        segments[$add](currentData.route);
        if (this[_childControllers][$containsKey](currentData.key)) {
          segments[$addAll](dart.nullCheck(this[_childControllers][$_get](currentData.key)).currentSegments);
        }
      } else if (this.routeData.route.hasChildren) {
        segments[$addAll](dart.nullCheck(this.routeData.route.children)[$last].flattened);
      }
      return segments;
    }
    get canPopSelfOrChildren() {
      if (this[_pages][$length] > 1) {
        return true;
      } else if (this[_pages][$isNotEmpty] && this[_childControllers][$containsKey](this[_pages][$last].routeData.key)) {
        return dart.nullCheck(this[_childControllers][$_get](this[_pages][$last].routeData.key)).canPopSelfOrChildren;
      }
      return false;
    }
    get current() {
      let t6;
      t6 = this.currentChild;
      return t6 == null ? this.routeData : t6;
    }
    get currentChild() {
      if (this[_pages][$isNotEmpty]) {
        return this[_pages][$last].routeData;
      }
      return null;
    }
    get topMost() {
      if (this[_childControllers][$isNotEmpty]) {
        let topRouteKey = this[_pages][$last].routeData.key;
        if (this[_childControllers][$containsKey](topRouteKey)) {
          return dart.nullCheck(this[_childControllers][$_get](topRouteKey)).topMost;
        }
      }
      return this;
    }
    [_updateSharedPathData](opts) {
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[132] || CT.C132;
      let fragment = opts && 'fragment' in opts ? opts.fragment : "";
      let includeAncestors = opts && 'includeAncestors' in opts ? opts.includeAncestors : false;
      for (let index = 0; index < this[_pages][$length]; index = index + 1) {
        let data = this[_pages][$_get](index).routeData;
        let route = data.route;
        data[_updateRoute](route.copyWith({queryParams: new parameters.Parameters.new(queryParams), fragment: fragment}));
      }
      if (includeAncestors && this[_parent$] != null) {
        dart.nullCheck(this[_parent$])[_updateSharedPathData]({queryParams: queryParams, fragment: fragment, includeAncestors: includeAncestors});
      }
    }
    pop(T, result = null) {
      return async.async(core.bool, (function* pop() {
        let navigator = this[_navigatorKey].currentState;
        if (navigator == null) return new (T$.SynchronousFutureOfbool()).new(false);
        if (yield navigator.maybePop(T, result)) {
          return true;
        } else if (this[_parent$] != null) {
          return dart.nullCheck(this[_parent$]).pop(T, result);
        } else {
          return false;
        }
      }).bind(this));
    }
    popForced(T, result = null) {
      let navigator = this[_navigatorKey].currentState;
      if (navigator != null) {
        navigator.pop(T, result);
      }
    }
    removeLast() {
      return this[_removeLast]();
    }
    removeRoute(route, opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let pageIndex = this[_pages][$lastIndexWhere](dart.fn(p => p.routeKey[$_equals](route.key), T$.AutoRoutePageTobool()));
      if (pageIndex !== -1) {
        this[_pages][$removeAt](pageIndex);
      }
      this[_updateSharedPathData]({includeAncestors: true});
      if (this[_childControllers][$containsKey](route.key)) {
        this[_childControllers][$remove](route.key);
      }
      if (notify) {
        this.notifyListeners();
      }
    }
    [_removeLast](opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let didRemove = false;
      if (this[_pages][$isNotEmpty]) {
        this.removeRoute(this[_pages][$last].routeData);
        if (notify) {
          this.notifyListeners();
        }
        didRemove = true;
      }
      return didRemove;
    }
    get stack() {
      return T$.ListOfAutoRoutePage().unmodifiable(this[_pages]);
    }
    push(T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.nullable(T), (function* push() {
        return this[_findStackScope](route)[_push](T, route, {onFailure: onFailure});
      }).bind(this));
    }
    [_findStackScope](route) {
      if (this[_parent$] == null || this[_canHandleNavigation](route)) {
        return this;
      }
      let stackRouters = this[_getAncestors]()[$whereType](routing_controller.StackRouter);
      return stackRouters[$firstWhere](dart.fn(c => c[_canHandleNavigation](route), T$.StackRouterTobool()), {orElse: dart.fn(() => this, T$.VoidToStackRouter())});
    }
    [_popUntilOrPushAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.dynamic, (function* _popUntilOrPushAll() {
        let anchor = routes[$first];
        let anchorPage = utils['IterableExtenstion|lastOrNull'](auto_route_page.AutoRoutePage, this[_pages], dart.fn(p => p.routeKey[$_equals](anchor.key), T$.AutoRoutePageTobool()));
        if (anchorPage != null) {
          for (let candidate of T$.ListOfAutoRoutePage().unmodifiable(this[_pages])[$reversed]) {
            this[_pages][$removeLast]();
            if (candidate.routeKey[$_equals](anchorPage.routeKey)) {
              break;
            } else {
              if (this[_childControllers][$containsKey](candidate.routeKey)) {
                this[_childControllers][$remove](candidate.routeKey);
              }
            }
          }
        }
        return this[_pushAllGuarded](T$.ObjectN(), routes, {onFailure: onFailure, updateAncestorsPathData: false, returnLastRouteCompleter: false});
      }).bind(this));
    }
    [_push](T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      return async.async(dart.nullable(T), (function* _push() {
        if (!!this.managedByWidget) dart.assertFailed("Pages stack can be managed by either the Widget (AutoRouter.declarative) or the (StackRouter)", I[8], 704, 7, "!managedByWidget");
        let match = this[_matchOrReportFailure](route, onFailure);
        if (match == null) {
          return null;
        }
        if (yield this[_canNavigate](match, onFailure)) {
          this[_updateSharedPathData]({queryParams: route.rawQueryParams, fragment: route.fragment, includeAncestors: true});
          return this[_addEntry](T, match, {notify: notify});
        }
        return null;
      }).bind(this));
    }
    replace(T, route, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.removeLast();
      return scope[_push](T, route, {onFailure: onFailure});
    }
    pushAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      if (!routes[$isNotEmpty]) dart.assertFailed(null, I[8], 736, 12, "routes.isNotEmpty");
      return this[_findStackScope](routes[$first])[_pushAll](routes, {onFailure: onFailure, notify: true});
    }
    popAndPushAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      if (!routes[$isNotEmpty]) dart.assertFailed(null, I[8], 745, 12, "routes.isNotEmpty");
      let scope = this[_findStackScope](routes[$first]);
      scope.pop(T$.ObjectN());
      return scope[_pushAll](routes, {onFailure: T$.NavigationFailureToNvoid().as(onFailure), notify: true});
    }
    replaceAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](routes[$first]);
      scope[_pages][$clear]();
      return scope[_pushAll](routes, {onFailure: onFailure});
    }
    popUntilRoot() {
      let t6;
      if (!(this[_navigatorKey].currentState != null)) dart.assertFailed(null, I[8], 761, 12, "_navigatorKey.currentState != null");
      t6 = this[_navigatorKey].currentState;
      t6 == null ? null : t6.popUntil(dart.fn(route => route.isFirst, T$.RouteTobool()));
    }
    popAndPush(T, TO, route, opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.pop(TO, result);
      return scope[_push](T, route, {onFailure: onFailure});
    }
    removeUntil(predicate) {
      return this[_removeUntil](predicate);
    }
    popUntil(predicate) {
      let t6;
      t6 = this[_navigatorKey].currentState;
      t6 == null ? null : t6.popUntil(predicate);
    }
    [_removeUntil](predicate, opts) {
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let didRemove = false;
      for (let candidate of core.List.unmodifiable(this[_pages])[$reversed]) {
        if (predicate(routing_controller.RouteData.as(dart.dload(candidate, 'routeData')))) {
          break;
        } else {
          this[_removeLast]({notify: false});
          didRemove = true;
        }
      }
      if (didRemove && notify) {
        this.notifyListeners();
      }
      return didRemove;
    }
    removeWhere(predicate) {
      let didRemove = false;
      for (let entry of core.List.unmodifiable(this[_pages])) {
        if (predicate(routing_controller.RouteData.as(dart.dload(entry, 'routeData')))) {
          didRemove = true;
          this[_pages][$remove](entry);
        }
      }
      this.notifyListeners();
      return didRemove;
    }
    updateDeclarativeRoutes(routes) {
      return async.async(dart.void, (function* updateDeclarativeRoutes() {
        let t6;
        this[_pages][$clear]();
        for (let route of routes) {
          let match = this[_matchOrReportFailure](route);
          if (match == null) {
            break;
          }
          if (!utils.listNullOrEmpty(match.guards)) {
            dart.throw(assertions.FlutterError.new("Declarative routes can not have guards"));
          }
          let data = this[_createRouteData](match, this.routeData);
          this[_pages][$add]((t6 = data, this.pageBuilder(t6)));
        }
      }).bind(this));
    }
    [_pushAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      return async.async(dart.void, (function* _pushAll() {
        let matches = this[_matchAllOrReportFailure](routes, onFailure);
        if (matches != null) {
          this[_pushAllGuarded](T$.ObjectN(), matches, {onFailure: onFailure, notify: notify});
        }
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }).bind(this));
    }
    [_pushAllGuarded](T, routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let updateAncestorsPathData = opts && 'updateAncestorsPathData' in opts ? opts.updateAncestorsPathData : true;
      let returnLastRouteCompleter = opts && 'returnLastRouteCompleter' in opts ? opts.returnLastRouteCompleter : true;
      return async.async(dart.nullable(T), (function* _pushAllGuarded() {
        let t6;
        if (!!this.managedByWidget) dart.assertFailed("Pages stack can be managed by either the Widget (AutoRouter.declarative) or Router", I[8], 846, 7, "!managedByWidget");
        for (let i = 0; i < routes[$length]; i = i + 1) {
          let route = routes[$_get](i);
          if (yield this[_canNavigate](route, onFailure, {pendingRoutes: (t6 = routes[$toList](), (() => {
              t6[$removeAt](i);
              return t6;
            })())})) {
            if (i !== routes[$length] - 1) {
              this[_addEntry](T$.ObjectN(), route, {notify: false});
            } else {
              this[_updateSharedPathData]({queryParams: route.queryParams.rawMap, fragment: route.fragment, includeAncestors: updateAncestorsPathData});
              let completer = this[_addEntry](T, route, {notify: true});
              if (returnLastRouteCompleter) {
                return completer;
              }
            }
          } else {
            break;
          }
        }
        if (notify) {
          this.notifyListeners();
        }
        return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
      }).bind(this));
    }
    [_addEntry](T, route, opts) {
      let t6;
      let notify = opts && 'notify' in opts ? opts.notify : true;
      let data = this[_createRouteData](route, this.routeData);
      let page = (t6 = data, this.pageBuilder(t6));
      this[_pages][$add](page);
      if (notify) {
        this.notifyListeners();
      }
      return auto_route_page.AutoRoutePage$(T).as(page).popped;
    }
    [_canNavigate](route, onFailure, opts) {
      let pendingRoutes = opts && 'pendingRoutes' in opts ? opts.pendingRoutes : C[88] || CT.C88;
      return async.async(core.bool, (function* _canNavigate() {
        if (route.guards[$isEmpty]) {
          return true;
        }
        for (let guard of route.guards) {
          let completer = T$.CompleterOfbool().new();
          guard.onNavigation(new auto_route_guard.NavigationResolver.new(completer, route, {pendingRoutes: pendingRoutes}), this);
          if (!(yield completer.future)) {
            if (onFailure != null) {
              onFailure(new navigation_failure.RejectedByGuardFailure.new(route, guard));
            }
            return false;
          }
        }
        return true;
      }).bind(this));
    }
    navigateAll(routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return this[_navigateAll](routes, {onFailure: onFailure});
    }
    [_navigateAll](routes, opts) {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return async.async(dart.void, (function* _navigateAll$() {
        let t6, t6$, t6$0;
        if (routes[$isNotEmpty]) {
          if (!this.managedByWidget) {
            yield this[_popUntilOrPushAll](routes, {onFailure: onFailure});
          }
          let mayUpdateRoute = routes[$last];
          let mayUpdateController = this[_childControllers][$_get](mayUpdateRoute.key);
          if (mayUpdateController != null) {
            let newChildren = (t6 = mayUpdateRoute.children, t6 == null ? C[88] || CT.C88 : t6);
            if (mayUpdateController.managedByWidget) {
              if (routing_controller.StackRouter.is(mayUpdateController)) {
                t6$ = mayUpdateController.onNavigate;
                t6$ == null ? null : t6$(newChildren, false);
              } else if (routing_controller.TabsRouter.is(mayUpdateController) && newChildren[$isNotEmpty]) {
                t6$0 = mayUpdateController.onNavigate;
                t6$0 == null ? null : t6$0(newChildren[$last], false);
              }
            }
            return mayUpdateController[_navigateAll](newChildren, {onFailure: onFailure});
          } else if (mayUpdateRoute.hasChildren) {
            this[_pendingInitialRoutes][$_set](mayUpdateRoute.key, dart.nullCheck(mayUpdateRoute.children));
          }
        } else if (!this.managedByWidget) {
          this[_reset]();
        }
        return new (T$.SynchronousFutureOfvoid()).new(null);
      }).bind(this));
    }
    [_reset]() {
      this[_pages][$clear]();
      this[_childControllers][$clear]();
    }
    pushAndPopUntil(T, route, opts) {
      let predicate = opts && 'predicate' in opts ? opts.predicate : null;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findStackScope](route);
      scope.popUntil(predicate);
      return scope[_push](T, route, {onFailure: onFailure});
    }
    replaceNamed(T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.StackRouter, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        scope.router.removeLast();
        return scope.router[_pushAllGuarded](T, scope.matches, {onFailure: onFailure});
      }
      return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
    }
    pushNamed(T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      let scope = this[_findPathScopeOrReportFailure](routing_controller.StackRouter, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
      if (scope != null) {
        return scope.router[_pushAllGuarded](T, scope.matches, {onFailure: onFailure});
      }
      return new (synchronous_future.SynchronousFuture$(dart.nullable(T))).new(null);
    }
    pushPath(T, path, opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return this.pushNamed(T, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
    }
    popUntilRouteWithName(name) {
      this.popUntil(routes.ModalRoute.withName(name));
    }
    get hasEntries() {
      return this[_pages][$isNotEmpty];
    }
  };
  (routing_controller.StackRouter.new = function(opts) {
    let t6;
    let key = opts && 'key' in opts ? opts.key : null;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let initialPreMatchedRoutes = opts && 'initialPreMatchedRoutes' in opts ? opts.initialPreMatchedRoutes : null;
    this[key$] = key;
    this[onNavigate$0] = onNavigate;
    this[initialPreMatchedRoutes$] = initialPreMatchedRoutes;
    this[_navigatorKey] = (t6 = navigatorKey, t6 == null ? T$.GlobalKeyOfNavigatorState().new() : t6);
    this[_parent] = parent;
    routing_controller.StackRouter.__proto__.new.call(this);
    if (parent != null) {
      this.addListener(dart.bind(this.root, 'notifyListeners'));
    }
  }).prototype = routing_controller.StackRouter.prototype;
  dart.addTypeTests(routing_controller.StackRouter);
  dart.addTypeCaches(routing_controller.StackRouter);
  dart.setMethodSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getMethods(routing_controller.StackRouter.__proto__),
    [_updateSharedPathData]: dart.fnType(dart.void, [], {fragment: core.String, includeAncestors: core.bool, queryParams: core.Map$(core.String, dart.dynamic)}, {}),
    pop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    popForced: dart.gFnType(T => [dart.void, [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    removeLast: dart.fnType(core.bool, []),
    removeRoute: dart.fnType(dart.void, [routing_controller.RouteData], {notify: core.bool}, {}),
    [_removeLast]: dart.fnType(core.bool, [], {notify: core.bool}, {}),
    push: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    [_findStackScope]: dart.fnType(routing_controller.StackRouter, [page_route_info.PageRouteInfo]),
    [_popUntilOrPushAll]: dart.fnType(async.Future, [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_push]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    replace: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    pushAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    popAndPushAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.dynamic}, {}),
    replaceAll: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    popUntilRoot: dart.fnType(dart.void, []),
    popAndPush: dart.gFnType((T, TO) => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure])), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    removeUntil: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])]),
    popUntil: dart.fnType(dart.void, [dart.fnType(core.bool, [navigator.Route])]),
    [_removeUntil]: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])], {notify: core.bool}, {}),
    removeWhere: dart.fnType(core.bool, [dart.fnType(core.bool, [routing_controller.RouteData])]),
    updateDeclarativeRoutes: dart.fnType(dart.void, [core.List$(page_route_info.PageRouteInfo)]),
    [_pushAll]: dart.fnType(async.Future$(dart.void), [core.List$(page_route_info.PageRouteInfo)], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_pushAllGuarded]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.List$(route_match.RouteMatch)], {notify: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure])), returnLastRouteCompleter: core.bool, updateAncestorsPathData: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [_addEntry]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [route_match.RouteMatch], {notify: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [_canNavigate]: dart.fnType(async.Future$(core.bool), [route_match.RouteMatch, dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))], {pendingRoutes: core.List$(route_match.RouteMatch)}, {}),
    navigateAll: dart.fnType(async.Future$(dart.void), [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_navigateAll]: dart.fnType(async.Future$(dart.void), [core.List$(route_match.RouteMatch)], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}),
    [_reset]: dart.fnType(dart.void, []),
    pushAndPopUntil: dart.gFnType(T => [async.Future$(dart.nullable(T)), [page_route_info.PageRouteInfo], {onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {predicate: dart.fnType(core.bool, [navigator.Route])}], T => [dart.nullable(core.Object)]),
    replaceNamed: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    pushNamed: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    pushPath: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {includePrefixMatches: core.bool, onFailure: dart.nullable(dart.fnType(dart.void, [navigation_failure.NavigationFailure]))}, {}], T => [dart.nullable(core.Object)]),
    popUntilRouteWithName: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getGetters(routing_controller.StackRouter.__proto__),
    navigatorKey: framework.GlobalKey$(navigator.NavigatorState),
    currentSegments: core.List$(route_match.RouteMatch),
    canPopSelfOrChildren: core.bool,
    current: routing_controller.RouteData,
    currentChild: dart.nullable(routing_controller.RouteData),
    topMost: routing_controller.RoutingController,
    stack: core.List$(auto_route_page.AutoRoutePage),
    hasEntries: core.bool
  }));
  dart.setLibraryUri(routing_controller.StackRouter, I[9]);
  dart.setFieldSignature(routing_controller.StackRouter, () => ({
    __proto__: dart.getFields(routing_controller.StackRouter.__proto__),
    [_parent$]: dart.finalFieldType(dart.nullable(routing_controller.RoutingController)),
    key: dart.finalFieldType(key.LocalKey),
    [_navigatorKey]: dart.finalFieldType(framework.GlobalKey$(navigator.NavigatorState)),
    initialPreMatchedRoutes: dart.finalFieldType(dart.nullable(core.List$(route_match.RouteMatch))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(route_match.RouteMatch), core.bool])))
  }));
  auto_router_delegate.RootStackRouter = class RootStackRouter extends routing_controller.StackRouter {
    get routeData() {
      return new routing_controller.RouteData.new({router: this, route: C[128] || CT.C128});
    }
    get managedByWidget() {
      return this[_managedByWidget];
    }
    get pageBuilder() {
      return dart.bind(this, _pageBuilder);
    }
    delegate(opts) {
      let t6;
      let initialRoutes = opts && 'initialRoutes' in opts ? opts.initialRoutes : null;
      let initialDeepLink = opts && 'initialDeepLink' in opts ? opts.initialDeepLink : null;
      let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
      let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
      t6 = this[_lazyRootDelegate];
      return t6 == null ? this[_lazyRootDelegate] = new auto_router_delegate.AutoRouterDelegate.new(this, {initialDeepLink: initialDeepLink, initialRoutes: initialRoutes, navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers, placeholder: placeholder}) : t6;
    }
    defaultRouteParser(opts) {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      return new route_information_parser.DefaultRouteParser.new(this.matcher, {includePrefixMatches: includePrefixMatches});
    }
    [_pageBuilder](data) {
      let builder = this.pagesMap[$_get](data.name);
      if (!(builder != null)) dart.assertFailed(null, I[7], 63, 12, "builder != null");
      return auto_route_page.AutoRoutePage.as(dart.nullCheck(builder)(data));
    }
    get matcher() {
      return new route_matcher.RouteMatcher.new(this.routeCollection);
    }
    get routeCollection() {
      return route_matcher.RouteCollection.from(this.routes);
    }
  };
  (auto_router_delegate.RootStackRouter.new = function(navigatorKey = null) {
    this[_managedByWidget] = false;
    this[_lazyRootDelegate] = null;
    auto_router_delegate.RootStackRouter.__proto__.new.call(this, {key: C[127] || CT.C127, navigatorKey: navigatorKey});
    ;
  }).prototype = auto_router_delegate.RootStackRouter.prototype;
  dart.addTypeTests(auto_router_delegate.RootStackRouter);
  dart.addTypeCaches(auto_router_delegate.RootStackRouter);
  dart.setMethodSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getMethods(auto_router_delegate.RootStackRouter.__proto__),
    delegate: dart.fnType(auto_router_delegate.AutoRouterDelegate, [], {initialDeepLink: dart.nullable(core.String), initialRoutes: dart.nullable(core.List$(page_route_info.PageRouteInfo)), navRestorationScopeId: dart.nullable(core.String), navigatorObservers: dart.fnType(core.List$(navigator.NavigatorObserver), []), placeholder: dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))}, {}),
    defaultRouteParser: dart.fnType(route_information_parser.DefaultRouteParser, [], {includePrefixMatches: core.bool}, {}),
    [_pageBuilder]: dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData])
  }));
  dart.setGetterSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getGetters(auto_router_delegate.RootStackRouter.__proto__),
    routeData: routing_controller.RouteData,
    managedByWidget: core.bool,
    pageBuilder: dart.fnType(auto_route_page.AutoRoutePage, [routing_controller.RouteData]),
    matcher: route_matcher.RouteMatcher,
    routeCollection: route_matcher.RouteCollection
  }));
  dart.setLibraryUri(auto_router_delegate.RootStackRouter, I[6]);
  dart.setFieldSignature(auto_router_delegate.RootStackRouter, () => ({
    __proto__: dart.getFields(auto_router_delegate.RootStackRouter.__proto__),
    [_managedByWidget]: dart.fieldType(core.bool),
    [_lazyRootDelegate]: dart.fieldType(dart.nullable(auto_router_delegate.AutoRouterDelegate))
  }));
  var router$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.router");
  var navRestorationScopeId$0 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.navRestorationScopeId");
  var placeholder$0 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.placeholder");
  var navigatorObservers$3 = dart.privateName(auto_route_navigator, "AutoRouteNavigator.navigatorObservers");
  var didPop$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.didPop");
  var declarativeRoutesBuilder$ = dart.privateName(auto_route_navigator, "AutoRouteNavigator.declarativeRoutesBuilder");
  auto_route_navigator.AutoRouteNavigator = class AutoRouteNavigator extends framework.StatefulWidget {
    get router() {
      return this[router$];
    }
    set router(value) {
      super.router = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$0];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get placeholder() {
      return this[placeholder$0];
    }
    set placeholder(value) {
      super.placeholder = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$3];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get didPop() {
      return this[didPop$];
    }
    set didPop(value) {
      super.didPop = value;
    }
    get declarativeRoutesBuilder() {
      return this[declarativeRoutesBuilder$];
    }
    set declarativeRoutesBuilder(value) {
      super.declarativeRoutesBuilder = value;
    }
    createState() {
      return new auto_route_navigator._AutoRouteNavigatorState.new();
    }
  };
  (auto_route_navigator.AutoRouteNavigator.new = function(opts) {
    let router = opts && 'router' in opts ? opts.router : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let didPop = opts && 'didPop' in opts ? opts.didPop : null;
    let declarativeRoutesBuilder = opts && 'declarativeRoutesBuilder' in opts ? opts.declarativeRoutesBuilder : null;
    let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[router$] = router;
    this[navigatorObservers$3] = navigatorObservers;
    this[navRestorationScopeId$0] = navRestorationScopeId;
    this[didPop$] = didPop;
    this[declarativeRoutesBuilder$] = declarativeRoutesBuilder;
    this[placeholder$0] = placeholder;
    auto_route_navigator.AutoRouteNavigator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_route_navigator.AutoRouteNavigator.prototype;
  dart.addTypeTests(auto_route_navigator.AutoRouteNavigator);
  dart.addTypeCaches(auto_route_navigator.AutoRouteNavigator);
  dart.setMethodSignature(auto_route_navigator.AutoRouteNavigator, () => ({
    __proto__: dart.getMethods(auto_route_navigator.AutoRouteNavigator.__proto__),
    createState: dart.fnType(auto_route_navigator._AutoRouteNavigatorState, [])
  }));
  dart.setLibraryUri(auto_route_navigator.AutoRouteNavigator, I[10]);
  dart.setFieldSignature(auto_route_navigator.AutoRouteNavigator, () => ({
    __proto__: dart.getFields(auto_route_navigator.AutoRouteNavigator.__proto__),
    router: dart.finalFieldType(routing_controller.StackRouter),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    placeholder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
    navigatorObservers: dart.finalFieldType(core.List$(navigator.NavigatorObserver)),
    didPop: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    declarativeRoutesBuilder: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])))
  }));
  var _routesSnapshot = dart.privateName(auto_route_navigator, "_routesSnapshot");
  var _updateDeclarativeRoutes = dart.privateName(auto_route_navigator, "_updateDeclarativeRoutes");
  auto_route_navigator._AutoRouteNavigatorState = class _AutoRouteNavigatorState extends framework.State$(auto_route_navigator.AutoRouteNavigator) {
    didChangeDependencies() {
      super.didChangeDependencies();
      if (this.widget.declarativeRoutesBuilder != null && this[_routesSnapshot] == null) {
        this[_updateDeclarativeRoutes]();
      }
    }
    [_updateDeclarativeRoutes]() {
      let t8;
      let shouldNotify = false;
      let delegate = auto_router_delegate.AutoRouterDelegate.of(this.context);
      let newRoutes = dart.nullCheck(this.widget.declarativeRoutesBuilder)(this.context);
      if (!new equality.ListEquality.new().equals(newRoutes, this[_routesSnapshot])) {
        shouldNotify = true;
        this[_routesSnapshot] = newRoutes;
        this.widget.router.updateDeclarativeRoutes(newRoutes);
      } else if (!new equality.ListEquality.new().equals(delegate.urlState.segments, delegate.controller.currentSegments)) {
        shouldNotify = true;
      }
      if (shouldNotify) {
        t8 = binding.WidgetsBinding.instance;
        t8 == null ? null : t8.addPostFrameCallback(dart.fn(_ => {
          delegate.notifyUrlChanged();
        }, T$.DurationTovoid()));
      }
    }
    didUpdateWidget(oldWidget) {
      auto_route_navigator.AutoRouteNavigator.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.declarativeRoutesBuilder != null) {
        this[_updateDeclarativeRoutes]();
      }
    }
    build(context) {
      let t8;
      return new navigator.Navigator.new({key: this.widget.router.navigatorKey, observers: this.widget.navigatorObservers, restorationScopeId: (t8 = this.widget.navRestorationScopeId, t8 == null ? this.widget.router.routeData.name : t8), pages: this.widget.router.hasEntries ? this.widget.router.stack : T$.JSArrayOfPage().of([new auto_route_navigator._PlaceHolderPage.new(this.widget.placeholder)]), transitionDelegate: new auto_route_navigator._CustomTransitionDelegate.new(), onPopPage: dart.fn((route, result) => {
          let t8;
          if (!route.didPop(result)) {
            return false;
          }
          if (auto_route_page.AutoRoutePage.is(route.settings)) {
            let routeData = auto_route_page.AutoRoutePage.as(route.settings).routeData;
            this.widget.router.removeRoute(routeData);
            t8 = this.widget.didPop;
            t8 == null ? null : t8(routeData.route, result);
          }
          return true;
        }, T$.RouteAnddynamicTobool()), $creationLocationd_0dea112b090073317d4: C[135] || CT.C135});
    }
  };
  (auto_route_navigator._AutoRouteNavigatorState.new = function() {
    this[_routesSnapshot] = null;
    auto_route_navigator._AutoRouteNavigatorState.__proto__.new.call(this);
    ;
  }).prototype = auto_route_navigator._AutoRouteNavigatorState.prototype;
  dart.addTypeTests(auto_route_navigator._AutoRouteNavigatorState);
  dart.addTypeCaches(auto_route_navigator._AutoRouteNavigatorState);
  dart.setMethodSignature(auto_route_navigator._AutoRouteNavigatorState, () => ({
    __proto__: dart.getMethods(auto_route_navigator._AutoRouteNavigatorState.__proto__),
    [_updateDeclarativeRoutes]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_route_navigator._AutoRouteNavigatorState, I[10]);
  dart.setFieldSignature(auto_route_navigator._AutoRouteNavigatorState, () => ({
    __proto__: dart.getFields(auto_route_navigator._AutoRouteNavigatorState.__proto__),
    [_routesSnapshot]: dart.fieldType(dart.nullable(core.List$(page_route_info.PageRouteInfo)))
  }));
  var placeholder$1 = dart.privateName(auto_route_navigator, "_PlaceHolderPage.placeholder");
  auto_route_navigator._PlaceHolderPage = class _PlaceHolderPage extends navigator.Page {
    get placeholder() {
      return this[placeholder$1];
    }
    set placeholder(value) {
      super.placeholder = value;
    }
    createRoute(context) {
      return new pages.PageRouteBuilder.new({settings: this, pageBuilder: dart.fn((context, __, ___) => this.placeholder != null ? dart.nullCheck(this.placeholder)(context) : new container.Container.new({color: theme.Theme.of(context).scaffoldBackgroundColor, $creationLocationd_0dea112b090073317d4: C[144] || CT.C144}), T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget())});
    }
  };
  (auto_route_navigator._PlaceHolderPage.new = function(placeholder) {
    this[placeholder$1] = placeholder;
    auto_route_navigator._PlaceHolderPage.__proto__.new.call(this, {key: C[143] || CT.C143, name: "_placeHolder_"});
    ;
  }).prototype = auto_route_navigator._PlaceHolderPage.prototype;
  dart.addTypeTests(auto_route_navigator._PlaceHolderPage);
  dart.addTypeCaches(auto_route_navigator._PlaceHolderPage);
  dart.setMethodSignature(auto_route_navigator._PlaceHolderPage, () => ({
    __proto__: dart.getMethods(auto_route_navigator._PlaceHolderPage.__proto__),
    createRoute: dart.fnType(navigator.Route, [framework.BuildContext])
  }));
  dart.setLibraryUri(auto_route_navigator._PlaceHolderPage, I[10]);
  dart.setFieldSignature(auto_route_navigator._PlaceHolderPage, () => ({
    __proto__: dart.getFields(auto_route_navigator._PlaceHolderPage.__proto__),
    placeholder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext])))
  }));
  const _is__CustomTransitionDelegate_default = Symbol('_is__CustomTransitionDelegate_default');
  auto_route_navigator._CustomTransitionDelegate$ = dart.generic(T => {
    class _CustomTransitionDelegate extends navigator.TransitionDelegate$(T) {
      resolve(opts) {
        let newPageRouteHistory = opts && 'newPageRouteHistory' in opts ? opts.newPageRouteHistory : null;
        let locationToExitingPageRoute = opts && 'locationToExitingPageRoute' in opts ? opts.locationToExitingPageRoute : null;
        let pageRouteToPagelessRoutes = opts && 'pageRouteToPagelessRoutes' in opts ? opts.pageRouteToPagelessRoutes : null;
        let results = T$.JSArrayOfRouteTransitionRecord().of([]);
        function handleExitingRoute(location, isLast) {
          let exitingPageRoute = locationToExitingPageRoute[$_get](location);
          if (exitingPageRoute == null) return;
          if (exitingPageRoute.isWaitingForExitingDecision) {
            let hasPagelessRoute = pageRouteToPagelessRoutes[$containsKey](exitingPageRoute);
            let isLastExitingPageRoute = isLast && !locationToExitingPageRoute[$containsKey](exitingPageRoute);
            if (isLastExitingPageRoute && !hasPagelessRoute) {
              exitingPageRoute.markForPop(exitingPageRoute.route.currentResult);
            } else {
              exitingPageRoute.markForComplete(exitingPageRoute.route.currentResult);
            }
            if (hasPagelessRoute) {
              let pagelessRoutes = dart.nullCheck(pageRouteToPagelessRoutes[$_get](exitingPageRoute));
              for (let pagelessRoute of pagelessRoutes) {
                if (pagelessRoute.isWaitingForExitingDecision) {
                  if (isLastExitingPageRoute && pagelessRoute[$_equals](pagelessRoutes[$last])) {
                    pagelessRoute.markForPop(pagelessRoute.route.currentResult);
                  } else {
                    pagelessRoute.markForComplete(pagelessRoute.route.currentResult);
                  }
                }
              }
            }
          }
          results[$add](exitingPageRoute);
          handleExitingRoute(exitingPageRoute, isLast);
        }
        dart.fn(handleExitingRoute, T$.RouteTransitionRecordNAndboolTovoid());
        handleExitingRoute(null, newPageRouteHistory[$isEmpty]);
        for (let pageRoute of newPageRouteHistory) {
          let isLastIteration = newPageRouteHistory[$last][$_equals](pageRoute);
          let firstPageIsPlaceHolder = results[$isNotEmpty] && auto_route_navigator._PlaceHolderPage.is(results[$first].route.settings);
          if (pageRoute.isWaitingForEnteringDecision) {
            if (!locationToExitingPageRoute[$containsKey](pageRoute) && isLastIteration && !firstPageIsPlaceHolder) {
              pageRoute.markForPush();
            } else {
              pageRoute.markForAdd();
            }
          }
          results[$add](pageRoute);
          handleExitingRoute(pageRoute, isLastIteration);
        }
        return results;
      }
    }
    (_CustomTransitionDelegate.new = function() {
      _CustomTransitionDelegate.__proto__.new.call(this);
      ;
    }).prototype = _CustomTransitionDelegate.prototype;
    dart.addTypeTests(_CustomTransitionDelegate);
    _CustomTransitionDelegate.prototype[_is__CustomTransitionDelegate_default] = true;
    dart.addTypeCaches(_CustomTransitionDelegate);
    dart.setMethodSignature(_CustomTransitionDelegate, () => ({
      __proto__: dart.getMethods(_CustomTransitionDelegate.__proto__),
      resolve: dart.fnType(core.Iterable$(navigator.RouteTransitionRecord), [], {}, {locationToExitingPageRoute: core.Map$(dart.nullable(navigator.RouteTransitionRecord), navigator.RouteTransitionRecord), newPageRouteHistory: core.List$(navigator.RouteTransitionRecord), pageRouteToPagelessRoutes: core.Map$(dart.nullable(navigator.RouteTransitionRecord), core.List$(navigator.RouteTransitionRecord))})
    }));
    dart.setLibraryUri(_CustomTransitionDelegate, I[10]);
    return _CustomTransitionDelegate;
  });
  auto_route_navigator._CustomTransitionDelegate = auto_route_navigator._CustomTransitionDelegate$();
  dart.addTypeTests(auto_route_navigator._CustomTransitionDelegate, _is__CustomTransitionDelegate_default);
  var controller$0 = dart.privateName(controller_scope, "RouterScope.controller");
  var inheritableObserversBuilder$ = dart.privateName(controller_scope, "RouterScope.inheritableObserversBuilder");
  var segmentsHash$ = dart.privateName(controller_scope, "RouterScope.segmentsHash");
  var navigatorObservers$4 = dart.privateName(controller_scope, "RouterScope.navigatorObservers");
  controller_scope.RouterScope = class RouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$0];
    }
    set controller(value) {
      super.controller = value;
    }
    get inheritableObserversBuilder() {
      return this[inheritableObserversBuilder$];
    }
    set inheritableObserversBuilder(value) {
      super.inheritableObserversBuilder = value;
    }
    get segmentsHash() {
      return this[segmentsHash$];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$4];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    static of(context) {
      let scope = context.dependOnInheritedWidgetOfExactType(controller_scope.RouterScope);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("RouterScope operation requested with a context that does not include a RouterScope.\n" + "The context used to retrieve the Router must be that of a widget that " + "is a descendant of a RouterScope widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[11], 21, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'RouterScope operation requested with a context that does not include a RouterScope.\\n'\n            'The context used to retrieve the Router must be that of a widget that '\n            'is a descendant of a RouterScope widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope);
    }
    firstObserverOfType(T) {
      let typedObservers = this.navigatorObservers[$whereType](T);
      if (typedObservers[$isNotEmpty]) {
        return typedObservers[$first];
      } else {
        return null;
      }
    }
    updateShouldNotify(oldWidget) {
      controller_scope.RouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.RouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let inheritableObserversBuilder = opts && 'inheritableObserversBuilder' in opts ? opts.inheritableObserversBuilder : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$0] = controller;
    this[navigatorObservers$4] = navigatorObservers;
    this[inheritableObserversBuilder$] = inheritableObserversBuilder;
    this[segmentsHash$] = segmentsHash;
    controller_scope.RouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.RouterScope.prototype;
  dart.addTypeTests(controller_scope.RouterScope);
  dart.addTypeCaches(controller_scope.RouterScope);
  dart.setMethodSignature(controller_scope.RouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.RouterScope.__proto__),
    firstObserverOfType: dart.gFnType(T => [dart.nullable(T), []], T => [navigator.NavigatorObserver]),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.RouterScope, I[12]);
  dart.setFieldSignature(controller_scope.RouterScope, () => ({
    __proto__: dart.getFields(controller_scope.RouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.RoutingController),
    inheritableObserversBuilder: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    segmentsHash: dart.finalFieldType(core.int),
    navigatorObservers: dart.finalFieldType(core.List$(navigator.NavigatorObserver))
  }));
  var controller$1 = dart.privateName(controller_scope, "StackRouterScope.controller");
  var segmentsHash$0 = dart.privateName(controller_scope, "StackRouterScope.segmentsHash");
  controller_scope.StackRouterScope = class StackRouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$1];
    }
    set controller(value) {
      super.controller = value;
    }
    get segmentsHash() {
      return this[segmentsHash$0];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    static of(context) {
      return context.dependOnInheritedWidgetOfExactType(controller_scope.StackRouterScope);
    }
    updateShouldNotify(oldWidget) {
      controller_scope.StackRouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.StackRouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$1] = controller;
    this[segmentsHash$0] = segmentsHash;
    controller_scope.StackRouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.StackRouterScope.prototype;
  dart.addTypeTests(controller_scope.StackRouterScope);
  dart.addTypeCaches(controller_scope.StackRouterScope);
  dart.setMethodSignature(controller_scope.StackRouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.StackRouterScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.StackRouterScope, I[12]);
  dart.setFieldSignature(controller_scope.StackRouterScope, () => ({
    __proto__: dart.getFields(controller_scope.StackRouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.StackRouter),
    segmentsHash: dart.finalFieldType(core.int)
  }));
  var controller$2 = dart.privateName(controller_scope, "TabsRouterScope.controller");
  var segmentsHash$1 = dart.privateName(controller_scope, "TabsRouterScope.segmentsHash");
  controller_scope.TabsRouterScope = class TabsRouterScope extends framework.InheritedWidget {
    get controller() {
      return this[controller$2];
    }
    set controller(value) {
      super.controller = value;
    }
    get segmentsHash() {
      return this[segmentsHash$1];
    }
    set segmentsHash(value) {
      super.segmentsHash = value;
    }
    static of(context) {
      return context.dependOnInheritedWidgetOfExactType(controller_scope.TabsRouterScope);
    }
    updateShouldNotify(oldWidget) {
      controller_scope.TabsRouterScope.as(oldWidget);
      return this.segmentsHash !== oldWidget.segmentsHash;
    }
  };
  (controller_scope.TabsRouterScope.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let segmentsHash = opts && 'segmentsHash' in opts ? opts.segmentsHash : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[segmentsHash$1] = segmentsHash;
    this[controller$2] = controller;
    controller_scope.TabsRouterScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = controller_scope.TabsRouterScope.prototype;
  dart.addTypeTests(controller_scope.TabsRouterScope);
  dart.addTypeCaches(controller_scope.TabsRouterScope);
  dart.setMethodSignature(controller_scope.TabsRouterScope, () => ({
    __proto__: dart.getMethods(controller_scope.TabsRouterScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(controller_scope.TabsRouterScope, I[12]);
  dart.setFieldSignature(controller_scope.TabsRouterScope, () => ({
    __proto__: dart.getFields(controller_scope.TabsRouterScope.__proto__),
    controller: dart.finalFieldType(routing_controller.TabsRouter),
    segmentsHash: dart.finalFieldType(core.int)
  }));
  var navigatorObservers$5 = dart.privateName(auto_router, "AutoRouter.navigatorObservers");
  var builder$1 = dart.privateName(auto_router, "AutoRouter.builder");
  var navRestorationScopeId$1 = dart.privateName(auto_router, "AutoRouter.navRestorationScopeId");
  var inheritNavigatorObservers$1 = dart.privateName(auto_router, "AutoRouter.inheritNavigatorObservers");
  var navigatorKey$ = dart.privateName(auto_router, "AutoRouter.navigatorKey");
  auto_router.AutoRouter = class AutoRouter extends framework.StatefulWidget {
    get navigatorObservers() {
      return this[navigatorObservers$5];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$1];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$1];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get navigatorKey() {
      return this[navigatorKey$];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    static declarative(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
      let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
      let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
      return new auto_router._DeclarativeAutoRouter.new({onPopRoute: onPopRoute, navigatorKey: navigatorKey, navRestorationScopeId: navRestorationScopeId, navigatorObservers: navigatorObservers, onNavigate: onNavigate, routes: routes, $creationLocationd_0dea112b090073317d4: C[147] || CT.C147});
    }
    createState() {
      return new auto_router.AutoRouterState.new();
    }
    static of(context) {
      let scope = controller_scope.StackRouterScope.of(context);
      if (!dart.fn(() => {
        if (scope == null) {
          dart.throw(assertions.FlutterError.new("AutoRouter operation requested with a context that does not include an AutoRouter.\n" + "The context used to retrieve the Router must be that of a widget that " + "is a descendant of an AutoRouter widget."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[13], 53, 12, "() {\n      if (scope == null) {\n        throw FlutterError(\n            'AutoRouter operation requested with a context that does not include an AutoRouter.\\n'\n            'The context used to retrieve the Router must be that of a widget that '\n            'is a descendant of an AutoRouter widget.');\n      }\n      return true;\n    }()");
      return dart.nullCheck(scope).controller;
    }
    static innerRouterOf(context, routeName) {
      return auto_router.AutoRouter.of(context).innerRouterOf(routing_controller.StackRouter, routeName);
    }
  };
  (auto_router.AutoRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[navigatorObservers$5] = navigatorObservers;
    this[builder$1] = builder;
    this[navRestorationScopeId$1] = navRestorationScopeId;
    this[navigatorKey$] = navigatorKey;
    this[inheritNavigatorObservers$1] = inheritNavigatorObservers;
    auto_router.AutoRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.AutoRouter.prototype;
  dart.addTypeTests(auto_router.AutoRouter);
  dart.addTypeCaches(auto_router.AutoRouter);
  dart.setMethodSignature(auto_router.AutoRouter, () => ({
    __proto__: dart.getMethods(auto_router.AutoRouter.__proto__),
    createState: dart.fnType(auto_router.AutoRouterState, [])
  }));
  dart.setLibraryUri(auto_router.AutoRouter, I[14]);
  dart.setFieldSignature(auto_router.AutoRouter, () => ({
    __proto__: dart.getFields(auto_router.AutoRouter.__proto__),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget]))),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator.NavigatorState)))
  }));
  var _controller$ = dart.privateName(auto_router, "_controller");
  var __AutoRouterState__navigatorObservers = dart.privateName(auto_router, "_#AutoRouterState#_navigatorObservers");
  var __AutoRouterState__inheritableObserversBuilder = dart.privateName(auto_router, "_#AutoRouterState#_inheritableObserversBuilder");
  var __AutoRouterState__parentController = dart.privateName(auto_router, "_#AutoRouterState#_parentController");
  var _navigatorObservers$0 = dart.privateName(auto_router, "_navigatorObservers");
  var _inheritableObserversBuilder$ = dart.privateName(auto_router, "_inheritableObserversBuilder");
  var _parentController$ = dart.privateName(auto_router, "_parentController");
  var _rebuildListener$ = dart.privateName(auto_router, "_rebuildListener");
  auto_router.AutoRouterState = class AutoRouterState extends framework.State$(auto_router.AutoRouter) {
    get controller() {
      return this[_controller$];
    }
    get [_navigatorObservers$0]() {
      let t8;
      t8 = this[__AutoRouterState__navigatorObservers];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t8;
    }
    set [_navigatorObservers$0](t8) {
      this[__AutoRouterState__navigatorObservers] = t8;
    }
    get [_inheritableObserversBuilder$]() {
      let t9;
      t9 = this[__AutoRouterState__inheritableObserversBuilder];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t9;
    }
    set [_inheritableObserversBuilder$](t9) {
      this[__AutoRouterState__inheritableObserversBuilder] = t9;
    }
    get [_parentController$]() {
      let t10;
      t10 = this[__AutoRouterState__parentController];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t10;
    }
    set [_parentController$](t10) {
      this[__AutoRouterState__parentController] = t10;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentData = route_data_scope.RouteDataScope.of(this.context);
      let parentScope = controller_scope.RouterScope.of(this.context);
      if (this[_controller$] == null) {
        this[_inheritableObserversBuilder$] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers$0] = this[_inheritableObserversBuilder$]();
        this[_parentController$] = parentScope.controller;
        this[_controller$] = new routing_controller.NestedStackRouter.new({parent: this[_parentController$], key: parentData.key, routeData: parentData, navigatorKey: this.widget.navigatorKey, routeCollection: this[_parentController$].routeCollection.subCollectionOf(parentData.name), pageBuilder: this[_parentController$].pageBuilder, preMatchedRoutes: parentData.preMatchedPendingRoutes});
        this[_parentController$].attachChildController(dart.nullCheck(this[_controller$]));
        dart.nullCheck(this[_controller$]).addListener(dart.bind(this, _rebuildListener$));
      }
    }
    [_rebuildListener$]() {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    build(context) {
      if (!(this[_controller$] != null)) dart.assertFailed(null, I[13], 120, 12, "_controller != null");
      let navigator = new auto_route_navigator.AutoRouteNavigator.new({router: dart.nullCheck(this[_controller$]), navRestorationScopeId: this.widget.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$0], $creationLocationd_0dea112b090073317d4: C[155] || CT.C155});
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller$]), inheritableObserversBuilder: this[_inheritableObserversBuilder$], navigatorObservers: this[_navigatorObservers$0], segmentsHash: segmentsHash, child: new controller_scope.StackRouterScope.new({controller: dart.nullCheck(this[_controller$]), segmentsHash: segmentsHash, child: this.widget.builder == null ? navigator : new basic.Builder.new({builder: dart.fn(ctx => dart.nullCheck(this.widget.builder)(ctx, navigator), T$.BuildContextToWidget()), $creationLocationd_0dea112b090073317d4: C[160] || CT.C160}), $creationLocationd_0dea112b090073317d4: C[163] || CT.C163}), $creationLocationd_0dea112b090073317d4: C[167] || CT.C167});
    }
    dispose() {
      super.dispose();
      if (this[_controller$] != null) {
        dart.nullCheck(this[_controller$]).removeListener(dart.bind(this, _rebuildListener$));
        dart.nullCheck(this[_controller$]).dispose();
        this[_parentController$].removeChildController(dart.nullCheck(this[_controller$]));
        this[_controller$] = null;
      }
    }
  };
  (auto_router.AutoRouterState.new = function() {
    this[_controller$] = null;
    this[__AutoRouterState__navigatorObservers] = null;
    this[__AutoRouterState__inheritableObserversBuilder] = null;
    this[__AutoRouterState__parentController] = null;
    auto_router.AutoRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_router.AutoRouterState.prototype;
  dart.addTypeTests(auto_router.AutoRouterState);
  dart.addTypeCaches(auto_router.AutoRouterState);
  dart.setMethodSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getMethods(auto_router.AutoRouterState.__proto__),
    [_rebuildListener$]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getGetters(auto_router.AutoRouterState.__proto__),
    controller: dart.nullable(routing_controller.StackRouter),
    [_navigatorObservers$0]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setSetterSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getSetters(auto_router.AutoRouterState.__proto__),
    [_navigatorObservers$0]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setLibraryUri(auto_router.AutoRouterState, I[14]);
  dart.setFieldSignature(auto_router.AutoRouterState, () => ({
    __proto__: dart.getFields(auto_router.AutoRouterState.__proto__),
    [_controller$]: dart.fieldType(dart.nullable(routing_controller.StackRouter)),
    [__AutoRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    [__AutoRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator.NavigatorObserver), []))),
    [__AutoRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController))
  }));
  var routes$1 = dart.privateName(auto_router, "_DeclarativeAutoRouter.routes");
  var onPopRoute$ = dart.privateName(auto_router, "_DeclarativeAutoRouter.onPopRoute");
  var navigatorObservers$6 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navigatorObservers");
  var navRestorationScopeId$2 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navRestorationScopeId");
  var inheritNavigatorObservers$2 = dart.privateName(auto_router, "_DeclarativeAutoRouter.inheritNavigatorObservers");
  var navigatorKey$0 = dart.privateName(auto_router, "_DeclarativeAutoRouter.navigatorKey");
  var onNavigate$1 = dart.privateName(auto_router, "_DeclarativeAutoRouter.onNavigate");
  auto_router._DeclarativeAutoRouter = class _DeclarativeAutoRouter extends framework.StatefulWidget {
    get routes() {
      return this[routes$1];
    }
    set routes(value) {
      super.routes = value;
    }
    get onPopRoute() {
      return this[onPopRoute$];
    }
    set onPopRoute(value) {
      super.onPopRoute = value;
    }
    get navigatorObservers() {
      return this[navigatorObservers$6];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get navRestorationScopeId() {
      return this[navRestorationScopeId$2];
    }
    set navRestorationScopeId(value) {
      super.navRestorationScopeId = value;
    }
    get inheritNavigatorObservers() {
      return this[inheritNavigatorObservers$2];
    }
    set inheritNavigatorObservers(value) {
      super.inheritNavigatorObservers = value;
    }
    get navigatorKey() {
      return this[navigatorKey$0];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    get onNavigate() {
      return this[onNavigate$1];
    }
    set onNavigate(value) {
      super.onNavigate = value;
    }
    createState() {
      return new auto_router._DeclarativeAutoRouterState.new();
    }
  };
  (auto_router._DeclarativeAutoRouter.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[9] || CT.C9;
    let onPopRoute = opts && 'onPopRoute' in opts ? opts.onPopRoute : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let navRestorationScopeId = opts && 'navRestorationScopeId' in opts ? opts.navRestorationScopeId : null;
    let inheritNavigatorObservers = opts && 'inheritNavigatorObservers' in opts ? opts.inheritNavigatorObservers : true;
    let onNavigate = opts && 'onNavigate' in opts ? opts.onNavigate : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[routes$1] = routes;
    this[navigatorObservers$6] = navigatorObservers;
    this[onPopRoute$] = onPopRoute;
    this[navigatorKey$0] = navigatorKey;
    this[navRestorationScopeId$2] = navRestorationScopeId;
    this[inheritNavigatorObservers$2] = inheritNavigatorObservers;
    this[onNavigate$1] = onNavigate;
    auto_router._DeclarativeAutoRouter.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router._DeclarativeAutoRouter.prototype;
  dart.addTypeTests(auto_router._DeclarativeAutoRouter);
  dart.addTypeCaches(auto_router._DeclarativeAutoRouter);
  dart.setMethodSignature(auto_router._DeclarativeAutoRouter, () => ({
    __proto__: dart.getMethods(auto_router._DeclarativeAutoRouter.__proto__),
    createState: dart.fnType(auto_router._DeclarativeAutoRouterState, [])
  }));
  dart.setLibraryUri(auto_router._DeclarativeAutoRouter, I[14]);
  dart.setFieldSignature(auto_router._DeclarativeAutoRouter, () => ({
    __proto__: dart.getFields(auto_router._DeclarativeAutoRouter.__proto__),
    routes: dart.finalFieldType(dart.fnType(core.List$(page_route_info.PageRouteInfo), [framework.BuildContext])),
    onPopRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [route_match.RouteMatch, dart.dynamic]))),
    navigatorObservers: dart.finalFieldType(dart.fnType(core.List$(navigator.NavigatorObserver), [])),
    navRestorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    inheritNavigatorObservers: dart.finalFieldType(core.bool),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator.NavigatorState))),
    onNavigate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(route_match.RouteMatch), core.bool])))
  }));
  var ___DeclarativeAutoRouterState__heroController = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_heroController");
  var ___DeclarativeAutoRouterState__navigatorObservers = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_navigatorObservers");
  var ___DeclarativeAutoRouterState__inheritableObserversBuilder = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_inheritableObserversBuilder");
  var ___DeclarativeAutoRouterState__parentController = dart.privateName(auto_router, "_#_DeclarativeAutoRouterState#_parentController");
  var _heroController = dart.privateName(auto_router, "_heroController");
  auto_router._DeclarativeAutoRouterState = class _DeclarativeAutoRouterState extends framework.State$(auto_router._DeclarativeAutoRouter) {
    get [_heroController]() {
      let t11;
      t11 = this[___DeclarativeAutoRouterState__heroController];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_heroController")) : t11;
    }
    set [_heroController](t11) {
      this[___DeclarativeAutoRouterState__heroController] = t11;
    }
    get controller() {
      return this[_controller$];
    }
    get [_navigatorObservers$0]() {
      let t12;
      t12 = this[___DeclarativeAutoRouterState__navigatorObservers];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_navigatorObservers")) : t12;
    }
    set [_navigatorObservers$0](t12) {
      this[___DeclarativeAutoRouterState__navigatorObservers] = t12;
    }
    get [_inheritableObserversBuilder$]() {
      let t13;
      t13 = this[___DeclarativeAutoRouterState__inheritableObserversBuilder];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_inheritableObserversBuilder")) : t13;
    }
    set [_inheritableObserversBuilder$](t13) {
      this[___DeclarativeAutoRouterState__inheritableObserversBuilder] = t13;
    }
    get [_parentController$]() {
      let t14;
      t14 = this[___DeclarativeAutoRouterState__parentController];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_parentController")) : t14;
    }
    set [_parentController$](t14) {
      this[___DeclarativeAutoRouterState__parentController] = t14;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      let parentData = route_data_scope.RouteDataScope.of(this.context);
      if (this[_controller$] == null) {
        this[_heroController] = new heroes.HeroController.new();
        let parentScope = controller_scope.RouterScope.of(this.context);
        this[_inheritableObserversBuilder$] = dart.fn(() => {
          let observers = this.widget.navigatorObservers();
          if (!this.widget.inheritNavigatorObservers) {
            return observers;
          }
          let inheritedObservers = parentScope.inheritableObserversBuilder();
          return inheritedObservers[$plus](observers);
        }, T$.VoidToListOfNavigatorObserver());
        this[_navigatorObservers$0] = this[_inheritableObserversBuilder$]();
        this[_parentController$] = parentScope.controller;
        this[_controller$] = new routing_controller.NestedStackRouter.new({parent: this[_parentController$], key: parentData.key, routeData: parentData, managedByWidget: true, onRoutes: this.widget.onNavigate, navigatorKey: this.widget.navigatorKey, preMatchedRoutes: parentData.preMatchedPendingRoutes, routeCollection: this[_parentController$].routeCollection.subCollectionOf(parentData.name), pageBuilder: this[_parentController$].pageBuilder});
        this[_parentController$].attachChildController(dart.nullCheck(this[_controller$]));
      }
    }
    dispose() {
      super.dispose();
      if (this[_controller$] != null) {
        dart.nullCheck(this[_controller$]).dispose();
        this[_parentController$].removeChildController(dart.nullCheck(this[_controller$]));
        this[_controller$] = null;
      }
    }
    build(context) {
      if (!(this[_controller$] != null)) dart.assertFailed(null, I[13], 238, 12, "_controller != null");
      let segmentsHash = dart.nullCheck(this.controller).currentSegmentsHash;
      return new controller_scope.RouterScope.new({controller: dart.nullCheck(this[_controller$]), inheritableObserversBuilder: this[_inheritableObserversBuilder$], navigatorObservers: this[_navigatorObservers$0], segmentsHash: segmentsHash, child: new navigator.HeroControllerScope.new({controller: this[_heroController], child: new auto_route_navigator.AutoRouteNavigator.new({router: dart.nullCheck(this[_controller$]), declarativeRoutesBuilder: this.widget.routes, navRestorationScopeId: this.widget.navRestorationScopeId, navigatorObservers: this[_navigatorObservers$0], didPop: this.widget.onPopRoute, $creationLocationd_0dea112b090073317d4: C[173] || CT.C173}), $creationLocationd_0dea112b090073317d4: C[180] || CT.C180}), $creationLocationd_0dea112b090073317d4: C[184] || CT.C184});
    }
  };
  (auto_router._DeclarativeAutoRouterState.new = function() {
    this[_controller$] = null;
    this[___DeclarativeAutoRouterState__heroController] = null;
    this[___DeclarativeAutoRouterState__navigatorObservers] = null;
    this[___DeclarativeAutoRouterState__inheritableObserversBuilder] = null;
    this[___DeclarativeAutoRouterState__parentController] = null;
    auto_router._DeclarativeAutoRouterState.__proto__.new.call(this);
    ;
  }).prototype = auto_router._DeclarativeAutoRouterState.prototype;
  dart.addTypeTests(auto_router._DeclarativeAutoRouterState);
  dart.addTypeCaches(auto_router._DeclarativeAutoRouterState);
  dart.setMethodSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getMethods(auto_router._DeclarativeAutoRouterState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getGetters(auto_router._DeclarativeAutoRouterState.__proto__),
    [_heroController]: heroes.HeroController,
    controller: dart.nullable(routing_controller.StackRouter),
    [_navigatorObservers$0]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setSetterSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getSetters(auto_router._DeclarativeAutoRouterState.__proto__),
    [_heroController]: heroes.HeroController,
    [_navigatorObservers$0]: core.List$(navigator.NavigatorObserver),
    [_inheritableObserversBuilder$]: dart.fnType(core.List$(navigator.NavigatorObserver), []),
    [_parentController$]: routing_controller.RoutingController
  }));
  dart.setLibraryUri(auto_router._DeclarativeAutoRouterState, I[14]);
  dart.setFieldSignature(auto_router._DeclarativeAutoRouterState, () => ({
    __proto__: dart.getFields(auto_router._DeclarativeAutoRouterState.__proto__),
    [_controller$]: dart.fieldType(dart.nullable(routing_controller.StackRouter)),
    [___DeclarativeAutoRouterState__heroController]: dart.fieldType(dart.nullable(heroes.HeroController)),
    [___DeclarativeAutoRouterState__navigatorObservers]: dart.fieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    [___DeclarativeAutoRouterState__inheritableObserversBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(navigator.NavigatorObserver), []))),
    [___DeclarativeAutoRouterState__parentController]: dart.fieldType(dart.nullable(routing_controller.RoutingController))
  }));
  auto_router.EmptyRouterPage = class EmptyRouterPage extends auto_router.AutoRouter {};
  (auto_router.EmptyRouterPage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    auto_router.EmptyRouterPage.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.EmptyRouterPage.prototype;
  dart.addTypeTests(auto_router.EmptyRouterPage);
  dart.addTypeCaches(auto_router.EmptyRouterPage);
  dart.setLibraryUri(auto_router.EmptyRouterPage, I[14]);
  auto_router.EmptyRouterScreen = class EmptyRouterScreen extends auto_router.AutoRouter {};
  (auto_router.EmptyRouterScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    auto_router.EmptyRouterScreen.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = auto_router.EmptyRouterScreen.prototype;
  dart.addTypeTests(auto_router.EmptyRouterScreen);
  dart.addTypeCaches(auto_router.EmptyRouterScreen);
  dart.setLibraryUri(auto_router.EmptyRouterScreen, I[14]);
  auto_router_x['AutoRouterX|get#router'] = function AutoRouterX$124get$35router($this) {
    return auto_router.AutoRouter.of($this);
  };
  auto_router_x['AutoRouterX|pushRoute'] = function AutoRouterX$124pushRoute(T, $this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return auto_router_x['AutoRouterX|get#router']($this).push(T, route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#pushRoute'] = function AutoRouterX$124get$35pushRoute($this) {
    return dart.fn((T, route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|pushRoute'](T, $this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfTN());
  };
  auto_router_x['AutoRouterX|replaceRoute'] = function AutoRouterX$124replaceRoute(T, $this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return auto_router_x['AutoRouterX|get#router']($this).replace(T, route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#replaceRoute'] = function AutoRouterX$124get$35replaceRoute($this) {
    return dart.fn((T, route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|replaceRoute'](T, $this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfTN());
  };
  auto_router_x['AutoRouterX|popRoute'] = function AutoRouterX$124popRoute(T, $this, result = null) {
    return auto_router_x['AutoRouterX|get#router']($this).pop(T, result);
  };
  auto_router_x['AutoRouterX|get#popRoute'] = function AutoRouterX$124get$35popRoute($this) {
    return dart.fn((T, result = null) => auto_router_x['AutoRouterX|popRoute'](T, $this, result), T$.TNToFutureOfbool());
  };
  auto_router_x['AutoRouterX|navigateTo'] = function AutoRouterX$124navigateTo($this, route, opts) {
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return controller_scope.RouterScope.of($this).controller.navigate(route, {onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#navigateTo'] = function AutoRouterX$124get$35navigateTo($this) {
    return dart.fn((route, opts) => {
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|navigateTo']($this, route, {onFailure: onFailure});
    }, T$.PageRouteInfo__ToFutureOfvoid());
  };
  auto_router_x['AutoRouterX|navigateNamedTo'] = function AutoRouterX$124navigateNamedTo($this, path, opts) {
    let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
    let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
    return controller_scope.RouterScope.of($this).controller.navigateNamed(path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
  };
  auto_router_x['AutoRouterX|get#navigateNamedTo'] = function AutoRouterX$124get$35navigateNamedTo($this) {
    return dart.fn((path, opts) => {
      let includePrefixMatches = opts && 'includePrefixMatches' in opts ? opts.includePrefixMatches : false;
      let onFailure = opts && 'onFailure' in opts ? opts.onFailure : null;
      return auto_router_x['AutoRouterX|navigateNamedTo']($this, path, {includePrefixMatches: includePrefixMatches, onFailure: onFailure});
    }, T$.String__ToFutureOfvoid());
  };
  auto_router_x['AutoRouterX|get#tabsRouter'] = function AutoRouterX$124get$35tabsRouter($this) {
    return auto_tabs_router.AutoTabsRouter.of($this);
  };
  auto_router_x['AutoRouterX|get#topRoute'] = function AutoRouterX$124get$35topRoute($this) {
    return auto_router_x['AutoRouterX|get#router']($this).topRoute;
  };
  auto_router_x['AutoRouterX|innerRouterOf'] = function AutoRouterX$124innerRouterOf(T, $this, routeKey) {
    return controller_scope.RouterScope.of($this).controller.innerRouterOf(T, routeKey);
  };
  auto_router_x['AutoRouterX|get#innerRouterOf'] = function AutoRouterX$124get$35innerRouterOf($this) {
    return dart.fn((T, routeKey) => auto_router_x['AutoRouterX|innerRouterOf'](T, $this, routeKey), T$.StringToTN());
  };
  auto_router_x['AutoRouterX|get#routeData'] = function AutoRouterX$124get$35routeData($this) {
    return routing_controller.RouteData.of($this);
  };
  var name$ = dart.privateName(route_config, "RouteConfig.name");
  var path$ = dart.privateName(route_config, "RouteConfig.path");
  var fullMatch$ = dart.privateName(route_config, "RouteConfig.fullMatch");
  var redirectTo$ = dart.privateName(route_config, "RouteConfig.redirectTo");
  var guards$ = dart.privateName(route_config, "RouteConfig.guards");
  var usesPathAsKey$ = dart.privateName(route_config, "RouteConfig.usesPathAsKey");
  var _children = dart.privateName(route_config, "_children");
  route_config.RouteConfig = class RouteConfig extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get fullMatch() {
      return this[fullMatch$];
    }
    set fullMatch(value) {
      super.fullMatch = value;
    }
    get redirectTo() {
      return this[redirectTo$];
    }
    set redirectTo(value) {
      super.redirectTo = value;
    }
    get guards() {
      return this[guards$];
    }
    set guards(value) {
      super.guards = value;
    }
    get usesPathAsKey() {
      return this[usesPathAsKey$];
    }
    set usesPathAsKey(value) {
      super.usesPathAsKey = value;
    }
    get hasSubTree() {
      return this[_children] != null;
    }
    get children() {
      return this[_children];
    }
    get isRedirect() {
      return this.redirectTo != null;
    }
    toString() {
      return "RouteConfig{name: " + this.name + "}";
    }
  };
  (route_config.RouteConfig.new = function(name, opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let usesPathAsKey = opts && 'usesPathAsKey' in opts ? opts.usesPathAsKey : false;
    let guards = opts && 'guards' in opts ? opts.guards : C[129] || CT.C129;
    let fullMatch = opts && 'fullMatch' in opts ? opts.fullMatch : false;
    let redirectTo = opts && 'redirectTo' in opts ? opts.redirectTo : null;
    let children = opts && 'children' in opts ? opts.children : null;
    this[name$] = name;
    this[path$] = path;
    this[usesPathAsKey$] = usesPathAsKey;
    this[guards$] = guards;
    this[fullMatch$] = fullMatch;
    this[redirectTo$] = redirectTo;
    this[_children] = children != null ? route_matcher.RouteCollection.from(children) : null;
    ;
  }).prototype = route_config.RouteConfig.prototype;
  dart.addTypeTests(route_config.RouteConfig);
  dart.addTypeCaches(route_config.RouteConfig);
  dart.setGetterSignature(route_config.RouteConfig, () => ({
    __proto__: dart.getGetters(route_config.RouteConfig.__proto__),
    hasSubTree: core.bool,
    children: dart.nullable(route_matcher.RouteCollection),
    isRedirect: core.bool
  }));
  dart.setLibraryUri(route_config.RouteConfig, I[15]);
  dart.setFieldSignature(route_config.RouteConfig, () => ({
    __proto__: dart.getFields(route_config.RouteConfig.__proto__),
    name: dart.finalFieldType(core.String),
    path: dart.finalFieldType(core.String),
    fullMatch: dart.finalFieldType(core.bool),
    [_children]: dart.finalFieldType(dart.nullable(route_matcher.RouteCollection)),
    redirectTo: dart.finalFieldType(dart.nullable(core.String)),
    guards: dart.finalFieldType(core.List$(auto_route_guard.AutoRouteGuard)),
    usesPathAsKey: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(route_config.RouteConfig, ['toString']);
  auto_route_observer.AutoRouterObserver = class AutoRouterObserver extends navigator.NavigatorObserver {
    didInitTabRoute(route, previousRoute) {
    }
    didChangeTabRoute(route, previousRoute) {
    }
  };
  (auto_route_observer.AutoRouterObserver.new = function() {
    auto_route_observer.AutoRouterObserver.__proto__.new.call(this);
    ;
  }).prototype = auto_route_observer.AutoRouterObserver.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouterObserver);
  dart.addTypeCaches(auto_route_observer.AutoRouterObserver);
  dart.setMethodSignature(auto_route_observer.AutoRouterObserver, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouterObserver.__proto__),
    didInitTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute, dart.nullable(auto_route_observer.TabPageRoute)]),
    didChangeTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute, auto_route_observer.TabPageRoute])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouterObserver, I[16]);
  auto_route_observer.AutoRouteAware = class AutoRouteAware extends core.Object {
    didPopNext() {
    }
    didPush() {
    }
    didPop() {
    }
    didPushNext() {
    }
    didInitTabRoute(previousRoute) {
    }
    didChangeTabRoute(previousRoute) {
    }
  };
  (auto_route_observer.AutoRouteAware.new = function() {
    ;
  }).prototype = auto_route_observer.AutoRouteAware.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouteAware);
  dart.addTypeCaches(auto_route_observer.AutoRouteAware);
  dart.setMethodSignature(auto_route_observer.AutoRouteAware, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouteAware.__proto__),
    didPopNext: dart.fnType(dart.void, []),
    didPush: dart.fnType(dart.void, []),
    didPop: dart.fnType(dart.void, []),
    didPushNext: dart.fnType(dart.void, []),
    didInitTabRoute: dart.fnType(dart.void, [dart.nullable(auto_route_observer.TabPageRoute)]),
    didChangeTabRoute: dart.fnType(dart.void, [auto_route_observer.TabPageRoute])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouteAware, I[16]);
  var _listeners = dart.privateName(auto_route_observer, "_listeners");
  auto_route_observer.AutoRouteObserver = class AutoRouteObserver extends auto_route_observer.AutoRouterObserver {
    subscribe(routeAware, route) {
      let subscribers = this[_listeners][$putIfAbsent](route.key, dart.fn(() => T$.LinkedHashSetOfAutoRouteAware().new(), T$.VoidToSetOfAutoRouteAware()));
      if (subscribers.add(routeAware)) {
        if (routing_controller.TabsRouter.is(route.router)) {
          routeAware.didInitTabRoute(null);
        } else {
          routeAware.didPush();
        }
      }
    }
    unsubscribe(routeAware) {
      let t31;
      for (let route of this[_listeners][$keys]) {
        let subscribers = this[_listeners][$_get](route);
        t31 = subscribers;
        t31 == null ? null : t31.remove(routeAware);
      }
    }
    didInitTabRoute(route, previousRoute) {
      let t31;
      let subscribers = (t31 = this[_listeners][$_get](route.routeInfo.key), t31 == null ? null : t31[$toList]());
      if (subscribers != null) {
        for (let routeAware of subscribers) {
          routeAware.didInitTabRoute(previousRoute);
        }
      }
    }
    didChangeTabRoute(route, previousRoute) {
      let t31;
      let subscribers = (t31 = this[_listeners][$_get](route.routeInfo.key), t31 == null ? null : t31[$toList]());
      if (subscribers != null) {
        for (let routeAware of subscribers) {
          routeAware.didChangeTabRoute(previousRoute);
        }
      }
    }
    didPop(route, previousRoute) {
      let t31, t31$, t31$0;
      if (auto_route_page.AutoRoutePage.is(route.settings) && auto_route_page.AutoRoutePage.is((t31 = previousRoute, t31 == null ? null : t31.settings))) {
        let previousKey = auto_route_page.AutoRoutePage.as(dart.nullCheck(previousRoute).settings).routeKey;
        let previousSubscribers = (t31$ = this[_listeners][$_get](previousKey), t31$ == null ? null : t31$[$toList]());
        if (previousSubscribers != null) {
          for (let routeAware of previousSubscribers) {
            routeAware.didPopNext();
          }
        }
        let key = auto_route_page.AutoRoutePage.as(route.settings).routeKey;
        let subscribers = (t31$0 = this[_listeners][$_get](key), t31$0 == null ? null : t31$0[$toList]());
        if (subscribers != null) {
          for (let routeAware of subscribers) {
            routeAware.didPop();
          }
        }
      }
    }
    didPush(route, previousRoute) {
      let t31;
      if (auto_route_page.AutoRoutePage.is(route.settings) && auto_route_page.AutoRoutePage.is((t31 = previousRoute, t31 == null ? null : t31.settings))) {
        let previousKey = auto_route_page.AutoRoutePage.as(dart.nullCheck(previousRoute).settings).routeKey;
        let previousSubscribers = this[_listeners][$_get](previousKey);
        if (previousSubscribers != null) {
          for (let routeAware of previousSubscribers) {
            routeAware.didPushNext();
          }
        }
      }
    }
  };
  (auto_route_observer.AutoRouteObserver.new = function() {
    this[_listeners] = new (T$.LinkedMapOfLocalKey$SetOfAutoRouteAware()).new();
    auto_route_observer.AutoRouteObserver.__proto__.new.call(this);
    ;
  }).prototype = auto_route_observer.AutoRouteObserver.prototype;
  dart.addTypeTests(auto_route_observer.AutoRouteObserver);
  dart.addTypeCaches(auto_route_observer.AutoRouteObserver);
  dart.setMethodSignature(auto_route_observer.AutoRouteObserver, () => ({
    __proto__: dart.getMethods(auto_route_observer.AutoRouteObserver.__proto__),
    subscribe: dart.fnType(dart.void, [auto_route_observer.AutoRouteAware, routing_controller.RouteData]),
    unsubscribe: dart.fnType(dart.void, [auto_route_observer.AutoRouteAware])
  }));
  dart.setLibraryUri(auto_route_observer.AutoRouteObserver, I[16]);
  dart.setFieldSignature(auto_route_observer.AutoRouteObserver, () => ({
    __proto__: dart.getFields(auto_route_observer.AutoRouteObserver.__proto__),
    [_listeners]: dart.finalFieldType(core.Map$(key.LocalKey, core.Set$(auto_route_observer.AutoRouteAware)))
  }));
  var routeInfo$ = dart.privateName(auto_route_observer, "TabPageRoute.routeInfo");
  var index$ = dart.privateName(auto_route_observer, "TabPageRoute.index");
  auto_route_observer.TabPageRoute = class TabPageRoute extends core.Object {
    get routeInfo() {
      return this[routeInfo$];
    }
    set routeInfo(value) {
      super.routeInfo = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get name() {
      return this.routeInfo.routeName;
    }
    get path() {
      return this.routeInfo.path;
    }
    get match() {
      return this.routeInfo.stringMatch;
    }
=======
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var licenses = Object.create(dart.library);
  var $substring = dartx.substring;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $join = dartx.join;
  var $trimLeft = dartx.trimLeft;
  var $clear = dartx.clear;
  var $_get = dartx._get;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToLicenseParagraph: () => (T.VoidToLicenseParagraph = dart.constFn(dart.fnType(licenses.LicenseParagraph, [])))(),
    SyncIterableOfLicenseParagraph: () => (T.SyncIterableOfLicenseParagraph = dart.constFn(_js_helper.SyncIterable$(licenses.LicenseParagraph)))(),
    StreamOfLicenseEntry: () => (T.StreamOfLicenseEntry = dart.constFn(async.Stream$(licenses.LicenseEntry)))(),
    VoidToStreamOfLicenseEntry: () => (T.VoidToStreamOfLicenseEntry = dart.constFn(dart.fnType(T.StreamOfLicenseEntry(), [])))(),
    JSArrayOfVoidToStreamOfLicenseEntry: () => (T.JSArrayOfVoidToStreamOfLicenseEntry = dart.constFn(_interceptors.JSArray$(T.VoidToStreamOfLicenseEntry())))(),
    _AsyncStarImplOfLicenseEntry: () => (T._AsyncStarImplOfLicenseEntry = dart.constFn(async._AsyncStarImpl$(licenses.LicenseEntry)))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: licenses._LicenseEntryWithLineBreaksParserState.prototype,
        [_name$]: "_LicenseEntryWithLineBreaksParserState.beforeParagraph",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: licenses._LicenseEntryWithLineBreaksParserState.prototype,
        [_name$]: "_LicenseEntryWithLineBreaksParserState.inParagraph",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], licenses._LicenseEntryWithLineBreaksParserState);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/foundation/licenses.dart",
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/foundation/licenses.dart"
  ];
  var text$ = dart.privateName(licenses, "LicenseParagraph.text");
  var indent$ = dart.privateName(licenses, "LicenseParagraph.indent");
  licenses.LicenseParagraph = class LicenseParagraph extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
  };
  (licenses.LicenseParagraph.new = function(text, indent) {
    this[text$] = text;
    this[indent$] = indent;
    ;
  }).prototype = licenses.LicenseParagraph.prototype;
  dart.addTypeTests(licenses.LicenseParagraph);
  dart.addTypeCaches(licenses.LicenseParagraph);
  dart.setLibraryUri(licenses.LicenseParagraph, I[0]);
  dart.setFieldSignature(licenses.LicenseParagraph, () => ({
    __proto__: dart.getFields(licenses.LicenseParagraph.__proto__),
    text: dart.finalFieldType(core.String),
    indent: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(licenses.LicenseParagraph, {
    /*licenses.LicenseParagraph.centeredIndent*/get centeredIndent() {
      return -1;
    }
  }, false);
  licenses.LicenseEntry = class LicenseEntry extends core.Object {};
  (licenses.LicenseEntry.new = function() {
    ;
  }).prototype = licenses.LicenseEntry.prototype;
  dart.addTypeTests(licenses.LicenseEntry);
  dart.addTypeCaches(licenses.LicenseEntry);
  dart.setLibraryUri(licenses.LicenseEntry, I[0]);
  var _name$ = dart.privateName(licenses, "_name");
  licenses._LicenseEntryWithLineBreaksParserState = class _LicenseEntryWithLineBreaksParserState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (licenses._LicenseEntryWithLineBreaksParserState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = licenses._LicenseEntryWithLineBreaksParserState.prototype;
  dart.addTypeTests(licenses._LicenseEntryWithLineBreaksParserState);
  dart.addTypeCaches(licenses._LicenseEntryWithLineBreaksParserState);
  dart.setLibraryUri(licenses._LicenseEntryWithLineBreaksParserState, I[0]);
  dart.setFieldSignature(licenses._LicenseEntryWithLineBreaksParserState, () => ({
    __proto__: dart.getFields(licenses._LicenseEntryWithLineBreaksParserState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(licenses._LicenseEntryWithLineBreaksParserState, ['toString']);
  licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph = C[0] || CT.C0;
  licenses._LicenseEntryWithLineBreaksParserState.inParagraph = C[1] || CT.C1;
  licenses._LicenseEntryWithLineBreaksParserState.values = C[2] || CT.C2;
  var packages$ = dart.privateName(licenses, "LicenseEntryWithLineBreaks.packages");
  var text$0 = dart.privateName(licenses, "LicenseEntryWithLineBreaks.text");
  licenses.LicenseEntryWithLineBreaks = class LicenseEntryWithLineBreaks extends licenses.LicenseEntry {
    get packages() {
      return this[packages$];
    }
    set packages(value) {
      super.packages = value;
    }
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get paragraphs() {
      return new (T.SyncIterableOfLicenseParagraph()).new((function* paragraphs() {
        let lineStart = 0;
        let currentPosition = 0;
        let lastLineIndent = 0;
        let currentLineIndent = 0;
        let currentParagraphIndentation = null;
        let state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
        let lines = T.JSArrayOfString().of([]);
        const addLine = () => {
          if (!(lineStart < currentPosition)) dart.assertFailed(null, I[1], 152, 14, "lineStart < currentPosition");
          lines[$add](this.text[$substring](lineStart, currentPosition));
        };
        dart.fn(addLine, T.VoidTovoid());
        function getParagraph() {
          if (!lines[$isNotEmpty]) dart.assertFailed(null, I[1], 157, 14, "lines.isNotEmpty");
          if (!(currentParagraphIndentation != null)) dart.assertFailed(null, I[1], 158, 14, "currentParagraphIndentation != null");
          let result = new licenses.LicenseParagraph.new(lines[$join](" "), dart.nullCheck(currentParagraphIndentation));
          if (!(result.text[$trimLeft]() === result.text)) dart.assertFailed(null, I[1], 160, 14, "result.text.trimLeft() == result.text");
          if (!result.text[$isNotEmpty]) dart.assertFailed(null, I[1], 161, 14, "result.text.isNotEmpty");
          lines[$clear]();
          return result;
        }
        dart.fn(getParagraph, T.VoidToLicenseParagraph());
        while (currentPosition < this.text.length) {
          switch (state) {
            case C[0] || CT.C0:
            {
              if (!(lineStart === currentPosition)) dart.assertFailed(null, I[1], 169, 18, "lineStart == currentPosition");
              let labelState = this.text[$_get](currentPosition);
              SL0:
                while (true) {
                  switch (labelState) {
                    case " ":
                    {
                      lineStart = currentPosition + 1;
                      currentLineIndent = currentLineIndent + 1;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "\t":
                    {
                      lineStart = currentPosition + 1;
                      currentLineIndent = currentLineIndent + 8;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "\r":
                    case "\n":
                    case "\f":
                    {
                      if (lines[$isNotEmpty]) {
                        yield getParagraph();
                      }
                      if (this.text[$_get](currentPosition) === "\r" && currentPosition < this.text.length - 1 && this.text[$_get](currentPosition + 1) === "\n") {
                        currentPosition = currentPosition + 1;
                      }
                      lastLineIndent = 0;
                      currentLineIndent = 0;
                      currentParagraphIndentation = null;
                      lineStart = currentPosition + 1;
                      state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                      break SL0;
                    }
                    case "[":
                    {
                      currentLineIndent = currentLineIndent + 1;
                      labelState = Symbol('_default');
                      continue SL0;
                    }
                    default:
                    {
                      if (lines[$isNotEmpty] && currentLineIndent > lastLineIndent) {
                        yield getParagraph();
                        currentParagraphIndentation = null;
                      }
                      if (currentParagraphIndentation == null) {
                        if (currentLineIndent > 10)
                          currentParagraphIndentation = -1;
                        else
                          currentParagraphIndentation = (currentLineIndent / 3)[$truncate]();
                      }
                      state = licenses._LicenseEntryWithLineBreaksParserState.inParagraph;
                      break SL0;
                    }
                  }
                  break;
                }
              break;
            }
            case C[1] || CT.C1:
            {
              switch (this.text[$_get](currentPosition)) {
                case "\n":
                {
                  addLine();
                  lastLineIndent = currentLineIndent;
                  currentLineIndent = 0;
                  lineStart = currentPosition + 1;
                  state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                  break;
                }
                case "\f":
                {
                  addLine();
                  yield getParagraph();
                  lastLineIndent = 0;
                  currentLineIndent = 0;
                  currentParagraphIndentation = null;
                  lineStart = currentPosition + 1;
                  state = licenses._LicenseEntryWithLineBreaksParserState.beforeParagraph;
                  break;
                }
                default:
                {
                  state = licenses._LicenseEntryWithLineBreaksParserState.inParagraph;
                }
              }
              break;
            }
          }
          currentPosition = currentPosition + 1;
        }
        switch (state) {
          case C[0] || CT.C0:
          {
            if (lines[$isNotEmpty]) {
              yield getParagraph();
            }
            break;
          }
          case C[1] || CT.C1:
          {
            addLine();
            yield getParagraph();
            break;
          }
        }
      }).bind(this));
    }
  };
  (licenses.LicenseEntryWithLineBreaks.new = function(packages, text) {
    this[packages$] = packages;
    this[text$0] = text;
    licenses.LicenseEntryWithLineBreaks.__proto__.new.call(this);
    ;
  }).prototype = licenses.LicenseEntryWithLineBreaks.prototype;
  dart.addTypeTests(licenses.LicenseEntryWithLineBreaks);
  dart.addTypeCaches(licenses.LicenseEntryWithLineBreaks);
  dart.setGetterSignature(licenses.LicenseEntryWithLineBreaks, () => ({
    __proto__: dart.getGetters(licenses.LicenseEntryWithLineBreaks.__proto__),
    paragraphs: core.Iterable$(licenses.LicenseParagraph)
  }));
  dart.setLibraryUri(licenses.LicenseEntryWithLineBreaks, I[0]);
  dart.setFieldSignature(licenses.LicenseEntryWithLineBreaks, () => ({
    __proto__: dart.getFields(licenses.LicenseEntryWithLineBreaks.__proto__),
    packages: dart.finalFieldType(core.List$(core.String)),
    text: dart.finalFieldType(core.String)
  }));
  licenses.LicenseRegistry = class LicenseRegistry extends core.Object {
    static addLicense(collector) {
      licenses.LicenseRegistry._collectors == null ? licenses.LicenseRegistry._collectors = T.JSArrayOfVoidToStreamOfLicenseEntry().of([]) : null;
      dart.nullCheck(licenses.LicenseRegistry._collectors)[$add](collector);
    }
    static get licenses() {
      return new (T._AsyncStarImplOfLicenseEntry()).new(function* licenses$(stream) {
        if (licenses.LicenseRegistry._collectors == null) return;
        for (let collector of dart.nullCheck(licenses.LicenseRegistry._collectors)) {
          if (stream.addStream(collector())) return;
          yield;
        }
      }).stream;
    }
    static reset() {
      licenses.LicenseRegistry._collectors = null;
    }
  };
  (licenses.LicenseRegistry.__ = function() {
    ;
  }).prototype = licenses.LicenseRegistry.prototype;
  dart.addTypeTests(licenses.LicenseRegistry);
  dart.addTypeCaches(licenses.LicenseRegistry);
  dart.setLibraryUri(licenses.LicenseRegistry, I[0]);
  dart.defineLazy(licenses.LicenseRegistry, {
    /*licenses.LicenseRegistry._collectors*/get _collectors() {
      return null;
    },
    set _collectors(_) {}
  }, false);
  dart.trackLibraries("packages/flutter/src/foundation/licenses.dart", {
    "package:flutter/src/foundation/licenses.dart": licenses
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["licenses.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBe;;;;;;IAYH;;;;;;;4CAfkB,MAAW;IAAX;IAAW;;EAAO;;;;;;;;;;MAkB7B,wCAAc;;;;;;;EAYX;;;;;;;;IActB;;yEAHK;;;;EAGL;;;;;;;;;;;;;;;;IAiEqB;;;;;;IAeN;;;;;;;AAG6B;AACpC,wBAAY;AACZ,8BAAkB;AAClB,6BAAiB;AACjB,gCAAoB;AACnB;AACkC,oBAA+C;AACnE,oBAAgB;AAEnC,cAAK;AACH,gBAAO,AAAU,SAAD,GAAG,eAAe;AACmB,UAArD,AAAM,KAAD,OAAK,AAAK,sBAAU,SAAS,EAAE,eAAe;;;AAGrD,iBAAiB;AACf,eAAO,AAAM,KAAD;AACZ,gBAAO,AAA4B,2BAAD;AACX,uBAAS,kCAAiB,AAAM,KAAD,QAAM,MAAiC,eAA3B,2BAA2B;AAC7F,gBAAO,AAAO,AAAK,AAAW,MAAjB,uBAAoB,AAAO,MAAD;AACvC,eAAO,AAAO,AAAK,MAAN;AACA,UAAb,AAAM,KAAD;AACL,gBAAO,OAAM;;;AAGf,eAAO,AAAgB,eAAD,GAAG,AAAK;AAC5B,kBAAQ,KAAK;;;AAET,oBAAO,AAAU,SAAD,KAAI,eAAe;AACnC,+BAAQ,AAAI,iBAAC,eAAe;;;;;;AAEO,sBAA/B,YAAY,AAAgB,eAAD,GAAG;AACR,sBAAtB,oBAAA,AAAkB,iBAAD,GAAI;AACyC,sBAA9D,QAA+C;AAC/C;;;;AAE+B,sBAA/B,YAAY,AAAgB,eAAD,GAAG;AACR,sBAAtB,oBAAA,AAAkB,iBAAD,GAAI;AACyC,sBAA9D,QAA+C;AAC/C;;;;;;AAIA,0BAAI,AAAM,KAAD;AACP,8BAAM,YAAY;;AAEpB,0BAAI,AAAI,AAAkB,iBAAjB,eAAe,MAAK,QAAQ,AAAgB,eAAD,GAAG,AAAK,AAAO,mBAAE,KAC9D,AAAI,AAAsB,iBAArB,AAAgB,eAAD,GAAG,OAAM;AACd,wBAApB,kBAAA,AAAgB,eAAD,GAAI;;AAEH,sBAAlB,iBAAiB;AACI,sBAArB,oBAAoB;AACc,sBAAlC,8BAA8B;AACC,sBAA/B,YAAY,AAAgB,eAAD,GAAG;AACgC,sBAA9D,QAA+C;AAC/C;;;;AAQsB,sBAAtB,oBAAA,AAAkB,iBAAD,GAAI;AACrB;;;;;AAGA,0BAAI,AAAM,KAAD,iBAAe,AAAkB,iBAAD,GAAG,cAAc;AACxD,8BAAM,YAAY;AACgB,wBAAlC,8BAA8B;;AAIhC,0BAAI,AAA4B,2BAAD;AAC7B,4BAAI,AAAkB,iBAAD,GAAG;AACuC,0BAA7D;;AAEoD,0BAApD,8BAAgD,CAAlB,iBAAiB,GAAI;;AAEG,sBAA1D,QAA+C;;;;;;AAEnD;;;;AAEA,sBAAQ,AAAI,iBAAC,eAAe;;;AAEf,kBAAT,OAAO;AAC2B,kBAAlC,iBAAiB,iBAAiB;AACb,kBAArB,oBAAoB;AACW,kBAA/B,YAAY,AAAgB,eAAD,GAAG;AACgC,kBAA9D,QAA+C;AAC/C;;;;AAES,kBAAT,OAAO;AACP,wBAAM,YAAY;AACA,kBAAlB,iBAAiB;AACI,kBAArB,oBAAoB;AACc,kBAAlC,8BAA8B;AACC,kBAA/B,YAAY,AAAgB,eAAD,GAAG;AACgC,kBAA9D,QAA+C;AAC/C;;;;AAE0D,kBAA1D,QAA+C;;;AAEnD;;;AAEgB,UAApB,kBAAA,AAAgB,eAAD,GAAI;;AAErB,gBAAQ,KAAK;;;AAET,gBAAI,AAAM,KAAD;AACP,oBAAM,YAAY;;AAEpB;;;;AAES,YAAT,OAAO;AACP,kBAAM,YAAY;AAClB;;;MAEN;;;sDA1IsC,UAAe;IAAf;IAAe;AAA/C;;EAAoD;;;;;;;;;;;;;;sBAqLb;AACF,MAAzC,AAAY,+CAAA,uCAA2B,iDAA3B;AACe,MAAhB,AAAE,eAAb,4CAAiB,SAAS;IAC5B;;AAKyC;AACvC,YAAI,AAAY,8CACd;AACF,iBAAiC,YAAwB,gBAAX,uCAC5C;+BAAO,AAAS,SAAA;UAAhB;;MACJ;;;AAMoB,MAAlB,uCAAc;IAChB;;;;EA/BmB;;;;;MAEiB,oCAAW","file":"../../../../../../../packages/flutter/src/foundation/licenses.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__licenses: licenses
  };
}));

//# sourceMappingURL=licenses.dart.lib.js.map
