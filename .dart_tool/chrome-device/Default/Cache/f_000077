<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__rendering__flow_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/scheduler/binding.dart'], (function load__packages__flutter__src__painting__image_stream_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__scheduler__binding$46dart) {
>>>>>>> AUg2
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
<<<<<<< HEAD
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object$ = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var flow = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $isFinite = dartx.isFinite;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfRenderBox: () => (T.JSArrayOfRenderBox = dart.constFn(_interceptors.JSArray$(box.RenderBox)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, T.OffsetN()])))()
=======
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__foundation__debug$46dart.src__foundation__debug;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  var image_stream = Object.create(dart.library);
  var $length = dartx.length;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  var $_get = dartx._get;
  var $removeAt = dartx.removeAt;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $toList = dartx.toList;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $map = dartx.map;
  var $whereType = dartx.whereType;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfImageStreamListener: () => (T.JSArrayOfImageStreamListener = dart.constFn(_interceptors.JSArray$(image_stream.ImageStreamListener)))(),
    ObjectFlagPropertyOfImageStreamCompleter: () => (T.ObjectFlagPropertyOfImageStreamCompleter = dart.constFn(diagnostics.ObjectFlagProperty$(image_stream.ImageStreamCompleter)))(),
    ListOfImageStreamListener: () => (T.ListOfImageStreamListener = dart.constFn(core.List$(image_stream.ImageStreamListener)))(),
    ObjectFlagPropertyOfListOfImageStreamListener: () => (T.ObjectFlagPropertyOfListOfImageStreamListener = dart.constFn(diagnostics.ObjectFlagProperty$(T.ListOfImageStreamListener())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfVoidTovoid: () => (T.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T.VoidTovoid())))(),
    StackTraceN: () => (T.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ObjectAndStackTraceNTovoid: () => (T.ObjectAndStackTraceNTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, T.StackTraceN()])))(),
    ObjectAndStackTraceNToNvoid: () => (T.ObjectAndStackTraceNToNvoid = dart.constFn(dart.nullable(T.ObjectAndStackTraceNTovoid())))(),
    ImageStreamListenerToFn: () => (T.ImageStreamListenerToFn = dart.constFn(dart.fnType(T.ObjectAndStackTraceNToNvoid(), [image_stream.ImageStreamListener])))(),
    ImageChunkEventTovoid: () => (T.ImageChunkEventTovoid = dart.constFn(dart.fnType(dart.void, [image_stream.ImageChunkEvent])))(),
    ImageChunkEventToNvoid: () => (T.ImageChunkEventToNvoid = dart.constFn(dart.nullable(T.ImageChunkEventTovoid())))(),
    ImageStreamListenerToFn$1: () => (T.ImageStreamListenerToFn$1 = dart.constFn(dart.fnType(T.ImageChunkEventToNvoid(), [image_stream.ImageStreamListener])))(),
    DiagnosticsPropertyOfImageInfo: () => (T.DiagnosticsPropertyOfImageInfo = dart.constFn(diagnostics.DiagnosticsProperty$(image_stream.ImageInfo)))(),
    ObjectAndStackTraceToNull: () => (T.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))()
>>>>>>> AUg2
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
<<<<<<< HEAD
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:flutter/src/rendering/flow.dart",
    "file:///D:/DevTools/flutter/packages/flutter/lib/src/rendering/flow.dart"
  ];
  flow.FlowPaintingContext = class FlowPaintingContext extends core.Object {};
  (flow.FlowPaintingContext.new = function() {
    ;
  }).prototype = flow.FlowPaintingContext.prototype;
  dart.addTypeTests(flow.FlowPaintingContext);
  dart.addTypeCaches(flow.FlowPaintingContext);
  dart.setLibraryUri(flow.FlowPaintingContext, I[0]);
  var _repaint = dart.privateName(flow, "FlowDelegate._repaint");
  var _repaint$ = dart.privateName(flow, "_repaint");
  flow.FlowDelegate = class FlowDelegate extends core.Object {
    get [_repaint$]() {
      return this[_repaint];
    }
    set [_repaint$](value) {
      super[_repaint$] = value;
    }
    getSize(constraints) {
      return constraints.biggest;
    }
    getConstraintsForChild(i, constraints) {
      return constraints;
    }
    shouldRelayout(oldDelegate) {
      flow.FlowDelegate.as(oldDelegate);
      return false;
    }
    toString() {
      return object.objectRuntimeType(this, "FlowDelegate");
    }
  };
  (flow.FlowDelegate.new = function(opts) {
    let repaint = opts && 'repaint' in opts ? opts.repaint : null;
    this[_repaint] = repaint;
    ;
  }).prototype = flow.FlowDelegate.prototype;
  dart.addTypeTests(flow.FlowDelegate);
  dart.addTypeCaches(flow.FlowDelegate);
  dart.setMethodSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getMethods(flow.FlowDelegate.__proto__),
    getSize: dart.fnType(ui.Size, [box.BoxConstraints]),
    getConstraintsForChild: dart.fnType(box.BoxConstraints, [core.int, box.BoxConstraints]),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(flow.FlowDelegate, I[0]);
  dart.setFieldSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getFields(flow.FlowDelegate.__proto__),
    [_repaint$]: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  dart.defineExtensionMethods(flow.FlowDelegate, ['toString']);
  var _transform = dart.privateName(flow, "_transform");
  flow.FlowParentData = class FlowParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (flow.FlowParentData.new = function() {
    this[_transform] = null;
    flow.FlowParentData.__proto__.new.call(this);
    ;
  }).prototype = flow.FlowParentData.prototype;
  dart.addTypeTests(flow.FlowParentData);
  dart.addTypeCaches(flow.FlowParentData);
  dart.setLibraryUri(flow.FlowParentData, I[0]);
  dart.setFieldSignature(flow.FlowParentData, () => ({
    __proto__: dart.getFields(flow.FlowParentData.__proto__),
    [_transform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var _name = dart.privateName(ui, "_name");
  var _clipBehavior = dart.privateName(flow, "_clipBehavior");
  var _randomAccessChildren = dart.privateName(flow, "_randomAccessChildren");
  var _lastPaintOrder = dart.privateName(flow, "_lastPaintOrder");
  var _paintingContext = dart.privateName(flow, "_paintingContext");
  var _paintingOffset = dart.privateName(flow, "_paintingOffset");
  var _clipRectLayer = dart.privateName(flow, "_clipRectLayer");
  var _delegate = dart.privateName(flow, "_delegate");
  var _getSize = dart.privateName(flow, "_getSize");
  var _paintWithDelegate = dart.privateName(flow, "_paintWithDelegate");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, flow.FlowParentData));
  flow.RenderFlow = class RenderFlow extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    setupParentData(child) {
      box.RenderBox.as(child);
      let childParentData = child.parentData;
      if (flow.FlowParentData.is(childParentData))
        childParentData[_transform] = null;
      else
        child.parentData = new flow.FlowParentData.new();
    }
    get delegate() {
      return this[_delegate];
    }
    set delegate(newDelegate) {
      let t0, t0$;
      if (!(newDelegate !== null)) dart.assertFailed(null, I[1], 211, 12, "newDelegate != null");
      if (this[_delegate][$_equals](newDelegate)) return;
      let oldDelegate = this[_delegate];
      this[_delegate] = newDelegate;
      if (!newDelegate[$runtimeType]._equals(oldDelegate[$runtimeType]) || newDelegate.shouldRelayout(oldDelegate))
        this.markNeedsLayout();
      else if (newDelegate.shouldRepaint(oldDelegate)) this.markNeedsPaint();
      if (this.attached) {
        t0 = oldDelegate[_repaint$];
        t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t0$ = newDelegate[_repaint$];
        t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 234, 12, "value != null");
      if (value !== this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    attach(owner) {
      let t0;
      object$.PipelineOwner.as(owner);
      super.attach(owner);
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t0;
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    [_getSize](constraints) {
      if (!constraints.debugAssertIsValid()) dart.assertFailed(null, I[1], 255, 12, "constraints.debugAssertIsValid()");
      return constraints.constrain(this[_delegate].getSize(constraints));
    }
    get isRepaintBoundary() {
      return true;
    }
    computeMinIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeDryLayout(constraints) {
      return this[_getSize](constraints);
    }
    performLayout() {
      let constraints = this.constraints;
      this.size = this[_getSize](constraints);
      let i = 0;
      this[_randomAccessChildren][$clear]();
      let child = this.firstChild;
      while (child != null) {
        this[_randomAccessChildren][$add](child);
        let innerConstraints = this[_delegate].getConstraintsForChild(i, constraints);
        child.layout(innerConstraints, {parentUsesSize: true});
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData.offset = ui.Offset.zero;
        child = childParentData.nextSibling;
        i = i + 1;
      }
    }
    getChildSize(i) {
      if (i < 0 || i >= this[_randomAccessChildren][$length]) return null;
      return this[_randomAccessChildren][$_get](i).size;
    }
    paintChild(i, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
      transform == null ? transform = vector_math_64.Matrix4.identity() : null;
      let child = this[_randomAccessChildren][$_get](i);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (!dart.fn(() => {
        if (childParentData[_transform] != null) {
          dart.throw(assertions.FlutterError.new("Cannot call paintChild twice for the same child.\n" + "The flow delegate of type " + dart.str(this[_delegate][$runtimeType]) + " attempted to " + "paint child " + dart.str(i) + " multiple times, which is not permitted."));
=======
  var I = [
    "file:///D:/DevelpmentTool/flutter/packages/flutter/lib/src/painting/image_stream.dart",
    "package:flutter/src/painting/image_stream.dart"
  ];
  var image$ = dart.privateName(image_stream, "ImageInfo.image");
  var scale$ = dart.privateName(image_stream, "ImageInfo.scale");
  var debugLabel$ = dart.privateName(image_stream, "ImageInfo.debugLabel");
  image_stream.ImageInfo = class ImageInfo extends core.Object {
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    clone() {
      return new image_stream.ImageInfo.new({image: this.image.clone(), scale: this.scale, debugLabel: this.debugLabel});
    }
    isCloneOf(other) {
      return other.image.isCloneOf(this.image) && this.scale === this.scale && other.debugLabel == this.debugLabel;
    }
    dispose() {
      let t0, t0$;
      if (!(dart.notNull((t0$ = (t0 = this.image.debugGetOpenHandleStackTraces(), t0 == null ? null : t0[$length]), t0$ == null ? 1 : t0$)) > 0)) dart.assertFailed(null, I[0], 122, 12, "(image.debugGetOpenHandleStackTraces()?.length ?? 1) > 0");
      this.image.dispose();
    }
    toString() {
      return (this.debugLabel != null ? dart.str(this.debugLabel) + " " : "") + dart.str(this.image) + " @ " + debug.debugFormatDouble(this.scale) + "x";
    }
    get hashCode() {
      return ui.hashValues(this.image, this.scale, this.debugLabel);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return image_stream.ImageInfo.is(other) && other.image[$_equals](this.image) && other.scale === this.scale && other.debugLabel == this.debugLabel;
    }
  };
  (image_stream.ImageInfo.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[image$] = image;
    this[scale$] = scale;
    this[debugLabel$] = debugLabel;
    if (!(image !== null)) dart.assertFailed(null, I[0], 28, 14, "image != null");
    if (!(scale !== null)) dart.assertFailed(null, I[0], 29, 14, "scale != null");
    ;
  }).prototype = image_stream.ImageInfo.prototype;
  dart.addTypeTests(image_stream.ImageInfo);
  dart.addTypeCaches(image_stream.ImageInfo);
  dart.setMethodSignature(image_stream.ImageInfo, () => ({
    __proto__: dart.getMethods(image_stream.ImageInfo.__proto__),
    clone: dart.fnType(image_stream.ImageInfo, []),
    isCloneOf: dart.fnType(core.bool, [image_stream.ImageInfo]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(image_stream.ImageInfo, I[1]);
  dart.setFieldSignature(image_stream.ImageInfo, () => ({
    __proto__: dart.getFields(image_stream.ImageInfo.__proto__),
    image: dart.finalFieldType(ui.Image),
    scale: dart.finalFieldType(core.double),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(image_stream.ImageInfo, ['toString', '_equals']);
  dart.defineExtensionAccessors(image_stream.ImageInfo, ['hashCode']);
  var onImage$ = dart.privateName(image_stream, "ImageStreamListener.onImage");
  var onChunk$ = dart.privateName(image_stream, "ImageStreamListener.onChunk");
  var onError$ = dart.privateName(image_stream, "ImageStreamListener.onError");
  image_stream.ImageStreamListener = class ImageStreamListener extends core.Object {
    get onImage() {
      return this[onImage$];
    }
    set onImage(value) {
      super.onImage = value;
    }
    get onChunk() {
      return this[onChunk$];
    }
    set onChunk(value) {
      super.onChunk = value;
    }
    get onError() {
      return this[onError$];
    }
    set onError(value) {
      super.onError = value;
    }
    get hashCode() {
      return ui.hashValues(this.onImage, this.onChunk, this.onError);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return image_stream.ImageStreamListener.is(other) && other.onImage[$_equals](this.onImage) && dart.equals(other.onChunk, this.onChunk) && dart.equals(other.onError, this.onError);
    }
  };
  (image_stream.ImageStreamListener.new = function(onImage, opts) {
    let onChunk = opts && 'onChunk' in opts ? opts.onChunk : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[onImage$] = onImage;
    this[onChunk$] = onChunk;
    this[onError$] = onError;
    if (!(onImage !== null)) dart.assertFailed(null, I[0], 162, 15, "onImage != null");
    ;
  }).prototype = image_stream.ImageStreamListener.prototype;
  dart.addTypeTests(image_stream.ImageStreamListener);
  dart.addTypeCaches(image_stream.ImageStreamListener);
  dart.setLibraryUri(image_stream.ImageStreamListener, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamListener, () => ({
    __proto__: dart.getFields(image_stream.ImageStreamListener.__proto__),
    onImage: dart.finalFieldType(dart.fnType(dart.void, [image_stream.ImageInfo, core.bool])),
    onChunk: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [image_stream.ImageChunkEvent]))),
    onError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])))
  }));
  dart.defineExtensionMethods(image_stream.ImageStreamListener, ['_equals']);
  dart.defineExtensionAccessors(image_stream.ImageStreamListener, ['hashCode']);
  var cumulativeBytesLoaded$ = dart.privateName(image_stream, "ImageChunkEvent.cumulativeBytesLoaded");
  var expectedTotalBytes$ = dart.privateName(image_stream, "ImageChunkEvent.expectedTotalBytes");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  image_stream.ImageChunkEvent = class ImageChunkEvent extends Object_Diagnosticable$36 {
    get cumulativeBytesLoaded() {
      return this[cumulativeBytesLoaded$];
    }
    set cumulativeBytesLoaded(value) {
      super.cumulativeBytesLoaded = value;
    }
    get expectedTotalBytes() {
      return this[expectedTotalBytes$];
    }
    set expectedTotalBytes(value) {
      super.expectedTotalBytes = value;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.IntProperty.new("cumulativeBytesLoaded", this.cumulativeBytesLoaded));
      properties.add(new diagnostics.IntProperty.new("expectedTotalBytes", this.expectedTotalBytes));
    }
  };
  (image_stream.ImageChunkEvent.new = function(opts) {
    let cumulativeBytesLoaded = opts && 'cumulativeBytesLoaded' in opts ? opts.cumulativeBytesLoaded : null;
    let expectedTotalBytes = opts && 'expectedTotalBytes' in opts ? opts.expectedTotalBytes : null;
    this[cumulativeBytesLoaded$] = cumulativeBytesLoaded;
    this[expectedTotalBytes$] = expectedTotalBytes;
    if (!(cumulativeBytesLoaded >= 0)) dart.assertFailed(null, I[0], 264, 15, "cumulativeBytesLoaded >= 0");
    if (!(expectedTotalBytes == null || dart.notNull(expectedTotalBytes) >= 0)) dart.assertFailed(null, I[0], 265, 15, "expectedTotalBytes == null || expectedTotalBytes >= 0");
    ;
  }).prototype = image_stream.ImageChunkEvent.prototype;
  dart.addTypeTests(image_stream.ImageChunkEvent);
  dart.addTypeCaches(image_stream.ImageChunkEvent);
  dart.setLibraryUri(image_stream.ImageChunkEvent, I[1]);
  dart.setFieldSignature(image_stream.ImageChunkEvent, () => ({
    __proto__: dart.getFields(image_stream.ImageChunkEvent.__proto__),
    cumulativeBytesLoaded: dart.finalFieldType(core.int),
    expectedTotalBytes: dart.finalFieldType(dart.nullable(core.int))
  }));
  var _completer$ = dart.privateName(image_stream, "_completer");
  var _listeners = dart.privateName(image_stream, "_listeners");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  image_stream.ImageStream = class ImageStream extends Object_Diagnosticable$36$ {
    get completer() {
      return this[_completer$];
    }
    setCompleter(value) {
      if (!(this[_completer$] == null)) dart.assertFailed(null, I[0], 335, 12, "_completer == null");
      this[_completer$] = value;
      if (this[_listeners] != null) {
        let initialListeners = dart.nullCheck(this[_listeners]);
        this[_listeners] = null;
        initialListeners[$forEach](dart.bind(dart.nullCheck(this[_completer$]), 'addListener'));
      }
    }
    addListener(listener) {
      if (this[_completer$] != null) return dart.nullCheck(this[_completer$]).addListener(listener);
      this[_listeners] == null ? this[_listeners] = T.JSArrayOfImageStreamListener().of([]) : null;
      dart.nullCheck(this[_listeners])[$add](listener);
    }
    removeListener(listener) {
      if (this[_completer$] != null) return dart.nullCheck(this[_completer$]).removeListener(listener);
      if (!(this[_listeners] != null)) dart.assertFailed(null, I[0], 379, 12, "_listeners != null");
      for (let i = 0; i < dart.nullCheck(this[_listeners])[$length]; i = i + 1) {
        if (dart.nullCheck(this[_listeners])[$_get](i)._equals(listener)) {
          dart.nullCheck(this[_listeners])[$removeAt](i);
          break;
        }
      }
    }
    get key() {
      let t0;
      t0 = this[_completer$];
      return t0 == null ? this : t0;
    }
    debugFillProperties(properties) {
      let t0, t0$, t0$0, t0$1;
      super.debugFillProperties(properties);
      properties.add(new (T.ObjectFlagPropertyOfImageStreamCompleter()).new("completer", this[_completer$], {ifPresent: (t0 = this[_completer$], t0 == null ? null : t0.toStringShort()), ifNull: "unresolved"}));
      properties.add(new (T.ObjectFlagPropertyOfListOfImageStreamListener()).new("listeners", this[_listeners], {ifPresent: dart.str((t0$ = this[_listeners], t0$ == null ? null : t0$[$length])) + " listener" + ((t0$0 = this[_listeners], t0$0 == null ? null : t0$0[$length]) === 1 ? "" : "s"), ifNull: "no listeners", level: this[_completer$] != null ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      t0$1 = this[_completer$];
      t0$1 == null ? null : t0$1.debugFillProperties(properties);
    }
  };
  (image_stream.ImageStream.new = function() {
    this[_completer$] = null;
    this[_listeners] = null;
    ;
  }).prototype = image_stream.ImageStream.prototype;
  dart.addTypeTests(image_stream.ImageStream);
  dart.addTypeCaches(image_stream.ImageStream);
  dart.setMethodSignature(image_stream.ImageStream, () => ({
    __proto__: dart.getMethods(image_stream.ImageStream.__proto__),
    setCompleter: dart.fnType(dart.void, [image_stream.ImageStreamCompleter]),
    addListener: dart.fnType(dart.void, [image_stream.ImageStreamListener]),
    removeListener: dart.fnType(dart.void, [image_stream.ImageStreamListener])
  }));
  dart.setGetterSignature(image_stream.ImageStream, () => ({
    __proto__: dart.getGetters(image_stream.ImageStream.__proto__),
    completer: dart.nullable(image_stream.ImageStreamCompleter),
    key: core.Object
  }));
  dart.setLibraryUri(image_stream.ImageStream, I[1]);
  dart.setFieldSignature(image_stream.ImageStream, () => ({
    __proto__: dart.getFields(image_stream.ImageStream.__proto__),
    [_completer$]: dart.fieldType(dart.nullable(image_stream.ImageStreamCompleter)),
    [_listeners]: dart.fieldType(dart.nullable(core.List$(image_stream.ImageStreamListener)))
  }));
  var _keepAliveHandles = dart.privateName(image_stream, "_keepAliveHandles");
  var _disposed = dart.privateName(image_stream, "_disposed");
  var _maybeDispose = dart.privateName(image_stream, "_maybeDispose");
  image_stream.ImageStreamCompleterHandle = class ImageStreamCompleterHandle extends core.Object {
    dispose() {
      let t0;
      if (!(this[_completer$] != null)) dart.assertFailed(null, I[0], 442, 12, "_completer != null");
      if (!(dart.nullCheck(this[_completer$])[_keepAliveHandles] > 0)) dart.assertFailed(null, I[0], 443, 12, "_completer!._keepAliveHandles > 0");
      if (!!dart.nullCheck(this[_completer$])[_disposed]) dart.assertFailed(null, I[0], 444, 12, "!_completer!._disposed");
      t0 = dart.nullCheck(this[_completer$]);
      t0[_keepAliveHandles] = t0[_keepAliveHandles] - 1;
      dart.nullCheck(this[_completer$])[_maybeDispose]();
      this[_completer$] = null;
    }
  };
  (image_stream.ImageStreamCompleterHandle.__ = function(_completer) {
    let t0;
    this[_completer$] = _completer;
    t0 = dart.nullCheck(this[_completer$]);
    t0[_keepAliveHandles] = t0[_keepAliveHandles] + 1;
  }).prototype = image_stream.ImageStreamCompleterHandle.prototype;
  dart.addTypeTests(image_stream.ImageStreamCompleterHandle);
  dart.addTypeCaches(image_stream.ImageStreamCompleterHandle);
  dart.setMethodSignature(image_stream.ImageStreamCompleterHandle, () => ({
    __proto__: dart.getMethods(image_stream.ImageStreamCompleterHandle.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(image_stream.ImageStreamCompleterHandle, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamCompleterHandle, () => ({
    __proto__: dart.getFields(image_stream.ImageStreamCompleterHandle.__proto__),
    [_completer$]: dart.fieldType(dart.nullable(image_stream.ImageStreamCompleter))
  }));
  var debugLabel = dart.privateName(image_stream, "ImageStreamCompleter.debugLabel");
  var _currentImage = dart.privateName(image_stream, "_currentImage");
  var _currentError = dart.privateName(image_stream, "_currentError");
  var _hadAtLeastOneListener = dart.privateName(image_stream, "_hadAtLeastOneListener");
  var _onLastListenerRemovedCallbacks = dart.privateName(image_stream, "_onLastListenerRemovedCallbacks");
  var _checkDisposed = dart.privateName(image_stream, "_checkDisposed");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  image_stream.ImageStreamCompleter = class ImageStreamCompleter extends Object_Diagnosticable$36$0 {
    get debugLabel() {
      return this[debugLabel];
    }
    set debugLabel(value) {
      this[debugLabel] = value;
    }
    get hasListeners() {
      return this[_listeners][$isNotEmpty];
    }
    addListener(listener) {
      let t2, t1, t0;
      this[_checkDisposed]();
      this[_hadAtLeastOneListener] = true;
      this[_listeners][$add](listener);
      if (this[_currentImage] != null) {
        try {
          t0 = listener;
          t1 = dart.nullCheck(this[_currentImage]).clone();
          t2 = true;
          t0.onImage(t1, t2);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("by a synchronously-called image listener"), exception: exception, stack: stack});
          } else
            throw e;
        }
      }
      if (this[_currentError] != null && listener.onError != null) {
        try {
          dart.nullCheck(listener.onError)(dart.nullCheck(this[_currentError]).exception, dart.nullCheck(this[_currentError]).stack);
        } catch (e$) {
          let newException = dart.getThrown(e$);
          let newStack = dart.stackTrace(e$);
          if (core.Object.is(newException)) {
            if (!newException[$_equals](dart.nullCheck(this[_currentError]).exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: newException, library: "image resource service", context: new assertions.ErrorDescription.new("by a synchronously-called image error listener"), stack: newStack}));
            }
          } else
            throw e$;
        }
      }
    }
    keepAlive() {
      this[_checkDisposed]();
      return new image_stream.ImageStreamCompleterHandle.__(this);
    }
    removeListener(listener) {
      this[_checkDisposed]();
      for (let i = 0; i < this[_listeners][$length]; i = i + 1) {
        if (this[_listeners][$_get](i)._equals(listener)) {
          this[_listeners][$removeAt](i);
          break;
        }
      }
      if (this[_listeners][$isEmpty]) {
        let callbacks = this[_onLastListenerRemovedCallbacks][$toList]();
        for (let callback of callbacks) {
          callback();
        }
        this[_onLastListenerRemovedCallbacks][$clear]();
        this[_maybeDispose]();
      }
    }
    [_maybeDispose]() {
      let t2;
      if (!this[_hadAtLeastOneListener] || this[_disposed] || this[_listeners][$isNotEmpty] || this[_keepAliveHandles] !== 0) {
        return;
      }
      t2 = this[_currentImage];
      t2 == null ? null : t2.dispose();
      this[_currentImage] = null;
      this[_disposed] = true;
    }
    [_checkDisposed]() {
      if (this[_disposed]) {
        dart.throw(new core.StateError.new("Stream has been disposed.\n" + "An ImageStream is considered disposed once at least one listener has " + "been added and subsequently all listeners have been removed and no " + "handles are outstanding from the keepAlive method.\n" + "To resolve this error, maintain at least one listener on the stream, " + "or create an ImageStreamCompleterHandle from the keepAlive " + "method, or create a new stream for the image."));
      }
    }
    addOnLastListenerRemovedCallback(callback) {
      if (!(callback !== null)) dart.assertFailed(null, I[0], 602, 12, "callback != null");
      this[_checkDisposed]();
      this[_onLastListenerRemovedCallbacks][$add](callback);
    }
    removeOnLastListenerRemovedCallback(callback) {
      if (!(callback !== null)) dart.assertFailed(null, I[0], 610, 12, "callback != null");
      this[_checkDisposed]();
      this[_onLastListenerRemovedCallbacks][$remove](callback);
    }
    setImage(image) {
      let t2, t4, t3, t2$;
      this[_checkDisposed]();
      t2 = this[_currentImage];
      t2 == null ? null : t2.dispose();
      this[_currentImage] = image;
      if (this[_listeners][$isEmpty]) return;
      let localListeners = T.ListOfImageStreamListener().from(this[_listeners]);
      for (let listener of localListeners) {
        try {
          t2$ = listener;
          t3 = image.clone();
          t4 = false;
          t2$.onImage(t3, t4);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("by an image listener"), exception: exception, stack: stack});
          } else
            throw e;
        }
      }
    }
    reportError(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let stack = opts && 'stack' in opts ? opts.stack : null;
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      let silent = opts && 'silent' in opts ? opts.silent : false;
      this[_currentError] = new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "image resource service", context: context, informationCollector: informationCollector, silent: silent});
      let localErrorListeners = this[_listeners][$map](T.ObjectAndStackTraceNToNvoid(), dart.fn(listener => listener.onError, T.ImageStreamListenerToFn()))[$whereType](T.ObjectAndStackTraceNTovoid())[$toList]();
      let handled = false;
      for (let errorListener of localErrorListeners) {
        try {
          errorListener(exception, stack);
          handled = true;
        } catch (e) {
          let newException = dart.getThrown(e);
          let newStack = dart.stackTrace(e);
          if (core.Object.is(newException)) {
            if (!newException[$_equals](exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("when reporting an error to an image listener"), library: "image resource service", exception: newException, stack: newStack}));
            }
          } else
            throw e;
        }
      }
      if (!handled) {
        assertions.FlutterError.reportError(dart.nullCheck(this[_currentError]));
      }
    }
    reportImageChunkEvent(event) {
      this[_checkDisposed]();
      if (this.hasListeners) {
        let localListeners = this[_listeners][$map](T.ImageChunkEventToNvoid(), dart.fn(listener => listener.onChunk, T.ImageStreamListenerToFn$1()))[$whereType](T.ImageChunkEventTovoid())[$toList]();
        for (let listener of localListeners) {
          listener(event);
>>>>>>> AUg2
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 343, 12, "() {\r\n      if (childParentData._transform != null) {\r\n        throw FlutterError(\r\n          'Cannot call paintChild twice for the same child.\\n'\r\n          'The flow delegate of type ${_delegate.runtimeType} attempted to '\r\n          'paint child $i multiple times, which is not permitted.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      this[_lastPaintOrder][$add](i);
      childParentData[_transform] = transform;
      if (opacity === 0.0) return;
      function painter(context, offset) {
        context.paintChild(child, offset);
      }
      dart.fn(painter, T.PaintingContextAndOffsetTovoid());
      if (opacity === 1.0) {
        dart.nullCheck(this[_paintingContext]).pushTransform(this.needsCompositing, dart.nullCheck(this[_paintingOffset]), transform, painter);
      } else {
        dart.nullCheck(this[_paintingContext]).pushOpacity(dart.nullCheck(this[_paintingOffset]), ui.Color.getAlphaFromOpacity(opacity), dart.fn((context, offset) => {
          context.pushTransform(this.needsCompositing, offset, dart.nullCheck(transform), painter);
        }, T.PaintingContextAndOffsetTovoid()));
      }
    }
<<<<<<< HEAD
    [_paintWithDelegate](context, offset) {
      this[_lastPaintOrder][$clear]();
      this[_paintingContext] = context;
      this[_paintingOffset] = offset;
      for (let child of this[_randomAccessChildren]) {
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData[_transform] = null;
      }
      try {
        this[_delegate].paintChildren(this);
      } finally {
        this[_paintingContext] = null;
        this[_paintingOffset] = null;
      }
    }
    paint(context, offset) {
      if (this.clipBehavior === ui.Clip.none) {
        this[_clipRectLayer] = null;
        this[_paintWithDelegate](context, offset);
      } else {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintWithDelegate), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      }
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let children = this.getChildrenAsList();
      for (let i = this[_lastPaintOrder][$length] - 1; i >= 0; i = i - 1) {
        let childIndex = this[_lastPaintOrder][$_get](i);
        if (childIndex >= children[$length]) continue;
        let child = children[$_get](childIndex);
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        let transform = childParentData[_transform];
        if (transform == null) continue;
        let absorbed = result.addWithPaintTransform({transform: transform, position: position, hitTest: dart.fn((result, position) => child.hitTest(result, {position: dart.nullCheck(position)}), T.BoxHitTestResultAndOffsetNTobool())});
        if (absorbed) return true;
      }
      return false;
    }
    applyPaintTransform(child, transform) {
      box.RenderBox.as(child);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (childParentData[_transform] != null) transform.multiply(dart.nullCheck(childParentData[_transform]));
      super.applyPaintTransform(child, transform);
    }
  };
  (flow.RenderFlow.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_randomAccessChildren] = T.JSArrayOfRenderBox().of([]);
    this[_lastPaintOrder] = T.JSArrayOfint().of([]);
    this[_paintingContext] = null;
    this[_paintingOffset] = null;
    this[_clipRectLayer] = null;
    if (!(delegate !== null)) dart.assertFailed(null, I[1], 186, 15, "delegate != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 187, 15, "clipBehavior != null");
    this[_delegate] = delegate;
    this[_clipBehavior] = clipBehavior;
    flow.RenderFlow.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = flow.RenderFlow.prototype;
  dart.addTypeTests(flow.RenderFlow);
  dart.addTypeCaches(flow.RenderFlow);
  flow.RenderFlow[dart.implements] = () => [flow.FlowPaintingContext];
  dart.setMethodSignature(flow.RenderFlow, () => ({
    __proto__: dart.getMethods(flow.RenderFlow.__proto__),
    [_getSize]: dart.fnType(ui.Size, [box.BoxConstraints]),
    getChildSize: dart.fnType(dart.nullable(ui.Size), [core.int]),
    paintChild: dart.fnType(dart.void, [core.int], {opacity: core.double, transform: dart.nullable(vector_math_64.Matrix4)}, {}),
    [_paintWithDelegate]: dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getGetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setSetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getSetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(flow.RenderFlow, I[0]);
  dart.setFieldSignature(flow.RenderFlow, () => ({
    __proto__: dart.getFields(flow.RenderFlow.__proto__),
    [_delegate]: dart.fieldType(flow.FlowDelegate),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_randomAccessChildren]: dart.finalFieldType(core.List$(box.RenderBox)),
    [_lastPaintOrder]: dart.finalFieldType(core.List$(core.int)),
    [_paintingContext]: dart.fieldType(dart.nullable(object$.PaintingContext)),
    [_paintingOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  dart.trackLibraries("packages/flutter/src/rendering/flow.dart", {
    "package:flutter/src/rendering/flow.dart": flow
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["flow.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/flow.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__flow: flow
  };
}));

//# sourceMappingURL=flow.dart.lib.js.map
=======
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (T.DiagnosticsPropertyOfImageInfo()).new("current", this[_currentImage], {ifNull: "unresolved", showName: false}));
      description.add(new (T.ObjectFlagPropertyOfListOfImageStreamListener()).new("listeners", this[_listeners], {ifPresent: dart.str(this[_listeners][$length]) + " listener" + (this[_listeners][$length] === 1 ? "" : "s")}));
      description.add(new diagnostics.FlagProperty.new("disposed", {value: this[_disposed], ifTrue: "<disposed>"}));
    }
  };
  (image_stream.ImageStreamCompleter.new = function() {
    this[_listeners] = T.JSArrayOfImageStreamListener().of([]);
    this[_currentImage] = null;
    this[_currentError] = null;
    this[debugLabel] = null;
    this[_hadAtLeastOneListener] = false;
    this[_keepAliveHandles] = 0;
    this[_disposed] = false;
    this[_onLastListenerRemovedCallbacks] = T.JSArrayOfVoidTovoid().of([]);
    ;
  }).prototype = image_stream.ImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.ImageStreamCompleter);
  dart.addTypeCaches(image_stream.ImageStreamCompleter);
  dart.setMethodSignature(image_stream.ImageStreamCompleter, () => ({
    __proto__: dart.getMethods(image_stream.ImageStreamCompleter.__proto__),
    addListener: dart.fnType(dart.void, [image_stream.ImageStreamListener]),
    keepAlive: dart.fnType(image_stream.ImageStreamCompleterHandle, []),
    removeListener: dart.fnType(dart.void, [image_stream.ImageStreamListener]),
    [_maybeDispose]: dart.fnType(dart.void, []),
    [_checkDisposed]: dart.fnType(dart.void, []),
    addOnLastListenerRemovedCallback: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeOnLastListenerRemovedCallback: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    setImage: dart.fnType(dart.void, [image_stream.ImageInfo]),
    reportError: dart.fnType(dart.void, [], {context: dart.nullable(diagnostics.DiagnosticsNode), informationCollector: dart.nullable(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), [])), silent: core.bool, stack: dart.nullable(core.StackTrace)}, {exception: core.Object}),
    reportImageChunkEvent: dart.fnType(dart.void, [image_stream.ImageChunkEvent])
  }));
  dart.setGetterSignature(image_stream.ImageStreamCompleter, () => ({
    __proto__: dart.getGetters(image_stream.ImageStreamCompleter.__proto__),
    hasListeners: core.bool
  }));
  dart.setLibraryUri(image_stream.ImageStreamCompleter, I[1]);
  dart.setFieldSignature(image_stream.ImageStreamCompleter, () => ({
    __proto__: dart.getFields(image_stream.ImageStreamCompleter.__proto__),
    [_listeners]: dart.finalFieldType(core.List$(image_stream.ImageStreamListener)),
    [_currentImage]: dart.fieldType(dart.nullable(image_stream.ImageInfo)),
    [_currentError]: dart.fieldType(dart.nullable(assertions.FlutterErrorDetails)),
    debugLabel: dart.fieldType(dart.nullable(core.String)),
    [_hadAtLeastOneListener]: dart.fieldType(core.bool),
    [_keepAliveHandles]: dart.fieldType(core.int),
    [_disposed]: dart.fieldType(core.bool),
    [_onLastListenerRemovedCallbacks]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [])))
  }));
  image_stream.OneFrameImageStreamCompleter = class OneFrameImageStreamCompleter extends image_stream.ImageStreamCompleter {};
  (image_stream.OneFrameImageStreamCompleter.new = function(image, opts) {
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    if (!(image !== null)) dart.assertFailed(null, I[0], 767, 16, "image != null");
    image_stream.OneFrameImageStreamCompleter.__proto__.new.call(this);
    image.then(dart.void, dart.bind(this, 'setImage'), {onError: dart.fn((error, stack) => {
        this.reportError({context: new assertions.ErrorDescription.new("resolving a single-frame image stream"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
      }, T.ObjectAndStackTraceToNull())});
  }).prototype = image_stream.OneFrameImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.OneFrameImageStreamCompleter);
  dart.addTypeCaches(image_stream.OneFrameImageStreamCompleter);
  dart.setLibraryUri(image_stream.OneFrameImageStreamCompleter, I[1]);
  var _codec = dart.privateName(image_stream, "_codec");
  var _nextFrame = dart.privateName(image_stream, "_nextFrame");
  var __MultiFrameImageStreamCompleter__shownTimestamp = dart.privateName(image_stream, "_#MultiFrameImageStreamCompleter#_shownTimestamp");
  var _frameDuration = dart.privateName(image_stream, "_frameDuration");
  var _framesEmitted = dart.privateName(image_stream, "_framesEmitted");
  var _timer = dart.privateName(image_stream, "_timer");
  var _frameCallbackScheduled = dart.privateName(image_stream, "_frameCallbackScheduled");
  var _informationCollector = dart.privateName(image_stream, "_informationCollector");
  var _scale = dart.privateName(image_stream, "_scale");
  var _handleCodecReady = dart.privateName(image_stream, "_handleCodecReady");
  var _shownTimestamp = dart.privateName(image_stream, "_shownTimestamp");
  var _decodeNextFrameAndSchedule = dart.privateName(image_stream, "_decodeNextFrameAndSchedule");
  var _isFirstFrame = dart.privateName(image_stream, "_isFirstFrame");
  var _hasFrameDurationPassed = dart.privateName(image_stream, "_hasFrameDurationPassed");
  var _emitFrame = dart.privateName(image_stream, "_emitFrame");
  var _scheduleAppFrame = dart.privateName(image_stream, "_scheduleAppFrame");
  var _handleAppFrame = dart.privateName(image_stream, "_handleAppFrame");
  image_stream.MultiFrameImageStreamCompleter = class MultiFrameImageStreamCompleter extends image_stream.ImageStreamCompleter {
    get [_shownTimestamp]() {
      let t4;
      t4 = this[__MultiFrameImageStreamCompleter__shownTimestamp];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_shownTimestamp")) : t4;
    }
    set [_shownTimestamp](t4) {
      this[__MultiFrameImageStreamCompleter__shownTimestamp] = t4;
    }
    [_handleCodecReady](codec) {
      this[_codec] = codec;
      if (!(this[_codec] != null)) dart.assertFailed(null, I[0], 881, 12, "_codec != null");
      if (this.hasListeners) {
        this[_decodeNextFrameAndSchedule]();
      }
    }
    [_handleAppFrame](timestamp) {
      this[_frameCallbackScheduled] = false;
      if (!this.hasListeners) return;
      if (!(this[_nextFrame] != null)) dart.assertFailed(null, I[0], 892, 12, "_nextFrame != null");
      if (this[_isFirstFrame]() || this[_hasFrameDurationPassed](timestamp)) {
        this[_emitFrame](new image_stream.ImageInfo.new({image: dart.nullCheck(this[_nextFrame]).image.clone(), scale: this[_scale], debugLabel: this.debugLabel}));
        this[_shownTimestamp] = timestamp;
        this[_frameDuration] = dart.nullCheck(this[_nextFrame]).duration;
        dart.nullCheck(this[_nextFrame]).image.dispose();
        this[_nextFrame] = null;
        let completedCycles = (this[_framesEmitted] / dart.nullCheck(this[_codec]).frameCount)[$truncate]();
        if (dart.nullCheck(this[_codec]).repetitionCount === -1 || completedCycles <= dart.nullCheck(this[_codec]).repetitionCount) {
          this[_decodeNextFrameAndSchedule]();
        }
        return;
      }
      let delay = dart.nullCheck(this[_frameDuration])['-'](timestamp['-'](this[_shownTimestamp]));
      this[_timer] = async.Timer.new(delay['*'](binding.timeDilation), dart.fn(() => {
        this[_scheduleAppFrame]();
      }, T.VoidTovoid()));
    }
    [_isFirstFrame]() {
      return this[_frameDuration] == null;
    }
    [_hasFrameDurationPassed](timestamp) {
      return timestamp['-'](this[_shownTimestamp])['>='](dart.nullCheck(this[_frameDuration]));
    }
    [_decodeNextFrameAndSchedule]() {
      return async.async(dart.void, (function* _decodeNextFrameAndSchedule() {
        let t5;
        t5 = this[_nextFrame];
        t5 == null ? null : t5.image.dispose();
        this[_nextFrame] = null;
        try {
          this[_nextFrame] = (yield dart.nullCheck(this[_codec]).getNextFrame());
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            this.reportError({context: new assertions.ErrorDescription.new("resolving an image frame"), exception: exception, stack: stack, informationCollector: this[_informationCollector], silent: true});
            return;
          } else
            throw e;
        }
        if (dart.nullCheck(this[_codec]).frameCount === 1) {
          if (!this.hasListeners) {
            return;
          }
          this[_emitFrame](new image_stream.ImageInfo.new({image: dart.nullCheck(this[_nextFrame]).image.clone(), scale: this[_scale], debugLabel: this.debugLabel}));
          dart.nullCheck(this[_nextFrame]).image.dispose();
          this[_nextFrame] = null;
          return;
        }
        this[_scheduleAppFrame]();
      }).bind(this));
    }
    [_scheduleAppFrame]() {
      if (this[_frameCallbackScheduled]) {
        return;
      }
      this[_frameCallbackScheduled] = true;
      dart.nullCheck(binding.SchedulerBinding.instance).scheduleFrameCallback(dart.bind(this, _handleAppFrame));
    }
    [_emitFrame](imageInfo) {
      this.setImage(imageInfo);
      this[_framesEmitted] = this[_framesEmitted] + 1;
    }
    addListener(listener) {
      if (!this.hasListeners && this[_codec] != null) this[_decodeNextFrameAndSchedule]();
      super.addListener(listener);
    }
    removeListener(listener) {
      let t6;
      super.removeListener(listener);
      if (!this.hasListeners) {
        t6 = this[_timer];
        t6 == null ? null : t6.cancel();
        this[_timer] = null;
      }
    }
  };
  (image_stream.MultiFrameImageStreamCompleter.new = function(opts) {
    let codec = opts && 'codec' in opts ? opts.codec : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let chunkEvents = opts && 'chunkEvents' in opts ? opts.chunkEvents : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    this[_codec] = null;
    this[_nextFrame] = null;
    this[__MultiFrameImageStreamCompleter__shownTimestamp] = null;
    this[_frameDuration] = null;
    this[_framesEmitted] = 0;
    this[_timer] = null;
    this[_frameCallbackScheduled] = false;
    if (!(codec !== null)) dart.assertFailed(null, I[0], 836, 15, "codec != null");
    this[_informationCollector] = informationCollector;
    this[_scale] = scale;
    image_stream.MultiFrameImageStreamCompleter.__proto__.new.call(this);
    this.debugLabel = debugLabel;
    codec.then(dart.void, dart.bind(this, _handleCodecReady), {onError: dart.fn((error, stack) => {
        this.reportError({context: new assertions.ErrorDescription.new("resolving an image codec"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
      }, T.ObjectAndStackTraceToNull())});
    if (chunkEvents != null) {
      chunkEvents.listen(dart.bind(this, 'reportImageChunkEvent'), {onError: dart.fn((error, stack) => {
          this.reportError({context: new assertions.ErrorDescription.new("loading an image"), exception: error, stack: stack, informationCollector: informationCollector, silent: true});
        }, T.ObjectAndStackTraceToNull())});
    }
  }).prototype = image_stream.MultiFrameImageStreamCompleter.prototype;
  dart.addTypeTests(image_stream.MultiFrameImageStreamCompleter);
  dart.addTypeCaches(image_stream.MultiFrameImageStreamCompleter);
  dart.setMethodSignature(image_stream.MultiFrameImageStreamCompleter, () => ({
    __proto__: dart.getMethods(image_stream.MultiFrameImageStreamCompleter.__proto__),
    [_handleCodecReady]: dart.fnType(dart.void, [ui.Codec]),
    [_handleAppFrame]: dart.fnType(dart.void, [core.Duration]),
    [_isFirstFrame]: dart.fnType(core.bool, []),
    [_hasFrameDurationPassed]: dart.fnType(core.bool, [core.Duration]),
    [_decodeNextFrameAndSchedule]: dart.fnType(async.Future$(dart.void), []),
    [_scheduleAppFrame]: dart.fnType(dart.void, []),
    [_emitFrame]: dart.fnType(dart.void, [image_stream.ImageInfo])
  }));
  dart.setGetterSignature(image_stream.MultiFrameImageStreamCompleter, () => ({
    __proto__: dart.getGetters(image_stream.MultiFrameImageStreamCompleter.__proto__),
    [_shownTimestamp]: core.Duration
  }));
  dart.setSetterSignature(image_stream.MultiFrameImageStreamCompleter, () => ({
    __proto__: dart.getSetters(image_stream.MultiFrameImageStreamCompleter.__proto__),
    [_shownTimestamp]: core.Duration
  }));
  dart.setLibraryUri(image_stream.MultiFrameImageStreamCompleter, I[1]);
  dart.setFieldSignature(image_stream.MultiFrameImageStreamCompleter, () => ({
    __proto__: dart.getFields(image_stream.MultiFrameImageStreamCompleter.__proto__),
    [_codec]: dart.fieldType(dart.nullable(ui.Codec)),
    [_scale]: dart.finalFieldType(core.double),
    [_informationCollector]: dart.finalFieldType(dart.nullable(dart.fnType(core.Iterable$(diagnostics.DiagnosticsNode), []))),
    [_nextFrame]: dart.fieldType(dart.nullable(ui.FrameInfo)),
    [__MultiFrameImageStreamCompleter__shownTimestamp]: dart.fieldType(dart.nullable(core.Duration)),
    [_frameDuration]: dart.fieldType(dart.nullable(core.Duration)),
    [_framesEmitted]: dart.fieldType(core.int),
    [_timer]: dart.fieldType(dart.nullable(async.Timer)),
    [_frameCallbackScheduled]: dart.fieldType(core.bool)
  }));
  dart.trackLibraries("packages/flutter/src/painting/image_stream.dart", {
    "package:flutter/src/painting/image_stream.dart": image_stream
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_stream.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/image_stream.dart.lib.js"}');
  // Exports:
  return {
    src__painting__image_stream: image_stream
  };
}));

//# sourceMappingURL=image_stream.dart.lib.js.map
>>>>>>> AUg2
