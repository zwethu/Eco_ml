define(['dart_sdk', 'packages/hive/src/box/lazy_box_impl.dart'], (function load__packages__eco_ml__data__database_dart(dart_sdk, packages__hive__src__box__lazy_box_impl$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hive_object = packages__hive__src__box__lazy_box_impl$46dart.src__object__hive_object;
  const hive = packages__hive__src__box__lazy_box_impl$46dart.hive;
  var database = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$dynamic: () => (T.IdentityMapOfint$dynamic = dart.constFn(_js_helper.IdentityMap$(core.int, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:eco_ml/data/database.dart"];
  var username$ = dart.privateName(database, "UserName.username");
  database.UserName = class UserName extends hive_object.HiveObject {
    get username() {
      return this[username$];
    }
    set username(value) {
      super.username = value;
    }
  };
  (database.UserName.new = function(username) {
    this[username$] = username;
    database.UserName.__proto__.new.call(this);
    ;
  }).prototype = database.UserName.prototype;
  dart.addTypeTests(database.UserName);
  dart.addTypeCaches(database.UserName);
  dart.setLibraryUri(database.UserName, I[0]);
  dart.setFieldSignature(database.UserName, () => ({
    __proto__: dart.getFields(database.UserName.__proto__),
    username: dart.finalFieldType(core.String)
  }));
  var amount$ = dart.privateName(database, "TotalAmount.amount");
  var showOnboard = dart.privateName(database, "TotalAmount.showOnboard");
  database.TotalAmount = class TotalAmount extends hive_object.HiveObject {
    get amount() {
      return this[amount$];
    }
    set amount(value) {
      this[amount$] = value;
    }
    get showOnboard() {
      return this[showOnboard];
    }
    set showOnboard(value) {
      super.showOnboard = value;
    }
  };
  (database.TotalAmount.new = function(amount) {
    this[amount$] = 0.0;
    this[showOnboard] = true;
    this[amount$] = amount;
    database.TotalAmount.__proto__.new.call(this);
    ;
  }).prototype = database.TotalAmount.prototype;
  dart.addTypeTests(database.TotalAmount);
  dart.addTypeCaches(database.TotalAmount);
  dart.setLibraryUri(database.TotalAmount, I[0]);
  dart.setFieldSignature(database.TotalAmount, () => ({
    __proto__: dart.getFields(database.TotalAmount.__proto__),
    amount: dart.fieldType(core.double),
    showOnboard: dart.finalFieldType(core.bool)
  }));
  var id$ = dart.privateName(database, "IconData.id");
  var isIncome$ = dart.privateName(database, "IconData.isIncome");
  database.IconData = class IconData extends hive_object.HiveObject {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get isIncome() {
      return this[isIncome$];
    }
    set isIncome(value) {
      super.isIncome = value;
    }
  };
  (database.IconData.new = function(id, isIncome) {
    this[id$] = id;
    this[isIncome$] = isIncome;
    database.IconData.__proto__.new.call(this);
    ;
  }).prototype = database.IconData.prototype;
  dart.addTypeTests(database.IconData);
  dart.addTypeCaches(database.IconData);
  dart.setLibraryUri(database.IconData, I[0]);
  dart.setFieldSignature(database.IconData, () => ({
    __proto__: dart.getFields(database.IconData.__proto__),
    id: dart.finalFieldType(core.int),
    isIncome: dart.finalFieldType(core.bool)
  }));
  var __Transaction_iconId = dart.privateName(database, "_#Transaction#iconId");
  var __Transaction_isExpense = dart.privateName(database, "_#Transaction#isExpense");
  var __Transaction_amount = dart.privateName(database, "_#Transaction#amount");
  var __Transaction_datatime = dart.privateName(database, "_#Transaction#datatime");
  var __Transaction_description = dart.privateName(database, "_#Transaction#description");
  var __Transaction_cardNum = dart.privateName(database, "_#Transaction#cardNum");
  database.Transaction = class Transaction extends hive_object.HiveObject {
    get iconId() {
      let t0;
      t0 = this[__Transaction_iconId];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("iconId")) : t0;
    }
    set iconId(t0) {
      this[__Transaction_iconId] = t0;
    }
    get isExpense() {
      let t1;
      t1 = this[__Transaction_isExpense];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("isExpense")) : t1;
    }
    set isExpense(t1) {
      this[__Transaction_isExpense] = t1;
    }
    get amount() {
      let t2;
      t2 = this[__Transaction_amount];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("amount")) : t2;
    }
    set amount(t2) {
      this[__Transaction_amount] = t2;
    }
    get datatime() {
      let t3;
      t3 = this[__Transaction_datatime];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("datatime")) : t3;
    }
    set datatime(t3) {
      this[__Transaction_datatime] = t3;
    }
    get description() {
      let t4;
      t4 = this[__Transaction_description];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("description")) : t4;
    }
    set description(t4) {
      this[__Transaction_description] = t4;
    }
    get cardNum() {
      let t5;
      t5 = this[__Transaction_cardNum];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("cardNum")) : t5;
    }
    set cardNum(t5) {
      this[__Transaction_cardNum] = t5;
    }
  };
  (database.Transaction.new = function(iconId, isExpense, amount, datatime, description, cardNum) {
    this[__Transaction_iconId] = null;
    this[__Transaction_isExpense] = null;
    this[__Transaction_amount] = null;
    this[__Transaction_datatime] = null;
    this[__Transaction_description] = null;
    this[__Transaction_cardNum] = null;
    this[__Transaction_iconId] = iconId;
    this[__Transaction_isExpense] = isExpense;
    this[__Transaction_amount] = amount;
    this[__Transaction_datatime] = datatime;
    this[__Transaction_description] = description;
    this[__Transaction_cardNum] = cardNum;
    database.Transaction.__proto__.new.call(this);
    ;
  }).prototype = database.Transaction.prototype;
  dart.addTypeTests(database.Transaction);
  dart.addTypeCaches(database.Transaction);
  dart.setGetterSignature(database.Transaction, () => ({
    __proto__: dart.getGetters(database.Transaction.__proto__),
    iconId: core.int,
    isExpense: core.bool,
    amount: core.double,
    datatime: core.DateTime,
    description: core.String,
    cardNum: core.int
  }));
  dart.setSetterSignature(database.Transaction, () => ({
    __proto__: dart.getSetters(database.Transaction.__proto__),
    iconId: core.int,
    isExpense: core.bool,
    amount: core.double,
    datatime: core.DateTime,
    description: core.String,
    cardNum: core.int
  }));
  dart.setLibraryUri(database.Transaction, I[0]);
  dart.setFieldSignature(database.Transaction, () => ({
    __proto__: dart.getFields(database.Transaction.__proto__),
    [__Transaction_iconId]: dart.fieldType(dart.nullable(core.int)),
    [__Transaction_isExpense]: dart.fieldType(dart.nullable(core.bool)),
    [__Transaction_amount]: dart.fieldType(dart.nullable(core.double)),
    [__Transaction_datatime]: dart.fieldType(dart.nullable(core.DateTime)),
    [__Transaction_description]: dart.fieldType(dart.nullable(core.String)),
    [__Transaction_cardNum]: dart.fieldType(dart.nullable(core.int))
  }));
  var amount$0 = dart.privateName(database, "Income.amount");
  database.Income = class Income extends hive_object.HiveObject {
    get amount() {
      return this[amount$0];
    }
    set amount(value) {
      super.amount = value;
    }
  };
  (database.Income.new = function(amount) {
    this[amount$0] = amount;
    database.Income.__proto__.new.call(this);
    ;
  }).prototype = database.Income.prototype;
  dart.addTypeTests(database.Income);
  dart.addTypeCaches(database.Income);
  dart.setLibraryUri(database.Income, I[0]);
  dart.setFieldSignature(database.Income, () => ({
    __proto__: dart.getFields(database.Income.__proto__),
    amount: dart.finalFieldType(dart.dynamic)
  }));
  var amount$1 = dart.privateName(database, "Outcome.amount");
  database.Outcome = class Outcome extends hive_object.HiveObject {
    get amount() {
      return this[amount$1];
    }
    set amount(value) {
      super.amount = value;
    }
  };
  (database.Outcome.new = function(amount) {
    this[amount$1] = amount;
    database.Outcome.__proto__.new.call(this);
    ;
  }).prototype = database.Outcome.prototype;
  dart.addTypeTests(database.Outcome);
  dart.addTypeCaches(database.Outcome);
  dart.setLibraryUri(database.Outcome, I[0]);
  dart.setFieldSignature(database.Outcome, () => ({
    __proto__: dart.getFields(database.Outcome.__proto__),
    amount: dart.finalFieldType(dart.dynamic)
  }));
  var percentage$ = dart.privateName(database, "Piggy.percentage");
  var showPiggy$ = dart.privateName(database, "Piggy.showPiggy");
  database.Piggy = class Piggy extends hive_object.HiveObject {
    get percentage() {
      return this[percentage$];
    }
    set percentage(value) {
      this[percentage$] = value;
    }
    get showPiggy() {
      return this[showPiggy$];
    }
    set showPiggy(value) {
      this[showPiggy$] = value;
    }
  };
  (database.Piggy.new = function(percentage, showPiggy) {
    this[percentage$] = percentage;
    this[showPiggy$] = showPiggy;
    database.Piggy.__proto__.new.call(this);
    ;
  }).prototype = database.Piggy.prototype;
  dart.addTypeTests(database.Piggy);
  dart.addTypeCaches(database.Piggy);
  dart.setLibraryUri(database.Piggy, I[0]);
  dart.setFieldSignature(database.Piggy, () => ({
    __proto__: dart.getFields(database.Piggy.__proto__),
    percentage: dart.fieldType(dart.dynamic),
    showPiggy: dart.fieldType(core.bool)
  }));
  var url$ = dart.privateName(database, "ImageUrl.url");
  var check$ = dart.privateName(database, "ImageUrl.check");
  database.ImageUrl = class ImageUrl extends hive_object.HiveObject {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get check() {
      return this[check$];
    }
    set check(value) {
      super.check = value;
    }
  };
  (database.ImageUrl.new = function(url, check) {
    this[url$] = url;
    this[check$] = check;
    database.ImageUrl.__proto__.new.call(this);
    ;
  }).prototype = database.ImageUrl.prototype;
  dart.addTypeTests(database.ImageUrl);
  dart.addTypeCaches(database.ImageUrl);
  dart.setLibraryUri(database.ImageUrl, I[0]);
  dart.setFieldSignature(database.ImageUrl, () => ({
    __proto__: dart.getFields(database.ImageUrl.__proto__),
    url: dart.finalFieldType(typed_data.Uint8List),
    check: dart.finalFieldType(core.bool)
  }));
  var typeId = dart.privateName(database, "UserNameAdapter.typeId");
  database.UserNameAdapter = class UserNameAdapter extends hive.TypeAdapter$(database.UserName) {
    get typeId() {
      return this[typeId];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t6 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t6[$_set](reader.readByte(), reader.read());
        return t6;
      })();
      return new database.UserName.new(fields[$_get](0) == null ? "Unknown" : core.String.as(fields[$_get](0)));
    }
    write(writer, obj) {
      let t7;
      database.UserName.as(obj);
      t7 = writer;
      (() => {
        t7.writeByte(1);
        t7.writeByte(0);
        t7.write(core.String, obj.username);
        return t7;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.UserNameAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.UserNameAdapter.new = function() {
    this[typeId] = 0;
    ;
  }).prototype = database.UserNameAdapter.prototype;
  dart.addTypeTests(database.UserNameAdapter);
  dart.addTypeCaches(database.UserNameAdapter);
  dart.setMethodSignature(database.UserNameAdapter, () => ({
    __proto__: dart.getMethods(database.UserNameAdapter.__proto__),
    read: dart.fnType(database.UserName, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.UserNameAdapter, I[0]);
  dart.setFieldSignature(database.UserNameAdapter, () => ({
    __proto__: dart.getFields(database.UserNameAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.UserNameAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.UserNameAdapter, ['hashCode']);
  var typeId$ = dart.privateName(database, "TotalAmountAdapter.typeId");
  database.TotalAmountAdapter = class TotalAmountAdapter extends hive.TypeAdapter$(database.TotalAmount) {
    get typeId() {
      return this[typeId$];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t7 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t7[$_set](reader.readByte(), reader.read());
        return t7;
      })();
      return new database.TotalAmount.new(core.double.as(fields[$_get](0)));
    }
    write(writer, obj) {
      let t8;
      database.TotalAmount.as(obj);
      t8 = writer;
      (() => {
        t8.writeByte(2);
        t8.writeByte(0);
        t8.write(core.double, obj.amount);
        t8.writeByte(1);
        t8.write(core.bool, obj.showOnboard);
        return t8;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.TotalAmountAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.TotalAmountAdapter.new = function() {
    this[typeId$] = 1;
    ;
  }).prototype = database.TotalAmountAdapter.prototype;
  dart.addTypeTests(database.TotalAmountAdapter);
  dart.addTypeCaches(database.TotalAmountAdapter);
  dart.setMethodSignature(database.TotalAmountAdapter, () => ({
    __proto__: dart.getMethods(database.TotalAmountAdapter.__proto__),
    read: dart.fnType(database.TotalAmount, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.TotalAmountAdapter, I[0]);
  dart.setFieldSignature(database.TotalAmountAdapter, () => ({
    __proto__: dart.getFields(database.TotalAmountAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.TotalAmountAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.TotalAmountAdapter, ['hashCode']);
  var typeId$0 = dart.privateName(database, "IconDataAdapter.typeId");
  database.IconDataAdapter = class IconDataAdapter extends hive.TypeAdapter$(database.IconData) {
    get typeId() {
      return this[typeId$0];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t8 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t8[$_set](reader.readByte(), reader.read());
        return t8;
      })();
      return new database.IconData.new(core.int.as(fields[$_get](0)), core.bool.as(fields[$_get](1)));
    }
    write(writer, obj) {
      let t9;
      database.IconData.as(obj);
      t9 = writer;
      (() => {
        t9.writeByte(2);
        t9.writeByte(0);
        t9.write(core.int, obj.id);
        t9.writeByte(1);
        t9.write(core.bool, obj.isIncome);
        return t9;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.IconDataAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.IconDataAdapter.new = function() {
    this[typeId$0] = 2;
    ;
  }).prototype = database.IconDataAdapter.prototype;
  dart.addTypeTests(database.IconDataAdapter);
  dart.addTypeCaches(database.IconDataAdapter);
  dart.setMethodSignature(database.IconDataAdapter, () => ({
    __proto__: dart.getMethods(database.IconDataAdapter.__proto__),
    read: dart.fnType(database.IconData, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.IconDataAdapter, I[0]);
  dart.setFieldSignature(database.IconDataAdapter, () => ({
    __proto__: dart.getFields(database.IconDataAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.IconDataAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.IconDataAdapter, ['hashCode']);
  var typeId$1 = dart.privateName(database, "TransactionAdapter.typeId");
  database.TransactionAdapter = class TransactionAdapter extends hive.TypeAdapter$(database.Transaction) {
    get typeId() {
      return this[typeId$1];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t9 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t9[$_set](reader.readByte(), reader.read());
        return t9;
      })();
      return new database.Transaction.new(core.int.as(fields[$_get](0)), core.bool.as(fields[$_get](1)), core.double.as(fields[$_get](2)), core.DateTime.as(fields[$_get](3)), fields[$_get](4) == null ? "No description" : core.String.as(fields[$_get](4)), fields[$_get](5) == null ? 1 : core.int.as(fields[$_get](5)));
    }
    write(writer, obj) {
      let t10;
      database.Transaction.as(obj);
      t10 = writer;
      (() => {
        t10.writeByte(6);
        t10.writeByte(0);
        t10.write(core.int, obj.iconId);
        t10.writeByte(1);
        t10.write(core.bool, obj.isExpense);
        t10.writeByte(2);
        t10.write(core.double, obj.amount);
        t10.writeByte(3);
        t10.write(core.DateTime, obj.datatime);
        t10.writeByte(4);
        t10.write(core.String, obj.description);
        t10.writeByte(5);
        t10.write(core.int, obj.cardNum);
        return t10;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.TransactionAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.TransactionAdapter.new = function() {
    this[typeId$1] = 3;
    ;
  }).prototype = database.TransactionAdapter.prototype;
  dart.addTypeTests(database.TransactionAdapter);
  dart.addTypeCaches(database.TransactionAdapter);
  dart.setMethodSignature(database.TransactionAdapter, () => ({
    __proto__: dart.getMethods(database.TransactionAdapter.__proto__),
    read: dart.fnType(database.Transaction, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.TransactionAdapter, I[0]);
  dart.setFieldSignature(database.TransactionAdapter, () => ({
    __proto__: dart.getFields(database.TransactionAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.TransactionAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.TransactionAdapter, ['hashCode']);
  var typeId$2 = dart.privateName(database, "IncomeAdapter.typeId");
  database.IncomeAdapter = class IncomeAdapter extends hive.TypeAdapter$(database.Income) {
    get typeId() {
      return this[typeId$2];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t10 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t10[$_set](reader.readByte(), reader.read());
        return t10;
      })();
      return new database.Income.new(fields[$_get](0));
    }
    write(writer, obj) {
      let t11;
      database.Income.as(obj);
      t11 = writer;
      (() => {
        t11.writeByte(1);
        t11.writeByte(0);
        t11.write(dart.dynamic, obj.amount);
        return t11;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.IncomeAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.IncomeAdapter.new = function() {
    this[typeId$2] = 4;
    ;
  }).prototype = database.IncomeAdapter.prototype;
  dart.addTypeTests(database.IncomeAdapter);
  dart.addTypeCaches(database.IncomeAdapter);
  dart.setMethodSignature(database.IncomeAdapter, () => ({
    __proto__: dart.getMethods(database.IncomeAdapter.__proto__),
    read: dart.fnType(database.Income, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.IncomeAdapter, I[0]);
  dart.setFieldSignature(database.IncomeAdapter, () => ({
    __proto__: dart.getFields(database.IncomeAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.IncomeAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.IncomeAdapter, ['hashCode']);
  var typeId$3 = dart.privateName(database, "OutcomeAdapter.typeId");
  database.OutcomeAdapter = class OutcomeAdapter extends hive.TypeAdapter$(database.Outcome) {
    get typeId() {
      return this[typeId$3];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t11 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t11[$_set](reader.readByte(), reader.read());
        return t11;
      })();
      return new database.Outcome.new(fields[$_get](0));
    }
    write(writer, obj) {
      let t12;
      database.Outcome.as(obj);
      t12 = writer;
      (() => {
        t12.writeByte(1);
        t12.writeByte(0);
        t12.write(dart.dynamic, obj.amount);
        return t12;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.OutcomeAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.OutcomeAdapter.new = function() {
    this[typeId$3] = 5;
    ;
  }).prototype = database.OutcomeAdapter.prototype;
  dart.addTypeTests(database.OutcomeAdapter);
  dart.addTypeCaches(database.OutcomeAdapter);
  dart.setMethodSignature(database.OutcomeAdapter, () => ({
    __proto__: dart.getMethods(database.OutcomeAdapter.__proto__),
    read: dart.fnType(database.Outcome, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.OutcomeAdapter, I[0]);
  dart.setFieldSignature(database.OutcomeAdapter, () => ({
    __proto__: dart.getFields(database.OutcomeAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.OutcomeAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.OutcomeAdapter, ['hashCode']);
  var typeId$4 = dart.privateName(database, "PiggyAdapter.typeId");
  database.PiggyAdapter = class PiggyAdapter extends hive.TypeAdapter$(database.Piggy) {
    get typeId() {
      return this[typeId$4];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t12 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t12[$_set](reader.readByte(), reader.read());
        return t12;
      })();
      return new database.Piggy.new(fields[$_get](0), core.bool.as(fields[$_get](1)));
    }
    write(writer, obj) {
      let t13;
      database.Piggy.as(obj);
      t13 = writer;
      (() => {
        t13.writeByte(2);
        t13.writeByte(0);
        t13.write(dart.dynamic, obj.percentage);
        t13.writeByte(1);
        t13.write(core.bool, obj.showPiggy);
        return t13;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.PiggyAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.PiggyAdapter.new = function() {
    this[typeId$4] = 6;
    ;
  }).prototype = database.PiggyAdapter.prototype;
  dart.addTypeTests(database.PiggyAdapter);
  dart.addTypeCaches(database.PiggyAdapter);
  dart.setMethodSignature(database.PiggyAdapter, () => ({
    __proto__: dart.getMethods(database.PiggyAdapter.__proto__),
    read: dart.fnType(database.Piggy, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.PiggyAdapter, I[0]);
  dart.setFieldSignature(database.PiggyAdapter, () => ({
    __proto__: dart.getFields(database.PiggyAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.PiggyAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.PiggyAdapter, ['hashCode']);
  var typeId$5 = dart.privateName(database, "ImageUrlAdapter.typeId");
  database.ImageUrlAdapter = class ImageUrlAdapter extends hive.TypeAdapter$(database.ImageUrl) {
    get typeId() {
      return this[typeId$5];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let numOfFields = reader.readByte();
      let fields = (() => {
        let t13 = new (T.IdentityMapOfint$dynamic()).new();
        for (let i = 0; i < numOfFields; i = i + 1)
          t13[$_set](reader.readByte(), reader.read());
        return t13;
      })();
      return new database.ImageUrl.new(typed_data.Uint8List.as(fields[$_get](0)), core.bool.as(fields[$_get](1)));
    }
    write(writer, obj) {
      let t14;
      database.ImageUrl.as(obj);
      t14 = writer;
      (() => {
        t14.writeByte(2);
        t14.writeByte(0);
        t14.write(typed_data.Uint8List, obj.url);
        t14.writeByte(1);
        t14.write(core.bool, obj.check);
        return t14;
      })();
    }
    get hashCode() {
      return this.typeId[$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.ImageUrlAdapter.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.typeId === other.typeId;
    }
  };
  (database.ImageUrlAdapter.new = function() {
    this[typeId$5] = 7;
    ;
  }).prototype = database.ImageUrlAdapter.prototype;
  dart.addTypeTests(database.ImageUrlAdapter);
  dart.addTypeCaches(database.ImageUrlAdapter);
  dart.setMethodSignature(database.ImageUrlAdapter, () => ({
    __proto__: dart.getMethods(database.ImageUrlAdapter.__proto__),
    read: dart.fnType(database.ImageUrl, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(database.ImageUrlAdapter, I[0]);
  dart.setFieldSignature(database.ImageUrlAdapter, () => ({
    __proto__: dart.getFields(database.ImageUrlAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.ImageUrlAdapter, ['_equals']);
  dart.defineExtensionAccessors(database.ImageUrlAdapter, ['hashCode']);
  dart.trackLibraries("packages/eco_ml/data/database.dart", {
    "package:eco_ml/data/database.dart": database
  }, {
    "package:eco_ml/data/database.dart": ["database.g.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["database.dart","database.g.dart"],"names":[],"mappings":"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","file":"../../../../../packages/eco_ml/data/database.dart.lib.js"}');
  // Exports:
  return {
    data__database: database
  };
}));

//# sourceMappingURL=database.dart.lib.js.map
